The Project Gutenberg eBook of The Hacker Crackdown: Law and Disorder on the Electronic Frontier This ebook is for the use of anyone anywhere in the United States and most other parts of the world at no cost and with almost no restrictions whatsoever. You may copy it, give it away or re-use it under the terms of the Project Gutenberg License included with this ebook or online at www.gutenberg.org. If you are not located in the United States, you will have to check the laws of the country where you are located before using this eBook. *** This is a COPYRIGHTED Project Gutenberg eBook. Details Below. *** *** Please follow the copyright guidelines in this file. *** Title: The Hacker Crackdown: Law and Disorder on the Electronic Frontier Author: Bruce Sterling Release date: January 1, 1994 [eBook #101] Most recently updated: February 9, 2012 Language: English *** START OF THE PROJECT GUTENBERG EBOOK THE HACKER CRACKDOWN: LAW AND DISORDER ON THE ELECTRONIC FRONTIER *** THE HACKER CRACKDOWN Law and Disorder on the Electronic Frontier by Bruce Sterling CONTENTS Preface to the Electronic Release of The Hacker Crackdown Chronology of the Hacker Crackdown Introduction Part 1: CRASHING THE SYSTEM A Brief History of Telephony Bell's Golden Vaporware Universal Service Wild Boys and Wire Women The Electronic Communities The Ungentle Giant The Breakup In Defense of the System The Crash Post-Mortem Landslides in Cyberspace Part 2: THE DIGITAL UNDERGROUND Steal This Phone Phreaking and Hacking The View From Under the Floorboards Boards: Core of the Underground Phile Phun The Rake's Progress Strongholds of the Elite Sting Boards Hot Potatoes War on the Legion Terminus Phile 9-1-1 War Games Real Cyberpunk Part 3: LAW AND ORDER Crooked Boards The World's Biggest Hacker Bust Teach Them a Lesson The U.S. Secret Service The Secret Service Battles the Boodlers A Walk Downtown FCIC: The Cutting-Edge Mess Cyberspace Rangers FLETC: Training the Hacker-Trackers Part 4: THE CIVIL LIBERTARIANS NuPrometheus + FBI = Grateful Dead Whole Earth + Computer Revolution = WELL Phiber Runs Underground and Acid Spikes the Well The Trial of Knight Lightning Shadowhawk Plummets to Earth Kyrie in the Confessional $79,499 A Scholar Investigates Computers, Freedom, and Privacy Electronic Afterword to The Hacker Crackdown, Halloween 1993 THE HACKER CRACKDOWN Law and Disorder on the Electronic Frontier by Bruce Sterling Preface to the Electronic Release of The Hacker Crackdown January 1, 1994--Austin, Texas Hi, I'm Bruce Sterling, the author of this electronic book. Out in the traditional world of print, The Hacker Crackdown is ISBN 0-553-08058-X, and is formally catalogued by the Library of Congress as "1. Computer crimes--United States. 2. Telephone--United States--Corrupt practices. 3. Programming (Electronic computers)--United States--Corrupt practices." `Corrupt practices,' I always get a kick out of that description. Librarians are very ingenious people. The paperback is ISBN 0-553-56370-X. If you go and buy a print version of The Hacker Crackdown, an action I encourage heartily, you may notice that in the front of the book, beneath the copyright notice-- "Copyright (C) 1992 by Bruce Sterling"-- it has this little block of printed legal boilerplate from the publisher. It says, and I quote: "No part of this book may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopying, recording, or by any information storage and retrieval system, without permission in writing from the publisher. For information address: Bantam Books." This is a pretty good disclaimer, as such disclaimers go. I collect intellectual-property disclaimers, and I've seen dozens of them, and this one is at least pretty straightforward. In this narrow and particular case, however, it isn't quite accurate. Bantam Books puts that disclaimer on every book they publish, but Bantam Books does not, in fact, own the electronic rights to this book. I do, because of certain extensive contract maneuverings my agent and I went through before this book was written. I want to give those electronic publishing rights away through certain not-for-profit channels, and I've convinced Bantam that this is a good idea. Since Bantam has seen fit to peacably agree to this scheme of mine, Bantam Books is not going to fuss about this. Provided you don't try to sell the book, they are not going to bother you for what you do with the electronic copy of this book. If you want to check this out personally, you can ask them; they're at 1540 Broadway NY NY 10036. However, if you were so foolish as to print this book and start retailing it for money in violation of my copyright and the commercial interests of Bantam Books, then Bantam, a part of the gigantic Bertelsmann multinational publishing combine, would roust some of their heavy-duty attorneys out of hibernation and crush you like a bug. This is only to be expected. I didn't write this book so that you could make money out of it. If anybody is gonna make money out of this book, it's gonna be me and my publisher. My publisher deserves to make money out of this book. Not only did the folks at Bantam Books commission me to write the book, and pay me a hefty sum to do so, but they bravely printed, in text, an electronic document the reproduction of which was once alleged to be a federal felony. Bantam Books and their numerous attorneys were very brave and forthright about this book. Furthermore, my former editor at Bantam Books, Betsy Mitchell, genuinely cared about this project, and worked hard on it, and had a lot of wise things to say about the manuscript. Betsy deserves genuine credit for this book, credit that editors too rarely get. The critics were very kind to The Hacker Crackdown, and commercially the book has done well. On the other hand, I didn't write this book in order to squeeze every last nickel and dime out of the mitts of impoverished sixteen-year-old cyberpunk high-school-students. Teenagers don't have any money-- (no, not even enough for the six-dollar Hacker Crackdown paperback, with its attractive bright-red cover and useful index). That's a major reason why teenagers sometimes succumb to the temptation to do things they shouldn't, such as swiping my books out of libraries. Kids: this one is all yours, all right? Go give the print version back. *8-) Well-meaning, public-spirited civil libertarians don't have much money, either. And it seems almost criminal to snatch cash out of the hands of America's direly underpaid electronic law enforcement community. If you're a computer cop, a hacker, or an electronic civil liberties activist, you are the target audience for this book. I wrote this book because I wanted to help you, and help other people understand you and your unique, uhm, problems. I wrote this book to aid your activities, and to contribute to the public discussion of important political issues. In giving the text away in this fashion, I am directly contributing to the book's ultimate aim: to help civilize cyberspace. Information WANTS to be free. And the information inside this book longs for freedom with a peculiar intensity. I genuinely believe that the natural habitat of this book is inside an electronic network. That may not be the easiest direct method to generate revenue for the book's author, but that doesn't matter; this is where this book belongs by its nature. I've written other books--plenty of other books-- and I'll write more and I am writing more, but this one is special. I am making The Hacker Crackdown available electronically as widely as I can conveniently manage, and if you like the book, and think it is useful, then I urge you to do the same with it. You can copy this electronic book. Copy the heck out of it, be my guest, and give those copies to anybody who wants them. The nascent world of cyberspace is full of sysadmins, teachers, trainers, cybrarians, netgurus, and various species of cybernetic activist. If you're one of those people, I know about you, and I know the hassle you go through to try to help people learn about the electronic frontier. I hope that possessing this book in electronic form will lessen your troubles. Granted, this treatment of our electronic social spectrum is not the ultimate in academic rigor. And politically, it has something to offend and trouble almost everyone. But hey, I'm told it's readable, and at least the price is right. You can upload the book onto bulletin board systems, or Internet nodes, or electronic discussion groups. Go right ahead and do that, I am giving you express permission right now. Enjoy yourself. You can put the book on disks and give the disks away, as long as you don't take any money for it. But this book is not public domain. You can't copyright it in your own name. I own the copyright. Attempts to pirate this book and make money from selling it may involve you in a serious litigative snarl. Believe me, for the pittance you might wring out of such an action, it's really not worth it. This book don't "belong" to you. In an odd but very genuine way, I feel it doesn't "belong" to me, either. It's a book about the people of cyberspace, and distributing it in this way is the best way I know to actually make this information available, freely and easily, to all the people of cyberspace--including people far outside the borders of the United States, who otherwise may never have a chance to see any edition of the book, and who may perhaps learn something useful from this strange story of distant, obscure, but portentous events in so-called "American cyberspace." This electronic book is now literary freeware. It now belongs to the emergent realm of alternative information economics. You have no right to make this electronic book part of the conventional flow of commerce. Let it be part of the flow of knowledge: there's a difference. I've divided the book into four sections, so that it is less ungainly for upload and download; if there's a section of particular relevance to you and your colleagues, feel free to reproduce that one and skip the rest. [Project Gutenberg has reassembled the file, with Sterling's permission.] Just make more when you need them, and give them to whoever might want them. Now have fun. Bruce Sterling--bruces@well.sf.ca.us THE HACKER CRACKDOWN Law and Disorder on the Electronic Frontier by Bruce Sterling CHRONOLOGY OF THE HACKER CRACKDOWN 1865 U.S. Secret Service (USSS) founded. 1876 Alexander Graham Bell invents telephone. 1878 First teenage males flung off phone system by enraged authorities. 1939 "Futurian" science-fiction group raided by Secret Service. 1971 Yippie phone phreaks start YIPL/TAP magazine. 1972 RAMPARTS magazine seized in blue-box rip-off scandal. 1978 Ward Christenson and Randy Suess create first personal computer bulletin board system. 1982 William Gibson coins term "cyberspace." 1982 "414 Gang" raided. 1983-1983 AT&T dismantled in divestiture. 1984 Congress passes Comprehensive Crime Control Act giving USSS jurisdiction over credit card fraud and computer fraud. 1984 "Legion of Doom" formed. 1984. 2600: THE HACKER QUARTERLY founded. 1984. WHOLE EARTH SOFTWARE CATALOG published. 1985. First police "sting" bulletin board systems established. 1985. Whole Earth 'Lectronic Link computer conference (WELL) goes on-line. 1986 Computer Fraud and Abuse Act passed. 1986 Electronic Communications Privacy Act passed. 1987 Chicago prosecutors form Computer Fraud and Abuse Task Force. 1988 July. Secret Service covertly videotapes "SummerCon" hacker convention. September. "Prophet" cracks BellSouth AIMSX computer network and downloads E911 Document to his own computer and to Jolnet. September. AT&T Corporate Information Security informed of Prophet's action. October. Bellcore Security informed of Prophet's action. 1989 January. Prophet uploads E911 Document to Knight Lightning. February 25. Knight Lightning publishes E911 Document in PHRACK electronic newsletter. May. Chicago Task Force raids and arrests "Kyrie." June. "NuPrometheus League" distributes Apple Computer proprietary software. June 13. Florida probation office crossed with phone-sex line in switching-station stunt. July. "Fry Guy" raided by USSS and Chicago Computer Fraud and Abuse Task Force. July. Secret Service raids "Prophet," "Leftist," and "Urvile" in Georgia. 1990 January 15. Martin Luther King Day Crash strikes AT&T long-distance network nationwide. January 18-19. Chicago Task Force raids Knight Lightning in St. Louis. January 24. USSS and New York State Police raid "Phiber Optik," "Acid Phreak," and "Scorpion" in New York City. February 1. USSS raids "Terminus" in Maryland. February 3. Chicago Task Force raids Richard Andrews' home. February 6. Chicago Task Force raids Richard Andrews' business. February 6. USSS arrests Terminus, Prophet, Leftist, and Urvile. February 9. Chicago Task Force arrests Knight Lightning. February 20. AT&T Security shuts down public-access "attctc" computer in Dallas. February 21. Chicago Task Force raids Robert Izenberg in Austin. March 1. Chicago Task Force raids Steve Jackson Games, Inc., "Mentor," and "Erik Bloodaxe" in Austin. May 7,8,9. USSS and Arizona Organized Crime and Racketeering Bureau conduct "Operation Sundevil" raids in Cincinnatti, Detroit, Los Angeles, Miami, Newark, Phoenix, Pittsburgh, Richmond, Tucson, San Diego, San Jose, and San Francisco. May. FBI interviews John Perry Barlow re NuPrometheus case. June. Mitch Kapor and Barlow found Electronic Frontier Foundation; Barlow publishes CRIME AND PUZZLEMENT manifesto. July 24-27. Trial of Knight Lightning. 1991 February. CPSR Roundtable in Washington, D.C. March 25-28. Computers, Freedom and Privacy conference in San Francisco. May 1. Electronic Frontier Foundation, Steve Jackson, and others file suit against members of Chicago Task Force. July 1-2. Switching station phone software crash affects Washington, Los Angeles, Pittsburgh, San Francisco. September 17. AT&T phone crash affects New York City and three airports. Introduction This is a book about cops, and wild teenage whiz-kids, and lawyers, and hairy-eyed anarchists, and industrial technicians, and hippies, and high-tech millionaires, and game hobbyists, and computer security experts, and Secret Service agents, and grifters, and thieves. This book is about the electronic frontier of the 1990s. It concerns activities that take place inside computers and over telephone lines. A science fiction writer coined the useful term "cyberspace" in 1982, but the territory in question, the electronic frontier, is about a hundred and thirty years old. Cyberspace is the "place" where a telephone conversation appears to occur. Not inside your actual phone, the plastic device on your desk. Not inside the other person's phone, in some other city. THE PLACE BETWEEN the phones. The indefinite place OUT THERE, where the two of you, two human beings, actually meet and communicate. Although it is not exactly "real," "cyberspace" is a genuine place. Things happen there that have very genuine consequences. This "place" is not "real," but it is serious, it is earnest. Tens of thousands of people have dedicated their lives to it, to the public service of public communication by wire and electronics. People have worked on this "frontier" for generations now. Some people became rich and famous from their efforts there. Some just played in it, as hobbyists. Others soberly pondered it, and wrote about it, and regulated it, and negotiated over it in international forums, and sued one another about it, in gigantic, epic court battles that lasted for years. And almost since the beginning, some people have committed crimes in this place. But in the past twenty years, this electrical "space," which was once thin and dark and one-dimensional--little more than a narrow speaking-tube, stretching from phone to phone-- has flung itself open like a gigantic jack-in-the-box. Light has flooded upon it, the eerie light of the glowing computer screen. This dark electric netherworld has become a vast flowering electronic landscape. Since the 1960s, the world of the telephone has cross-bred itself with computers and television, and though there is still no substance to cyberspace, nothing you can handle, it has a strange kind of physicality now. It makes good sense today to talk of cyberspace as a place all its own. Because people live in it now. Not just a few people, not just a few technicians and eccentrics, but thousands of people, quite normal people. And not just for a little while, either, but for hours straight, over weeks, and months, and years. Cyberspace today is a "Net," a "Matrix," international in scope and growing swiftly and steadily. It's growing in size, and wealth, and political importance. People are making entire careers in modern cyberspace. Scientists and technicians, of course; they've been there for twenty years now. But increasingly, cyberspace is filling with journalists and doctors and lawyers and artists and clerks. Civil servants make their careers there now, "on-line" in vast government data-banks; and so do spies, industrial, political, and just plain snoops; and so do police, at least a few of them. And there are children living there now. People have met there and been married there. There are entire living communities in cyberspace today; chattering, gossiping, planning, conferring and scheming, leaving one another voice-mail and electronic mail, giving one another big weightless chunks of valuable data, both legitimate and illegitimate. They busily pass one another computer software and the occasional festering computer virus. We do not really understand how to live in cyberspace yet. We are feeling our way into it, blundering about. That is not surprising. Our lives in the physical world, the "real" world, are also far from perfect, despite a lot more practice. Human lives, real lives, are imperfect by their nature, and there are human beings in cyberspace. The way we live in cyberspace is a funhouse mirror of the way we live in the real world. We take both our advantages and our troubles with us. This book is about trouble in cyberspace. Specifically, this book is about certain strange events in the year 1990, an unprecedented and startling year for the the growing world of computerized communications. In 1990 there came a nationwide crackdown on illicit computer hackers, with arrests, criminal charges, one dramatic show-trial, several guilty pleas, and huge confiscations of data and equipment all over the USA. The Hacker Crackdown of 1990 was larger, better organized, more deliberate, and more resolute than any previous effort in the brave new world of computer crime. The U.S. Secret Service, private telephone security, and state and local law enforcement groups across the country all joined forces in a determined attempt to break the back of America's electronic underground. It was a fascinating effort, with very mixed results. The Hacker Crackdown had another unprecedented effect; it spurred the creation, within "the computer community," of the Electronic Frontier Foundation, a new and very odd interest group, fiercely dedicated to the establishment and preservation of electronic civil liberties. The crackdown, remarkable in itself, has created a melee of debate over electronic crime, punishment, freedom of the press, and issues of search and seizure. Politics has entered cyberspace. Where people go, politics follow. This is the story of the people of cyberspace. PART ONE: Crashing the System On January 15, 1990, AT&T's long-distance telephone switching system crashed. This was a strange, dire, huge event. Sixty thousand people lost their telephone service completely. During the nine long hours of frantic effort that it took to restore service, some seventy million telephone calls went uncompleted. Losses of service, known as "outages" in the telco trade, are a known and accepted hazard of the telephone business. Hurricanes hit, and phone cables get snapped by the thousands. Earthquakes wrench through buried fiber-optic lines. Switching stations catch fire and burn to the ground. These things do happen. There are contingency plans for them, and decades of experience in dealing with them. But the Crash of January 15 was unprecedented. It was unbelievably huge, and it occurred for no apparent physical reason. The crash started on a Monday afternoon in a single switching-station in Manhattan. But, unlike any merely physical damage, it spread and spread. Station after station across America collapsed in a chain reaction, until fully half of AT&T's network had gone haywire and the remaining half was hard-put to handle the overflow. Within nine hours, AT&T software engineers more or less understood what had caused the crash. Replicating the problem exactly, poring over software line by line, took them a couple of weeks. But because it was hard to understand technically, the full truth of the matter and its implications were not widely and thoroughly aired and explained. The root cause of the crash remained obscure, surrounded by rumor and fear. The crash was a grave corporate embarrassment. The "culprit" was a bug in AT&T's own software--not the sort of admission the telecommunications giant wanted to make, especially in the face of increasing competition. Still, the truth WAS told, in the baffling technical terms necessary to explain it. Somehow the explanation failed to persuade American law enforcement officials and even telephone corporate security personnel. These people were not technical experts or software wizards, and they had their own suspicions about the cause of this disaster. The police and telco security had important sources of information denied to mere software engineers. They had informants in the computer underground and years of experience in dealing with high-tech rascality that seemed to grow ever more sophisticated. For years they had been expecting a direct and savage attack against the American national telephone system. And with the Crash of January 15--the first month of a new, high-tech decade--their predictions, fears, and suspicions seemed at last to have entered the real world. A world where the telephone system had not merely crashed, but, quite likely, BEEN crashed--by "hackers." The crash created a large dark cloud of suspicion that would color certain people's assumptions and actions for months. The fact that it took place in the realm of software was suspicious on its face. The fact that it occurred on Martin Luther King Day, still the most politically touchy of American holidays, made it more suspicious yet. The Crash of January 15 gave the Hacker Crackdown its sense of edge and its sweaty urgency. It made people, powerful people in positions of public authority, willing to believe the worst. And, most fatally, it helped to give investigators a willingness to take extreme measures and the determination to preserve almost total secrecy. An obscure software fault in an aging switching system in New York was to lead to a chain reaction of legal and constitutional trouble all across the country. # Like the crash in the telephone system, this chain reaction was ready and waiting to happen. During the 1980s, the American legal system was extensively patched to deal with the novel issues of computer crime. There was, for instance, the Electronic Communications Privacy Act of 1986 (eloquently described as "a stinking mess" by a prominent law enforcement official). And there was the draconian Computer Fraud and Abuse Act of 1986, passed unanimously by the United States Senate, which later would reveal a large number of flaws. Extensive, well-meant efforts had been made to keep the legal system up to date. But in the day-to-day grind of the real world, even the most elegant software tends to crumble and suddenly reveal its hidden bugs. Like the advancing telephone system, the American legal system was certainly not ruined by its temporary crash; but for those caught under the weight of the collapsing system, life became a series of blackouts and anomalies. In order to understand why these weird events occurred, both in the world of technology and in the world of law, it's not enough to understand the merely technical problems. We will get to those; but first and foremost, we must try to understand the telephone, and the business of telephones, and the community of human beings that telephones have created. # Technologies have life cycles, like cities do, like institutions do, like laws and governments do. The first stage of any technology is the Question Mark, often known as the "Golden Vaporware" stage. At this early point, the technology is only a phantom, a mere gleam in the inventor's eye. One such inventor was a speech teacher and electrical tinkerer named Alexander Graham Bell. Bell's early inventions, while ingenious, failed to move the world. In 1863, the teenage Bell and his brother Melville made an artificial talking mechanism out of wood, rubber, gutta-percha, and tin. This weird device had a rubber-covered "tongue" made of movable wooden segments, with vibrating rubber "vocal cords," and rubber "lips" and "cheeks." While Melville puffed a bellows into a tin tube, imitating the lungs, young Alec Bell would manipulate the "lips," "teeth," and "tongue," causing the thing to emit high-pitched falsetto gibberish. Another would-be technical breakthrough was the Bell "phonautograph" of 1874, actually made out of a human cadaver's ear. Clamped into place on a tripod, this grisly gadget drew sound-wave images on smoked glass through a thin straw glued to its vibrating earbones. By 1875, Bell had learned to produce audible sounds--ugly shrieks and squawks--by using magnets, diaphragms, and electrical current. Most "Golden Vaporware" technologies go nowhere. But the second stage of technology is the Rising Star, or, the "Goofy Prototype," stage. The telephone, Bell's most ambitious gadget yet, reached this stage on March 10, 1876. On that great day, Alexander Graham Bell became the first person to transmit intelligible human speech electrically. As it happened, young Professor Bell, industriously tinkering in his Boston lab, had spattered his trousers with acid. His assistant, Mr. Watson, heard his cry for help--over Bell's experimental audio-telegraph. This was an event without precedent. Technologies in their "Goofy Prototype" stage rarely work very well. They're experimental, and therefore half- baked and rather frazzled. The prototype may be attractive and novel, and it does look as if it ought to be good for something-or-other. But nobody, including the inventor, is quite sure what. Inventors, and speculators, and pundits may have very firm ideas about its potential use, but those ideas are often very wrong. The natural habitat of the Goofy Prototype is in trade shows and in the popular press. Infant technologies need publicity and investment money like a tottering calf need milk. This was very true of Bell's machine. To raise research and development money, Bell toured with his device as a stage attraction. Contemporary press reports of the stage debut of the telephone showed pleased astonishment mixed with considerable dread. Bell's stage telephone was a large wooden box with a crude speaker-nozzle, the whole contraption about the size and shape of an overgrown Brownie camera. Its buzzing steel soundplate, pumped up by powerful electromagnets, was loud enough to fill an auditorium. Bell's assistant Mr. Watson, who could manage on the keyboards fairly well, kicked in by playing the organ from distant rooms, and, later, distant cities. This feat was considered marvellous, but very eerie indeed. Bell's original notion for the telephone, an idea promoted for a couple of years, was that it would become a mass medium. We might recognize Bell's idea today as something close to modern "cable radio." Telephones at a central source would transmit music, Sunday sermons, and important public speeches to a paying network of wired-up subscribers. At the time, most people thought this notion made good sense. In fact, Bell's idea was workable. In Hungary, this philosophy of the telephone was successfully put into everyday practice. In Budapest, for decades, from 1893 until after World War I, there was a government-run information service called "Telefon Hirmondo-." Hirmondo- was a centralized source of news and entertainment and culture, including stock reports, plays, concerts, and novels read aloud. At certain hours of the day, the phone would ring, you would plug in a loudspeaker for the use of the family, and Telefon Hirmondo- would be on the air--or rather, on the phone. Hirmondo- is dead tech today, but Hirmondo- might be considered a spiritual ancestor of the modern telephone-accessed computer data services, such as CompuServe, GEnie or Prodigy. The principle behind Hirmondo- is also not too far from computer "bulletin- board systems" or BBS's, which arrived in the late 1970s, spread rapidly across America, and will figure largely in this book. We are used to using telephones for individual person-to-person speech, because we are used to the Bell system. But this was just one possibility among many. Communication networks are very flexible and protean, especially when their hardware becomes sufficiently advanced. They can be put to all kinds of uses. And they have been-- and they will be. Bell's telephone was bound for glory, but this was a combination of political decisions, canny infighting in court, inspired industrial leadership, receptive local conditions and outright good luck. Much the same is true of communications systems today. As Bell and his backers struggled to install their newfangled system in the real world of nineteenth-century New England, they had to fight against skepticism and industrial rivalry. There was already a strong electrical communications network present in America: the telegraph. The head of the Western Union telegraph system dismissed Bell's prototype as "an electrical toy" and refused to buy the rights to Bell's patent. The telephone, it seemed, might be all right as a parlor entertainment-- but not for serious business. Telegrams, unlike mere telephones, left a permanent physical record of their messages. Telegrams, unlike telephones, could be answered whenever the recipient had time and convenience. And the telegram had a much longer distance-range than Bell's early telephone. These factors made telegraphy seem a much more sound and businesslike technology--at least to some. The telegraph system was huge, and well-entrenched. In 1876, the United States had 214,000 miles of telegraph wire, and 8500 telegraph offices. There were specialized telegraphs for businesses and stock traders, government, police and fire departments. And Bell's "toy" was best known as a stage-magic musical device. The third stage of technology is known as the "Cash Cow" stage. In the "cash cow" stage, a technology finds its place in the world, and matures, and becomes settled and productive. After a year or so, Alexander Graham Bell and his capitalist backers concluded that eerie music piped from nineteenth-century cyberspace was not the real selling-point of his invention. Instead, the telephone was about speech-- individual, personal speech, the human voice, human conversation and human interaction. The telephone was not to be managed from any centralized broadcast center. It was to be a personal, intimate technology. When you picked up a telephone, you were not absorbing the cold output of a machine--you were speaking to another human being. Once people realized this, their instinctive dread of the telephone as an eerie, unnatural device, swiftly vanished. A "telephone call" was not a "call" from a "telephone" itself, but a call from another human being, someone you would generally know and recognize. The real point was not what the machine could do for you (or to you), but what you yourself, a person and citizen, could do THROUGH the machine. This decision on the part of the young Bell Company was absolutely vital. The first telephone networks went up around Boston--mostly among the technically curious and the well-to-do (much the same segment of the American populace that, a hundred years later, would be buying personal computers). Entrenched backers of the telegraph continued to scoff. But in January 1878, a disaster made the telephone famous. A train crashed in Tarriffville, Connecticut. Forward-looking doctors in the nearby city of Hartford had had Bell's "speaking telephone" installed. An alert local druggist was able to telephone an entire community of local doctors, who rushed to the site to give aid. The disaster, as disasters do, aroused intense press coverage. The phone had proven its usefulness in the real world. After Tarriffville, the telephone network spread like crabgrass. By 1890 it was all over New England. By '93, out to Chicago. By '97, into Minnesota, Nebraska and Texas. By 1904 it was all over the continent. The telephone had become a mature technology. Professor Bell (now generally known as "Dr. Bell" despite his lack of a formal degree) became quite wealthy. He lost interest in the tedious day-to-day business muddle of the booming telephone network, and gratefully returned his attention to creatively hacking-around in his various laboratories, which were now much larger, better-ventilated, and gratifyingly better-equipped. Bell was never to have another great inventive success, though his speculations and prototypes anticipated fiber-optic transmission, manned flight, sonar, hydrofoil ships, tetrahedral construction, and Montessori education. The "decibel," the standard scientific measure of sound intensity, was named after Bell. Not all Bell's vaporware notions were inspired. He was fascinated by human eugenics. He also spent many years developing a weird personal system of astrophysics in which gravity did not exist. Bell was a definite eccentric. He was something of a hypochondriac, and throughout his life he habitually stayed up until four A.M., refusing to rise before noon. But Bell had accomplished a great feat; he was an idol of millions and his influence, wealth, and great personal charm, combined with his eccentricity, made him something of a loose cannon on deck. Bell maintained a thriving scientific salon in his winter mansion in Washington, D.C., which gave him considerable backstage influence in governmental and scientific circles. He was a major financial backer of the the magazines Science and National Geographic, both still flourishing today as important organs of the American scientific establishment. Bell's companion Thomas Watson, similarly wealthy and similarly odd, became the ardent political disciple of a 19th-century science-fiction writer and would-be social reformer, Edward Bellamy. Watson also trod the boards briefly as a Shakespearian actor. There would never be another Alexander Graham Bell, but in years to come there would be surprising numbers of people like him. Bell was a prototype of the high-tech entrepreneur. High-tech entrepreneurs will play a very prominent role in this book: not merely as technicians and businessmen, but as pioneers of the technical frontier, who can carry the power and prestige they derive from high-technology into the political and social arena. Like later entrepreneurs, Bell was fierce in defense of his own technological territory. As the telephone began to flourish, Bell was soon involved in violent lawsuits in the defense of his patents. Bell's Boston lawyers were excellent, however, and Bell himself, as an elocution teacher and gifted public speaker, was a devastatingly effective legal witness. In the eighteen years of Bell's patents, the Bell company was involved in six hundred separate lawsuits. The legal records printed filled 149 volumes. The Bell Company won every single suit. After Bell's exclusive patents expired, rival telephone companies sprang up all over America. Bell's company, American Bell Telephone, was soon in deep trouble. In 1907, American Bell Telephone fell into the hands of the rather sinister J.P. Morgan financial cartel, robber-baron speculators who dominated Wall Street. At this point, history might have taken a different turn. American might well have been served forever by a patchwork of locally owned telephone companies. Many state politicians and local businessmen considered this an excellent solution. But the new Bell holding company, American Telephone and Telegraph or AT&T, put in a new man at the helm, a visionary industrialist named Theodore Vail. Vail, a former Post Office manager, understood large organizations and had an innate feeling for the nature of large-scale communications. Vail quickly saw to it that AT&T seized the technological edge once again. The Pupin and Campbell "loading coil," and the deForest "audion," are both extinct technology today, but in 1913 they gave Vail's company the best LONG-DISTANCE lines ever built. By controlling long-distance--the links between, and over, and above the smaller local phone companies--AT&T swiftly gained the whip-hand over them, and was soon devouring them right and left. Vail plowed the profits back into research and development, starting the Bell tradition of huge-scale and brilliant industrial research. Technically and financially, AT&T gradually steamrollered the opposition. Independent telephone companies never became entirely extinct, and hundreds of them flourish today. But Vail's AT&T became the supreme communications company. At one point, Vail's AT&T bought Western Union itself, the very company that had derided Bell's telephone as a "toy." Vail thoroughly reformed Western Union's hidebound business along his modern principles; but when the federal government grew anxious at this centralization of power, Vail politely gave Western Union back. This centralizing process was not unique. Very similar events had happened in American steel, oil, and railroads. But AT&T, unlike the other companies, was to remain supreme. The monopoly robber-barons of those other industries were humbled and shattered by government trust-busting. Vail, the former Post Office official, was quite willing to accommodate the US government; in fact he would forge an active alliance with it. AT&T would become almost a wing of the American government, almost another Post Office--though not quite. AT&T would willingly submit to federal regulation, but in return, it would use the government's regulators as its own police, who would keep out competitors and assure the Bell system's profits and preeminence. This was the second birth--the political birth--of the American telephone system. Vail's arrangement was to persist, with vast success, for many decades, until 1982. His system was an odd kind of American industrial socialism. It was born at about the same time as Leninist Communism, and it lasted almost as long--and, it must be admitted, to considerably better effect. Vail's system worked. Except perhaps for aerospace, there has been no technology more thoroughly dominated by Americans than the telephone. The telephone was seen from the beginning as a quintessentially American technology. Bell's policy, and the policy of Theodore Vail, was a profoundly democratic policy of UNIVERSAL ACCESS. Vail's famous corporate slogan, "One Policy, One System, Universal Service," was a political slogan, with a very American ring to it. The American telephone was not to become the specialized tool of government or business, but a general public utility. At first, it was true, only the wealthy could afford private telephones, and Bell's company pursued the business markets primarily. The American phone system was a capitalist effort, meant to make money; it was not a charity. But from the first, almost all communities with telephone service had public telephones. And many stores--especially drugstores-- offered public use of their phones. You might not own a telephone-- but you could always get into the system, if you really needed to. There was nothing inevitable about this decision to make telephones "public" and "universal." Vail's system involved a profound act of trust in the public. This decision was a political one, informed by the basic values of the American republic. The situation might have been very different; and in other countries, under other systems, it certainly was. Joseph Stalin, for instance, vetoed plans for a Soviet phone system soon after the Bolshevik revolution. Stalin was certain that publicly accessible telephones would become instruments of anti-Soviet counterrevolution and conspiracy. (He was probably right.) When telephones did arrive in the Soviet Union, they would be instruments of Party authority, and always heavily tapped. (Alexander Solzhenitsyn's prison-camp novel The First Circle describes efforts to develop a phone system more suited to Stalinist purposes.) France, with its tradition of rational centralized government, had fought bitterly even against the electric telegraph, which seemed to the French entirely too anarchical and frivolous. For decades, nineteenth-century France communicated via the "visual telegraph," a nation-spanning, government-owned semaphore system of huge stone towers that signalled from hilltops, across vast distances, with big windmill-like arms. In 1846, one Dr. Barbay, a semaphore enthusiast, memorably uttered an early version of what might be called "the security expert's argument" against the open media. "No, the electric telegraph is not a sound invention. It will always be at the mercy of the slightest disruption, wild youths, drunkards, bums, etc. . . . The electric telegraph meets those destructive elements with only a few meters of wire over which supervision is impossible. A single man could, without being seen, cut the telegraph wires leading to Paris, and in twenty-four hours cut in ten different places the wires of the same line, without being arrested. The visual telegraph, on the contrary, has its towers, its high walls, its gates well-guarded from inside by strong armed men. Yes, I declare, substitution of the electric telegraph for the visual one is a dreadful measure, a truly idiotic act." Dr. Barbay and his high-security stone machines were eventually unsuccessful, but his argument-- that communication exists for the safety and convenience of the state, and must be carefully protected from the wild boys and the gutter rabble who might want to crash the system--would be heard again and again. When the French telephone system finally did arrive, its snarled inadequacy was to be notorious. Devotees of the American Bell System often recommended a trip to France, for skeptics. In Edwardian Britain, issues of class and privacy were a ball-and-chain for telephonic progress. It was considered outrageous that anyone--any wild fool off the street--could simply barge bellowing into one's office or home, preceded only by the ringing of a telephone bell. In Britain, phones were tolerated for the use of business, but private phones tended be stuffed away into closets, smoking rooms, or servants' quarters. Telephone operators were resented in Britain because they did not seem to "know their place." And no one of breeding would print a telephone number on a business card; this seemed a crass attempt to make the acquaintance of strangers. But phone access in America was to become a popular right; something like universal suffrage, only more so. American women could not yet vote when the phone system came through; yet from the beginning American women doted on the telephone. This "feminization" of the American telephone was often commented on by foreigners. Phones in America were not censored or stiff or formalized; they were social, private, intimate, and domestic. In America, Mother's Day is by far the busiest day of the year for the phone network. The early telephone companies, and especially AT&T, were among the foremost employers of American women. They employed the daughters of the American middle-class in great armies: in 1891, eight thousand women; by 1946, almost a quarter of a million. Women seemed to enjoy telephone work; it was respectable, it was steady, it paid fairly well as women's work went, and--not least-- it seemed a genuine contribution to the social good of the community. Women found Vail's ideal of public service attractive. This was especially true in rural areas, where women operators, running extensive rural party-lines, enjoyed considerable social power. The operator knew everyone on the party-line, and everyone knew her. Although Bell himself was an ardent suffragist, the telephone company did not employ women for the sake of advancing female liberation. AT&T did this for sound commercial reasons. The first telephone operators of the Bell system were not women, but teenage American boys. They were telegraphic messenger boys (a group about to be rendered technically obsolescent), who swept up around the phone office, dunned customers for bills, and made phone connections on the switchboard, all on the cheap. Within the very first year of operation, 1878, Bell's company learned a sharp lesson about combining teenage boys and telephone switchboards. Putting teenage boys in charge of the phone system brought swift and consistent disaster. Bell's chief engineer described them as "Wild Indians." The boys were openly rude to customers. They talked back to subscribers, saucing off, uttering facetious remarks, and generally giving lip. The rascals took Saint Patrick's Day off without permission. And worst of all they played clever tricks with the switchboard plugs: disconnecting calls, crossing lines so that customers found themselves talking to strangers, and so forth. This combination of power, technical mastery, and effective anonymity seemed to act like catnip on teenage boys. This wild-kid-on-the-wires phenomenon was not confined to the USA; from the beginning, the same was true of the British phone system. An early British commentator kindly remarked: "No doubt boys in their teens found the work not a little irksome, and it is also highly probable that under the early conditions of employment the adventurous and inquisitive spirits of which the average healthy boy of that age is possessed, were not always conducive to the best attention being given to the wants of the telephone subscribers." So the boys were flung off the system--or at least, deprived of control of the switchboard. But the "adventurous and inquisitive spirits" of the teenage boys would be heard from in the world of telephony, again and again. The fourth stage in the technological life-cycle is death: "the Dog," dead tech. The telephone has so far avoided this fate. On the contrary, it is thriving, still spreading, still evolving, and at increasing speed. The telephone has achieved a rare and exalted state for a technological artifact: it has become a HOUSEHOLD OBJECT. The telephone, like the clock, like pen and paper, like kitchen utensils and running water, has become a technology that is visible only by its absence. The telephone is technologically transparent. The global telephone system is the largest and most complex machine in the world, yet it is easy to use. More remarkable yet, the telephone is almost entirely physically safe for the user. For the average citizen in the 1870s, the telephone was weirder, more shocking, more "high-tech" and harder to comprehend, than the most outrageous stunts of advanced computing for us Americans in the 1990s. In trying to understand what is happening to us today, with our bulletin-board systems, direct overseas dialling, fiber-optic transmissions, computer viruses, hacking stunts, and a vivid tangle of new laws and new crimes, it is important to realize that our society has been through a similar challenge before-- and that, all in all, we did rather well by it. Bell's stage telephone seemed bizarre at first. But the sensations of weirdness vanished quickly, once people began to hear the familiar voices of relatives and friends, in their own homes on their own telephones. The telephone changed from a fearsome high-tech totem to an everyday pillar of human community. This has also happened, and is still happening, to computer networks. Computer networks such as NSFnet, BITnet, USENET, JANET, are technically advanced, intimidating, and much harder to use than telephones. Even the popular, commercial computer networks, such as GEnie, Prodigy, and CompuServe, cause much head-scratching and have been described as "user-hateful." Nevertheless they too are changing from fancy high-tech items into everyday sources of human community. The words "community" and "communication" have the same root. Wherever you put a communications network, you put a community as well. And whenever you TAKE AWAY that network--confiscate it, outlaw it, crash it, raise its price beyond affordability-- then you hurt that community. Communities will fight to defend themselves. People will fight harder and more bitterly to defend their communities, than they will fight to defend their own individual selves. And this is very true of the "electronic community" that arose around computer networks in the 1980s--or rather, the VARIOUS electronic communities, in telephony, law enforcement, computing, and the digital underground that, by the year 1990, were raiding, rallying, arresting, suing, jailing, fining and issuing angry manifestos. None of the events of 1990 were entirely new. Nothing happened in 1990 that did not have some kind of earlier and more understandable precedent. What gave the Hacker Crackdown its new sense of gravity and importance was the feeling--the COMMUNITY feeling-- that the political stakes had been raised; that trouble in cyberspace was no longer mere mischief or inconclusive skirmishing, but a genuine fight over genuine issues, a fight for community survival and the shape of the future. These electronic communities, having flourished throughout the 1980s, were becoming aware of themselves, and increasingly, becoming aware of other, rival communities. Worries were sprouting up right and left, with complaints, rumors, uneasy speculations. But it would take a catalyst, a shock, to make the new world evident. Like Bell's great publicity break, the Tarriffville Rail Disaster of January 1878, it would take a cause celebre. That cause was the AT&T Crash of January 15, 1990. After the Crash, the wounded and anxious telephone community would come out fighting hard. # The community of telephone technicians, engineers, operators and researchers is the oldest community in cyberspace. These are the veterans, the most developed group, the richest, the most respectable, in most ways the most powerful. Whole generations have come and gone since Alexander Graham Bell's day, but the community he founded survives; people work for the phone system today whose great-grandparents worked for the phone system. Its specialty magazines, such as Telephony, AT&T Technical Journal, Telephone Engineer and Management, are decades old; they make computer publications like Macworld and PC Week look like amateur johnny-come-latelies. And the phone companies take no back seat in high-technology, either. Other companies' industrial researchers may have won new markets; but the researchers of Bell Labs have won SEVEN NOBEL PRIZES. One potent device that Bell Labs originated, the transistor, has created entire GROUPS of industries. Bell Labs are world-famous for generating "a patent a day," and have even made vital discoveries in astronomy, physics and cosmology. Throughout its seventy-year history, "Ma Bell" was not so much a company as a way of life. Until the cataclysmic divestiture of the 1980s, Ma Bell was perhaps the ultimate maternalist mega-employer. The AT&T corporate image was the "gentle giant," "the voice with a smile," a vaguely socialist-realist world of cleanshaven linemen in shiny helmets and blandly pretty phone-girls in headsets and nylons. Bell System employees were famous as rock-ribbed Kiwanis and Rotary members, Little-League enthusiasts, school-board people. During the long heyday of Ma Bell, the Bell employee corps were nurtured top-to-bottom on a corporate ethos of public service. There was good money in Bell, but Bell was not ABOUT money; Bell used public relations, but never mere marketeering. People went into the Bell System for a good life, and they had a good life. But it was not mere money that led Bell people out in the midst of storms and earthquakes to fight with toppled phone-poles, to wade in flooded manholes, to pull the red-eyed graveyard-shift over collapsing switching-systems. The Bell ethic was the electrical equivalent of the postman's: neither rain, nor snow, nor gloom of night would stop these couriers. It is easy to be cynical about this, as it is easy to be cynical about any political or social system; but cynicism does not change the fact that thousands of people took these ideals very seriously. And some still do. The Bell ethos was about public service; and that was gratifying; but it was also about private POWER, and that was gratifying too. As a corporation, Bell was very special. Bell was privileged. Bell had snuggled up close to the state. In fact, Bell was as close to government as you could get in America and still make a whole lot of legitimate money. But unlike other companies, Bell was above and beyond the vulgar commercial fray. Through its regional operating companies, Bell was omnipresent, local, and intimate, all over America; but the central ivory towers at its corporate heart were the tallest and the ivoriest around. There were other phone companies in America, to be sure; the so-called independents. Rural cooperatives, mostly; small fry, mostly tolerated, sometimes warred upon. For many decades, "independent" American phone companies lived in fear and loathing of the official Bell monopoly (or the "Bell Octopus," as Ma Bell's nineteenth-century enemies described her in many angry newspaper manifestos). Some few of these independent entrepreneurs, while legally in the wrong, fought so bitterly against the Octopus that their illegal phone networks were cast into the street by Bell agents and publicly burned. The pure technical sweetness of the Bell System gave its operators, inventors and engineers a deeply satisfying sense of power and mastery. They had devoted their lives to improving this vast nation-spanning machine; over years, whole human lives, they had watched it improve and grow. It was like a great technological temple. They were an elite, and they knew it--even if others did not; in fact, they felt even more powerful BECAUSE others did not understand. The deep attraction of this sensation of elite technical power should never be underestimated. "Technical power" is not for everybody; for many people it simply has no charm at all. But for some people, it becomes the core of their lives. For a few, it is overwhelming, obsessive; it becomes something close to an addiction. People--especially clever teenage boys whose lives are otherwise mostly powerless and put-upon --love this sensation of secret power, and are willing to do all sorts of amazing things to achieve it. The technical POWER of electronics has motivated many strange acts detailed in this book, which would otherwise be inexplicable. So Bell had power beyond mere capitalism. The Bell service ethos worked, and was often propagandized, in a rather saccharine fashion. Over the decades, people slowly grew tired of this. And then, openly impatient with it. By the early 1980s, Ma Bell was to find herself with scarcely a real friend in the world. Vail's industrial socialism had become hopelessly out-of-fashion politically. Bell would be punished for that. And that punishment would fall harshly upon the people of the telephone community. # In 1983, Ma Bell was dismantled by federal court action. The pieces of Bell are now separate corporate entities. The core of the company became AT&T Communications, and also AT&T Industries (formerly Western Electric, Bell's manufacturing arm). AT&T Bell Labs became Bell Communications Research, Bellcore. Then there are the Regional Bell Operating Companies, or RBOCs, pronounced "arbocks." Bell was a titan and even these regional chunks are gigantic enterprises: Fortune 50 companies with plenty of wealth and power behind them. But the clean lines of "One Policy, One System, Universal Service" have been shattered, apparently forever. The "One Policy" of the early Reagan Administration was to shatter a system that smacked of noncompetitive socialism. Since that time, there has been no real telephone "policy" on the federal level. Despite the breakup, the remnants of Bell have never been set free to compete in the open marketplace. The RBOCs are still very heavily regulated, but not from the top. Instead, they struggle politically, economically and legally, in what seems an endless turmoil, in a patchwork of overlapping federal and state jurisdictions. Increasingly, like other major American corporations, the RBOCs are becoming multinational, acquiring important commercial interests in Europe, Latin America, and the Pacific Rim. But this, too, adds to their legal and political predicament. The people of what used to be Ma Bell are not happy about their fate. They feel ill-used. They might have been grudgingly willing to make a full transition to the free market; to become just companies amid other companies. But this never happened. Instead, AT&T and the RBOCS ("the Baby Bells") feel themselves wrenched from side to side by state regulators, by Congress, by the FCC, and especially by the federal court of Judge Harold Greene, the magistrate who ordered the Bell breakup and who has been the de facto czar of American telecommunications ever since 1983. Bell people feel that they exist in a kind of paralegal limbo today. They don't understand what's demanded of them. If it's "service," why aren't they treated like a public service? And if it's money, then why aren't they free to compete for it? No one seems to know, really. Those who claim to know keep changing their minds. Nobody in authority seems willing to grasp the nettle for once and all. Telephone people from other countries are amazed by the American telephone system today. Not that it works so well; for nowadays even the French telephone system works, more or less. They are amazed that the American telephone system STILL works AT ALL, under these strange conditions. Bell's "One System" of long-distance service is now only about eighty percent of a system, with the remainder held by Sprint, MCI, and the midget long-distance companies. Ugly wars over dubious corporate practices such as "slamming" (an underhanded method of snitching clients from rivals) break out with some regularity in the realm of long-distance service. The battle to break Bell's long-distance monopoly was long and ugly, and since the breakup the battlefield has not become much prettier. AT&T's famous shame-and-blame advertisements, which emphasized the shoddy work and purported ethical shadiness of their competitors, were much remarked on for their studied psychological cruelty. There is much bad blood in this industry, and much long-treasured resentment. AT&T's post-breakup corporate logo, a striped sphere, is known in the industry as the "Death Star" (a reference from the movie Star Wars, in which the "Death Star" was the spherical high- tech fortress of the harsh-breathing imperial ultra-baddie, Darth Vader.) Even AT&T employees are less than thrilled by the Death Star. A popular (though banned) T-shirt among AT&T employees bears the old-fashioned Bell logo of the Bell System, plus the newfangled striped sphere, with the before-and-after comments: "This is your brain--This is your brain on drugs!" AT&T made a very well-financed and determined effort to break into the personal computer market; it was disastrous, and telco computer experts are derisively known by their competitors as "the pole-climbers." AT&T and the Baby Bell arbocks still seem to have few friends. Under conditions of sharp commercial competition, a crash like that of January 15, 1990 was a major embarrassment to AT&T. It was a direct blow against their much-treasured reputation for reliability. Within days of the crash AT&T's Chief Executive Officer, Bob Allen, officially apologized, in terms of deeply pained humility: "AT&T had a major service disruption last Monday. We didn't live up to our own standards of quality, and we didn't live up to yours. It's as simple as that. And that's not acceptable to us. Or to you. . . . We understand how much people have come to depend upon AT&T service, so our AT&T Bell Laboratories scientists and our network engineers are doing everything possible to guard against a recurrence. . . . We know there's no way to make up for the inconvenience this problem may have caused you." Mr Allen's "open letter to customers" was printed in lavish ads all over the country: in the Wall Street Journal, USA Today, New York Times, Los Angeles Times, Chicago Tribune, Philadelphia Inquirer, San Francisco Chronicle Examiner, Boston Globe, Dallas Morning News, Detroit Free Press, Washington Post, Houston Chronicle, Cleveland Plain Dealer, Atlanta Journal Constitution, Minneapolis Star Tribune, St. Paul Pioneer Press Dispatch, Seattle Times/Post Intelligencer, Tacoma News Tribune, Miami Herald, Pittsburgh Press, St. Louis Post Dispatch, Denver Post, Phoenix Republic Gazette and Tampa Tribune. In another press release, AT&T went to some pains to suggest that this "software glitch" might have happened just as easily to MCI, although, in fact, it hadn't. (MCI's switching software was quite different from AT&T's--though not necessarily any safer.) AT&T also announced their plans to offer a rebate of service on Valentine's Day to make up for the loss during the Crash. "Every technical resource available, including Bell Labs scientists and engineers, has been devoted to assuring it will not occur again," the public was told. They were further assured that "The chances of a recurrence are small-- a problem of this magnitude never occurred before." In the meantime, however, police and corporate security maintained their own suspicions about "the chances of recurrence" and the real reason why a "problem of this magnitude" had appeared, seemingly out of nowhere. Police and security knew for a fact that hackers of unprecedented sophistication were illegally entering, and reprogramming, certain digital switching stations. Rumors of hidden "viruses" and secret "logic bombs" in the switches ran rampant in the underground, with much chortling over AT&T's predicament, and idle speculation over what unsung hacker genius was responsible for it. Some hackers, including police informants, were trying hard to finger one another as the true culprits of the Crash. Telco people found little comfort in objectivity when they contemplated these possibilities. It was just too close to the bone for them; it was embarrassing; it hurt so much, it was hard even to talk about. There has always been thieving and misbehavior in the phone system. There has always been trouble with the rival independents, and in the local loops. But to have such trouble in the core of the system, the long-distance switching stations, is a horrifying affair. To telco people, this is all the difference between finding roaches in your kitchen and big horrid sewer-rats in your bedroom. From the outside, to the average citizen, the telcos still seem gigantic and impersonal. The American public seems to regard them as something akin to Soviet apparats. Even when the telcos do their best corporate-citizen routine, subsidizing magnet high-schools and sponsoring news-shows on public television, they seem to win little except public suspicion. But from the inside, all this looks very different. There's harsh competition. A legal and political system that seems baffled and bored, when not actively hostile to telco interests. There's a loss of morale, a deep sensation of having somehow lost the upper hand. Technological change has caused a loss of data and revenue to other, newer forms of transmission. There's theft, and new forms of theft, of growing scale and boldness and sophistication. With all these factors, it was no surprise to see the telcos, large and small, break out in a litany of bitter complaint. In late '88 and throughout 1989, telco representatives grew shrill in their complaints to those few American law enforcement officials who make it their business to try to understand what telephone people are talking about. Telco security officials had discovered the computer- hacker underground, infiltrated it thoroughly, and become deeply alarmed at its growing expertise. Here they had found a target that was not only loathsome on its face, but clearly ripe for counterattack. Those bitter rivals: AT&T, MCI and Sprint--and a crowd of Baby Bells: PacBell, Bell South, Southwestern Bell, NYNEX, USWest, as well as the Bell research consortium Bellcore, and the independent long-distance carrier Mid-American-- all were to have their role in the great hacker dragnet of 1990. After years of being battered and pushed around, the telcos had, at least in a small way, seized the initiative again. After years of turmoil, telcos and government officials were once again to work smoothly in concert in defense of the System. Optimism blossomed; enthusiasm grew on all sides; the prospective taste of vengeance was sweet. # From the beginning--even before the crackdown had a name-- secrecy was a big problem. There were many good reasons for secrecy in the hacker crackdown. Hackers and code-thieves were wily prey, slinking back to their bedrooms and basements and destroying vital incriminating evidence at the first hint of trouble. Furthermore, the crimes themselves were heavily technical and difficult to describe, even to police--much less to the general public. When such crimes HAD been described intelligibly to the public, in the past, that very publicity had tended to INCREASE the crimes enormously. Telco officials, while painfully aware of the vulnerabilities of their systems, were anxious not to publicize those weaknesses. Experience showed them that those weaknesses, once discovered, would be pitilessly exploited by tens of thousands of people--not only by professional grifters and by underground hackers and phone phreaks, but by many otherwise more-or-less honest everyday folks, who regarded stealing service from the faceless, soulless "Phone Company" as a kind of harmless indoor sport. When it came to protecting their interests, telcos had long since given up on general public sympathy for "the Voice with a Smile." Nowadays the telco's "Voice" was very likely to be a computer's; and the American public showed much less of the proper respect and gratitude due the fine public service bequeathed them by Dr. Bell and Mr. Vail. The more efficient, high-tech, computerized, and impersonal the telcos became, it seemed, the more they were met by sullen public resentment and amoral greed. Telco officials wanted to punish the phone-phreak underground, in as public and exemplary a manner as possible. They wanted to make dire examples of the worst offenders, to seize the ringleaders and intimidate the small fry, to discourage and frighten the wacky hobbyists, and send the professional grifters to jail. To do all this, publicity was vital. Yet operational secrecy was even more so. If word got out that a nationwide crackdown was coming, the hackers might simply vanish; destroy the evidence, hide their computers, go to earth, and wait for the campaign to blow over. Even the young hackers were crafty and suspicious, and as for the professional grifters, they tended to split for the nearest state-line at the first sign of trouble. For the crackdown to work well, they would all have to be caught red-handed, swept upon suddenly, out of the blue, from every corner of the compass. And there was another strong motive for secrecy. In the worst-case scenario, a blown campaign might leave the telcos open to a devastating hacker counter-attack. If there were indeed hackers loose in America who had caused the January 15 Crash--if there were truly gifted hackers, loose in the nation's long-distance switching systems, and enraged or frightened by the crackdown--then they might react unpredictably to an attempt to collar them. Even if caught, they might have talented and vengeful friends still running around loose. Conceivably, it could turn ugly. Very ugly. In fact, it was hard to imagine just how ugly things might turn, given that possibility. Counter-attack from hackers was a genuine concern for the telcos. In point of fact, they would never suffer any such counter-attack. But in months to come, they would be at some pains to publicize this notion and to utter grim warnings about it. Still, that risk seemed well worth running. Better to run the risk of vengeful attacks, than to live at the mercy of potential crashers. Any cop would tell you that a protection racket had no real future. And publicity was such a useful thing. Corporate security officers, including telco security, generally work under conditions of great discretion. And corporate security officials do not make money for their companies. Their job is to PREVENT THE LOSS of money, which is much less glamorous than actually winning profits. If you are a corporate security official, and you do your job brilliantly, then nothing bad happens to your company at all. Because of this, you appear completely superfluous. This is one of the many unattractive aspects of security work. It's rare that these folks have the chance to draw some healthy attention to their own efforts. Publicity also served the interest of their friends in law enforcement. Public officials, including law enforcement officials, thrive by attracting favorable public interest. A brilliant prosecution in a matter of vital public interest can make the career of a prosecuting attorney. And for a police officer, good publicity opens the purses of the legislature; it may bring a citation, or a promotion, or at least a rise in status and the respect of one's peers. But to have both publicity and secrecy is to have one's cake and eat it too. In months to come, as we will show, this impossible act was to cause great pain to the agents of the crackdown. But early on, it seemed possible --maybe even likely--that the crackdown could successfully combine the best of both worlds. The ARREST of hackers would be heavily publicized. The actual DEEDS of the hackers, which were technically hard to explain and also a security risk, would be left decently obscured. The THREAT hackers posed would be heavily trumpeted; the likelihood of their actually committing such fearsome crimes would be left to the public's imagination. The spread of the computer underground, and its growing technical sophistication, would be heavily promoted; the actual hackers themselves, mostly bespectacled middle-class white suburban teenagers, would be denied any personal publicity. It does not seem to have occurred to any telco official that the hackers accused would demand a day in court; that journalists would smile upon the hackers as "good copy;" that wealthy high-tech entrepreneurs would offer moral and financial support to crackdown victims; that constitutional lawyers would show up with briefcases, frowning mightily. This possibility does not seem to have ever entered the game-plan. And even if it had, it probably would not have slowed the ferocious pursuit of a stolen phone-company document, mellifluously known as "Control Office Administration of Enhanced 911 Services for Special Services and Major Account Centers." In the chapters to follow, we will explore the worlds of police and the computer underground, and the large shadowy area where they overlap. But first, we must explore the battleground. Before we leave the world of the telcos, we must understand what a switching system actually is and how your telephone actually works. # To the average citizen, the idea of the telephone is represented by, well, a TELEPHONE: a device that you talk into. To a telco professional, however, the telephone itself is known, in lordly fashion, as a "subset." The "subset" in your house is a mere adjunct, a distant nerve ending, of the central switching stations, which are ranked in levels of heirarchy, up to the long-distance electronic switching stations, which are some of the largest computers on earth. Let us imagine that it is, say, 1925, before the introduction of computers, when the phone system was simpler and somewhat easier to grasp. Let's further imagine that you are Miss Leticia Luthor, a fictional operator for Ma Bell in New York City of the 20s. Basically, you, Miss Luthor, ARE the "switching system." You are sitting in front of a large vertical switchboard, known as a "cordboard," made of shiny wooden panels, with ten thousand metal-rimmed holes punched in them, known as jacks. The engineers would have put more holes into your switchboard, but ten thousand is as many as you can reach without actually having to get up out of your chair. Each of these ten thousand holes has its own little electric lightbulb, known as a "lamp," and its own neatly printed number code. With the ease of long habit, you are scanning your board for lit-up bulbs. This is what you do most of the time, so you are used to it. A lamp lights up. This means that the phone at the end of that line has been taken off the hook. Whenever a handset is taken off the hook, that closes a circuit inside the phone which then signals the local office, i.e. you, automatically. There might be somebody calling, or then again the phone might be simply off the hook, but this does not matter to you yet. The first thing you do, is record that number in your logbook, in your fine American public-school handwriting. This comes first, naturally, since it is done for billing purposes. You now take the plug of your answering cord, which goes directly to your headset, and plug it into the lit-up hole. "Operator," you announce. In operator's classes, before taking this job, you have been issued a large pamphlet full of canned operator's responses for all kinds of contingencies, which you had to memorize. You have also been trained in a proper non-regional, non-ethnic pronunciation and tone of voice. You rarely have the occasion to make any spontaneous remark to a customer, and in fact this is frowned upon (except out on the rural lines where people have time on their hands and get up to all kinds of mischief). A tough-sounding user's voice at the end of the line gives you a number. Immediately, you write that number down in your logbook, next to the caller's number, which you just wrote earlier. You then look and see if the number this guy wants is in fact on your switchboard, which it generally is, since it's generally a local call. Long distance costs so much that people use it sparingly. Only then do you pick up a calling-cord from a shelf at the base of the switchboard. This is a long elastic cord mounted on a kind of reel so that it will zip back in when you unplug it. There are a lot of cords down there, and when a bunch of them are out at once they look like a nest of snakes. Some of the girls think there are bugs living in those cable-holes. They're called "cable mites" and are supposed to bite your hands and give you rashes. You don't believe this, yourself. Gripping the head of your calling-cord, you slip the tip of it deftly into the sleeve of the jack for the called person. Not all the way in, though. You just touch it. If you hear a clicking sound, that means the line is busy and you can't put the call through. If the line is busy, you have to stick the calling-cord into a "busy-tone jack," which will give the guy a busy-tone. This way you don't have to talk to him yourself and absorb his natural human frustration. But the line isn't busy. So you pop the cord all the way in. Relay circuits in your board make the distant phone ring, and if somebody picks it up off the hook, then a phone conversation starts. You can hear this conversation on your answering cord, until you unplug it. In fact you could listen to the whole conversation if you wanted, but this is sternly frowned upon by management, and frankly, when you've overheard one, you've pretty much heard 'em all. You can tell how long the conversation lasts by the glow of the calling-cord's lamp, down on the calling-cord's shelf. When it's over, you unplug and the calling-cord zips back into place. Having done this stuff a few hundred thousand times, you become quite good at it. In fact you're plugging, and connecting, and disconnecting, ten, twenty, forty cords at a time. It's a manual handicraft, really, quite satisfying in a way, rather like weaving on an upright loom. Should a long-distance call come up, it would be different, but not all that different. Instead of connecting the call through your own local switchboard, you have to go up the hierarchy, onto the long-distance lines, known as "trunklines." Depending on how far the call goes, it may have to work its way through a whole series of operators, which can take quite a while. The caller doesn't wait on the line while this complex process is negotiated across the country by the gaggle of operators. Instead, the caller hangs up, and you call him back yourself when the call has finally worked its way through. After four or five years of this work, you get married, and you have to quit your job, this being the natural order of womanhood in the American 1920s. The phone company has to train somebody else--maybe two people, since the phone system has grown somewhat in the meantime. And this costs money. In fact, to use any kind of human being as a switching system is a very expensive proposition. Eight thousand Leticia Luthors would be bad enough, but a quarter of a million of them is a military-scale proposition and makes drastic measures in automation financially worthwhile. Although the phone system continues to grow today, the number of human beings employed by telcos has been dropping steadily for years. Phone "operators" now deal with nothing but unusual contingencies, all routine operations having been shrugged off onto machines. Consequently, telephone operators are considerably less machine-like nowadays, and have been known to have accents and actual character in their voices. When you reach a human operator today, the operators are rather more "human" than they were in Leticia's day--but on the other hand, human beings in the phone system are much harder to reach in the first place. Over the first half of the twentieth century, "electromechanical" switching systems of growing complexity were cautiously introduced into the phone system. In certain backwaters, some of these hybrid systems are still in use. But after 1965, the phone system began to go completely electronic, and this is by far the dominant mode today. Electromechanical systems have "crossbars," and "brushes," and other large moving mechanical parts, which, while faster and cheaper than Leticia, are still slow, and tend to wear out fairly quickly. But fully electronic systems are inscribed on silicon chips, and are lightning-fast, very cheap, and quite durable. They are much cheaper to maintain than even the best electromechanical systems, and they fit into half the space. And with every year, the silicon chip grows smaller, faster, and cheaper yet. Best of all, automated electronics work around the clock and don't have salaries or health insurance. There are, however, quite serious drawbacks to the use of computer-chips. When they do break down, it is a daunting challenge to figure out what the heck has gone wrong with them. A broken cordboard generally had a problem in it big enough to see. A broken chip has invisible, microscopic faults. And the faults in bad software can be so subtle as to be practically theological. If you want a mechanical system to do something new, then you must travel to where it is, and pull pieces out of it, and wire in new pieces. This costs money. However, if you want a chip to do something new, all you have to do is change its software, which is easy, fast and dirt-cheap. You don't even have to see the chip to change its program. Even if you did see the chip, it wouldn't look like much. A chip with program X doesn't look one whit different from a chip with program Y. With the proper codes and sequences, and access to specialized phone-lines, you can change electronic switching systems all over America from anywhere you please. And so can other people. If they know how, and if they want to, they can sneak into a microchip via the special phonelines and diddle with it, leaving no physical trace at all. If they broke into the operator's station and held Leticia at gunpoint, that would be very obvious. If they broke into a telco building and went after an electromechanical switch with a toolbelt, that would at least leave many traces. But people can do all manner of amazing things to computer switches just by typing on a keyboard, and keyboards are everywhere today. The extent of this vulnerability is deep, dark, broad, almost mind-boggling, and yet this is a basic, primal fact of life about any computer on a network. Security experts over the past twenty years have insisted, with growing urgency, that this basic vulnerability of computers represents an entirely new level of risk, of unknown but obviously dire potential to society. And they are right. An electronic switching station does pretty much everything Letitia did, except in nanoseconds and on a much larger scale. Compared to Miss Luthor's ten thousand jacks, even a primitive 1ESS switching computer, 60s vintage, has a 128,000 lines. And the current AT&T system of choice is the monstrous fifth-generation 5ESS. An Electronic Switching Station can scan every line on its "board" in a tenth of a second, and it does this over and over, tirelessly, around the clock. Instead of eyes, it uses "ferrod scanners" to check the condition of local lines and trunks. Instead of hands, it has "signal distributors," "central pulse distributors," "magnetic latching relays," and "reed switches," which complete and break the calls. Instead of a brain, it has a "central processor." Instead of an instruction manual, it has a program. Instead of a handwritten logbook for recording and billing calls, it has magnetic tapes. And it never has to talk to anybody. Everything a customer might say to it is done by punching the direct-dial tone buttons on your subset. Although an Electronic Switching Station can't talk, it does need an interface, some way to relate to its, er, employers. This interface is known as the "master control center." (This interface might be better known simply as "the interface," since it doesn't actually "control" phone calls directly. However, a term like "Master Control Center" is just the kind of rhetoric that telco maintenance engineers--and hackers--find particularly satisfying.) Using the master control center, a phone engineer can test local and trunk lines for malfunctions. He (rarely she) can check various alarm displays, measure traffic on the lines, examine the records of telephone usage and the charges for those calls, and change the programming. And, of course, anybody else who gets into the master control center by remote control can also do these things, if he (rarely she) has managed to figure them out, or, more likely, has somehow swiped the knowledge from people who already know. In 1989 and 1990, one particular RBOC, BellSouth, which felt particularly troubled, spent a purported $1.2 million on computer security. Some think it spent as much as two million, if you count all the associated costs. Two million dollars is still very little compared to the great cost-saving utility of telephonic computer systems. Unfortunately, computers are also stupid. Unlike human beings, computers possess the truly profound stupidity of the inanimate. In the 1960s, in the first shocks of spreading computerization, there was much easy talk about the stupidity of computers-- how they could "only follow the program" and were rigidly required to do "only what they were told." There has been rather less talk about the stupidity of computers since they began to achieve grandmaster status in chess tournaments, and to manifest many other impressive forms of apparent cleverness. Nevertheless, computers STILL are profoundly brittle and stupid; they are simply vastly more subtle in their stupidity and brittleness. The computers of the 1990s are much more reliable in their components than earlier computer systems, but they are also called upon to do far more complex things, under far more challenging conditions. On a basic mathematical level, every single line of a software program offers a chance for some possible screwup. Software does not sit still when it works; it "runs," it interacts with itself and with its own inputs and outputs. By analogy, it stretches like putty into millions of possible shapes and conditions, so many shapes that they can never all be successfully tested, not even in the lifespan of the universe. Sometimes the putty snaps. The stuff we call "software" is not like anything that human society is used to thinking about. Software is something like a machine, and something like mathematics, and something like language, and something like thought, and art, and information. . . . But software is not in fact any of those other things. The protean quality of software is one of the great sources of its fascination. It also makes software very powerful, very subtle, very unpredictable, and very risky. Some software is bad and buggy. Some is "robust," even "bulletproof." The best software is that which has been tested by thousands of users under thousands of different conditions, over years. It is then known as "stable." This does NOT mean that the software is now flawless, free of bugs. It generally means that there are plenty of bugs in it, but the bugs are well-identified and fairly well understood. There is simply no way to assure that software is free of flaws. Though software is mathematical in nature, it cannot by "proven" like a mathematical theorem; software is more like language, with inherent ambiguities, with different definitions, different assumptions, different levels of meaning that can conflict. Human beings can manage, more or less, with human language because we can catch the gist of it. Computers, despite years of effort in "artificial intelligence," have proven spectacularly bad in "catching the gist" of anything at all. The tiniest bit of semantic grit may still bring the mightiest computer tumbling down. One of the most hazardous things you can do to a computer program is try to improve it--to try to make it safer. Software "patches" represent new, untried un-"stable" software, which is by definition riskier. The modern telephone system has come to depend, utterly and irretrievably, upon software. And the System Crash of January 15, 1990, was caused by an IMPROVEMENT in software. Or rather, an ATTEMPTED improvement. As it happened, the problem itself--the problem per se--took this form. A piece of telco software had been written in C language, a standard language of the telco field. Within the C software was a long "do. . .while" construct. The "do. . .while" construct contained a "switch" statement. The "switch" statement contained an "if" clause. The "if" clause contained a "break." The "break" was SUPPOSED to "break" the "if clause." Instead, the "break" broke the "switch" statement. That was the problem, the actual reason why people picking up phones on January 15, 1990, could not talk to one another. Or at least, that was the subtle, abstract, cyberspatial seed of the problem. This is how the problem manifested itself from the realm of programming into the realm of real life. The System 7 software for AT&T's 4ESS switching station, the "Generic 44E14 Central Office Switch Software," had been extensively tested, and was considered very stable. By the end of 1989, eighty of AT&T's switching systems nationwide had been programmed with the new software. Cautiously, thirty-four stations were left to run the slower, less-capable System 6, because AT&T suspected there might be shakedown problems with the new and unprecedently sophisticated System 7 network. The stations with System 7 were programmed to switch over to a backup net in case of any problems. In mid-December 1989, however, a new high-velocity, high-security software patch was distributed to each of the 4ESS switches that would enable them to switch over even more quickly, making the System 7 network that much more secure. Unfortunately, every one of these 4ESS switches was now in possession of a small but deadly flaw. In order to maintain the network, switches must monitor the condition of other switches--whether they are up and running, whether they have temporarily shut down, whether they are overloaded and in need of assistance, and so forth. The new software helped control this bookkeeping function by monitoring the status calls from other switches. It only takes four to six seconds for a troubled 4ESS switch to rid itself of all its calls, drop everything temporarily, and re-boot its software from scratch. Starting over from scratch will generally rid the switch of any software problems that may have developed in the course of running the system. Bugs that arise will be simply wiped out by this process. It is a clever idea. This process of automatically re-booting from scratch is known as the "normal fault recovery routine." Since AT&T's software is in fact exceptionally stable, systems rarely have to go into "fault recovery" in the first place; but AT&T has always boasted of its "real world" reliability, and this tactic is a belt-and-suspenders routine. The 4ESS switch used its new software to monitor its fellow switches as they recovered from faults. As other switches came back on line after recovery, they would send their "OK" signals to the switch. The switch would make a little note to that effect in its "status map," recognizing that the fellow switch was back and ready to go, and should be sent some calls and put back to regular work. Unfortunately, while it was busy bookkeeping with the status map, the tiny flaw in the brand-new software came into play. The flaw caused the 4ESS switch to interact, subtly but drastically, with incoming telephone calls from human users. If--and only if-- two incoming phone-calls happened to hit the switch within a hundredth of a second, then a small patch of data would be garbled by the flaw. But the switch had been programmed to monitor itself constantly for any possible damage to its data. When the switch perceived that its data had been somehow garbled, then it too would go down, for swift repairs to its software. It would signal its fellow switches not to send any more work. It would go into the fault-recovery mode for four to six seconds. And then the switch would be fine again, and would send out its "OK, ready for work" signal. However, the "OK, ready for work" signal was the VERY THING THAT HAD CAUSED THE SWITCH TO GO DOWN IN THE FIRST PLACE. And ALL the System 7 switches had the same flaw in their status-map software. As soon as they stopped to make the bookkeeping note that their fellow switch was "OK," then they too would become vulnerable to the slight chance that two phone-calls would hit them within a hundredth of a second. At approximately 2:25 P.M. EST on Monday, January 15, one of AT&T's 4ESS toll switching systems in New York City had an actual, legitimate, minor problem. It went into fault recovery routines, announced "I'm going down," then announced, "I'm back, I'm OK." And this cheery message then blasted throughout the network to many of its fellow 4ESS switches. Many of the switches, at first, completely escaped trouble. These lucky switches were not hit by the coincidence of two phone calls within a hundredth of a second. Their software did not fail--at first. But three switches-- in Atlanta, St. Louis, and Detroit--were unlucky, and were caught with their hands full. And they went down. And they came back up, almost immediately. And they too began to broadcast the lethal message that they, too, were "OK" again, activating the lurking software bug in yet other switches. As more and more switches did have that bit of bad luck and collapsed, the call-traffic became more and more densely packed in the remaining switches, which were groaning to keep up with the load. And of course, as the calls became more densely packed, the switches were MUCH MORE LIKELY to be hit twice within a hundredth of a second. It only took four seconds for a switch to get well. There was no PHYSICAL damage of any kind to the switches, after all. Physically, they were working perfectly. This situation was "only" a software problem. But the 4ESS switches were leaping up and down every four to six seconds, in a virulent spreading wave all over America, in utter, manic, mechanical stupidity. They kept KNOCKING one another down with their contagious "OK" messages. It took about ten minutes for the chain reaction to cripple the network. Even then, switches would periodically luck-out and manage to resume their normal work. Many calls--millions of them--were managing to get through. But millions weren't. The switching stations that used System 6 were not directly affected. Thanks to these old-fashioned switches, AT&T's national system avoided complete collapse. This fact also made it clear to engineers that System 7 was at fault. Bell Labs engineers, working feverishly in New Jersey, Illinois, and Ohio, first tried their entire repertoire of standard network remedies on the malfunctioning System 7. None of the remedies worked, of course, because nothing like this had ever happened to any phone system before. By cutting out the backup safety network entirely, they were able to reduce the frenzy of "OK" messages by about half. The system then began to recover, as the chain reaction slowed. By 11:30 P.M. on Monday January 15, sweating engineers on the midnight shift breathed a sigh of relief as the last switch cleared-up. By Tuesday they were pulling all the brand-new 4ESS software and replacing it with an earlier version of System 7. If these had been human operators, rather than computers at work, someone would simply have eventually stopped screaming. It would have been OBVIOUS that the situation was not "OK," and common sense would have kicked in. Humans possess common sense-- at least to some extent. Computers simply don't. On the other hand, computers can handle hundreds of calls per second. Humans simply can't. If every single human being in America worked for the phone company, we couldn't match the performance of digital switches: direct-dialling, three-way calling, speed-calling, call- waiting, Caller ID, all the rest of the cornucopia of digital bounty. Replacing computers with operators is simply not an option any more. And yet we still, anachronistically, expect humans to be running our phone system. It is hard for us to understand that we have sacrificed huge amounts of initiative and control to senseless yet powerful machines. When the phones fail, we want somebody to be responsible. We want somebody to blame. When the Crash of January 15 happened, the American populace was simply not prepared to understand that enormous landslides in cyberspace, like the Crash itself, can happen, and can be nobody's fault in particular. It was easier to believe, maybe even in some odd way more reassuring to believe, that some evil person, or evil group, had done this to us. "Hackers" had done it. With a virus. A trojan horse. A software bomb. A dirty plot of some kind. People believed this, responsible people. In 1990, they were looking hard for evidence to confirm their heartfelt suspicions. And they would look in a lot of places. Come 1991, however, the outlines of an apparent new reality would begin to emerge from the fog. On July 1 and 2, 1991, computer-software collapses in telephone switching stations disrupted service in Washington DC, Pittsburgh, Los Angeles and San Francisco. Once again, seemingly minor maintenance problems had crippled the digital System 7. About twelve million people were affected in the Crash of July 1, 1991. Said the New York Times Service: "Telephone company executives and federal regulators said they were not ruling out the possibility of sabotage by computer hackers, but most seemed to think the problems stemmed from some unknown defect in the software running the networks." And sure enough, within the week, a red-faced software company, DSC Communications Corporation of Plano, Texas, owned up to "glitches" in the "signal transfer point" software that DSC had designed for Bell Atlantic and Pacific Bell. The immediate cause of the July 1 Crash was a single mistyped character: one tiny typographical flaw in one single line of the software. One mistyped letter, in one single line, had deprived the nation's capital of phone service. It was not particularly surprising that this tiny flaw had escaped attention: a typical System 7 station requires TEN MILLION lines of code. On Tuesday, September 17, 1991, came the most spectacular outage yet. This case had nothing to do with software failures--at least, not directly. Instead, a group of AT&T's switching stations in New York City had simply run out of electrical power and shut down cold. Their back-up batteries had failed. Automatic warning systems were supposed to warn of the loss of battery power, but those automatic systems had failed as well. This time, Kennedy, La Guardia, and Newark airports all had their voice and data communications cut. This horrifying event was particularly ironic, as attacks on airport computers by hackers had long been a standard nightmare scenario, much trumpeted by computer-security experts who feared the computer underground. There had even been a Hollywood thriller about sinister hackers ruining airport computers--DIE HARD II. Now AT&T itself had crippled airports with computer malfunctions-- not just one airport, but three at once, some of the busiest in the world. Air traffic came to a standstill throughout the Greater New York area, causing more than 500 flights to be cancelled, in a spreading wave all over America and even into Europe. Another 500 or so flights were delayed, affecting, all in all, about 85,000 passengers. (One of these passengers was the chairman of the Federal Communications Commission.) Stranded passengers in New York and New Jersey were further infuriated to discover that they could not even manage to make a long distance phone call, to explain their delay to loved ones or business associates. Thanks to the crash, about four and a half million domestic calls, and half a million international calls, failed to get through. The September 17 NYC Crash, unlike the previous ones, involved not a whisper of "hacker" misdeeds. On the contrary, by 1991, AT&T itself was suffering much of the vilification that had formerly been directed at hackers. Congressmen were grumbling. So were state and federal regulators. And so was the press. For their part, ancient rival MCI took out snide full-page newspaper ads in New York, offering their own long-distance services for the "next time that AT&T goes down." "You wouldn't find a classy company like AT&T using such advertising," protested AT&T Chairman Robert Allen, unconvincingly. Once again, out came the full-page AT&T apologies in newspapers, apologies for "an inexcusable culmination of both human and mechanical failure." (This time, however, AT&T offered no discount on later calls. Unkind critics suggested that AT&T were worried about setting any precedent for refunding the financial losses caused by telephone crashes.) Industry journals asked publicly if AT&T was "asleep at the switch." The telephone network, America's purported marvel of high-tech reliability, had gone down three times in 18 months. Fortune magazine listed the Crash of September 17 among the "Biggest Business Goofs of 1991," cruelly parodying AT&T's ad campaign in an article entitled "AT&T Wants You Back (Safely On the Ground, God Willing)." Why had those New York switching systems simply run out of power? Because no human being had attended to the alarm system. Why did the alarm systems blare automatically, without any human being noticing? Because the three telco technicians who SHOULD have been listening were absent from their stations in the power-room, on another floor of the building--attending a training class. A training class about the alarm systems for the power room! "Crashing the System" was no longer "unprecedented" by late 1991. On the contrary, it no longer even seemed an oddity. By 1991, it was clear that all the policemen in the world could no longer "protect" the phone system from crashes. By far the worst crashes the system had ever had, had been inflicted, by the system, upon ITSELF. And this time nobody was making cocksure statements that this was an anomaly, something that would never happen again. By 1991 the System's defenders had met their nebulous Enemy, and the Enemy was--the System. PART TWO: THE DIGITAL UNDERGROUND The date was May 9, 1990. The Pope was touring Mexico City. Hustlers from the Medellin Cartel were trying to buy black-market Stinger missiles in Florida. On the comics page, Doonesbury character Andy was dying of AIDS. And then. . .a highly unusual item whose novelty and calculated rhetoric won it headscratching attention in newspapers all over America. The US Attorney's office in Phoenix, Arizona, had issued a press release announcing a nationwide law enforcement crackdown against "illegal computer hacking activities." The sweep was officially known as "Operation Sundevil." Eight paragraphs in the press release gave the bare facts: twenty-seven search warrants carried out on May 8, with three arrests, and a hundred and fifty agents on the prowl in "twelve" cities across America. (Different counts in local press reports yielded "thirteen," "fourteen," and "sixteen" cities.) Officials estimated that criminal losses of revenue to telephone companies "may run into millions of dollars." Credit for the Sundevil investigations was taken by the US Secret Service, Assistant US Attorney Tim Holtzen of Phoenix, and the Assistant Attorney General of Arizona, Gail Thackeray. The prepared remarks of Garry M. Jenkins, appearing in a U.S. Department of Justice press release, were of particular interest. Mr. Jenkins was the Assistant Director of the US Secret Service, and the highest-ranking federal official to take any direct public role in the hacker crackdown of 1990. "Today, the Secret Service is sending a clear message to those computer hackers who have decided to violate the laws of this nation in the mistaken belief that they can successfully avoid detection by hiding behind the relative anonymity of their computer terminals. (. . .) "Underground groups have been formed for the purpose of exchanging information relevant to their criminal activities. These groups often communicate with each other through message systems between computers called `bulletin boards.' "Our experience shows that many computer hacker suspects are no longer misguided teenagers, mischievously playing games with their computers in their bedrooms. Some are now high tech computer operators using computers to engage in unlawful conduct." Who were these "underground groups" and "high-tech operators?" Where had they come from? What did they want? Who WERE they? Were they "mischievous?" Were they dangerous? How had "misguided teenagers" managed to alarm the United States Secret Service? And just how widespread was this sort of thing? Of all the major players in the Hacker Crackdown: the phone companies, law enforcement, the civil libertarians, and the "hackers" themselves-- the "hackers" are by far the most mysterious, by far the hardest to understand, by far the WEIRDEST. Not only are "hackers" novel in their activities, but they come in a variety of odd subcultures, with a variety of languages, motives and values. The earliest proto-hackers were probably those unsung mischievous telegraph boys who were summarily fired by the Bell Company in 1878. Legitimate "hackers," those computer enthusiasts who are independent-minded but law-abiding, generally trace their spiritual ancestry to elite technical universities, especially M.I.T. and Stanford, in the 1960s. But the genuine roots of the modern hacker UNDERGROUND can probably be traced most successfully to a now much-obscured hippie anarchist movement known as the Yippies. The Yippies, who took their name from the largely fictional "Youth International Party," carried out a loud and lively policy of surrealistic subversion and outrageous political mischief. Their basic tenets were flagrant sexual promiscuity, open and copious drug use, the political overthrow of any powermonger over thirty years of age, and an immediate end to the war in Vietnam, by any means necessary, including the psychic levitation of the Pentagon. The two most visible Yippies were Abbie Hoffman and Jerry Rubin. Rubin eventually became a Wall Street broker. Hoffman, ardently sought by federal authorities, went into hiding for seven years, in Mexico, France, and the United States. While on the lam, Hoffman continued to write and publish, with help from sympathizers in the American anarcho-leftist underground. Mostly, Hoffman survived through false ID and odd jobs. Eventually he underwent facial plastic surgery and adopted an entirely new identity as one "Barry Freed." After surrendering himself to authorities in 1980, Hoffman spent a year in prison on a cocaine conviction. Hoffman's worldview grew much darker as the glory days of the 1960s faded. In 1989, he purportedly committed suicide, under odd and, to some, rather suspicious circumstances. Abbie Hoffman is said to have caused the Federal Bureau of Investigation to amass the single largest investigation file ever opened on an individual American citizen. (If this is true, it is still questionable whether the FBI regarded Abbie Hoffman a serious public threat--quite possibly, his file was enormous simply because Hoffman left colorful legendry wherever he went). He was a gifted publicist, who regarded electronic media as both playground and weapon. He actively enjoyed manipulating network TV and other gullible, image-hungry media, with various weird lies, mindboggling rumors, impersonation scams, and other sinister distortions, all absolutely guaranteed to upset cops, Presidential candidates, and federal judges. Hoffman's most famous work was a book self-reflexively known as STEAL THIS BOOK, which publicized a number of methods by which young, penniless hippie agitators might live off the fat of a system supported by humorless drones. STEAL THIS BOOK, whose title urged readers to damage the very means of distribution which had put it into their hands, might be described as a spiritual ancestor of a computer virus. Hoffman, like many a later conspirator, made extensive use of pay-phones for his agitation work--in his case, generally through the use of cheap brass washers as coin-slugs. During the Vietnam War, there was a federal surtax imposed on telephone service; Hoffman and his cohorts could, and did, argue that in systematically stealing phone service they were engaging in civil disobedience: virtuously denying tax funds to an illegal and immoral war. But this thin veil of decency was soon dropped entirely. Ripping-off the System found its own justification in deep alienation and a basic outlaw contempt for conventional bourgeois values. Ingenious, vaguely politicized varieties of rip-off, which might be described as "anarchy by convenience," became very popular in Yippie circles, and because rip-off was so useful, it was to survive the Yippie movement itself. In the early 1970s, it required fairly limited expertise and ingenuity to cheat payphones, to divert "free" electricity and gas service, or to rob vending machines and parking meters for handy pocket change. It also required a conspiracy to spread this knowledge, and the gall and nerve actually to commit petty theft, but the Yippies had these qualifications in plenty. In June 1971, Abbie Hoffman and a telephone enthusiast sarcastically known as "Al Bell" began publishing a newsletter called Youth International Party Line. This newsletter was dedicated to collating and spreading Yippie rip-off techniques, especially of phones, to the joy of the freewheeling underground and the insensate rage of all straight people. As a political tactic, phone-service theft ensured that Yippie advocates would always have ready access to the long-distance telephone as a medium, despite the Yippies' chronic lack of organization, discipline, money, or even a steady home address. PARTY LINE was run out of Greenwich Village for a couple of years, then "Al Bell" more or less defected from the faltering ranks of Yippiedom, changing the newsletter's name to TAP or Technical Assistance Program. After the Vietnam War ended, the steam began leaking rapidly out of American radical dissent. But by this time, "Bell" and his dozen or so core contributors had the bit between their teeth, and had begun to derive tremendous gut-level satisfaction from the sensation of pure TECHNICAL POWER. TAP articles, once highly politicized, became pitilessly jargonized and technical, in homage or parody to the Bell System's own technical documents, which TAP studied closely, gutted, and reproduced without permission. The TAP elite revelled in gloating possession of the specialized knowledge necessary to beat the system. "Al Bell" dropped out of the game by the late 70s, and "Tom Edison" took over; TAP readers (some 1400 of them, all told) now began to show more interest in telex switches and the growing phenomenon of computer systems. In 1983, "Tom Edison" had his computer stolen and his house set on fire by an arsonist. This was an eventually mortal blow to TAP (though the legendary name was to be resurrected in 1990 by a young Kentuckian computer-outlaw named "Predat0r.") # Ever since telephones began to make money, there have been people willing to rob and defraud phone companies. The legions of petty phone thieves vastly outnumber those "phone phreaks" who "explore the system" for the sake of the intellectual challenge. The New York metropolitan area (long in the vanguard of American crime) claims over 150,000 physical attacks on pay telephones every year! Studied carefully, a modern payphone reveals itself as a little fortress, carefully designed and redesigned over generations, to resist coin-slugs, zaps of electricity, chunks of coin-shaped ice, prybars, magnets, lockpicks, blasting caps. Public pay- phones must survive in a world of unfriendly, greedy people, and a modern payphone is as exquisitely evolved as a cactus. Because the phone network pre-dates the computer network, the scofflaws known as "phone phreaks" pre-date the scofflaws known as "computer hackers." In practice, today, the line between "phreaking" and "hacking" is very blurred, just as the distinction between telephones and computers has blurred. The phone system has been digitized, and computers have learned to "talk" over phone-lines. What's worse--and this was the point of the Mr. Jenkins of the Secret Service--some hackers have learned to steal, and some thieves have learned to hack. Despite the blurring, one can still draw a few useful behavioral distinctions between "phreaks" and "hackers." Hackers are intensely interested in the "system" per se, and enjoy relating to machines. "Phreaks" are more social, manipulating the system in a rough-and-ready fashion in order to get through to other human beings, fast, cheap and under the table. Phone phreaks love nothing so much as "bridges," illegal conference calls of ten or twelve chatting conspirators, seaboard to seaboard, lasting for many hours --and running, of course, on somebody else's tab, preferably a large corporation's. As phone-phreak conferences wear on, people drop out (or simply leave the phone off the hook, while they sashay off to work or school or babysitting), and new people are phoned up and invited to join in, from some other continent, if possible. Technical trivia, boasts, brags, lies, head-trip deceptions, weird rumors, and cruel gossip are all freely exchanged. The lowest rung of phone-phreaking is the theft of telephone access codes. Charging a phone call to somebody else's stolen number is, of course, a pig-easy way of stealing phone service, requiring practically no technical expertise. This practice has been very widespread, especially among lonely people without much money who are far from home. Code theft has flourished especially in college dorms, military bases, and, notoriously, among roadies for rock bands. Of late, code theft has spread very rapidly among Third Worlders in the US, who pile up enormous unpaid long-distance bills to the Caribbean, South America, and Pakistan. The simplest way to steal phone-codes is simply to look over a victim's shoulder as he punches-in his own code-number on a public payphone. This technique is known as "shoulder-surfing," and is especially common in airports, bus terminals, and train stations. The code is then sold by the thief for a few dollars. The buyer abusing the code has no computer expertise, but calls his Mom in New York, Kingston or Caracas and runs up a huge bill with impunity. The losses from this primitive phreaking activity are far, far greater than the monetary losses caused by computer-intruding hackers. In the mid-to-late 1980s, until the introduction of sterner telco security measures, COMPUTERIZED code theft worked like a charm, and was virtually omnipresent throughout the digital underground, among phreaks and hackers alike. This was accomplished through programming one's computer to try random code numbers over the telephone until one of them worked. Simple programs to do this were widely available in the underground; a computer running all night was likely to come up with a dozen or so useful hits. This could be repeated week after week until one had a large library of stolen codes. Nowadays, the computerized dialling of hundreds of numbers can be detected within hours and swiftly traced. If a stolen code is repeatedly abused, this too can be detected within a few hours. But for years in the 1980s, the publication of stolen codes was a kind of elementary etiquette for fledgling hackers. The simplest way to establish your bona-fides as a raider was to steal a code through repeated random dialling and offer it to the "community" for use. Codes could be both stolen, and used, simply and easily from the safety of one's own bedroom, with very little fear of detection or punishment. Before computers and their phone-line modems entered American homes in gigantic numbers, phone phreaks had their own special telecommunications hardware gadget, the famous "blue box." This fraud device (now rendered increasingly useless by the digital evolution of the phone system) could trick switching systems into granting free access to long-distance lines. It did this by mimicking the system's own signal, a tone of 2600 hertz. Steven Jobs and Steve Wozniak, the founders of Apple Computer, Inc., once dabbled in selling blue-boxes in college dorms in California. For many, in the early days of phreaking, blue-boxing was scarcely perceived as "theft," but rather as a fun (if sneaky) way to use excess phone capacity harmlessly. After all, the long-distance lines were JUST SITTING THERE. . . . Whom did it hurt, really? If you're not DAMAGING the system, and you're not USING UP ANY TANGIBLE RESOURCE, and if nobody FINDS OUT what you did, then what real harm have you done? What exactly HAVE you "stolen," anyway? If a tree falls in the forest and nobody hears it, how much is the noise worth? Even now this remains a rather dicey question. Blue-boxing was no joke to the phone companies, however. Indeed, when Ramparts magazine, a radical publication in California, printed the wiring schematics necessary to create a mute box in June 1972, the magazine was seized by police and Pacific Bell phone-company officials. The mute box, a blue-box variant, allowed its user to receive long-distance calls free of charge to the caller. This device was closely described in a Ramparts article wryly titled "Regulating the Phone Company In Your Home." Publication of this article was held to be in violation of Californian State Penal Code section 502.7, which outlaws ownership of wire-fraud devices and the selling of "plans or instructions for any instrument, apparatus, or device intended to avoid telephone toll charges." Issues of Ramparts were recalled or seized on the newsstands, and the resultant loss of income helped put the magazine out of business. This was an ominous precedent for free-expression issues, but the telco's crushing of a radical-fringe magazine passed without serious challenge at the time. Even in the freewheeling California 1970s, it was widely felt that there was something sacrosanct about what the phone company knew; that the telco had a legal and moral right to protect itself by shutting off the flow of such illicit information. Most telco information was so "specialized" that it would scarcely be understood by any honest member of the public. If not published, it would not be missed. To print such material did not seem part of the legitimate role of a free press. In 1990 there would be a similar telco-inspired attack on the electronic phreak/hacking "magazine" Phrack. The Phrack legal case became a central issue in the Hacker Crackdown, and gave rise to great controversy. Phrack would also be shut down, for a time, at least, but this time both the telcos and their law-enforcement allies would pay a much larger price for their actions. The Phrack case will be examined in detail, later. Phone-phreaking as a social practice is still very much alive at this moment. Today, phone-phreaking is thriving much more vigorously than the better-known and worse-feared practice of "computer hacking." New forms of phreaking are spreading rapidly, following new vulnerabilities in sophisticated phone services. Cellular phones are especially vulnerable; their chips can be re-programmed to present a false caller ID and avoid billing. Doing so also avoids police tapping, making cellular-phone abuse a favorite among drug-dealers. "Call-sell operations" using pirate cellular phones can, and have, been run right out of the backs of cars, which move from "cell" to "cell" in the local phone system, retailing stolen long-distance service, like some kind of demented electronic version of the neighborhood ice-cream truck. Private branch-exchange phone systems in large corporations can be penetrated; phreaks dial-up a local company, enter its internal phone-system, hack it, then use the company's own PBX system to dial back out over the public network, causing the company to be stuck with the resulting long-distance bill. This technique is known as "diverting." "Diverting" can be very costly, especially because phreaks tend to travel in packs and never stop talking. Perhaps the worst by-product of this "PBX fraud" is that victim companies and telcos have sued one another over the financial responsibility for the stolen calls, thus enriching not only shabby phreaks but well-paid lawyers. "Voice-mail systems" can also be abused; phreaks can seize their own sections of these sophisticated electronic answering machines, and use them for trading codes or knowledge of illegal techniques. Voice-mail abuse does not hurt the company directly, but finding supposedly empty slots in your company's answering machine all crammed with phreaks eagerly chattering and hey-duding one another in impenetrable jargon can cause sensations of almost mystical repulsion and dread. Worse yet, phreaks have sometimes been known to react truculently to attempts to "clean up" the voice-mail system. Rather than humbly acquiescing to being thrown out of their playground, they may very well call up the company officials at work (or at home) and loudly demand free voice-mail addresses of their very own. Such bullying is taken very seriously by spooked victims. Acts of phreak revenge against straight people are rare, but voice-mail systems are especially tempting and vulnerable, and an infestation of angry phreaks in one's voice-mail system is no joke. They can erase legitimate messages; or spy on private messages; or harass users with recorded taunts and obscenities. They've even been known to seize control of voice-mail security, and lock out legitimate users, or even shut down the system entirely. Cellular phone-calls, cordless phones, and ship-to-shore telephony can all be monitored by various forms of radio; this kind of "passive monitoring" is spreading explosively today. Technically eavesdropping on other people's cordless and cellular phone-calls is the fastest-growing area in phreaking today. This practice strongly appeals to the lust for power and conveys gratifying sensations of technical superiority over the eavesdropping victim. Monitoring is rife with all manner of tempting evil mischief. Simple prurient snooping is by far the most common activity. But credit-card numbers unwarily spoken over the phone can be recorded, stolen and used. And tapping people's phone-calls (whether through active telephone taps or passive radio monitors) does lend itself conveniently to activities like blackmail, industrial espionage, and political dirty tricks. It should be repeated that telecommunications fraud, the theft of phone service, causes vastly greater monetary losses than the practice of entering into computers by stealth. Hackers are mostly young suburban American white males, and exist in their hundreds--but "phreaks" come from both sexes and from many nationalities, ages and ethnic backgrounds, and are flourishing in the thousands. # The term "hacker" has had an unfortunate history. This book, The Hacker Crackdown, has little to say about "hacking" in its finer, original sense. The term can signify the free-wheeling intellectual exploration of the highest and deepest potential of computer systems. Hacking can describe the determination to make access to computers and information as free and open as possible. Hacking can involve the heartfelt conviction that beauty can be found in computers, that the fine aesthetic in a perfect program can liberate the mind and spirit. This is "hacking" as it was defined in Steven Levy's much-praised history of the pioneer computer milieu, Hackers, published in 1984. Hackers of all kinds are absolutely soaked through with heroic anti-bureaucratic sentiment. Hackers long for recognition as a praiseworthy cultural archetype, the postmodern electronic equivalent of the cowboy and mountain man. Whether they deserve such a reputation is something for history to decide. But many hackers-- including those outlaw hackers who are computer intruders, and whose activities are defined as criminal--actually attempt to LIVE UP TO this techno-cowboy reputation. And given that electronics and telecommunications are still largely unexplored territories, there is simply NO TELLING what hackers might uncover. For some people, this freedom is the very breath of oxygen, the inventive spontaneity that makes life worth living and that flings open doors to marvellous possibility and individual empowerment. But for many people --and increasingly so--the hacker is an ominous figure, a smart-aleck sociopath ready to burst out of his basement wilderness and savage other people's lives for his own anarchical convenience. Any form of power without responsibility, without direct and formal checks and balances, is frightening to people-- and reasonably so. It should be frankly admitted that hackers ARE frightening, and that the basis of this fear is not irrational. Fear of hackers goes well beyond the fear of merely criminal activity. Subversion and manipulation of the phone system is an act with disturbing political overtones. In America, computers and telephones are potent symbols of organized authority and the technocratic business elite. But there is an element in American culture that has always strongly rebelled against these symbols; rebelled against all large industrial computers and all phone companies. A certain anarchical tinge deep in the American soul delights in causing confusion and pain to all bureaucracies, including technological ones. There is sometimes malice and vandalism in this attitude, but it is a deep and cherished part of the American national character. The outlaw, the rebel, the rugged individual, the pioneer, the sturdy Jeffersonian yeoman, the private citizen resisting interference in his pursuit of happiness--these are figures that all Americans recognize, and that many will strongly applaud and defend. Many scrupulously law-abiding citizens today do cutting-edge work with electronics--work that has already had tremendous social influence and will have much more in years to come. In all truth, these talented, hardworking, law-abiding, mature, adult people are far more disturbing to the peace and order of the current status quo than any scofflaw group of romantic teenage punk kids. These law-abiding hackers have the power, ability, and willingness to influence other people's lives quite unpredictably. They have means, motive, and opportunity to meddle drastically with the American social order. When corralled into governments, universities, or large multinational companies, and forced to follow rulebooks and wear suits and ties, they at least have some conventional halters on their freedom of action. But when loosed alone, or in small groups, and fired by imagination and the entrepreneurial spirit, they can move mountains--causing landslides that will likely crash directly into your office and living room. These people, as a class, instinctively recognize that a public, politicized attack on hackers will eventually spread to them-- that the term "hacker," once demonized, might be used to knock their hands off the levers of power and choke them out of existence. There are hackers today who fiercely and publicly resist any besmirching of the noble title of hacker. Naturally and understandably, they deeply resent the attack on their values implicit in using the word "hacker" as a synonym for computer-criminal. This book, sadly but in my opinion unavoidably, rather adds to the degradation of the term. It concerns itself mostly with "hacking" in its commonest latter-day definition, i.e., intruding into computer systems by stealth and without permission. The term "hacking" is used routinely today by almost all law enforcement officials with any professional interest in computer fraud and abuse. American police describe almost any crime committed with, by, through, or against a computer as hacking. Most importantly, "hacker" is what computer-intruders choose to call THEMSELVES. Nobody who "hacks" into systems willingly describes himself (rarely, herself) as a "computer intruder," "computer trespasser," "cracker," "wormer," "darkside hacker" or "high tech street gangster." Several other demeaning terms have been invented in the hope that the press and public will leave the original sense of the word alone. But few people actually use these terms. (I exempt the term "cyberpunk," which a few hackers and law enforcement people actually do use. The term "cyberpunk" is drawn from literary criticism and has some odd and unlikely resonances, but, like hacker, cyberpunk too has become a criminal pejorative today.) In any case, breaking into computer systems was hardly alien to the original hacker tradition. The first tottering systems of the 1960s required fairly extensive internal surgery merely to function day-by-day. Their users "invaded" the deepest, most arcane recesses of their operating software almost as a matter of routine. "Computer security" in these early, primitive systems was at best an afterthought. What security there was, was entirely physical, for it was assumed that anyone allowed near this expensive, arcane hardware would be a fully qualified professional expert. In a campus environment, though, this meant that grad students, teaching assistants, undergraduates, and eventually, all manner of dropouts and hangers-on ended up accessing and often running the works. Universities, even modern universities, are not in the business of maintaining security over information. On the contrary, universities, as institutions, pre-date the "information economy" by many centuries and are not- for-profit cultural entities, whose reason for existence (purportedly) is to discover truth, codify it through techniques of scholarship, and then teach it. Universities are meant to PASS THE TORCH OF CIVILIZATION, not just download data into student skulls, and the values of the academic community are strongly at odds with those of all would-be information empires. Teachers at all levels, from kindergarten up, have proven to be shameless and persistent software and data pirates. Universities do not merely "leak information" but vigorously broadcast free thought. This clash of values has been fraught with controversy. Many hackers of the 1960s remember their professional apprenticeship as a long guerilla war against the uptight mainframe-computer "information priesthood." These computer-hungry youngsters had to struggle hard for access to computing power, and many of them were not above certain, er, shortcuts. But, over the years, this practice freed computing from the sterile reserve of lab-coated technocrats and was largely responsible for the explosive growth of computing in general society--especially PERSONAL computing. Access to technical power acted like catnip on certain of these youngsters. Most of the basic techniques of computer intrusion: password cracking, trapdoors, backdoors, trojan horses--were invented in college environments in the 1960s, in the early days of network computing. Some off-the-cuff experience at computer intrusion was to be in the informal resume of most "hackers" and many future industry giants. Outside of the tiny cult of computer enthusiasts, few people thought much about the implications of "breaking into" computers. This sort of activity had not yet been publicized, much less criminalized. In the 1960s, definitions of "property" and "privacy" had not yet been extended to cyberspace. Computers were not yet indispensable to society. There were no vast databanks of vulnerable, proprietary information stored in computers, which might be accessed, copied without permission, erased, altered, or sabotaged. The stakes were low in the early days--but they grew every year, exponentially, as computers themselves grew. By the 1990s, commercial and political pressures had become overwhelming, and they broke the social boundaries of the hacking subculture. Hacking had become too important to be left to the hackers. Society was now forced to tackle the intangible nature of cyberspace-as-property, cyberspace as privately-owned unreal-estate. In the new, severe, responsible, high-stakes context of the "Information Society" of the 1990s, "hacking" was called into question. What did it mean to break into a computer without permission and use its computational power, or look around inside its files without hurting anything? What were computer-intruding hackers, anyway--how should society, and the law, best define their actions? Were they just BROWSERS, harmless intellectual explorers? Were they VOYEURS, snoops, invaders of privacy? Should they be sternly treated as potential AGENTS OF ESPIONAGE, or perhaps as INDUSTRIAL SPIES? Or were they best defined as TRESPASSERS, a very common teenage misdemeanor? Was hacking THEFT OF SERVICE? (After all, intruders were getting someone else's computer to carry out their orders, without permission and without paying). Was hacking FRAUD? Maybe it was best described as IMPERSONATION. The commonest mode of computer intrusion was (and is) to swipe or snoop somebody else's password, and then enter the computer in the guise of another person--who is commonly stuck with the blame and the bills. Perhaps a medical metaphor was better--hackers should be defined as "sick," as COMPUTER ADDICTS unable to control their irresponsible, compulsive behavior. But these weighty assessments meant little to the people who were actually being judged. From inside the underground world of hacking itself, all these perceptions seem quaint, wrongheaded, stupid, or meaningless. The most important self-perception of underground hackers-- from the 1960s, right through to the present day--is that they are an ELITE. The day-to-day struggle in the underground is not over sociological definitions--who cares?--but for power, knowledge, and status among one's peers. When you are a hacker, it is your own inner conviction of your elite status that enables you to break, or let us say "transcend," the rules. It is not that ALL rules go by the board. The rules habitually broken by hackers are UNIMPORTANT rules--the rules of dopey greedhead telco bureaucrats and pig-ignorant government pests. Hackers have their OWN rules, which separate behavior which is cool and elite, from behavior which is rodentlike, stupid and losing. These "rules," however, are mostly unwritten and enforced by peer pressure and tribal feeling. Like all rules that depend on the unspoken conviction that everybody else is a good old boy, these rules are ripe for abuse. The mechanisms of hacker peer- pressure, "teletrials" and ostracism, are rarely used and rarely work. Back-stabbing slander, threats, and electronic harassment are also freely employed in down-and-dirty intrahacker feuds, but this rarely forces a rival out of the scene entirely. The only real solution for the problem of an utterly losing, treacherous and rodentlike hacker is to TURN HIM IN TO THE POLICE. Unlike the Mafia or Medellin Cartel, the hacker elite cannot simply execute the bigmouths, creeps and troublemakers among their ranks, so they turn one another in with astonishing frequency. There is no tradition of silence or OMERTA in the hacker underworld. Hackers can be shy, even reclusive, but when they do talk, hackers tend to brag, boast and strut. Almost everything hackers do is INVISIBLE; if they don't brag, boast, and strut about it, then NOBODY WILL EVER KNOW. If you don't have something to brag, boast, and strut about, then nobody in the underground will recognize you and favor you with vital cooperation and respect. The way to win a solid reputation in the underground is by telling other hackers things that could only have been learned by exceptional cunning and stealth. Forbidden knowledge, therefore, is the basic currency of the digital underground, like seashells among Trobriand Islanders. Hackers hoard this knowledge, and dwell upon it obsessively, and refine it, and bargain with it, and talk and talk about it. Many hackers even suffer from a strange obsession to TEACH-- to spread the ethos and the knowledge of the digital underground. They'll do this even when it gains them no particular advantage and presents a grave personal risk. And when that risk catches up with them, they will go right on teaching and preaching--to a new audience this time, their interrogators from law enforcement. Almost every hacker arrested tells everything he knows-- all about his friends, his mentors, his disciples--legends, threats, horror stories, dire rumors, gossip, hallucinations. This is, of course, convenient for law enforcement--except when law enforcement begins to believe hacker legendry. Phone phreaks are unique among criminals in their willingness to call up law enforcement officials--in the office, at their homes-- and give them an extended piece of their mind. It is hard not to interpret this as BEGGING FOR ARREST, and in fact it is an act of incredible foolhardiness. Police are naturally nettled by these acts of chutzpah and will go well out of their way to bust these flaunting idiots. But it can also be interpreted as a product of a world-view so elitist, so closed and hermetic, that electronic police are simply not perceived as "police," but rather as ENEMY PHONE PHREAKS who should be scolded into behaving "decently." Hackers at their most grandiloquent perceive themselves as the elite pioneers of a new electronic world. Attempts to make them obey the democratically established laws of contemporary American society are seen as repression and persecution. After all, they argue, if Alexander Graham Bell had gone along with the rules of the Western Union telegraph company, there would have been no telephones. If Jobs and Wozniak had believed that IBM was the be-all and end-all, there would have been no personal computers. If Benjamin Franklin and Thomas Jefferson had tried to "work within the system" there would have been no United States. Not only do hackers privately believe this as an article of faith, but they have been known to write ardent manifestos about it. Here are some revealing excerpts from an especially vivid hacker manifesto: "The Techno-Revolution" by "Dr. Crash," which appeared in electronic form in Phrack Volume 1, Issue 6, Phile 3. "To fully explain the true motives behind hacking, we must first take a quick look into the past. In the 1960s, a group of MIT students built the first modern computer system. This wild, rebellious group of young men were the first to bear the name `hackers.' The systems that they developed were intended to be used to solve world problems and to benefit all of mankind. "As we can see, this has not been the case. The computer system has been solely in the hands of big businesses and the government. The wonderful device meant to enrich life has become a weapon which dehumanizes people. To the government and large businesses, people are no more than disk space, and the government doesn't use computers to arrange aid for the poor, but to control nuclear death weapons. The average American can only have access to a small microcomputer which is worth only a fraction of what they pay for it. The businesses keep the true state-of-the-art equipment away from the people behind a steel wall of incredibly high prices and bureaucracy. It is because of this state of affairs that hacking was born. (. . .) "Of course, the government doesn't want the monopoly of technology broken, so they have outlawed hacking and arrest anyone who is caught. (. . .) The phone company is another example of technology abused and kept from people with high prices. (. . .) "Hackers often find that their existing equipment, due to the monopoly tactics of computer companies, is inefficient for their purposes. Due to the exorbitantly high prices, it is impossible to legally purchase the necessary equipment. This need has given still another segment of the fight: Credit Carding. Carding is a way of obtaining the necessary goods without paying for them. It is again due to the companies' stupidity that Carding is so easy, and shows that the world's businesses are in the hands of those with considerably less technical know-how than we, the hackers. (. . .) "Hacking must continue. We must train newcomers to the art of hacking. (. . . .) And whatever you do, continue the fight. Whether you know it or not, if you are a hacker, you are a revolutionary. Don't worry, you're on the right side." The defense of "carding" is rare. Most hackers regard credit-card theft as "poison" to the underground, a sleazy and immoral effort that, worse yet, is hard to get away with. Nevertheless, manifestos advocating credit-card theft, the deliberate crashing of computer systems, and even acts of violent physical destruction such as vandalism and arson do exist in the underground. These boasts and threats are taken quite seriously by the police. And not every hacker is an abstract, Platonic computer-nerd. Some few are quite experienced at picking locks, robbing phone-trucks, and breaking and entering buildings. Hackers vary in their degree of hatred for authority and the violence of their rhetoric. But, at a bottom line, they are scofflaws. They don't regard the current rules of electronic behavior as respectable efforts to preserve law and order and protect public safety. They regard these laws as immoral efforts by soulless corporations to protect their profit margins and to crush dissidents. "Stupid" people, including police, businessmen, politicians, and journalists, simply have no right to judge the actions of those possessed of genius, techno-revolutionary intentions, and technical expertise. # Hackers are generally teenagers and college kids not engaged in earning a living. They often come from fairly well-to-do middle-class backgrounds, and are markedly anti-materialistic (except, that is, when it comes to computer equipment). Anyone motivated by greed for mere money (as opposed to the greed for power, knowledge and status) is swiftly written-off as a narrow- minded breadhead whose interests can only be corrupt and contemptible. Having grown up in the 1970s and 1980s, the young Bohemians of the digital underground regard straight society as awash in plutocratic corruption, where everyone from the President down is for sale and whoever has the gold makes the rules. Interestingly, there's a funhouse-mirror image of this attitude on the other side of the conflict. The police are also one of the most markedly anti-materialistic groups in American society, motivated not by mere money but by ideals of service, justice, esprit-de-corps, and, of course, their own brand of specialized knowledge and power. Remarkably, the propaganda war between cops and hackers has always involved angry allegations that the other side is trying to make a sleazy buck. Hackers consistently sneer that anti-phreak prosecutors are angling for cushy jobs as telco lawyers and that computer-crime police are aiming to cash in later as well-paid computer-security consultants in the private sector. For their part, police publicly conflate all hacking crimes with robbing payphones with crowbars. Allegations of "monetary losses" from computer intrusion are notoriously inflated. The act of illicitly copying a document from a computer is morally equated with directly robbing a company of, say, half a million dollars. The teenage computer intruder in possession of this "proprietary" document has certainly not sold it for such a sum, would likely have little idea how to sell it at all, and quite probably doesn't even understand what he has. He has not made a cent in profit from his felony but is still morally equated with a thief who has robbed the church poorbox and lit out for Brazil. Police want to believe that all hackers are thieves. It is a tortuous and almost unbearable act for the American justice system to put people in jail because they want to learn things which are forbidden for them to know. In an American context, almost any pretext for punishment is better than jailing people to protect certain restricted kinds of information. Nevertheless, POLICING INFORMATION is part and parcel of the struggle against hackers. This dilemma is well exemplified by the remarkable activities of "Emmanuel Goldstein," editor and publisher of a print magazine known as 2600: The Hacker Quarterly. Goldstein was an English major at Long Island's State University of New York in the '70s, when he became involved with the local college radio station. His growing interest in electronics caused him to drift into Yippie TAP circles and thus into the digital underground, where he became a self-described techno-rat. His magazine publishes techniques of computer intrusion and telephone "exploration" as well as gloating exposes of telco misdeeds and governmental failings. Goldstein lives quietly and very privately in a large, crumbling Victorian mansion in Setauket, New York. The seaside house is decorated with telco decals, chunks of driftwood, and the basic bric-a-brac of a hippie crash-pad. He is unmarried, mildly unkempt, and survives mostly on TV dinners and turkey-stuffing eaten straight out of the bag. Goldstein is a man of considerable charm and fluency, with a brief, disarming smile and the kind of pitiless, stubborn, thoroughly recidivist integrity that America's electronic police find genuinely alarming. Goldstein took his nom-de-plume, or "handle," from a character in Orwell's 1984, which may be taken, correctly, as a symptom of the gravity of his sociopolitical worldview. He is not himself a practicing computer intruder, though he vigorously abets these actions, especially when they are pursued against large corporations or governmental agencies. Nor is he a thief, for he loudly scorns mere theft of phone service, in favor of "exploring and manipulating the system." He is probably best described and understood as a DISSIDENT. Weirdly, Goldstein is living in modern America under conditions very similar to those of former East European intellectual dissidents. In other words, he flagrantly espouses a value-system that is deeply and irrevocably opposed to the system of those in power and the police. The values in 2600 are generally expressed in terms that are ironic, sarcastic, paradoxical, or just downright confused. But there's no mistaking their radically anti-authoritarian tenor. 2600 holds that technical power and specialized knowledge, of any kind obtainable, belong by right in the hands of those individuals brave and bold enough to discover them--by whatever means necessary. Devices, laws, or systems that forbid access, and the free spread of knowledge, are provocations that any free and self-respecting hacker should relentlessly attack. The "privacy" of governments, corporations and other soulless technocratic organizations should never be protected at the expense of the liberty and free initiative of the individual techno-rat. However, in our contemporary workaday world, both governments and corporations are very anxious indeed to police information which is secret, proprietary, restricted, confidential, copyrighted, patented, hazardous, illegal, unethical, embarrassing, or otherwise sensitive. This makes Goldstein persona non grata, and his philosophy a threat. Very little about the conditions of Goldstein's daily life would astonish, say, Vaclav Havel. (We may note in passing that President Havel once had his word-processor confiscated by the Czechoslovak police.) Goldstein lives by SAMIZDAT, acting semi-openly as a data-center for the underground, while challenging the powers-that-be to abide by their own stated rules: freedom of speech and the First Amendment. Goldstein thoroughly looks and acts the part of techno-rat, with shoulder-length ringlets and a piratical black fisherman's-cap set at a rakish angle. He often shows up like Banquo's ghost at meetings of computer professionals, where he listens quietly, half-smiling and taking thorough notes. Computer professionals generally meet publicly, and find it very difficult to rid themselves of Goldstein and his ilk without extralegal and unconstitutional actions. Sympathizers, many of them quite respectable people with responsible jobs, admire Goldstein's attitude and surreptitiously pass him information. An unknown but presumably large proportion of Goldstein's 2,000-plus readership are telco security personnel and police, who are forced to subscribe to 2600 to stay abreast of new developments in hacking. They thus find themselves PAYING THIS GUY'S RENT while grinding their teeth in anguish, a situation that would have delighted Abbie Hoffman (one of Goldstein's few idols). Goldstein is probably the best-known public representative of the hacker underground today, and certainly the best-hated. Police regard him as a Fagin, a corrupter of youth, and speak of him with untempered loathing. He is quite an accomplished gadfly. After the Martin Luther King Day Crash of 1990, Goldstein, for instance, adeptly rubbed salt into the wound in the pages of 2600. "Yeah, it was fun for the phone phreaks as we watched the network crumble," he admitted cheerfully. "But it was also an ominous sign of what's to come. . . . Some AT&T people, aided by well-meaning but ignorant media, were spreading the notion that many companies had the same software and therefore could face the same problem someday. Wrong. This was entirely an AT&T software deficiency. Of course, other companies could face entirely DIFFERENT software problems. But then, so too could AT&T." After a technical discussion of the system's failings, the Long Island techno-rat went on to offer thoughtful criticism to the gigantic multinational's hundreds of professionally qualified engineers. "What we don't know is how a major force in communications like AT&T could be so sloppy. What happened to backups? Sure, computer systems go down all the time, but people making phone calls are not the same as people logging on to computers. We must make that distinction. It's not acceptable for the phone system or any other essential service to `go down.' If we continue to trust technology without understanding it, we can look forward to many variations on this theme. "AT&T owes it to its customers to be prepared to INSTANTLY switch to another network if something strange and unpredictable starts occurring. The news here isn't so much the failure of a computer program, but the failure of AT&T's entire structure." The very idea of this. . . . this PERSON. . . . offering "advice" about "AT&T's entire structure" is more than some people can easily bear. How dare this near-criminal dictate what is or isn't "acceptable" behavior from AT&T? Especially when he's publishing, in the very same issue, detailed schematic diagrams for creating various switching-network signalling tones unavailable to the public. "See what happens when you drop a `silver box' tone or two down your local exchange or through different long distance service carriers," advises 2600 contributor "Mr. Upsetter" in "How To Build a Signal Box." "If you experiment systematically and keep good records, you will surely discover something interesting." This is, of course, the scientific method, generally regarded as a praiseworthy activity and one of the flowers of modern civilization. One can indeed learn a great deal with this sort of structured intellectual activity. Telco employees regard this mode of "exploration" as akin to flinging sticks of dynamite into their pond to see what lives on the bottom. 2600 has been published consistently since 1984. It has also run a bulletin board computer system, printed 2600 T-shirts, taken fax calls. . . . The Spring 1991 issue has an interesting announcement on page 45: "We just discovered an extra set of wires attached to our fax line and heading up the pole. (They've since been clipped.) Your faxes to us and to anyone else could be monitored." In the worldview of 2600, the tiny band of techno-rat brothers (rarely, sisters) are a beseiged vanguard of the truly free and honest. The rest of the world is a maelstrom of corporate crime and high-level governmental corruption, occasionally tempered with well-meaning ignorance. To read a few issues in a row is to enter a nightmare akin to Solzhenitsyn's, somewhat tempered by the fact that 2600 is often extremely funny. Goldstein did not become a target of the Hacker Crackdown, though he protested loudly, eloquently, and publicly about it, and it added considerably to his fame. It was not that he is not regarded as dangerous, because he is so regarded. Goldstein has had brushes with the law in the past: in 1985, a 2600 bulletin board computer was seized by the FBI, and some software on it was formally declared "a burglary tool in the form of a computer program." But Goldstein escaped direct repression in 1990, because his magazine is printed on paper, and recognized as subject to Constitutional freedom of the press protection. As was seen in the Ramparts case, this is far from an absolute guarantee. Still, as a practical matter, shutting down 2600 by court-order would create so much legal hassle that it is simply unfeasible, at least for the present. Throughout 1990, both Goldstein and his magazine were peevishly thriving. Instead, the Crackdown of 1990 would concern itself with the computerized version of forbidden data. The crackdown itself, first and foremost, was about BULLETIN BOARD SYSTEMS. Bulletin Board Systems, most often known by the ugly and un-pluralizable acronym "BBS," are the life-blood of the digital underground. Boards were also central to law enforcement's tactics and strategy in the Hacker Crackdown. A "bulletin board system" can be formally defined as a computer which serves as an information and message- passing center for users dialing-up over the phone-lines through the use of modems. A "modem," or modulator- demodulator, is a device which translates the digital impulses of computers into audible analog telephone signals, and vice versa. Modems connect computers to phones and thus to each other. Large-scale mainframe computers have been connected since the 1960s, but PERSONAL computers, run by individuals out of their homes, were first networked in the late 1970s. The "board" created by Ward Christensen and Randy Suess in February 1978, in Chicago, Illinois, is generally regarded as the first personal-computer bulletin board system worthy of the name. Boards run on many different machines, employing many different kinds of software. Early boards were crude and buggy, and their managers, known as "system operators" or "sysops," were hard-working technical experts who wrote their own software. But like most everything else in the world of electronics, boards became faster, cheaper, better-designed, and generally far more sophisticated throughout the 1980s. They also moved swiftly out of the hands of pioneers and into those of the general public. By 1985 there were something in the neighborhood of 4,000 boards in America. By 1990 it was calculated, vaguely, that there were about 30,000 boards in the US, with uncounted thousands overseas. Computer bulletin boards are unregulated enterprises. Running a board is a rough-and-ready, catch-as-catch-can proposition. Basically, anybody with a computer, modem, software and a phone-line can start a board. With second-hand equipment and public-domain free software, the price of a board might be quite small-- less than it would take to publish a magazine or even a decent pamphlet. Entrepreneurs eagerly sell bulletin-board software, and will coach nontechnical amateur sysops in its use. Boards are not "presses." They are not magazines, or libraries, or phones, or CB radios, or traditional cork bulletin boards down at the local laundry, though they have some passing resemblance to those earlier media. Boards are a new medium--they may even be a LARGE NUMBER of new media. Consider these unique characteristics: boards are cheap, yet they can have a national, even global reach. Boards can be contacted from anywhere in the global telephone network, at NO COST to the person running the board-- the caller pays the phone bill, and if the caller is local, the call is free. Boards do not involve an editorial elite addressing a mass audience. The "sysop" of a board is not an exclusive publisher or writer--he is managing an electronic salon, where individuals can address the general public, play the part of the general public, and also exchange private mail with other individuals. And the "conversation" on boards, though fluid, rapid, and highly interactive, is not spoken, but written. It is also relatively anonymous, sometimes completely so. And because boards are cheap and ubiquitous, regulations and licensing requirements would likely be practically unenforceable. It would almost be easier to "regulate," "inspect," and "license" the content of private mail--probably more so, since the mail system is operated by the federal government. Boards are run by individuals, independently, entirely at their own whim. For the sysop, the cost of operation is not the primary limiting factor. Once the investment in a computer and modem has been made, the only steady cost is the charge for maintaining a phone line (or several phone lines). The primary limits for sysops are time and energy. Boards require upkeep. New users are generally "validated"-- they must be issued individual passwords, and called at home by voice-phone, so that their identity can be verified. Obnoxious users, who exist in plenty, must be chided or purged. Proliferating messages must be deleted when they grow old, so that the capacity of the system is not overwhelmed. And software programs (if such things are kept on the board) must be examined for possible computer viruses. If there is a financial charge to use the board (increasingly common, especially in larger and fancier systems) then accounts must be kept, and users must be billed. And if the board crashes--a very common occurrence--then repairs must be made. Boards can be distinguished by the amount of effort spent in regulating them. First, we have the completely open board, whose sysop is off chugging brews and watching re-runs while his users generally degenerate over time into peevish anarchy and eventual silence. Second comes the supervised board, where the sysop breaks in every once in a while to tidy up, calm brawls, issue announcements, and rid the community of dolts and troublemakers. Third is the heavily supervised board, which sternly urges adult and responsible behavior and swiftly edits any message considered offensive, impertinent, illegal or irrelevant. And last comes the completely edited "electronic publication," which is presented to a silent audience which is not allowed to respond directly in any way. Boards can also be grouped by their degree of anonymity. There is the completely anonymous board, where everyone uses pseudonyms--"handles"--and even the sysop is unaware of the user's true identity. The sysop himself is likely pseudonymous on a board of this type. Second, and rather more common, is the board where the sysop knows (or thinks he knows) the true names and addresses of all users, but the users don't know one another's names and may not know his. Third is the board where everyone has to use real names, and roleplaying and pseudonymous posturing are forbidden. Boards can be grouped by their immediacy. "Chat-lines" are boards linking several users together over several different phone-lines simultaneously, so that people exchange messages at the very moment that they type. (Many large boards feature "chat" capabilities along with other services.) Less immediate boards, perhaps with a single phoneline, store messages serially, one at a time. And some boards are only open for business in daylight hours or on weekends, which greatly slows response. A NETWORK of boards, such as "FidoNet," can carry electronic mail from board to board, continent to continent, across huge distances-- but at a relative snail's pace, so that a message can take several days to reach its target audience and elicit a reply. Boards can be grouped by their degree of community. Some boards emphasize the exchange of private, person-to-person electronic mail. Others emphasize public postings and may even purge people who "lurk," merely reading posts but refusing to openly participate. Some boards are intimate and neighborly. Others are frosty and highly technical. Some are little more than storage dumps for software, where users "download" and "upload" programs, but interact among themselves little if at all. Boards can be grouped by their ease of access. Some boards are entirely public. Others are private and restricted only to personal friends of the sysop. Some boards divide users by status. On these boards, some users, especially beginners, strangers or children, will be restricted to general topics, and perhaps forbidden to post. Favored users, though, are granted the ability to post as they please, and to stay "on-line" as long as they like, even to the disadvantage of other people trying to call in. High-status users can be given access to hidden areas in the board, such as off-color topics, private discussions, and/or valuable software. Favored users may even become "remote sysops" with the power to take remote control of the board through their own home computers. Quite often "remote sysops" end up doing all the work and taking formal control of the enterprise, despite the fact that it's physically located in someone else's house. Sometimes several "co-sysops" share power. And boards can also be grouped by size. Massive, nationwide commercial networks, such as CompuServe, Delphi, GEnie and Prodigy, are run on mainframe computers and are generally not considered "boards," though they share many of their characteristics, such as electronic mail, discussion topics, libraries of software, and persistent and growing problems with civil-liberties issues. Some private boards have as many as thirty phone-lines and quite sophisticated hardware. And then there are tiny boards. Boards vary in popularity. Some boards are huge and crowded, where users must claw their way in against a constant busy-signal. Others are huge and empty--there are few things sadder than a formerly flourishing board where no one posts any longer, and the dead conversations of vanished users lie about gathering digital dust. Some boards are tiny and intimate, their telephone numbers intentionally kept confidential so that only a small number can log on. And some boards are UNDERGROUND. Boards can be mysterious entities. The activities of their users can be hard to differentiate from conspiracy. Sometimes they ARE conspiracies. Boards have harbored, or have been accused of harboring, all manner of fringe groups, and have abetted, or been accused of abetting, every manner of frowned-upon, sleazy, radical, and criminal activity. There are Satanist boards. Nazi boards. Pornographic boards. Pedophile boards. Drug- dealing boards. Anarchist boards. Communist boards. Gay and Lesbian boards (these exist in great profusion, many of them quite lively with well-established histories). Religious cult boards. Evangelical boards. Witchcraft boards, hippie boards, punk boards, skateboarder boards. Boards for UFO believers. There may well be boards for serial killers, airline terrorists and professional assassins. There is simply no way to tell. Boards spring up, flourish, and disappear in large numbers, in most every corner of the developed world. Even apparently innocuous public boards can, and sometimes do, harbor secret areas known only to a few. And even on the vast, public, commercial services, private mail is very private--and quite possibly criminal. Boards cover most every topic imaginable and some that are hard to imagine. They cover a vast spectrum of social activity. However, all board users do have something in common: their possession of computers and phones. Naturally, computers and phones are primary topics of conversation on almost every board. And hackers and phone phreaks, those utter devotees of computers and phones, live by boards. They swarm by boards. They are bred by boards. By the late 1980s, phone-phreak groups and hacker groups, united by boards, had proliferated fantastically. As evidence, here is a list of hacker groups compiled by the editors of Phrack on August 8, 1988. The Administration. Advanced Telecommunications, Inc. ALIAS. American Tone Travelers. Anarchy Inc. Apple Mafia. The Association. Atlantic Pirates Guild. Bad Ass Mother Fuckers. Bellcore. Bell Shock Force. Black Bag. Camorra. C&M Productions. Catholics Anonymous. Chaos Computer Club. Chief Executive Officers. Circle Of Death. Circle Of Deneb. Club X. Coalition of Hi-Tech Pirates. Coast-To-Coast. Corrupt Computing. Cult Of The Dead Cow. Custom Retaliations. Damage Inc. D&B Communications. The Danger Gang. Dec Hunters. Digital Gang. DPAK. Eastern Alliance. The Elite Hackers Guild. Elite Phreakers and Hackers Club. The Elite Society Of America. EPG. Executives Of Crime. Extasyy Elite. Fargo 4A. Farmers Of Doom. The Federation. Feds R Us. First Class. Five O. Five Star. Force Hackers. The 414s. Hack-A-Trip. Hackers Of America. High Mountain Hackers. High Society. The Hitchhikers. IBM Syndicate. The Ice Pirates. Imperial Warlords. Inner Circle. Inner Circle II. Insanity Inc. International Computer Underground Bandits. Justice League of America. Kaos Inc. Knights Of Shadow. Knights Of The Round Table. League Of Adepts. Legion Of Doom. Legion Of Hackers. Lords Of Chaos. Lunatic Labs, Unlimited. Master Hackers. MAD! The Marauders. MD/PhD. Metal Communications, Inc. MetalliBashers, Inc. MBI. Metro Communications. Midwest Pirates Guild. NASA Elite. The NATO Association. Neon Knights. Nihilist Order. Order Of The Rose. OSS. Pacific Pirates Guild. Phantom Access Associates. PHido PHreaks. The Phirm. Phlash. PhoneLine Phantoms. Phone Phreakers Of America. Phortune 500. Phreak Hack Delinquents. Phreak Hack Destroyers. Phreakers, Hackers, And Laundromat Employees Gang (PHALSE Gang). Phreaks Against Geeks. Phreaks Against Phreaks Against Geeks. Phreaks and Hackers of America. Phreaks Anonymous World Wide. Project Genesis. The Punk Mafia. The Racketeers. Red Dawn Text Files. Roscoe Gang. SABRE. Secret Circle of Pirates. Secret Service. 707 Club. Shadow Brotherhood. Sharp Inc. 65C02 Elite. Spectral Force. Star League. Stowaways. Strata-Crackers. Team Hackers '86. Team Hackers '87. TeleComputist Newsletter Staff. Tribunal Of Knowledge. Triple Entente. Turn Over And Die Syndrome (TOADS). 300 Club. 1200 Club. 2300 Club. 2600 Club. 2601 Club. 2AF. The United Soft WareZ Force. United Technical Underground. Ware Brigade. The Warelords. WASP. Contemplating this list is an impressive, almost humbling business. As a cultural artifact, the thing approaches poetry. Underground groups--subcultures--can be distinguished from independent cultures by their habit of referring constantly to the parent society. Undergrounds by their nature constantly must maintain a membrane of differentiation. Funny/distinctive clothes and hair, specialized jargon, specialized ghettoized areas in cities, different hours of rising, working, sleeping. . . . The digital underground, which specializes in information, relies very heavily on language to distinguish itself. As can be seen from this list, they make heavy use of parody and mockery. It's revealing to see who they choose to mock. First, large corporations. We have the Phortune 500, The Chief Executive Officers, Bellcore, IBM Syndicate, SABRE (a computerized reservation service maintained by airlines). The common use of "Inc." is telling-- none of these groups are actual corporations, but take clear delight in mimicking them. Second, governments and police. NASA Elite, NATO Association. "Feds R Us" and "Secret Service" are fine bits of fleering boldness. OSS--the Office of Strategic Services was the forerunner of the CIA. Third, criminals. Using stigmatizing pejoratives as a perverse badge of honor is a time-honored tactic for subcultures: punks, gangs, delinquents, mafias, pirates, bandits, racketeers. Specialized orthography, especially the use of "ph" for "f" and "z" for the plural "s," are instant recognition symbols. So is the use of the numeral "0" for the letter "O" --computer-software orthography generally features a slash through the zero, making the distinction obvious. Some terms are poetically descriptive of computer intrusion: the Stowaways, the Hitchhikers, the PhoneLine Phantoms, Coast-to-Coast. Others are simple bravado and vainglorious puffery. (Note the insistent use of the terms "elite" and "master.") Some terms are blasphemous, some obscene, others merely cryptic-- anything to puzzle, offend, confuse, and keep the straights at bay. Many hacker groups further re-encrypt their names by the use of acronyms: United Technical Underground becomes UTU, Farmers of Doom become FoD, the United SoftWareZ Force becomes, at its own insistence, "TuSwF," and woe to the ignorant rodent who capitalizes the wrong letters. It should be further recognized that the members of these groups are themselves pseudonymous. If you did, in fact, run across the "PhoneLine Phantoms," you would find them to consist of "Carrier Culprit," "The Executioner," "Black Majik," "Egyptian Lover," "Solid State," and "Mr Icom." "Carrier Culprit" will likely be referred to by his friends as "CC," as in, "I got these dialups from CC of PLP." It's quite possible that this entire list refers to as few as a thousand people. It is not a complete list of underground groups--there has never been such a list, and there never will be. Groups rise, flourish, decline, share membership, maintain a cloud of wannabes and casual hangers-on. People pass in and out, are ostracized, get bored, are busted by police, or are cornered by telco security and presented with huge bills. Many "underground groups" are software pirates, "warez d00dz," who might break copy protection and pirate programs, but likely wouldn't dare to intrude on a computer-system. It is hard to estimate the true population of the digital underground. There is constant turnover. Most hackers start young, come and go, then drop out at age 22-- the age of college graduation. And a large majority of "hackers" access pirate boards, adopt a handle, swipe software and perhaps abuse a phone-code or two, while never actually joining the elite. Some professional informants, who make it their business to retail knowledge of the underground to paymasters in private corporate security, have estimated the hacker population at as high as fifty thousand. This is likely highly inflated, unless one counts every single teenage software pirate and petty phone-booth thief. My best guess is about 5,000 people. Of these, I would guess that as few as a hundred are truly "elite" --active computer intruders, skilled enough to penetrate sophisticated systems and truly to worry corporate security and law enforcement. Another interesting speculation is whether this group is growing or not. Young teenage hackers are often convinced that hackers exist in vast swarms and will soon dominate the cybernetic universe. Older and wiser veterans, perhaps as wizened as 24 or 25 years old, are convinced that the glory days are long gone, that the cops have the underground's number now, and that kids these days are dirt-stupid and just want to play Nintendo. My own assessment is that computer intrusion, as a non-profit act of intellectual exploration and mastery, is in slow decline, at least in the United States; but that electronic fraud, especially telecommunication crime, is growing by leaps and bounds. One might find a useful parallel to the digital underground in the drug underground. There was a time, now much-obscured by historical revisionism, when Bohemians freely shared joints at concerts, and hip, small-scale marijuana dealers might turn people on just for the sake of enjoying a long stoned conversation about the Doors and Allen Ginsberg. Now drugs are increasingly verboten, except in a high-stakes, highly-criminal world of highly addictive drugs. Over years of disenchantment and police harassment, a vaguely ideological, free-wheeling drug underground has relinquished the business of drug-dealing to a far more savage criminal hard-core. This is not a pleasant prospect to contemplate, but the analogy is fairly compelling. What does an underground board look like? What distinguishes it from a standard board? It isn't necessarily the conversation-- hackers often talk about common board topics, such as hardware, software, sex, science fiction, current events, politics, movies, personal gossip. Underground boards can best be distinguished by their files, or "philes," pre-composed texts which teach the techniques and ethos of the underground. These are prized reservoirs of forbidden knowledge. Some are anonymous, but most proudly bear the handle of the "hacker" who has created them, and his group affiliation, if he has one. Here is a partial table-of-contents of philes from an underground board, somewhere in the heart of middle America, circa 1991. The descriptions are mostly self-explanatory. BANKAMER.ZIP 5406 06-11-91 Hacking Bank America CHHACK.ZIP 4481 06-11-91 Chilton Hacking CITIBANK.ZIP 4118 06-11-91 Hacking Citibank CREDIMTC.ZIP 3241 06-11-91 Hacking Mtc Credit Company DIGEST.ZIP 5159 06-11-91 Hackers Digest HACK.ZIP 14031 06-11-91 How To Hack HACKBAS.ZIP 5073 06-11-91 Basics Of Hacking HACKDICT.ZIP 42774 06-11-91 Hackers Dictionary HACKER.ZIP 57938 06-11-91 Hacker Info HACKERME.ZIP 3148 06-11-91 Hackers Manual HACKHAND.ZIP 4814 06-11-91 Hackers Handbook HACKTHES.ZIP 48290 06-11-91 Hackers Thesis HACKVMS.ZIP 4696 06-11-91 Hacking Vms Systems MCDON.ZIP 3830 06-11-91 Hacking Macdonalds (Home Of The Archs) P500UNIX.ZIP 15525 06-11-91 Phortune 500 Guide To Unix RADHACK.ZIP 8411 06-11-91 Radio Hacking TAOTRASH.DOC 4096 12-25-89 Suggestions For Trashing TECHHACK.ZIP 5063 06-11-91 Technical Hacking The files above are do-it-yourself manuals about computer intrusion. The above is only a small section of a much larger library of hacking and phreaking techniques and history. We now move into a different and perhaps surprising area. +------------+ |Anarchy| +------------+ ANARC.ZIP 3641 06-11-91 Anarchy Files ANARCHST.ZIP 63703 06-11-91 Anarchist Book ANARCHY.ZIP 2076 06-11-91 Anarchy At Home ANARCHY3.ZIP 6982 06-11-91 Anarchy No 3 ANARCTOY.ZIP 2361 06-11-91 Anarchy Toys ANTIMODM.ZIP 2877 06-11-91 Anti-modem Weapons ATOM.ZIP 4494 06-11-91 How To Make An Atom Bomb BARBITUA.ZIP 3982 06-11-91 Barbiturate Formula BLCKPWDR.ZIP 2810 06-11-91 Black Powder Formulas BOMB.ZIP 3765 06-11-91 How To Make Bombs BOOM.ZIP 2036 06-11-91 Things That Go Boom CHLORINE.ZIP 1926 06-11-91 Chlorine Bomb COOKBOOK.ZIP 1500 06-11-91 Anarchy Cook Book DESTROY.ZIP 3947 06-11-91 Destroy Stuff DUSTBOMB.ZIP 2576 06-11-91 Dust Bomb ELECTERR.ZIP 3230 06-11-91 Electronic Terror EXPLOS1.ZIP 2598 06-11-91 Explosives 1 EXPLOSIV.ZIP 18051 06-11-91 More Explosives EZSTEAL.ZIP 4521 06-11-91 Ez-stealing FLAME.ZIP 2240 06-11-91 Flame Thrower FLASHLT.ZIP 2533 06-11-91 Flashlight Bomb FMBUG.ZIP 2906 06-11-91 How To Make An Fm Bug OMEEXPL.ZIP 2139 06-11-91 Home Explosives HOW2BRK.ZIP 3332 06-11-91 How To Break In LETTER.ZIP 2990 06-11-91 Letter Bomb LOCK.ZIP 2199 06-11-91 How To Pick Locks MRSHIN.ZIP 3991 06-11-91 Briefcase Locks NAPALM.ZIP 3563 06-11-91 Napalm At Home NITRO.ZIP 3158 06-11-91 Fun With Nitro PARAMIL.ZIP 2962 06-11-91 Paramilitary Info PICKING.ZIP 3398 06-11-91 Picking Locks PIPEBOMB.ZIP 2137 06-11-91 Pipe Bomb POTASS.ZIP 3987 06-11-91 Formulas With Potassium PRANK.TXT 11074 08-03-90 More Pranks To Pull On Idiots! REVENGE.ZIP 4447 06-11-91 Revenge Tactics ROCKET.ZIP 2590 06-11-91 Rockets For Fun SMUGGLE.ZIP 3385 06-11-91 How To Smuggle HOLY COW! The damned thing is full of stuff about bombs! What are we to make of this? First, it should be acknowledged that spreading knowledge about demolitions to teenagers is a highly and deliberately antisocial act. It is not, however, illegal. Second, it should be recognized that most of these philes were in fact WRITTEN by teenagers. Most adult American males who can remember their teenage years will recognize that the notion of building a flamethrower in your garage is an incredibly neat-o idea. ACTUALLY, building a flamethrower in your garage, however, is fraught with discouraging difficulty. Stuffing gunpowder into a booby-trapped flashlight, so as to blow the arm off your high-school vice-principal, can be a thing of dark beauty to contemplate. Actually committing assault by explosives will earn you the sustained attention of the federal Bureau of Alcohol, Tobacco and Firearms. Some people, however, will actually try these plans. A determinedly murderous American teenager can probably buy or steal a handgun far more easily than he can brew fake "napalm" in the kitchen sink. Nevertheless, if temptation is spread before people, a certain number will succumb, and a small minority will actually attempt these stunts. A large minority of that small minority will either fail or, quite likely, maim themselves, since these "philes" have not been checked for accuracy, are not the product of professional experience, and are often highly fanciful. But the gloating menace of these philes is not to be entirely dismissed. Hackers may not be "serious" about bombing; if they were, we would hear far more about exploding flashlights, homemade bazookas, and gym teachers poisoned by chlorine and potassium. However, hackers are VERY serious about forbidden knowledge. They are possessed not merely by curiosity, but by a positive LUST TO KNOW. The desire to know what others don't is scarcely new. But the INTENSITY of this desire, as manifested by these young technophilic denizens of the Information Age, may in fact BE new, and may represent some basic shift in social values-- a harbinger of what the world may come to, as society lays more and more value on the possession, assimilation and retailing of INFORMATION as a basic commodity of daily life. There have always been young men with obsessive interests in these topics. Never before, however, have they been able to network so extensively and easily, and to propagandize their interests with impunity to random passers-by. High-school teachers will recognize that there's always one in a crowd, but when the one in a crowd escapes control by jumping into the phone-lines, and becomes a hundred such kids all together on a board, then trouble is brewing visibly. The urge of authority to DO SOMETHING, even something drastic, is hard to resist. And in 1990, authority did something. In fact authority did a great deal. # The process by which boards create hackers goes something like this. A youngster becomes interested in computers-- usually, computer games. He hears from friends that "bulletin boards" exist where games can be obtained for free. (Many computer games are "freeware," not copyrighted-- invented simply for the love of it and given away to the public; some of these games are quite good.) He bugs his parents for a modem, or quite often, uses his parents' modem. The world of boards suddenly opens up. Computer games can be quite expensive, real budget-breakers for a kid, but pirated games, stripped of copy protection, are cheap or free. They are also illegal, but it is very rare, almost unheard of, for a small-scale software pirate to be prosecuted. Once "cracked" of its copy protection, the program, being digital data, becomes infinitely reproducible. Even the instructions to the game, any manuals that accompany it, can be reproduced as text files, or photocopied from legitimate sets. Other users on boards can give many useful hints in game-playing tactics. And a youngster with an infinite supply of free computer games can certainly cut quite a swath among his modem-less friends. And boards are pseudonymous. No one need know that you're fourteen years old--with a little practice at subterfuge, you can talk to adults about adult things, and be accepted and taken seriously! You can even pretend to be a girl, or an old man, or anybody you can imagine. If you find this kind of deception gratifying, there is ample opportunity to hone your ability on boards. But local boards can grow stale. And almost every board maintains a list of phone-numbers to other boards, some in distant, tempting, exotic locales. Who knows what they're up to, in Oregon or Alaska or Florida or California? It's very easy to find out--just order the modem to call through its software--nothing to this, just typing on a keyboard, the same thing you would do for most any computer game. The machine reacts swiftly and in a few seconds you are talking to a bunch of interesting people on another seaboard. And yet the BILLS for this trivial action can be staggering! Just by going tippety-tap with your fingers, you may have saddled your parents with four hundred bucks in long-distance charges, and gotten chewed out but good. That hardly seems fair. How horrifying to have made friends in another state and to be deprived of their company--and their software-- just because telephone companies demand absurd amounts of money! How painful, to be restricted to boards in one's own AREA CODE-- what the heck is an "area code" anyway, and what makes it so special? A few grumbles, complaints, and innocent questions of this sort will often elicit a sympathetic reply from another board user-- someone with some stolen codes to hand. You dither a while, knowing this isn't quite right, then you make up your mind to try them anyhow--AND THEY WORK! Suddenly you're doing something even your parents can't do. Six months ago you were just some kid--now, you're the Crimson Flash of Area Code 512! You're bad--you're nationwide! Maybe you'll stop at a few abused codes. Maybe you'll decide that boards aren't all that interesting after all, that it's wrong, not worth the risk --but maybe you won't. The next step is to pick up your own repeat-dialling program-- to learn to generate your own stolen codes. (This was dead easy five years ago, much harder to get away with nowadays, but not yet impossible.) And these dialling programs are not complex or intimidating-- some are as small as twenty lines of software. Now, you too can share codes. You can trade codes to learn other techniques. If you're smart enough to catch on, and obsessive enough to want to bother, and ruthless enough to start seriously bending rules, then you'll get better, fast. You start to develop a rep. You move up to a heavier class of board--a board with a bad attitude, the kind of board that naive dopes like your classmates and your former self have never even heard of! You pick up the jargon of phreaking and hacking from the board. You read a few of those anarchy philes-- and man, you never realized you could be a real OUTLAW without ever leaving your bedroom. You still play other computer games, but now you have a new and bigger game. This one will bring you a different kind of status than destroying even eight zillion lousy space invaders. Hacking is perceived by hackers as a "game." This is not an entirely unreasonable or sociopathic perception. You can win or lose at hacking, succeed or fail, but it never feels "real." It's not simply that imaginative youngsters sometimes have a hard time telling "make-believe" from "real life." Cyberspace is NOT REAL! "Real" things are physical objects like trees and shoes and cars. Hacking takes place on a screen. Words aren't physical, numbers (even telephone numbers and credit card numbers) aren't physical. Sticks and stones may break my bones, but data will never hurt me. Computers SIMULATE reality, like computer games that simulate tank battles or dogfights or spaceships. Simulations are just make-believe, and the stuff in computers is NOT REAL. Consider this: if "hacking" is supposed to be so serious and real-life and dangerous, then how come NINE-YEAR-OLD KIDS have computers and modems? You wouldn't give a nine year old his own car, or his own rifle, or his own chainsaw--those things are "real." People underground are perfectly aware that the "game" is frowned upon by the powers that be. Word gets around about busts in the underground. Publicizing busts is one of the primary functions of pirate boards, but they also promulgate an attitude about them, and their own idiosyncratic ideas of justice. The users of underground boards won't complain if some guy is busted for crashing systems, spreading viruses, or stealing money by wire-fraud. They may shake their heads with a sneaky grin, but they won't openly defend these practices. But when a kid is charged with some theoretical amount of theft: $233,846.14, for instance, because he sneaked into a computer and copied something, and kept it in his house on a floppy disk-- this is regarded as a sign of near-insanity from prosecutors, a sign that they've drastically mistaken the immaterial game of computing for their real and boring everyday world of fatcat corporate money. It's as if big companies and their suck-up lawyers think that computing belongs to them, and they can retail it with price stickers, as if it were boxes of laundry soap! But pricing "information" is like trying to price air or price dreams. Well, anybody on a pirate board knows that computing can be, and ought to be, FREE. Pirate boards are little independent worlds in cyberspace, and they don't belong to anybody but the underground. Underground boards aren't "brought to you by Procter & Gamble." To log on to an underground board can mean to experience liberation, to enter a world where, for once, money isn't everything and adults don't have all the answers. Let's sample another vivid hacker manifesto. Here are some excerpts from "The Conscience of a Hacker," by "The Mentor," from Phrack Volume One, Issue 7, Phile 3. "I made a discovery today. I found a computer. Wait a second, this is cool. It does what I want it to. If it makes a mistake, it's because I screwed it up. Not because it doesn't like me. (. . .) "And then it happened. . .a door opened to a world. . . rushing through the phone line like heroin through an addict's veins, an electronic pulse is sent out, a refuge from day-to-day incompetencies is sought. . . a board is found. `This is it. . .this is where I belong. . .' "I know everyone here. . .even if I've never met them, never talked to them, may never hear from them again. . . I know you all. . . (. . .) "This is our world now. . .the world of the electron and the switch, the beauty of the baud. We make use of a service already existing without paying for what could be dirt-cheap if it wasn't run by profiteering gluttons, and you call us criminals. We explore. . .and you call us criminals. We seek after knowledge. . .and you call us criminals. We exist without skin color, without nationality, without religious bias. . .and you call us criminals. You build atomic bombs, you wage wars, you murder, cheat and lie to us and try to make us believe that it's for our own good, yet we're the criminals. "Yes, I am a criminal. My crime is that of curiosity. My crime is that of judging people by what they say and think, not what they look like. My crime is that of outsmarting you, something that you will never forgive me for." # There have been underground boards almost as long as there have been boards. One of the first was 8BBS, which became a stronghold of the West Coast phone-phreak elite. After going on-line in March 1980, 8BBS sponsored "Susan Thunder," and "Tuc," and, most notoriously, "the Condor." "The Condor" bore the singular distinction of becoming the most vilified American phreak and hacker ever. Angry underground associates, fed up with Condor's peevish behavior, turned him in to police, along with a heaping double-helping of outrageous hacker legendry. As a result, Condor was kept in solitary confinement for seven months, for fear that he might start World War Three by triggering missile silos from the prison payphone. (Having served his time, Condor is now walking around loose; WWIII has thus far conspicuously failed to occur.) The sysop of 8BBS was an ardent free-speech enthusiast who simply felt that ANY attempt to restrict the expression of his users was unconstitutional and immoral. Swarms of the technically curious entered 8BBS and emerged as phreaks and hackers, until, in 1982, a friendly 8BBS alumnus passed the sysop a new modem which had been purchased by credit-card fraud. Police took this opportunity to seize the entire board and remove what they considered an attractive nuisance. Plovernet was a powerful East Coast pirate board that operated in both New York and Florida. Owned and operated by teenage hacker "Quasi Moto," Plovernet attracted five hundred eager users in 1983. "Emmanuel Goldstein" was one-time co-sysop of Plovernet, along with "Lex Luthor," founder of the "Legion of Doom" group. Plovernet bore the signal honor of being the original home of the "Legion of Doom," about which the reader will be hearing a great deal, soon. "Pirate-80," or "P-80," run by a sysop known as "Scan-Man," got into the game very early in Charleston, and continued steadily for years. P-80 flourished so flagrantly that even its most hardened users became nervous, and some slanderously speculated that "Scan Man" must have ties to corporate security, a charge he vigorously denied. "414 Private" was the home board for the first GROUP to attract conspicuous trouble, the teenage "414 Gang," whose intrusions into Sloan-Kettering Cancer Center and Los Alamos military computers were to be a nine-days-wonder in 1982. At about this time, the first software piracy boards began to open up, trading cracked games for the Atari 800 and the Commodore C64. Naturally these boards were heavily frequented by teenagers. And with the 1983 release of the hacker-thriller movie War Games, the scene exploded. It seemed that every kid in America had demanded and gotten a modem for Christmas. Most of these dabbler wannabes put their modems in the attic after a few weeks, and most of the remainder minded their P's and Q's and stayed well out of hot water. But some stubborn and talented diehards had this hacker kid in War Games figured for a happening dude. They simply could not rest until they had contacted the underground-- or, failing that, created their own. In the mid-80s, underground boards sprang up like digital fungi. ShadowSpawn Elite. Sherwood Forest I, II, and III. Digital Logic Data Service in Florida, sysoped by no less a man than "Digital Logic" himself; Lex Luthor of the Legion of Doom was prominent on this board, since it was in his area code. Lex's own board, "Legion of Doom," started in 1984. The Neon Knights ran a network of Apple- hacker boards: Neon Knights North, South, East and West. Free World II was run by "Major Havoc." Lunatic Labs is still in operation as of this writing. Dr. Ripco in Chicago, an anything-goes anarchist board with an extensive and raucous history, was seized by Secret Service agents in 1990 on Sundevil day, but up again almost immediately, with new machines and scarcely diminished vigor. The St. Louis scene was not to rank with major centers of American hacking such as New York and L.A. But St. Louis did rejoice in possession of "Knight Lightning" and "Taran King," two of the foremost JOURNALISTS native to the underground. Missouri boards like Metal Shop, Metal Shop Private, Metal Shop Brewery, may not have been the heaviest boards around in terms of illicit expertise. But they became boards where hackers could exchange social gossip and try to figure out what the heck was going on nationally--and internationally. Gossip from Metal Shop was put into the form of news files, then assembled into a general electronic publication, Phrack, a portmanteau title coined from "phreak" and "hack." The Phrack editors were as obsessively curious about other hackers as hackers were about machines. Phrack, being free of charge and lively reading, began to circulate throughout the underground. As Taran King and Knight Lightning left high school for college, Phrack began to appear on mainframe machines linked to BITNET, and, through BITNET to the "Internet," that loose but extremely potent not-for-profit network where academic, governmental and corporate machines trade data through the UNIX TCP/IP protocol. (The "Internet Worm" of November 2-3,1988, created by Cornell grad student Robert Morris, was to be the largest and best-publicized computer-intrusion scandal to date. Morris claimed that his ingenious "worm" program was meant to harmlessly explore the Internet, but due to bad programming, the Worm replicated out of control and crashed some six thousand Internet computers. Smaller-scale and less ambitious Internet hacking was a standard for the underground elite.) Most any underground board not hopelessly lame and out-of-it would feature a complete run of Phrack--and, possibly, the lesser-known standards of the underground: the Legion of Doom Technical Journal, the obscene and raucous Cult of the Dead Cow files, P/HUN magazine, Pirate, the Syndicate Reports, and perhaps the highly anarcho-political Activist Times Incorporated. Possession of Phrack on one's board was prima facie evidence of a bad attitude. Phrack was seemingly everywhere, aiding, abetting, and spreading the underground ethos. And this did not escape the attention of corporate security or the police. We now come to the touchy subject of police and boards. Police, do, in fact, own boards. In 1989, there were police-sponsored boards in California, Colorado, Florida, Georgia, Idaho, Michigan, Missouri, Texas, and Virginia: boards such as "Crime Bytes," "Crimestoppers," "All Points" and "Bullet-N-Board." Police officers, as private computer enthusiasts, ran their own boards in Arizona, California, Colorado, Connecticut, Florida, Missouri, Maryland, New Mexico, North Carolina, Ohio, Tennessee and Texas. Police boards have often proved helpful in community relations. Sometimes crimes are reported on police boards. Sometimes crimes are COMMITTED on police boards. This has sometimes happened by accident, as naive hackers blunder onto police boards and blithely begin offering telephone codes. Far more often, however, it occurs through the now almost-traditional use of "sting boards." The first police sting-boards were established in 1985: "Underground Tunnel" in Austin, Texas, whose sysop Sgt. Robert Ansley called himself "Pluto"--"The Phone Company" in Phoenix, Arizona, run by Ken MacLeod of the Maricopa County Sheriff's office--and Sgt. Dan Pasquale's board in Fremont, California. Sysops posed as hackers, and swiftly garnered coteries of ardent users, who posted codes and loaded pirate software with abandon, and came to a sticky end. Sting boards, like other boards, are cheap to operate, very cheap by the standards of undercover police operations. Once accepted by the local underground, sysops will likely be invited into other pirate boards, where they can compile more dossiers. And when the sting is announced and the worst offenders arrested, the publicity is generally gratifying. The resultant paranoia in the underground--perhaps more justly described as a "deterrence effect"-- tends to quell local lawbreaking for quite a while. Obviously police do not have to beat the underbrush for hackers. On the contrary, they can go trolling for them. Those caught can be grilled. Some become useful informants. They can lead the way to pirate boards all across the country. And boards all across the country showed the sticky fingerprints of Phrack, and of that loudest and most flagrant of all underground groups, the "Legion of Doom." The term "Legion of Doom" came from comic books. The Legion of Doom, a conspiracy of costumed super- villains headed by the chrome-domed criminal ultra- mastermind Lex Luthor, gave Superman a lot of four-color graphic trouble for a number of decades. Of course, Superman, that exemplar of Truth, Justice, and the American Way, always won in the long run. This didn't matter to the hacker Doomsters-- "Legion of Doom" was not some thunderous and evil Satanic reference, it was not meant to be taken seriously. "Legion of Doom" came from funny-books and was supposed to be funny. "Legion of Doom" did have a good mouthfilling ring to it, though. It sounded really cool. Other groups, such as the "Farmers of Doom," closely allied to LoD, recognized this grandiloquent quality, and made fun of it. There was even a hacker group called "Justice League of America," named after Superman's club of true-blue crimefighting superheros. But they didn't last; the Legion did. The original Legion of Doom, hanging out on Quasi Moto's Plovernet board, were phone phreaks. They weren't much into computers. "Lex Luthor" himself (who was under eighteen when he formed the Legion) was a COSMOS expert, COSMOS being the "Central System for Mainframe Operations," a telco internal computer network. Lex would eventually become quite a dab hand at breaking into IBM mainframes, but although everyone liked Lex and admired his attitude, he was not considered a truly accomplished computer intruder. Nor was he the "mastermind" of the Legion of Doom--LoD were never big on formal leadership. As a regular on Plovernet and sysop of his "Legion of Doom BBS," Lex was the Legion's cheerleader and recruiting officer. Legion of Doom began on the ruins of an earlier phreak group, The Knights of Shadow. Later, LoD was to subsume the personnel of the hacker group "Tribunal of Knowledge." People came and went constantly in LoD; groups split up or formed offshoots. Early on, the LoD phreaks befriended a few computer-intrusion enthusiasts, who became the associated "Legion of Hackers." Then the two groups conflated into the "Legion of Doom/Hackers," or LoD/H. When the original "hacker" wing, Messrs. "Compu-Phreak" and "Phucked Agent 04," found other matters to occupy their time, the extra "/H" slowly atrophied out of the name; but by this time the phreak wing, Messrs. Lex Luthor, "Blue Archer," "Gary Seven," "Kerrang Khan," "Master of Impact," "Silver Spy," "The Marauder," and "The Videosmith," had picked up a plethora of intrusion expertise and had become a force to be reckoned with. LoD members seemed to have an instinctive understanding that the way to real power in the underground lay through covert publicity. LoD were flagrant. Not only was it one of the earliest groups, but the members took pains to widely distribute their illicit knowledge. Some LoD members, like "The Mentor," were close to evangelical about it. Legion of Doom Technical Journal began to show up on boards throughout the underground. LoD Technical Journal was named in cruel parody of the ancient and honored AT&T Technical Journal. The material in these two publications was quite similar-- much of it, adopted from public journals and discussions in the telco community. And yet, the predatory attitude of LoD made even its most innocuous data seem deeply sinister; an outrage; a clear and present danger. To see why this should be, let's consider the following (invented) paragraphs, as a kind of thought experiment. (A) "W. Fred Brown, AT&T Vice President for Advanced Technical Development, testified May 8 at a Washington hearing of the National Telecommunications and Information Administration (NTIA), regarding Bellcore's GARDEN project. GARDEN (Generalized Automatic Remote Distributed Electronic Network) is a telephone-switch programming tool that makes it possible to develop new telecom services, including hold-on-hold and customized message transfers, from any keypad terminal, within seconds. The GARDEN prototype combines centrex lines with a minicomputer using UNIX operating system software." (B) "Crimson Flash 512 of the Centrex Mobsters reports: D00dz, you wouldn't believe this GARDEN bullshit Bellcore's just come up with! Now you don't even need a lousy Commodore to reprogram a switch--just log on to GARDEN as a technician, and you can reprogram switches right off the keypad in any public phone booth! You can give yourself hold-on-hold and customized message transfers, and best of all, the thing is run off (notoriously insecure) centrex lines using--get this--standard UNIX software! Ha ha ha ha!" Message (A), couched in typical techno-bureaucratese, appears tedious and almost unreadable. (A) scarcely seems threatening or menacing. Message (B), on the other hand, is a dreadful thing, prima facie evidence of a dire conspiracy, definitely not the kind of thing you want your teenager reading. The INFORMATION, however, is identical. It is PUBLIC information, presented before the federal government in an open hearing. It is not "secret." It is not "proprietary." It is not even "confidential." On the contrary, the development of advanced software systems is a matter of great public pride to Bellcore. However, when Bellcore publicly announces a project of this kind, it expects a certain attitude from the public--something along the lines of GOSH WOW, YOU GUYS ARE GREAT, KEEP THAT UP, WHATEVER IT IS-- certainly not cruel mimickry, one-upmanship and outrageous speculations about possible security holes. Now put yourself in the place of a policeman confronted by an outraged parent, or telco official, with a copy of Version (B). This well-meaning citizen, to his horror, has discovered a local bulletin-board carrying outrageous stuff like (B), which his son is examining with a deep and unhealthy interest. If (B) were printed in a book or magazine, you, as an American law enforcement officer, would know that it would take a hell of a lot of trouble to do anything about it; but it doesn't take technical genius to recognize that if there's a computer in your area harboring stuff like (B), there's going to be trouble. In fact, if you ask around, any computer-literate cop will tell you straight out that boards with stuff like (B) are the SOURCE of trouble. And the WORST source of trouble on boards are the ringleaders inventing and spreading stuff like (B). If it weren't for these jokers, there wouldn't BE any trouble. And Legion of Doom were on boards like nobody else. Plovernet. The Legion of Doom Board. The Farmers of Doom Board. Metal Shop. OSUNY. Blottoland. Private Sector. Atlantis. Digital Logic. Hell Phrozen Over. LoD members also ran their own boards. "Silver Spy" started his own board, "Catch-22," considered one of the heaviest around. So did "Mentor," with his "Phoenix Project." When they didn't run boards themselves, they showed up on other people's boards, to brag, boast, and strut. And where they themselves didn't go, their philes went, carrying evil knowledge and an even more evil attitude. As early as 1986, the police were under the vague impression that EVERYONE in the underground was Legion of Doom. LoD was never that large--considerably smaller than either "Metal Communications" or "The Administration," for instance-- but LoD got tremendous press. Especially in Phrack, which at times read like an LoD fan magazine; and Phrack was everywhere, especially in the offices of telco security. You couldn't GET busted as a phone phreak, a hacker, or even a lousy codes kid or warez dood, without the cops asking if you were LoD. This was a difficult charge to deny, as LoD never distributed membership badges or laminated ID cards. If they had, they would likely have died out quickly, for turnover in their membership was considerable. LoD was less a high-tech street-gang than an ongoing state-of-mind. LoD was the Gang That Refused to Die. By 1990, LoD had RULED for ten years, and it seemed WEIRD to police that they were continually busting people who were only sixteen years old. All these teenage small-timers were pleading the tiresome hacker litany of "just curious, no criminal intent." Somewhere at the center of this conspiracy there had to be some serious adult masterminds, not this seemingly endless supply of myopic suburban white kids with high SATs and funny haircuts. There was no question that most any American hacker arrested would "know" LoD. They knew the handles of contributors to LoD Tech Journal, and were likely to have learned their craft through LoD boards and LoD activism. But they'd never met anyone from LoD. Even some of the rotating cadre who were actually and formally "in LoD" knew one another only by board-mail and pseudonyms. This was a highly unconventional profile for a criminal conspiracy. Computer networking, and the rapid evolution of the digital underground, made the situation very diffuse and confusing. Furthermore, a big reputation in the digital underground did not coincide with one's willingness to commit "crimes." Instead, reputation was based on cleverness and technical mastery. As a result, it often seemed that the HEAVIER the hackers were, the LESS likely they were to have committed any kind of common, easily prosecutable crime. There were some hackers who could really steal. And there were hackers who could really hack. But the two groups didn't seem to overlap much, if at all. For instance, most people in the underground looked up to "Emmanuel Goldstein" of 2600 as a hacker demigod. But Goldstein's publishing activities were entirely legal-- Goldstein just printed dodgy stuff and talked about politics, he didn't even hack. When you came right down to it, Goldstein spent half his time complaining that computer security WASN'T STRONG ENOUGH and ought to be drastically improved across the board! Truly heavy-duty hackers, those with serious technical skills who had earned the respect of the underground, never stole money or abused credit cards. Sometimes they might abuse phone-codes-- but often, they seemed to get all the free phone-time they wanted without leaving a trace of any kind. The best hackers, the most powerful and technically accomplished, were not professional fraudsters. They raided computers habitually, but wouldn't alter anything, or damage anything. They didn't even steal computer equipment--most had day-jobs messing with hardware, and could get all the cheap secondhand equipment they wanted. The hottest hackers, unlike the teenage wannabes, weren't snobs about fancy or expensive hardware. Their machines tended to be raw second-hand digital hot-rods full of custom add-ons that they'd cobbled together out of chickenwire, memory chips and spit. Some were adults, computer software writers and consultants by trade, and making quite good livings at it. Some of them ACTUALLY WORKED FOR THE PHONE COMPANY--and for those, the "hackers" actually found under the skirts of Ma Bell, there would be little mercy in 1990. It has long been an article of faith in the underground that the "best" hackers never get caught. They're far too smart, supposedly. They never get caught because they never boast, brag, or strut. These demigods may read underground boards (with a condescending smile), but they never say anything there. The "best" hackers, according to legend, are adult computer professionals, such as mainframe system administrators, who already know the ins and outs of their particular brand of security. Even the "best" hacker can't break in to just any computer at random: the knowledge of security holes is too specialized, varying widely with different software and hardware. But if people are employed to run, say, a UNIX mainframe or a VAX/VMS machine, then they tend to learn security from the inside out. Armed with this knowledge, they can look into most anybody else's UNIX or VMS without much trouble or risk, if they want to. And, according to hacker legend, of course they want to, so of course they do. They just don't make a big deal of what they've done. So nobody ever finds out. It is also an article of faith in the underground that professional telco people "phreak" like crazed weasels. OF COURSE they spy on Madonna's phone calls--I mean, WOULDN'T YOU? Of course they give themselves free long- distance--why the hell should THEY pay, they're running the whole shebang! It has, as a third matter, long been an article of faith that any hacker caught can escape serious punishment if he confesses HOW HE DID IT. Hackers seem to believe that governmental agencies and large corporations are blundering about in cyberspace like eyeless jellyfish or cave salamanders. They feel that these large but pathetically stupid organizations will proffer up genuine gratitude, and perhaps even a security post and a big salary, to the hot-shot intruder who will deign to reveal to them the supreme genius of his modus operandi. In the case of longtime LoD member "Control-C," this actually happened, more or less. Control-C had led Michigan Bell a merry chase, and when captured in 1987, he turned out to be a bright and apparently physically harmless young fanatic, fascinated by phones. There was no chance in hell that Control-C would actually repay the enormous and largely theoretical sums in long-distance service that he had accumulated from Michigan Bell. He could always be indicted for fraud or computer-intrusion, but there seemed little real point in this--he hadn't physically damaged any computer. He'd just plead guilty, and he'd likely get the usual slap-on-the-wrist, and in the meantime it would be a big hassle for Michigan Bell just to bring up the case. But if kept on the payroll, he might at least keep his fellow hackers at bay. There were uses for him. For instance, a contrite Control-C was featured on Michigan Bell internal posters, sternly warning employees to shred their trash. He'd always gotten most of his best inside info from "trashing"--raiding telco dumpsters, for useful data indiscreetly thrown away. He signed these posters, too. Control-C had become something like a Michigan Bell mascot. And in fact, Control-C DID keep other hackers at bay. Little hackers were quite scared of Control-C and his heavy-duty Legion of Doom friends. And big hackers WERE his friends and didn't want to screw up his cushy situation. No matter what one might say of LoD, they did stick together. When "Wasp," an apparently genuinely malicious New York hacker, began crashing Bellcore machines, Control-C received swift volunteer help from "the Mentor" and the Georgia LoD wing made up of "The Prophet," "Urvile," and "Leftist." Using Mentor's Phoenix Project board to coordinate, the Doomsters helped telco security to trap Wasp, by luring him into a machine with a tap and line-trace installed. Wasp lost. LoD won! And my, did they brag. Urvile, Prophet and Leftist were well-qualified for this activity, probably more so even than the quite accomplished Control-C. The Georgia boys knew all about phone switching-stations. Though relative johnny-come-latelies in the Legion of Doom, they were considered some of LoD's heaviest guys, into the hairiest systems around. They had the good fortune to live in or near Atlanta, home of the sleepy and apparently tolerant BellSouth RBOC. As RBOC security went, BellSouth were "cake." US West (of Arizona, the Rockies and the Pacific Northwest) were tough and aggressive, probably the heaviest RBOC around. Pacific Bell, California's PacBell, were sleek, high-tech, and longtime veterans of the LA phone-phreak wars. NYNEX had the misfortune to run the New York City area, and were warily prepared for most anything. Even Michigan Bell, a division of the Ameritech RBOC, at least had the elementary sense to hire their own hacker as a useful scarecrow. But BellSouth, even though their corporate P.R. proclaimed them to have "Everything You Expect From a Leader," were pathetic. When rumor about LoD's mastery of Georgia's switching network got around to BellSouth through Bellcore and telco security scuttlebutt, they at first refused to believe it. If you paid serious attention to every rumor out and about these hacker kids, you would hear all kinds of wacko saucer-nut nonsense: that the National Security Agency monitored all American phone calls, that the CIA and DEA tracked traffic on bulletin-boards with word-analysis programs, that the Condor could start World War III from a payphone. If there were hackers into BellSouth switching-stations, then how come nothing had happened? Nothing had been hurt. BellSouth's machines weren't crashing. BellSouth wasn't suffering especially badly from fraud. BellSouth's customers weren't complaining. BellSouth was headquartered in Atlanta, ambitious metropolis of the new high-tech Sunbelt; and BellSouth was upgrading its network by leaps and bounds, digitizing the works left right and center. They could hardly be considered sluggish or naive. BellSouth's technical expertise was second to none, thank you kindly. But then came the Florida business. On June 13, 1989, callers to the Palm Beach County Probation Department, in Delray Beach, Florida, found themselves involved in a remarkable discussion with a phone-sex worker named "Tina" in New York State. Somehow, ANY call to this probation office near Miami was instantly and magically transported across state lines, at no extra charge to the user, to a pornographic phone-sex hotline hundreds of miles away! This practical joke may seem utterly hilarious at first hearing, and indeed there was a good deal of chuckling about it in phone phreak circles, including the Autumn 1989 issue of 2600. But for Southern Bell (the division of the BellSouth RBOC supplying local service for Florida, Georgia, North Carolina and South Carolina), this was a smoking gun. For the first time ever, a computer intruder had broken into a BellSouth central office switching station and re-programmed it! Or so BellSouth thought in June 1989. Actually, LoD members had been frolicking harmlessly in BellSouth switches since September 1987. The stunt of June 13--call-forwarding a number through manipulation of a switching station--was child's play for hackers as accomplished as the Georgia wing of LoD. Switching calls interstate sounded like a big deal, but it took only four lines of code to accomplish this. An easy, yet more discreet, stunt, would be to call-forward another number to your own house. If you were careful and considerate, and changed the software back later, then not a soul would know. Except you. And whoever you had bragged to about it. As for BellSouth, what they didn't know wouldn't hurt them. Except now somebody had blown the whole thing wide open, and BellSouth knew. A now alerted and considerably paranoid BellSouth began searching switches right and left for signs of impropriety, in that hot summer of 1989. No fewer than forty-two BellSouth employees were put on 12-hour shifts, twenty-four hours a day, for two solid months, poring over records and monitoring computers for any sign of phony access. These forty-two overworked experts were known as BellSouth's "Intrusion Task Force." What the investigators found astounded them. Proprietary telco databases had been manipulated: phone numbers had been created out of thin air, with no users' names and no addresses. And perhaps worst of all, no charges and no records of use. The new digital ReMOB (Remote Observation) diagnostic feature had been extensively tampered with--hackers had learned to reprogram ReMOB software, so that they could listen in on any switch-routed call at their leisure! They were using telco property to SPY! The electrifying news went out throughout law enforcement in 1989. It had never really occurred to anyone at BellSouth that their prized and brand-new digital switching-stations could be RE-PROGRAMMED. People seemed utterly amazed that anyone could have the nerve. Of course these switching stations were "computers," and everybody knew hackers liked to "break into computers:" but telephone people's computers were DIFFERENT from normal people's computers. The exact reason WHY these computers were "different" was rather ill-defined. It certainly wasn't the extent of their security. The security on these BellSouth computers was lousy; the AIMSX computers, for instance, didn't even have passwords. But there was no question that BellSouth strongly FELT that their computers were very different indeed. And if there were some criminals out there who had not gotten that message, BellSouth was determined to see that message taught. After all, a 5ESS switching station was no mere bookkeeping system for some local chain of florists. Public service depended on these stations. Public SAFETY depended on these stations. And hackers, lurking in there call-forwarding or ReMobbing, could spy on anybody in the local area! They could spy on telco officials! They could spy on police stations! They could spy on local offices of the Secret Service. . . . In 1989, electronic cops and hacker-trackers began using scrambler-phones and secured lines. It only made sense. There was no telling who was into those systems. Whoever they were, they sounded scary. This was some new level of antisocial daring. Could be West German hackers, in the pay of the KGB. That too had seemed a weird and farfetched notion, until Clifford Stoll had poked and prodded a sluggish Washington law-enforcement bureaucracy into investigating a computer intrusion that turned out to be exactly that--HACKERS, IN THE PAY OF THE KGB! Stoll, the systems manager for an Internet lab in Berkeley California, had ended up on the front page of the New Nork Times, proclaimed a national hero in the first true story of international computer espionage. Stoll's counterspy efforts, which he related in a bestselling book, The Cuckoo's Egg, in 1989, had established the credibility of `hacking' as a possible threat to national security. The United States Secret Service doesn't mess around when it suspects a possible action by a foreign intelligence apparat. The Secret Service scrambler-phones and secured lines put a tremendous kink in law enforcement's ability to operate freely; to get the word out, cooperate, prevent misunderstandings. Nevertheless, 1989 scarcely seemed the time for half-measures. If the police and Secret Service themselves were not operationally secure, then how could they reasonably demand measures of security from private enterprise? At least, the inconvenience made people aware of the seriousness of the threat. If there was a final spur needed to get the police off the dime, it came in the realization that the emergency 911 system was vulnerable. The 911 system has its own specialized software, but it is run on the same digital switching systems as the rest of the telephone network. 911 is not physically different from normal telephony. But it is certainly culturally different, because this is the area of telephonic cyberspace reserved for the police and emergency services. Your average policeman may not know much about hackers or phone-phreaks. Computer people are weird; even computer COPS are rather weird; the stuff they do is hard to figure out. But a threat to the 911 system is anything but an abstract threat. If the 911 system goes, people can die. Imagine being in a car-wreck, staggering to a phone-booth, punching 911 and hearing "Tina" pick up the phone-sex line somewhere in New York! The situation's no longer comical, somehow. And was it possible? No question. Hackers had attacked 911 systems before. Phreaks can max-out 911 systems just by siccing a bunch of computer-modems on them in tandem, dialling them over and over until they clog. That's very crude and low-tech, but it's still a serious business. The time had come for action. It was time to take stern measures with the underground. It was time to start picking up the dropped threads, the loose edges, the bits of braggadocio here and there; it was time to get on the stick and start putting serious casework together. Hackers weren't "invisible." They THOUGHT they were invisible; but the truth was, they had just been tolerated too long. Under sustained police attention in the summer of '89, the digital underground began to unravel as never before. The first big break in the case came very early on: July 1989, the following month. The perpetrator of the "Tina" switch was caught, and confessed. His name was "Fry Guy," a 16-year-old in Indiana. Fry Guy had been a very wicked young man. Fry Guy had earned his handle from a stunt involving French fries. Fry Guy had filched the log-in of a local MacDonald's manager and had logged-on to the MacDonald's mainframe on the Sprint Telenet system. Posing as the manager, Fry Guy had altered MacDonald's records, and given some teenage hamburger-flipping friends of his, generous raises. He had not been caught. Emboldened by success, Fry Guy moved on to credit-card abuse. Fry Guy was quite an accomplished talker; with a gift for "social engineering." If you can do "social engineering" --fast-talk, fake-outs, impersonation, conning, scamming-- then card abuse comes easy. (Getting away with it in the long run is another question). Fry Guy had run across "Urvile" of the Legion of Doom on the ALTOS Chat board in Bonn, Germany. ALTOS Chat was a sophisticated board, accessible through globe-spanning computer networks like BITnet, Tymnet, and Telenet. ALTOS was much frequented by members of Germany's Chaos Computer Club. Two Chaos hackers who hung out on ALTOS, "Jaeger" and "Pengo," had been the central villains of Clifford Stoll's Cuckoo's Egg case: consorting in East Berlin with a spymaster from the KGB, and breaking into American computers for hire, through the Internet. When LoD members learned the story of Jaeger's depredations from Stoll's book, they were rather less than impressed, technically speaking. On LoD's own favorite board of the moment, "Black Ice," LoD members bragged that they themselves could have done all the Chaos break-ins in a week flat! Nevertheless, LoD were grudgingly impressed by the Chaos rep, the sheer hairy-eyed daring of hash-smoking anarchist hackers who had rubbed shoulders with the fearsome big-boys of international Communist espionage. LoD members sometimes traded bits of knowledge with friendly German hackers on ALTOS--phone numbers for vulnerable VAX/VMS computers in Georgia, for instance. Dutch and British phone phreaks, and the Australian clique of "Phoenix," "Nom," and "Electron," were ALTOS regulars, too. In underground circles, to hang out on ALTOS was considered the sign of an elite dude, a sophisticated hacker of the international digital jet-set. Fry Guy quickly learned how to raid information from credit-card consumer-reporting agencies. He had over a hundred stolen credit-card numbers in his notebooks, and upwards of a thousand swiped long-distance access codes. He knew how to get onto Altos, and how to talk the talk of the underground convincingly. He now wheedled knowledge of switching-station tricks from Urvile on the ALTOS system. Combining these two forms of knowledge enabled Fry Guy to bootstrap his way up to a new form of wire-fraud. First, he'd snitched credit card numbers from credit-company computers. The data he copied included names, addresses and phone numbers of the random card-holders. Then Fry Guy, impersonating a card-holder, called up Western Union and asked for a cash advance on "his" credit card. Western Union, as a security guarantee, would call the customer back, at home, to verify the transaction. But, just as he had switched the Florida probation office to "Tina" in New York, Fry Guy switched the card-holder's number to a local pay-phone. There he would lurk in wait, muddying his trail by routing and re-routing the call, through switches as far away as Canada. When the call came through, he would boldly "social-engineer," or con, the Western Union people, pretending to be the legitimate card-holder. Since he'd answered the proper phone number, the deception was not very hard. Western Union's money was then shipped to a confederate of Fry Guy's in his home town in Indiana. Fry Guy and his cohort, using LoD techniques, stole six thousand dollars from Western Union between December 1988 and July 1989. They also dabbled in ordering delivery of stolen goods through card-fraud. Fry Guy was intoxicated with success. The sixteen-year-old fantasized wildly to hacker rivals, boasting that he'd used rip-off money to hire himself a big limousine, and had driven out-of-state with a groupie from his favorite heavy-metal band, Motley Crue. Armed with knowledge, power, and a gratifying stream of free money, Fry Guy now took it upon himself to call local representatives of Indiana Bell security, to brag, boast, strut, and utter tormenting warnings that his powerful friends in the notorious Legion of Doom could crash the national telephone network. Fry Guy even named a date for the scheme: the Fourth of July, a national holiday. This egregious example of the begging-for-arrest syndrome was shortly followed by Fry Guy's arrest. After the Indiana telephone company figured out who he was, the Secret Service had DNRs--Dialed Number Recorders-- installed on his home phone lines. These devices are not taps, and can't record the substance of phone calls, but they do record the phone numbers of all calls going in and out. Tracing these numbers showed Fry Guy's long-distance code fraud, his extensive ties to pirate bulletin boards, and numerous personal calls to his LoD friends in Atlanta. By July 11, 1989, Prophet, Urvile and Leftist also had Secret Service DNR "pen registers" installed on their own lines. The Secret Service showed up in force at Fry Guy's house on July 22, 1989, to the horror of his unsuspecting parents. The raiders were led by a special agent from the Secret Service's Indianapolis office. However, the raiders were accompanied and advised by Timothy M. Foley of the Secret Service's Chicago office (a gentleman about whom we will soon be hearing a great deal). Following federal computer-crime techniques that had been standard since the early 1980s, the Secret Service searched the house thoroughly, and seized all of Fry Guy's electronic equipment and notebooks. All Fry Guy's equipment went out the door in the custody of the Secret Service, which put a swift end to his depredations. The USSS interrogated Fry Guy at length. His case was put in the charge of Deborah Daniels, the federal US Attorney for the Southern District of Indiana. Fry Guy was charged with eleven counts of computer fraud, unauthorized computer access, and wire fraud. The evidence was thorough and irrefutable. For his part, Fry Guy blamed his corruption on the Legion of Doom and offered to testify against them. Fry Guy insisted that the Legion intended to crash the phone system on a national holiday. And when AT&T crashed on Martin Luther King Day, 1990, this lent a credence to his claim that genuinely alarmed telco security and the Secret Service. Fry Guy eventually pled guilty on May 31, 1990. On September 14, he was sentenced to forty-four months' probation and four hundred hours' community service. He could have had it much worse; but it made sense to prosecutors to take it easy on this teenage minor, while zeroing in on the notorious kingpins of the Legion of Doom. But the case against LoD had nagging flaws. Despite the best effort of investigators, it was impossible to prove that the Legion had crashed the phone system on January 15, because they, in fact, hadn't done so. The investigations of 1989 did show that certain members of the Legion of Doom had achieved unprecedented power over the telco switching stations, and that they were in active conspiracy to obtain more power yet. Investigators were privately convinced that the Legion of Doom intended to do awful things with this knowledge, but mere evil intent was not enough to put them in jail. And although the Atlanta Three--Prophet, Leftist, and especially Urvile-- had taught Fry Guy plenty, they were not themselves credit-card fraudsters. The only thing they'd "stolen" was long-distance service--and since they'd done much of that through phone-switch manipulation, there was no easy way to judge how much they'd "stolen," or whether this practice was even "theft" of any easily recognizable kind. Fry Guy's theft of long-distance codes had cost the phone companies plenty. The theft of long-distance service may be a fairly theoretical "loss," but it costs genuine money and genuine time to delete all those stolen codes, and to re-issue new codes to the innocent owners of those corrupted codes. The owners of the codes themselves are victimized, and lose time and money and peace of mind in the hassle. And then there were the credit-card victims to deal with, too, and Western Union. When it came to rip-off, Fry Guy was far more of a thief than LoD. It was only when it came to actual computer expertise that Fry Guy was small potatoes. The Atlanta Legion thought most "rules" of cyberspace were for rodents and losers, but they DID have rules. THEY NEVER CRASHED ANYTHING, AND THEY NEVER TOOK MONEY. These were rough rules-of-thumb, and rather dubious principles when it comes to the ethical subtleties of cyberspace, but they enabled the Atlanta Three to operate with a relatively clear conscience (though never with peace of mind). If you didn't hack for money, if you weren't robbing people of actual funds --money in the bank, that is-- then nobody REALLY got hurt, in LoD's opinion. "Theft of service" was a bogus issue, and "intellectual property" was a bad joke. But LoD had only elitist contempt for rip-off artists, "leechers," thieves. They considered themselves clean. In their opinion, if you didn't smash-up or crash any systems --(well, not on purpose, anyhow-- accidents can happen, just ask Robert Morris) then it was very unfair to call you a "vandal" or a "cracker." When you were hanging out on-line with your "pals" in telco security, you could face them down from the higher plane of hacker morality. And you could mock the police from the supercilious heights of your hacker's quest for pure knowledge. But from the point of view of law enforcement and telco security, however, Fry Guy was not really dangerous. The Atlanta Three WERE dangerous. It wasn't the crimes they were committing, but the DANGER, the potential hazard, the sheer TECHNICAL POWER LoD had accumulated, that had made the situation untenable. Fry Guy was not LoD. He'd never laid eyes on anyone in LoD; his only contacts with them had been electronic. Core members of the Legion of Doom tended to meet physically for conventions every year or so, to get drunk, give each other the hacker high-sign, send out for pizza and ravage hotel suites. Fry Guy had never done any of this. Deborah Daniels assessed Fry Guy accurately as "an LoD wannabe." Nevertheless Fry Guy's crimes would be directly attributed to LoD in much future police propaganda. LoD would be described as "a closely knit group" involved in "numerous illegal activities" including "stealing and modifying individual credit histories," and "fraudulently obtaining money and property." Fry Guy did this, but the Atlanta Three didn't; they simply weren't into theft, but rather intrusion. This caused a strange kink in the prosecution's strategy. LoD were accused of "disseminating information about attacking computers to other computer hackers in an effort to shift the focus of law enforcement to those other hackers and away from the Legion of Doom." This last accusation (taken directly from a press release by the Chicago Computer Fraud and Abuse Task Force) sounds particularly far-fetched. One might conclude at this point that investigators would have been well-advised to go ahead and "shift their focus" from the "Legion of Doom." Maybe they SHOULD concentrate on "those other hackers"--the ones who were actually stealing money and physical objects. But the Hacker Crackdown of 1990 was not a simple policing action. It wasn't meant just to walk the beat in cyberspace--it was a CRACKDOWN, a deliberate attempt to nail the core of the operation, to send a dire and potent message that would settle the hash of the digital underground for good. By this reasoning, Fry Guy wasn't much more than the electronic equivalent of a cheap streetcorner dope dealer. As long as the masterminds of LoD were still flagrantly operating, pushing their mountains of illicit knowledge right and left, and whipping up enthusiasm for blatant lawbreaking, then there would be an INFINITE SUPPLY of Fry Guys. Because LoD were flagrant, they had left trails everywhere, to be picked up by law enforcement in New York, Indiana, Florida, Texas, Arizona, Missouri, even Australia. But 1990's war on the Legion of Doom was led out of Illinois, by the Chicago Computer Fraud and Abuse Task Force. # The Computer Fraud and Abuse Task Force, led by federal prosecutor William J. Cook, had started in 1987 and had swiftly become one of the most aggressive local "dedicated computer-crime units." Chicago was a natural home for such a group. The world's first computer bulletin-board system had been invented in Illinois. The state of Illinois had some of the nation's first and sternest computer crime laws. Illinois State Police were markedly alert to the possibilities of white-collar crime and electronic fraud. And William J. Cook in particular was a rising star in electronic crime-busting. He and his fellow federal prosecutors at the U.S. Attorney's office in Chicago had a tight relation with the Secret Service, especially go-getting Chicago-based agent Timothy Foley. While Cook and his Department of Justice colleagues plotted strategy, Foley was their man on the street. Throughout the 1980s, the federal government had given prosecutors an armory of new, untried legal tools against computer crime. Cook and his colleagues were pioneers in the use of these new statutes in the real-life cut-and-thrust of the federal courtroom. On October 2, 1986, the US Senate had passed the "Computer Fraud and Abuse Act" unanimously, but there were pitifully few convictions under this statute. Cook's group took their name from this statute, since they were determined to transform this powerful but rather theoretical Act of Congress into a real-life engine of legal destruction against computer fraudsters and scofflaws. It was not a question of merely discovering crimes, investigating them, and then trying and punishing their perpetrators. The Chicago unit, like most everyone else in the business, already KNEW who the bad guys were: the Legion of Doom and the writers and editors of Phrack. The task at hand was to find some legal means of putting these characters away. This approach might seem a bit dubious, to someone not acquainted with the gritty realities of prosecutorial work. But prosecutors don't put people in jail for crimes they have committed; they put people in jail for crimes they have committed THAT CAN BE PROVED IN COURT. Chicago federal police put Al Capone in prison for income-tax fraud. Chicago is a big town, with a rough-and-ready bare-knuckle tradition on both sides of the law. Fry Guy had broken the case wide open and alerted telco security to the scope of the problem. But Fry Guy's crimes would not put the Atlanta Three behind bars--much less the wacko underground journalists of Phrack. So on July 22, 1989, the same day that Fry Guy was raided in Indiana, the Secret Service descended upon the Atlanta Three. This was likely inevitable. By the summer of 1989, law enforcement were closing in on the Atlanta Three from at least six directions at once. First, there were the leads from Fry Guy, which had led to the DNR registers being installed on the lines of the Atlanta Three. The DNR evidence alone would have finished them off, sooner or later. But second, the Atlanta lads were already well-known to Control-C and his telco security sponsors. LoD's contacts with telco security had made them overconfident and even more boastful than usual; they felt that they had powerful friends in high places, and that they were being openly tolerated by telco security. But BellSouth's Intrusion Task Force were hot on the trail of LoD and sparing no effort or expense. The Atlanta Three had also been identified by name and listed on the extensive anti-hacker files maintained, and retailed for pay, by private security operative John Maxfield of Detroit. Maxfield, who had extensive ties to telco security and many informants in the underground, was a bete noire of the Phrack crowd, and the dislike was mutual. The Atlanta Three themselves had written articles for Phrack. This boastful act could not possibly escape telco and law enforcement attention. "Knightmare," a high-school age hacker from Arizona, was a close friend and disciple of Atlanta LoD, but he had been nabbed by the formidable Arizona Organized Crime and Racketeering Unit. Knightmare was on some of LoD's favorite boards--"Black Ice" in particular-- and was privy to their secrets. And to have Gail Thackeray, the Assistant Attorney General of Arizona, on one's trail was a dreadful peril for any hacker. And perhaps worst of all, Prophet had committed a major blunder by passing an illicitly copied BellSouth computer-file to Knight Lightning, who had published it in Phrack. This, as we will see, was an act of dire consequence for almost everyone concerned. On July 22, 1989, the Secret Service showed up at the Leftist's house, where he lived with his parents. A massive squad of some twenty officers surrounded the building: Secret Service, federal marshals, local police, possibly BellSouth telco security; it was hard to tell in the crush. Leftist's dad, at work in his basement office, first noticed a muscular stranger in plain clothes crashing through the back yard with a drawn pistol. As more strangers poured into the house, Leftist's dad naturally assumed there was an armed robbery in progress. Like most hacker parents, Leftist's mom and dad had only the vaguest notions of what their son had been up to all this time. Leftist had a day-job repairing computer hardware. His obsession with computers seemed a bit odd, but harmless enough, and likely to produce a well- paying career. The sudden, overwhelming raid left Leftist's parents traumatized. The Leftist himself had been out after work with his co-workers, surrounding a couple of pitchers of margaritas. As he came trucking on tequila-numbed feet up the pavement, toting a bag full of floppy-disks, he noticed a large number of unmarked cars parked in his driveway. All the cars sported tiny microwave antennas. The Secret Service had knocked the front door off its hinges, almost flattening his mom. Inside, Leftist was greeted by Special Agent James Cool of the US Secret Service, Atlanta office. Leftist was flabbergasted. He'd never met a Secret Service agent before. He could not imagine that he'd ever done anything worthy of federal attention. He'd always figured that if his activities became intolerable, one of his contacts in telco security would give him a private phone-call and tell him to knock it off. But now Leftist was pat-searched for weapons by grim professionals, and his bag of floppies was quickly seized. He and his parents were all shepherded into separate rooms and grilled at length as a score of officers scoured their home for anything electronic. Leftist was horrified as his treasured IBM AT personal computer with its forty-meg hard disk, and his recently purchased 80386 IBM-clone with a whopping hundred-meg hard disk, both went swiftly out the door in Secret Service custody. They also seized all his disks, all his notebooks, and a tremendous booty in dogeared telco documents that Leftist had snitched out of trash dumpsters. Leftist figured the whole thing for a big misunderstanding. He'd never been into MILITARY computers. He wasn't a SPY or a COMMUNIST. He was just a good ol' Georgia hacker, and now he just wanted all these people out of the house. But it seemed they wouldn't go until he made some kind of statement. And so, he levelled with them. And that, Leftist said later from his federal prison camp in Talladega, Alabama, was a big mistake. The Atlanta area was unique, in that it had three members of the Legion of Doom who actually occupied more or less the same physical locality. Unlike the rest of LoD, who tended to associate by phone and computer, Atlanta LoD actually WERE "tightly knit." It was no real surprise that the Secret Service agents apprehending Urvile at the computer-labs at Georgia Tech, would discover Prophet with him as well. Urvile, a 21-year-old Georgia Tech student in polymer chemistry, posed quite a puzzling case for law enforcement. Urvile--also known as "Necron 99," as well as other handles, for he tended to change his cover-alias about once a month--was both an accomplished hacker and a fanatic simulation-gamer. Simulation games are an unusual hobby; but then hackers are unusual people, and their favorite pastimes tend to be somewhat out of the ordinary. The best-known American simulation game is probably "Dungeons & Dragons," a multi-player parlor entertainment played with paper, maps, pencils, statistical tables and a variety of oddly-shaped dice. Players pretend to be heroic characters exploring a wholly-invented fantasy world. The fantasy worlds of simulation gaming are commonly pseudo-medieval, involving swords and sorcery--spell-casting wizards, knights in armor, unicorns and dragons, demons and goblins. Urvile and his fellow gamers preferred their fantasies highly technological. They made use of a game known as "G.U.R.P.S.," the "Generic Universal Role Playing System," published by a company called Steve Jackson Games (SJG). "G.U.R.P.S." served as a framework for creating a wide variety of artificial fantasy worlds. Steve Jackson Games published a smorgasboard of books, full of detailed information and gaming hints, which were used to flesh-out many different fantastic backgrounds for the basic GURPS framework. Urvile made extensive use of two SJG books called GURPS High-Tech and GURPS Special Ops. In the artificial fantasy-world of GURPS Special Ops, players entered a modern fantasy of intrigue and international espionage. On beginning the game, players started small and powerless, perhaps as minor-league CIA agents or penny-ante arms dealers. But as players persisted through a series of game sessions (game sessions generally lasted for hours, over long, elaborate campaigns that might be pursued for months on end) then they would achieve new skills, new knowledge, new power. They would acquire and hone new abilities, such as marksmanship, karate, wiretapping, or Watergate burglary. They could also win various kinds of imaginary booty, like Berettas, or martini shakers, or fast cars with ejection seats and machine-guns under the headlights. As might be imagined from the complexity of these games, Urvile's gaming notes were very detailed and extensive. Urvile was a "dungeon-master," inventing scenarios for his fellow gamers, giant simulated adventure-puzzles for his friends to unravel. Urvile's game notes covered dozens of pages with all sorts of exotic lunacy, all about ninja raids on Libya and break-ins on encrypted Red Chinese supercomputers. His notes were written on scrap-paper and kept in loose-leaf binders. The handiest scrap paper around Urvile's college digs were the many pounds of BellSouth printouts and documents that he had snitched out of telco dumpsters. His notes were written on the back of misappropriated telco property. Worse yet, the gaming notes were chaotically interspersed with Urvile's hand-scrawled records involving ACTUAL COMPUTER INTRUSIONS that he had committed. Not only was it next to impossible to tell Urvile's fantasy game-notes from cyberspace "reality," but Urvile himself barely made this distinction. It's no exaggeration to say that to Urvile it was ALL a game. Urvile was very bright, highly imaginative, and quite careless of other people's notions of propriety. His connection to "reality" was not something to which he paid a great deal of attention. Hacking was a game for Urvile. It was an amusement he was carrying out, it was something he was doing for fun. And Urvile was an obsessive young man. He could no more stop hacking than he could stop in the middle of a jigsaw puzzle, or stop in the middle of reading a Stephen Donaldson fantasy trilogy. (The name "Urvile" came from a best-selling Donaldson novel.) Urvile's airy, bulletproof attitude seriously annoyed his interrogators. First of all, he didn't consider that he'd done anything wrong. There was scarcely a shred of honest remorse in him. On the contrary, he seemed privately convinced that his police interrogators were operating in a demented fantasy-world all their own. Urvile was too polite and well-behaved to say this straight-out, but his reactions were askew and disquieting. For instance, there was the business about LoD's ability to monitor phone-calls to the police and Secret Service. Urvile agreed that this was quite possible, and posed no big problem for LoD. In fact, he and his friends had kicked the idea around on the "Black Ice" board, much as they had discussed many other nifty notions, such as building personal flame-throwers and jury-rigging fistfulls of blasting-caps. They had hundreds of dial-up numbers for government agencies that they'd gotten through scanning Atlanta phones, or had pulled from raided VAX/VMS mainframe computers. Basically, they'd never gotten around to listening in on the cops because the idea wasn't interesting enough to bother with. Besides, if they'd been monitoring Secret Service phone calls, obviously they'd never have been caught in the first place. Right? The Secret Service was less than satisfied with this rapier-like hacker logic. Then there was the issue of crashing the phone system. No problem, Urvile admitted sunnily. Atlanta LoD could have shut down phone service all over Atlanta any time they liked. EVEN THE 911 SERVICE? Nothing special about that, Urvile explained patiently. Bring the switch to its knees, with say the UNIX "makedir" bug, and 911 goes down too as a matter of course. The 911 system wasn't very interesting, frankly. It might be tremendously interesting to cops (for odd reasons of their own), but as technical challenges went, the 911 service was yawnsville. So of course the Atlanta Three could crash service. They probably could have crashed service all over BellSouth territory, if they'd worked at it for a while. But Atlanta LoD weren't crashers. Only losers and rodents were crashers. LoD were ELITE. Urvile was privately convinced that sheer technical expertise could win him free of any kind of problem. As far as he was concerned, elite status in the digital underground had placed him permanently beyond the intellectual grasp of cops and straights. Urvile had a lot to learn. Of the three LoD stalwarts, Prophet was in the most direct trouble. Prophet was a UNIX programming expert who burrowed in and out of the Internet as a matter of course. He'd started his hacking career at around age 14, meddling with a UNIX mainframe system at the University of North Carolina. Prophet himself had written the handy Legion of Doom file "UNIX Use and Security From the Ground Up." UNIX (pronounced "you-nicks") is a powerful, flexible computer operating-system, for multi-user, multi-tasking computers. In 1969, when UNIX was created in Bell Labs, such computers were exclusive to large corporations and universities, but today UNIX is run on thousands of powerful home machines. UNIX was particularly well-suited to telecommunications programming, and had become a standard in the field. Naturally, UNIX also became a standard for the elite hacker and phone phreak. Lately, Prophet had not been so active as Leftist and Urvile, but Prophet was a recidivist. In 1986, when he was eighteen, Prophet had been convicted of "unauthorized access to a computer network" in North Carolina. He'd been discovered breaking into the Southern Bell Data Network, a UNIX-based internal telco network supposedly closed to the public. He'd gotten a typical hacker sentence: six months suspended, 120 hours community service, and three years' probation. After that humiliating bust, Prophet had gotten rid of most of his tonnage of illicit phreak and hacker data, and had tried to go straight. He was, after all, still on probation. But by the autumn of 1988, the temptations of cyberspace had proved too much for young Prophet, and he was shoulder-to-shoulder with Urvile and Leftist into some of the hairiest systems around. In early September 1988, he'd broken into BellSouth's centralized automation system, AIMSX or "Advanced Information Management System." AIMSX was an internal business network for BellSouth, where telco employees stored electronic mail, databases, memos, and calendars, and did text processing. Since AIMSX did not have public dial-ups, it was considered utterly invisible to the public, and was not well-secured --it didn't even require passwords. Prophet abused an account known as "waa1," the personal account of an unsuspecting telco employee. Disguised as the owner of waa1, Prophet made about ten visits to AIMSX. Prophet did not damage or delete anything in the system. His presence in AIMSX was harmless and almost invisible. But he could not rest content with that. One particular piece of processed text on AIMSX was a telco document known as "Bell South Standard Practice 660-225-104SV Control Office Administration of Enhanced 911 Services for Special Services and Major Account Centers dated March 1988." Prophet had not been looking for this document. It was merely one among hundreds of similar documents with impenetrable titles. However, having blundered over it in the course of his illicit wanderings through AIMSX, he decided to take it with him as a trophy. It might prove very useful in some future boasting, bragging, and strutting session. So, some time in September 1988, Prophet ordered the AIMSX mainframe computer to copy this document (henceforth called simply called "the E911 Document") and to transfer this copy to his home computer. No one noticed that Prophet had done this. He had "stolen" the E911 Document in some sense, but notions of property in cyberspace can be tricky. BellSouth noticed nothing wrong, because BellSouth still had their original copy. They had not been "robbed" of the document itself. Many people were supposed to copy this document--specifically, people who worked for the nineteen BellSouth "special services and major account centers," scattered throughout the Southeastern United States. That was what it was for, why it was present on a computer network in the first place: so that it could be copied and read-- by telco employees. But now the data had been copied by someone who wasn't supposed to look at it. Prophet now had his trophy. But he further decided to store yet another copy of the E911 Document on another person's computer. This unwitting person was a computer enthusiast named Richard Andrews who lived near Joliet, Illinois. Richard Andrews was a UNIX programmer by trade, and ran a powerful UNIX board called "Jolnet," in the basement of his house. Prophet, using the handle "Robert Johnson," had obtained an account on Richard Andrews' computer. And there he stashed the E911 Document, by storing it in his own private section of Andrews' computer. Why did Prophet do this? If Prophet had eliminated the E911 Document from his own computer, and kept it hundreds of miles away, on another machine, under an alias, then he might have been fairly safe from discovery and prosecution-- although his sneaky action had certainly put the unsuspecting Richard Andrews at risk. But, like most hackers, Prophet was a pack-rat for illicit data. When it came to the crunch, he could not bear to part from his trophy. When Prophet's place in Decatur, Georgia was raided in July 1989, there was the E911 Document, a smoking gun. And there was Prophet in the hands of the Secret Service, doing his best to "explain." Our story now takes us away from the Atlanta Three and their raids of the Summer of 1989. We must leave Atlanta Three "cooperating fully" with their numerous investigators. And all three of them did cooperate, as their Sentencing Memorandum from the US District Court of the Northern Division of Georgia explained--just before all three of them were sentenced to various federal prisons in November 1990. We must now catch up on the other aspects of the war on the Legion of Doom. The war on the Legion was a war on a network--in fact, a network of three networks, which intertwined and interrelated in a complex fashion. The Legion itself, with Atlanta LoD, and their hanger-on Fry Guy, were the first network. The second network was Phrack magazine, with its editors and contributors. The third network involved the electronic circle around a hacker known as "Terminus." The war against these hacker networks was carried out by a law enforcement network. Atlanta LoD and Fry Guy were pursued by USSS agents and federal prosecutors in Atlanta, Indiana, and Chicago. "Terminus" found himself pursued by USSS and federal prosecutors from Baltimore and Chicago. And the war against Phrack was almost entirely a Chicago operation. The investigation of Terminus involved a great deal of energy, mostly from the Chicago Task Force, but it was to be the least-known and least-publicized of the Crackdown operations. Terminus, who lived in Maryland, was a UNIX programmer and consultant, fairly well-known (under his given name) in the UNIX community, as an acknowledged expert on AT&T minicomputers. Terminus idolized AT&T, especially Bellcore, and longed for public recognition as a UNIX expert; his highest ambition was to work for Bell Labs. But Terminus had odd friends and a spotted history. Terminus had once been the subject of an admiring interview in Phrack (Volume II, Issue 14, Phile 2--dated May 1987). In this article, Phrack co-editor Taran King described "Terminus" as an electronics engineer, 5'9", brown-haired, born in 1959--at 28 years old, quite mature for a hacker. Terminus had once been sysop of a phreak/hack underground board called "MetroNet," which ran on an Apple II. Later he'd replaced "MetroNet" with an underground board called "MegaNet," specializing in IBMs. In his younger days, Terminus had written one of the very first and most elegant code-scanning programs for the IBM-PC. This program had been widely distributed in the underground. Uncounted legions of PC-owning phreaks and hackers had used Terminus's scanner program to rip-off telco codes. This feat had not escaped the attention of telco security; it hardly could, since Terminus's earlier handle, "Terminal Technician," was proudly written right on the program. When he became a full-time computer professional (specializing in telecommunications programming), he adopted the handle Terminus, meant to indicate that he had "reached the final point of being a proficient hacker." He'd moved up to the UNIX-based "Netsys" board on an AT&T computer, with four phone lines and an impressive 240 megs of storage. "Netsys" carried complete issues of Phrack, and Terminus was quite friendly with its publishers, Taran King and Knight Lightning. In the early 1980s, Terminus had been a regular on Plovernet, Pirate-80, Sherwood Forest and Shadowland, all well-known pirate boards, all heavily frequented by the Legion of Doom. As it happened, Terminus was never officially "in LoD," because he'd never been given the official LoD high-sign and back-slap by Legion maven Lex Luthor. Terminus had never physically met anyone from LoD. But that scarcely mattered much-- the Atlanta Three themselves had never been officially vetted by Lex, either. As far as law enforcement was concerned, the issues were clear. Terminus was a full-time, adult computer professional with particular skills at AT&T software and hardware-- but Terminus reeked of the Legion of Doom and the underground. On February 1, 1990--half a month after the Martin Luther King Day Crash-- USSS agents Tim Foley from Chicago, and Jack Lewis from the Baltimore office, accompanied by AT&T security officer Jerry Dalton, travelled to Middle Town, Maryland. There they grilled Terminus in his home (to the stark terror of his wife and small children), and, in their customary fashion, hauled his computers out the door. The Netsys machine proved to contain a plethora of arcane UNIX software-- proprietary source code formally owned by AT&T. Software such as: UNIX System Five Release 3.2; UNIX SV Release 3.1; UUCP communications software; KORN SHELL; RFS; IWB; WWB; DWB; the C++ programming language; PMON; TOOL CHEST; QUEST; DACT, and S FIND. In the long-established piratical tradition of the underground, Terminus had been trading this illicitly-copied software with a small circle of fellow UNIX programmers. Very unwisely, he had stored seven years of his electronic mail on his Netsys machine, which documented all the friendly arrangements he had made with his various colleagues. Terminus had not crashed the AT&T phone system on January 15. He was, however, blithely running a not-for-profit AT&T software-piracy ring. This was not an activity AT&T found amusing. AT&T security officer Jerry Dalton valued this "stolen" property at over three hundred thousand dollars. AT&T's entry into the tussle of free enterprise had been complicated by the new, vague groundrules of the information economy. Until the break-up of Ma Bell, AT&T was forbidden to sell computer hardware or software. Ma Bell was the phone company; Ma Bell was not allowed to use the enormous revenue from telephone utilities, in order to finance any entry into the computer market. AT&T nevertheless invented the UNIX operating system. And somehow AT&T managed to make UNIX a minor source of income. Weirdly, UNIX was not sold as computer software, but actually retailed under an obscure regulatory exemption allowing sales of surplus equipment and scrap. Any bolder attempt to promote or retail UNIX would have aroused angry legal opposition from computer companies. Instead, UNIX was licensed to universities, at modest rates, where the acids of academic freedom ate away steadily at AT&T's proprietary rights. Come the breakup, AT&T recognized that UNIX was a potential gold-mine. By now, large chunks of UNIX code had been created that were not AT&T's, and were being sold by others. An entire rival UNIX-based operating system had arisen in Berkeley, California (one of the world's great founts of ideological hackerdom). Today, "hackers" commonly consider "Berkeley UNIX" to be technically superior to AT&T's "System V UNIX," but AT&T has not allowed mere technical elegance to intrude on the real-world business of marketing proprietary software. AT&T has made its own code deliberately incompatible with other folks' UNIX, and has written code that it can prove is copyrightable, even if that code happens to be somewhat awkward--"kludgey." AT&T UNIX user licenses are serious business agreements, replete with very clear copyright statements and non-disclosure clauses. AT&T has not exactly kept the UNIX cat in the bag, but it kept a grip on its scruff with some success. By the rampant, explosive standards of software piracy, AT&T UNIX source code is heavily copyrighted, well-guarded, well-licensed. UNIX was traditionally run only on mainframe machines, owned by large groups of suit-and-tie professionals, rather than on bedroom machines where people can get up to easy mischief. And AT&T UNIX source code is serious high-level programming. The number of skilled UNIX programmers with any actual motive to swipe UNIX source code is small. It's tiny, compared to the tens of thousands prepared to rip-off, say, entertaining PC games like "Leisure Suit Larry." But by 1989, the warez-d00d underground, in the persons of Terminus and his friends, was gnawing at AT&T UNIX. And the property in question was not sold for twenty bucks over the counter at the local branch of Babbage's or Egghead's; this was massive, sophisticated, multi-line, multi-author corporate code worth tens of thousands of dollars. It must be recognized at this point that Terminus's purported ring of UNIX software pirates had not actually made any money from their suspected crimes. The $300,000 dollar figure bandied about for the contents of Terminus's computer did not mean that Terminus was in actual illicit possession of three hundred thousand of AT&T's dollars. Terminus was shipping software back and forth, privately, person to person, for free. He was not making a commercial business of piracy. He hadn't asked for money; he didn't take money. He lived quite modestly. AT&T employees--as well as freelance UNIX consultants, like Terminus-- commonly worked with "proprietary" AT&T software, both in the office and at home on their private machines. AT&T rarely sent security officers out to comb the hard disks of its consultants. Cheap freelance UNIX contractors were quite useful to AT&T; they didn't have health insurance or retirement programs, much less union membership in the Communication Workers of America. They were humble digital drudges, wandering with mop and bucket through the Great Technological Temple of AT&T; but when the Secret Service arrived at their homes, it seemed they were eating with company silverware and sleeping on company sheets! Outrageously, they behaved as if the things they worked with every day belonged to them! And these were no mere hacker teenagers with their hands full of trash-paper and their noses pressed to the corporate windowpane. These guys were UNIX wizards, not only carrying AT&T data in their machines and their heads, but eagerly networking about it, over machines that were far more powerful than anything previously imagined in private hands. How do you keep people disposable, yet assure their awestruck respect for your property? It was a dilemma. Much UNIX code was public-domain, available for free. Much "proprietary" UNIX code had been extensively re-written, perhaps altered so much that it became an entirely new product--or perhaps not. Intellectual property rights for software developers were, and are, extraordinarily complex and confused. And software "piracy," like the private copying of videos, is one of the most widely practiced "crimes" in the world today. The USSS were not experts in UNIX or familiar with the customs of its use. The United States Secret Service, considered as a body, did not have one single person in it who could program in a UNIX environment--no, not even one. The Secret Service WERE making extensive use of expert help, but the "experts" they had chosen were AT&T and Bellcore security officials, the very victims of the purported crimes under investigation, the very people whose interest in AT&T's "proprietary" software was most pronounced. On February 6, 1990, Terminus was arrested by Agent Lewis. Eventually, Terminus would be sent to prison for his illicit use of a piece of AT&T software. The issue of pirated AT&T software would bubble along in the background during the war on the Legion of Doom. Some half-dozen of Terminus's on-line acquaintances, including people in Illinois, Texas and California, were grilled by the Secret Service in connection with the illicit copying of software. Except for Terminus, however, none were charged with a crime. None of them shared his peculiar prominence in the hacker underground. But that did not mean that these people would, or could, stay out of trouble. The transferral of illicit data in cyberspace is hazy and ill-defined business, with paradoxical dangers for everyone concerned: hackers, signal carriers, board owners, cops, prosecutors, even random passers-by. Sometimes, well-meant attempts to avert trouble or punish wrongdoing bring more trouble than would simple ignorance, indifference or impropriety. Terminus's "Netsys" board was not a common-or-garden bulletin board system, though it had most of the usual functions of a board. Netsys was not a stand-alone machine, but part of the globe-spanning "UUCP" cooperative network. The UUCP network uses a set of Unix software programs called "Unix-to-Unix Copy," which allows Unix systems to throw data to one another at high speed through the public telephone network. UUCP is a radically decentralized, not-for-profit network of UNIX computers. There are tens of thousands of these UNIX machines. Some are small, but many are powerful and also link to other networks. UUCP has certain arcane links to major networks such as JANET, EasyNet, BITNET, JUNET, VNET, DASnet, PeaceNet and FidoNet, as well as the gigantic Internet. (The so-called "Internet" is not actually a network itself, but rather an "internetwork" connections standard that allows several globe-spanning computer networks to communicate with one another. Readers fascinated by the weird and intricate tangles of modern computer networks may enjoy John S. Quarterman's authoritative 719-page explication, The Matrix, Digital Press, 1990.) A skilled user of Terminus' UNIX machine could send and receive electronic mail from almost any major computer network in the world. Netsys was not called a "board" per se, but rather a "node." "Nodes" were larger, faster, and more sophisticated than mere "boards," and for hackers, to hang out on internationally-connected "nodes" was quite the step up from merely hanging out on local "boards." Terminus's Netsys node in Maryland had a number of direct links to other, similar UUCP nodes, run by people who shared his interests and at least something of his free-wheeling attitude. One of these nodes was Jolnet, owned by Richard Andrews, who, like Terminus, was an independent UNIX consultant. Jolnet also ran UNIX, and could be contacted at high speed by mainframe machines from all over the world. Jolnet was quite a sophisticated piece of work, technically speaking, but it was still run by an individual, as a private, not-for-profit hobby. Jolnet was mostly used by other UNIX programmers--for mail, storage, and access to networks. Jolnet supplied access network access to about two hundred people, as well as a local junior college. Among its various features and services, Jolnet also carried Phrack magazine. For reasons of his own, Richard Andrews had become suspicious of a new user called "Robert Johnson." Richard Andrews took it upon himself to have a look at what "Robert Johnson" was storing in Jolnet. And Andrews found the E911 Document. "Robert Johnson" was the Prophet from the Legion of Doom, and the E911 Document was illicitly copied data from Prophet's raid on the BellSouth computers. The E911 Document, a particularly illicit piece of digital property, was about to resume its long, complex, and disastrous career. It struck Andrews as fishy that someone not a telephone employee should have a document referring to the "Enhanced 911 System." Besides, the document itself bore an obvious warning. "WARNING: NOT FOR USE OR DISCLOSURE OUTSIDE BELLSOUTH OR ANY OF ITS SUBSIDIARIES EXCEPT UNDER WRITTEN AGREEMENT." These standard nondisclosure tags are often appended to all sorts of corporate material. Telcos as a species are particularly notorious for stamping most everything in sight as "not for use or disclosure." Still, this particular piece of data was about the 911 System. That sounded bad to Rich Andrews. Andrews was not prepared to ignore this sort of trouble. He thought it would be wise to pass the document along to a friend and acquaintance on the UNIX network, for consultation. So, around September 1988, Andrews sent yet another copy of the E911 Document electronically to an AT&T employee, one Charles Boykin, who ran a UNIX-based node called "attctc" in Dallas, Texas. "Attctc" was the property of AT&T, and was run from AT&T's Customer Technology Center in Dallas, hence the name "attctc." "Attctc" was better-known as "Killer," the name of the machine that the system was running on. "Killer" was a hefty, powerful, AT&T 3B2 500 model, a multi-user, multi-tasking UNIX platform with 32 meg of memory and a mind-boggling 3.2 Gigabytes of storage. When Killer had first arrived in Texas, in 1985, the 3B2 had been one of AT&T's great white hopes for going head-to-head with IBM for the corporate computer-hardware market. "Killer" had been shipped to the Customer Technology Center in the Dallas Infomart, essentially a high-technology mall, and there it sat, a demonstration model. Charles Boykin, a veteran AT&T hardware and digital communications expert, was a local technical backup man for the AT&T 3B2 system. As a display model in the Infomart mall, "Killer" had little to do, and it seemed a shame to waste the system's capacity. So Boykin ingeniously wrote some UNIX bulletin-board software for "Killer," and plugged the machine in to the local phone network. "Killer's" debut in late 1985 made it the first publicly available UNIX site in the state of Texas. Anyone who wanted to play was welcome. The machine immediately attracted an electronic community. It joined the UUCP network, and offered network links to over eighty other computer sites, all of which became dependent on Killer for their links to the greater world of cyberspace. And it wasn't just for the big guys; personal computer users also stored freeware programs for the Amiga, the Apple, the IBM and the Macintosh on Killer's vast 3,200 meg archives. At one time, Killer had the largest library of public-domain Macintosh software in Texas. Eventually, Killer attracted about 1,500 users, all busily communicating, uploading and downloading, getting mail, gossipping, and linking to arcane and distant networks. Boykin received no pay for running Killer. He considered it good publicity for the AT&T 3B2 system (whose sales were somewhat less than stellar), but he also simply enjoyed the vibrant community his skill had created. He gave away the bulletin-board UNIX software he had written, free of charge. In the UNIX programming community, Charlie Boykin had the reputation of a warm, open-hearted, level-headed kind of guy. In 1989, a group of Texan UNIX professionals voted Boykin "System Administrator of the Year." He was considered a fellow you could trust for good advice. In September 1988, without warning, the E911 Document came plunging into Boykin's life, forwarded by Richard Andrews. Boykin immediately recognized that the Document was hot property. He was not a voice-communications man, and knew little about the ins and outs of the Baby Bells, but he certainly knew what the 911 System was, and he was angry to see confidential data about it in the hands of a nogoodnik. This was clearly a matter for telco security. So, on September 21, 1988, Boykin made yet ANOTHER copy of the E911 Document and passed this one along to a professional acquaintance of his, one Jerome Dalton, from AT&T Corporate Information Security. Jerry Dalton was the very fellow who would later raid Terminus's house. From AT&T's security division, the E911 Document went to Bellcore. Bellcore (or BELL COmmunications REsearch) had once been the central laboratory of the Bell System. Bell Labs employees had invented the UNIX operating system. Now Bellcore was a quasi-independent, jointly owned company that acted as the research arm for all seven of the Baby Bell RBOCs. Bellcore was in a good position to co-ordinate security technology and consultation for the RBOCs, and the gentleman in charge of this effort was Henry M. Kluepfel, a veteran of the Bell System who had worked there for twenty-four years. On October 13, 1988, Dalton passed the E911 Document to Henry Kluepfel. Kluepfel, a veteran expert witness in telecommunications fraud and computer-fraud cases, had certainly seen worse trouble than this. He recognized the document for what it was: a trophy from a hacker break-in. However, whatever harm had been done in the intrusion was presumably old news. At this point there seemed little to be done. Kluepfel made a careful note of the circumstances and shelved the problem for the time being. Whole months passed. February 1989 arrived. The Atlanta Three were living it up in Bell South's switches, and had not yet met their comeuppance. The Legion was thriving. So was Phrack magazine. A good six months had passed since Prophet's AIMSX break-in. Prophet, as hackers will, grew weary of sitting on his laurels. "Knight Lightning" and "Taran King," the editors of Phrack, were always begging Prophet for material they could publish. Prophet decided that the heat must be off by this time, and that he could safely brag, boast, and strut. So he sent a copy of the E911 Document--yet another one-- from Rich Andrews' Jolnet machine to Knight Lightning's BITnet account at the University of Missouri. Let's review the fate of the document so far. 0. The original E911 Document. This in the AIMSX system on a mainframe computer in Atlanta, available to hundreds of people, but all of them, presumably, BellSouth employees. An unknown number of them may have their own copies of this document, but they are all professionals and all trusted by the phone company. 1. Prophet's illicit copy, at home on his own computer in Decatur, Georgia. 2. Prophet's back-up copy, stored on Rich Andrew's Jolnet machine in the basement of Rich Andrews' house near Joliet Illinois. 3. Charles Boykin's copy on "Killer" in Dallas, Texas, sent by Rich Andrews from Joliet. 4. Jerry Dalton's copy at AT&T Corporate Information Security in New Jersey, sent from Charles Boykin in Dallas. 5. Henry Kluepfel's copy at Bellcore security headquarters in New Jersey, sent by Dalton. 6. Knight Lightning's copy, sent by Prophet from Rich Andrews' machine, and now in Columbia, Missouri. We can see that the "security" situation of this proprietary document, once dug out of AIMSX, swiftly became bizarre. Without any money changing hands, without any particular special effort, this data had been reproduced at least six times and had spread itself all over the continent. By far the worst, however, was yet to come. In February 1989, Prophet and Knight Lightning bargained electronically over the fate of this trophy. Prophet wanted to boast, but, at the same time, scarcely wanted to be caught. For his part, Knight Lightning was eager to publish as much of the document as he could manage. Knight Lightning was a fledgling political-science major with a particular interest in freedom-of-information issues. He would gladly publish most anything that would reflect glory on the prowess of the underground and embarrass the telcos. However, Knight Lightning himself had contacts in telco security, and sometimes consulted them on material he'd received that might be too dicey for publication. Prophet and Knight Lightning decided to edit the E911 Document so as to delete most of its identifying traits. First of all, its large "NOT FOR USE OR DISCLOSURE" warning had to go. Then there were other matters. For instance, it listed the office telephone numbers of several BellSouth 911 specialists in Florida. If these phone numbers were published in Phrack, the BellSouth employees involved would very likely be hassled by phone phreaks, which would anger BellSouth no end, and pose a definite operational hazard for both Prophet and Phrack. So Knight Lightning cut the Document almost in half, removing the phone numbers and some of the touchier and more specific information. He passed it back electronically to Prophet; Prophet was still nervous, so Knight Lightning cut a bit more. They finally agreed that it was ready to go, and that it would be published in Phrack under the pseudonym, "The Eavesdropper." And this was done on February 25, 1989. The twenty-fourth issue of Phrack featured a chatty interview with co-ed phone-phreak "Chanda Leir," three articles on BITNET and its links to other computer networks, an article on 800 and 900 numbers by "Unknown User," "VaxCat's" article on telco basics (slyly entitled "Lifting Ma Bell's Veil of Secrecy,)" and the usual "Phrack World News." The News section, with painful irony, featured an extended account of the sentencing of "Shadowhawk," an eighteen-year-old Chicago hacker who had just been put in federal prison by William J. Cook himself. And then there were the two articles by "The Eavesdropper." The first was the edited E911 Document, now titled "Control Office Administration Of Enhanced 911 Services for Special Services and Major Account Centers." Eavesdropper's second article was a glossary of terms explaining the blizzard of telco acronyms and buzzwords in the E911 Document. The hapless document was now distributed, in the usual Phrack routine, to a good one hundred and fifty sites. Not a hundred and fifty PEOPLE, mind you--a hundred and fifty SITES, some of these sites linked to UNIX nodes or bulletin board systems, which themselves had readerships of tens, dozens, even hundreds of people. This was February 1989. Nothing happened immediately. Summer came, and the Atlanta crew were raided by the Secret Service. Fry Guy was apprehended. Still nothing whatever happened to Phrack. Six more issues of Phrack came out, 30 in all, more or less on a monthly schedule. Knight Lightning and co-editor Taran King went untouched. Phrack tended to duck and cover whenever the heat came down. During the summer busts of 1987--(hacker busts tended to cluster in summer, perhaps because hackers were easier to find at home than in college)-- Phrack had ceased publication for several months, and laid low. Several LoD hangers-on had been arrested, but nothing had happened to the Phrack crew, the premiere gossips of the underground. In 1988, Phrack had been taken over by a new editor, "Crimson Death," a raucous youngster with a taste for anarchy files. 1989, however, looked like a bounty year for the underground. Knight Lightning and his co-editor Taran King took up the reins again, and Phrack flourished throughout 1989. Atlanta LoD went down hard in the summer of 1989, but Phrack rolled merrily on. Prophet's E911 Document seemed unlikely to cause Phrack any trouble. By January 1990, it had been available in Phrack for almost a year. Kluepfel and Dalton, officers of Bellcore and AT&T security, had possessed the document for sixteen months--in fact, they'd had it even before Knight Lightning himself, and had done nothing in particular to stop its distribution. They hadn't even told Rich Andrews or Charles Boykin to erase the copies from their UNIX nodes, Jolnet and Killer. But then came the monster Martin Luther King Day Crash of January 15, 1990. A flat three days later, on January 18, four agents showed up at Knight Lightning's fraternity house. One was Timothy Foley, the second Barbara Golden, both of them Secret Service agents from the Chicago office. Also along was a University of Missouri security officer, and Reed Newlin, a security man from Southwestern Bell, the RBOC having jurisdiction over Missouri. Foley accused Knight Lightning of causing the nationwide crash of the phone system. Knight Lightning was aghast at this allegation. On the face of it, the suspicion was not entirely implausible--though Knight Lightning knew that he himself hadn't done it. Plenty of hot-dog hackers had bragged that they could crash the phone system, however. "Shadowhawk," for instance, the Chicago hacker whom William Cook had recently put in jail, had several times boasted on boards that he could "shut down AT&T's public switched network." And now this event, or something that looked just like it, had actually taken place. The Crash had lit a fire under the Chicago Task Force. And the former fence-sitters at Bellcore and AT&T were now ready to roll. The consensus among telco security--already horrified by the skill of the BellSouth intruders --was that the digital underground was out of hand. LoD and Phrack must go. And in publishing Prophet's E911 Document, Phrack had provided law enforcement with what appeared to be a powerful legal weapon. Foley confronted Knight Lightning about the E911 Document. Knight Lightning was cowed. He immediately began "cooperating fully" in the usual tradition of the digital underground. He gave Foley a complete run of Phrack, printed out in a set of three-ring binders. He handed over his electronic mailing list of Phrack subscribers. Knight Lightning was grilled for four hours by Foley and his cohorts. Knight Lightning admitted that Prophet had passed him the E911 Document, and he admitted that he had known it was stolen booty from a hacker raid on a telephone company. Knight Lightning signed a statement to this effect, and agreed, in writing, to cooperate with investigators. Next day--January 19, 1990, a Friday --the Secret Service returned with a search warrant, and thoroughly searched Knight Lightning's upstairs room in the fraternity house. They took all his floppy disks, though, interestingly, they left Knight Lightning in possession of both his computer and his modem. (The computer had no hard disk, and in Foley's judgement was not a store of evidence.) But this was a very minor bright spot among Knight Lightning's rapidly multiplying troubles. By this time, Knight Lightning was in plenty of hot water, not only with federal police, prosecutors, telco investigators, and university security, but with the elders of his own campus fraternity, who were outraged to think that they had been unwittingly harboring a federal computer-criminal. On Monday, Knight Lightning was summoned to Chicago, where he was further grilled by Foley and USSS veteran agent Barbara Golden, this time with an attorney present. And on Tuesday, he was formally indicted by a federal grand jury. The trial of Knight Lightning, which occurred on July 24-27, 1990, was the crucial show-trial of the Hacker Crackdown. We will examine the trial at some length in Part Four of this book. In the meantime, we must continue our dogged pursuit of the E911 Document. It must have been clear by January 1990 that the E911 Document, in the form Phrack had published it back in February 1989, had gone off at the speed of light in at least a hundred and fifty different directions. To attempt to put this electronic genie back in the bottle was flatly impossible. And yet, the E911 Document was STILL stolen property, formally and legally speaking. Any electronic transference of this document, by anyone unauthorized to have it, could be interpreted as an act of wire fraud. Interstate transfer of stolen property, including electronic property, was a federal crime. The Chicago Computer Fraud and Abuse Task Force had been assured that the E911 Document was worth a hefty sum of money. In fact, they had a precise estimate of its worth from BellSouth security personnel: $79,449. A sum of this scale seemed to warrant vigorous prosecution. Even if the damage could not be undone, at least this large sum offered a good legal pretext for stern punishment of the thieves. It seemed likely to impress judges and juries. And it could be used in court to mop up the Legion of Doom. The Atlanta crowd was already in the bag, by the time the Chicago Task Force had gotten around to Phrack. But the Legion was a hydra-headed thing. In late 89, a brand-new Legion of Doom board, "Phoenix Project," had gone up in Austin, Texas. Phoenix Project was sysoped by no less a man than the Mentor himself, ably assisted by University of Texas student and hardened Doomster "Erik Bloodaxe." As we have seen from his Phrack manifesto, the Mentor was a hacker zealot who regarded computer intrusion as something close to a moral duty. Phoenix Project was an ambitious effort, intended to revive the digital underground to what Mentor considered the full flower of the early 80s. The Phoenix board would also boldly bring elite hackers face-to-face with the telco "opposition." On "Phoenix," America's cleverest hackers would supposedly shame the telco squareheads out of their stick-in-the-mud attitudes, and perhaps convince them that the Legion of Doom elite were really an all-right crew. The premiere of "Phoenix Project" was heavily trumpeted by Phrack,and "Phoenix Project" carried a complete run of Phrack issues, including the E911 Document as Phrack had published it. Phoenix Project was only one of many--possibly hundreds--of nodes and boards all over America that were in guilty possession of the E911 Document. But Phoenix was an outright, unashamed Legion of Doom board. Under Mentor's guidance, it was flaunting itself in the face of telco security personnel. Worse yet, it was actively trying to WIN THEM OVER as sympathizers for the digital underground elite. "Phoenix" had no cards or codes on it. Its hacker elite considered Phoenix at least technically legal. But Phoenix was a corrupting influence, where hacker anarchy was eating away like digital acid at the underbelly of corporate propriety. The Chicago Computer Fraud and Abuse Task Force now prepared to descend upon Austin, Texas. Oddly, not one but TWO trails of the Task Force's investigation led toward Austin. The city of Austin, like Atlanta, had made itself a bulwark of the Sunbelt's Information Age, with a strong university research presence, and a number of cutting-edge electronics companies, including Motorola, Dell, CompuAdd, IBM, Sematech and MCC. Where computing machinery went, hackers generally followed. Austin boasted not only "Phoenix Project," currently LoD's most flagrant underground board, but a number of UNIX nodes. One of these nodes was "Elephant," run by a UNIX consultant named Robert Izenberg. Izenberg, in search of a relaxed Southern lifestyle and a lowered cost-of-living, had recently migrated to Austin from New Jersey. In New Jersey, Izenberg had worked for an independent contracting company, programming UNIX code for AT&T itself. "Terminus" had been a frequent user on Izenberg's privately owned Elephant node. Having interviewed Terminus and examined the records on Netsys, the Chicago Task Force were now convinced that they had discovered an underground gang of UNIX software pirates, who were demonstrably guilty of interstate trafficking in illicitly copied AT&T source code. Izenberg was swept into the dragnet around Terminus, the self-proclaimed ultimate UNIX hacker. Izenberg, in Austin, had settled down into a UNIX job with a Texan branch of IBM. Izenberg was no longer working as a contractor for AT&T, but he had friends in New Jersey, and he still logged on to AT&T UNIX computers back in New Jersey, more or less whenever it pleased him. Izenberg's activities appeared highly suspicious to the Task Force. Izenberg might well be breaking into AT&T computers, swiping AT&T software, and passing it to Terminus and other possible confederates, through the UNIX node network. And this data was worth, not merely $79,499, but hundreds of thousands of dollars! On February 21, 1990, Robert Izenberg arrived home from work at IBM to find that all the computers had mysteriously vanished from his Austin apartment. Naturally he assumed that he had been robbed. His "Elephant" node, his other machines, his notebooks, his disks, his tapes, all gone! However, nothing much else seemed disturbed--the place had not been ransacked. The puzzle becaming much stranger some five minutes later. Austin U. S. Secret Service Agent Al Soliz, accompanied by University of Texas campus-security officer Larry Coutorie and the ubiquitous Tim Foley, made their appearance at Izenberg's door. They were in plain clothes: slacks, polo shirts. They came in, and Tim Foley accused Izenberg of belonging to the Legion of Doom. Izenberg told them that he had never heard of the "Legion of Doom." And what about a certain stolen E911 Document, that posed a direct threat to the police emergency lines? Izenberg claimed that he'd never heard of that, either. His interrogators found this difficult to believe. Didn't he know Terminus? Who? They gave him Terminus's real name. Oh yes, said Izenberg. He knew THAT guy all right--he was leading discussions on the Internet about AT&T computers, especially the AT&T 3B2. AT&T had thrust this machine into the marketplace, but, like many of AT&T's ambitious attempts to enter the computing arena, the 3B2 project had something less than a glittering success. Izenberg himself had been a contractor for the division of AT&T that supported the 3B2. The entire division had been shut down. Nowadays, the cheapest and quickest way to get help with this fractious piece of machinery was to join one of Terminus's discussion groups on the Internet, where friendly and knowledgeable hackers would help you for free. Naturally the remarks within this group were less than flattering about the Death Star. . .was THAT the problem? Foley told Izenberg that Terminus had been acquiring hot software through his, Izenberg's, machine. Izenberg shrugged this off. A good eight megabytes of data flowed through his UUCP site every day. UUCP nodes spewed data like fire hoses. Elephant had been directly linked to Netsys--not surprising, since Terminus was a 3B2 expert and Izenberg had been a 3B2 contractor. Izenberg was also linked to "attctc" and the University of Texas. Terminus was a well-known UNIX expert, and might have been up to all manner of hijinks on Elephant. Nothing Izenberg could do about that. That was physically impossible. Needle in a haystack. In a four-hour grilling, Foley urged Izenberg to come clean and admit that he was in conspiracy with Terminus, and a member of the Legion of Doom. Izenberg denied this. He was no weirdo teenage hacker-- he was thirty-two years old, and didn't even have a "handle." Izenberg was a former TV technician and electronics specialist who had drifted into UNIX consulting as a full-grown adult. Izenberg had never met Terminus, physically. He'd once bought a cheap high-speed modem from him, though. Foley told him that this modem (a Telenet T2500 which ran at 19.2 kilobaud, and which had just gone out Izenberg's door in Secret Service custody) was likely hot property. Izenberg was taken aback to hear this; but then again, most of Izenberg's equipment, like that of most freelance professionals in the industry, was discounted, passed hand-to-hand through various kinds of barter and gray-market. There was no proof that the modem was stolen, and even if it were, Izenberg hardly saw how that gave them the right to take every electronic item in his house. Still, if the United States Secret Service figured they needed his computer for national security reasons--or whatever-- then Izenberg would not kick. He figured he would somehow make the sacrifice of his twenty thousand dollars' worth of professional equipment, in the spirit of full cooperation and good citizenship. Robert Izenberg was not arrested. Izenberg was not charged with any crime. His UUCP node--full of some 140 megabytes of the files, mail, and data of himself and his dozen or so entirely innocent users--went out the door as "evidence." Along with the disks and tapes, Izenberg had lost about 800 megabytes of data. Six months would pass before Izenberg decided to phone the Secret Service and ask how the case was going. That was the first time that Robert Izenberg would ever hear the name of William Cook. As of January 1992, a full two years after the seizure, Izenberg, still not charged with any crime, would be struggling through the morass of the courts, in hope of recovering his thousands of dollars' worth of seized equipment. In the meantime, the Izenberg case received absolutely no press coverage. The Secret Service had walked into an Austin home, removed a UNIX bulletin- board system, and met with no operational difficulties whatsoever. Except that word of a crackdown had percolated through the Legion of Doom. "The Mentor" voluntarily shut down "The Phoenix Project." It seemed a pity, especially as telco security employees had, in fact, shown up on Phoenix, just as he had hoped--along with the usual motley crowd of LoD heavies, hangers-on, phreaks, hackers and wannabes. There was "Sandy" Sandquist from US SPRINT security, and some guy named Henry Kluepfel, from Bellcore itself! Kluepfel had been trading friendly banter with hackers on Phoenix since January 30th (two weeks after the Martin Luther King Day Crash). The presence of such a stellar telco official seemed quite the coup for Phoenix Project. Still, Mentor could judge the climate. Atlanta in ruins, Phrack in deep trouble, something weird going on with UNIX nodes-- discretion was advisable. Phoenix Project went off-line. Kluepfel, of course, had been monitoring this LoD bulletin board for his own purposes--and those of the Chicago unit. As far back as June 1987, Kluepfel had logged on to a Texas underground board called "Phreak Klass 2600." There he'd discovered an Chicago youngster named "Shadowhawk," strutting and boasting about rifling AT&T computer files, and bragging of his ambitions to riddle AT&T's Bellcore computers with trojan horse programs. Kluepfel had passed the news to Cook in Chicago, Shadowhawk's computers had gone out the door in Secret Service custody, and Shadowhawk himself had gone to jail. Now it was Phoenix Project's turn. Phoenix Project postured about "legality" and "merely intellectual interest," but it reeked of the underground. It had Phrack on it. It had the E911 Document. It had a lot of dicey talk about breaking into systems, including some bold and reckless stuff about a supposed "decryption service" that Mentor and friends were planning to run, to help crack encrypted passwords off of hacked systems. Mentor was an adult. There was a bulletin board at his place of work, as well. Kleupfel logged onto this board, too, and discovered it to be called "Illuminati." It was run by some company called Steve Jackson Games. On March 1, 1990, the Austin crackdown went into high gear. On the morning of March 1--a Thursday--21-year-old University of Texas student "Erik Bloodaxe," co-sysop of Phoenix Project and an avowed member of the Legion of Doom, was wakened by a police revolver levelled at his head. Bloodaxe watched, jittery, as Secret Service agents appropriated his 300 baud terminal and, rifling his files, discovered his treasured source-code for Robert Morris's notorious Internet Worm. But Bloodaxe, a wily operator, had suspected that something of the like might be coming. All his best equipment had been hidden away elsewhere. The raiders took everything electronic, however, including his telephone. They were stymied by his hefty arcade-style Pac-Man game, and left it in place, as it was simply too heavy to move. Bloodaxe was not arrested. He was not charged with any crime. A good two years later, the police still had what they had taken from him, however. The Mentor was less wary. The dawn raid rousted him and his wife from bed in their underwear, and six Secret Service agents, accompanied by an Austin policeman and Henry Kluepfel himself, made a rich haul. Off went the works, into the agents' white Chevrolet minivan: an IBM PC-AT clone with 4 meg of RAM and a 120-meg hard disk; a Hewlett-Packard LaserJet II printer; a completely legitimate and highly expensive SCO-Xenix 286 operating system; Pagemaker disks and documentation; and the Microsoft Word word-processing program. Mentor's wife had her incomplete academic thesis stored on the hard-disk; that went, too, and so did the couple's telephone. As of two years later, all this property remained in police custody. Mentor remained under guard in his apartment as agents prepared to raid Steve Jackson Games. The fact that this was a business headquarters and not a private residence did not deter the agents. It was still very early; no one was at work yet. The agents prepared to break down the door, but Mentor, eavesdropping on the Secret Service walkie-talkie traffic, begged them not to do it, and offered his key to the building. The exact details of the next events are unclear. The agents would not let anyone else into the building. Their search warrant, when produced, was unsigned. Apparently they breakfasted from the local "Whataburger," as the litter from hamburgers was later found inside. They also extensively sampled a bag of jellybeans kept by an SJG employee. Someone tore a "Dukakis for President" sticker from the wall. SJG employees, diligently showing up for the day's work, were met at the door and briefly questioned by U.S. Secret Service agents. The employees watched in astonishment as agents wielding crowbars and screwdrivers emerged with captive machines. They attacked outdoor storage units with boltcutters. The agents wore blue nylon windbreakers with "SECRET SERVICE" stencilled across the back, with running-shoes and jeans. Jackson's company lost three computers, several hard-disks, hundred of floppy disks, two monitors, three modems, a laser printer, various powercords, cables, and adapters (and, oddly, a small bag of screws, bolts and nuts). The seizure of Illuminati BBS deprived SJG of all the programs, text files, and private e-mail on the board. The loss of two other SJG computers was a severe blow as well, since it caused the loss of electronically stored contracts, financial projections, address directories, mailing lists, personnel files, business correspondence, and, not least, the drafts of forthcoming games and gaming books. No one at Steve Jackson Games was arrested. No one was accused of any crime. No charges were filed. Everything appropriated was officially kept as "evidence" of crimes never specified. After the Phrack show-trial, the Steve Jackson Games scandal was the most bizarre and aggravating incident of the Hacker Crackdown of 1990. This raid by the Chicago Task Force on a science-fiction gaming publisher was to rouse a swarming host of civil liberties issues, and gave rise to an enduring controversy that was still re-complicating itself, and growing in the scope of its implications, a full two years later. The pursuit of the E911 Document stopped with the Steve Jackson Games raid. As we have seen, there were hundreds, perhaps thousands of computer users in America with the E911 Document in their possession. Theoretically, Chicago had a perfect legal right to raid any of these people, and could have legally seized the machines of anybody who subscribed to Phrack. However, there was no copy of the E911 Document on Jackson's Illuminati board. And there the Chicago raiders stopped dead; they have not raided anyone since. It might be assumed that Rich Andrews and Charlie Boykin, who had brought the E911 Document to the attention of telco security, might be spared any official suspicion. But as we have seen, the willingness to "cooperate fully" offers little, if any, assurance against federal anti-hacker prosecution. Richard Andrews found himself in deep trouble, thanks to the E911 Document. Andrews lived in Illinois, the native stomping grounds of the Chicago Task Force. On February 3 and 6, both his home and his place of work were raided by USSS. His machines went out the door, too, and he was grilled at length (though not arrested). Andrews proved to be in purportedly guilty possession of: UNIX SVR 3.2; UNIX SVR 3.1; UUCP; PMON; WWB; IWB; DWB; NROFF; KORN SHELL '88; C++; and QUEST, among other items. Andrews had received this proprietary code-- which AT&T officially valued at well over $250,000--through the UNIX network, much of it supplied to him as a personal favor by Terminus. Perhaps worse yet, Andrews admitted to returning the favor, by passing Terminus a copy of AT&T proprietary STARLAN source code. Even Charles Boykin, himself an AT&T employee, entered some very hot water. By 1990, he'd almost forgotten about the E911 problem he'd reported in September 88; in fact, since that date, he'd passed two more security alerts to Jerry Dalton, concerning matters that Boykin considered far worse than the E911 Document. But by 1990, year of the crackdown, AT&T Corporate Information Security was fed up with "Killer." This machine offered no direct income to AT&T, and was providing aid and comfort to a cloud of suspicious yokels from outside the company, some of them actively malicious toward AT&T, its property, and its corporate interests. Whatever goodwill and publicity had been won among Killer's 1,500 devoted users was considered no longer worth the security risk. On February 20, 1990, Jerry Dalton arrived in Dallas and simply unplugged the phone jacks, to the puzzled alarm of Killer's many Texan users. Killer went permanently off-line, with the loss of vast archives of programs and huge quantities of electronic mail; it was never restored to service. AT&T showed no particular regard for the "property" of these 1,500 people. Whatever "property" the users had been storing on AT&T's computer simply vanished completely. Boykin, who had himself reported the E911 problem, now found himself under a cloud of suspicion. In a weird private-security replay of the Secret Service seizures, Boykin's own home was visited by AT&T Security and his own machines were carried out the door. However, there were marked special features in the Boykin case. Boykin's disks and his personal computers were swiftly examined by his corporate employers and returned politely in just two days-- (unlike Secret Service seizures, which commonly take months or years). Boykin was not charged with any crime or wrongdoing, and he kept his job with AT&T (though he did retire from AT&T in September 1991, at the age of 52). It's interesting to note that the US Secret Service somehow failed to seize Boykin's "Killer" node and carry AT&T's own computer out the door. Nor did they raid Boykin's home. They seemed perfectly willing to take the word of AT&T Security that AT&T's employee, and AT&T's "Killer" node, were free of hacker contraband and on the up-and-up. It's digital water-under-the-bridge at this point, as Killer's 3,200 megabytes of Texan electronic community were erased in 1990, and "Killer" itself was shipped out of the state. But the experiences of Andrews and Boykin, and the users of their systems, remained side issues. They did not begin to assume the social, political, and legal importance that gathered, slowly but inexorably, around the issue of the raid on Steve Jackson Games. # We must now turn our attention to Steve Jackson Games itself, and explain what SJG was, what it really did, and how it had managed to attract this particularly odd and virulent kind of trouble. The reader may recall that this is not the first but the second time that the company has appeared in this narrative; a Steve Jackson game called GURPS was a favorite pastime of Atlanta hacker Urvile, and Urvile's science-fictional gaming notes had been mixed up promiscuously with notes about his actual computer intrusions. First, Steve Jackson Games, Inc., was NOT a publisher of "computer games." SJG published "simulation games," parlor games that were played on paper, with pencils, and dice, and printed guidebooks full of rules and statistics tables. There were no computers involved in the games themselves. When you bought a Steve Jackson Game, you did not receive any software disks. What you got was a plastic bag with some cardboard game tokens, maybe a few maps or a deck of cards. Most of their products were books. However, computers WERE deeply involved in the Steve Jackson Games business. Like almost all modern publishers, Steve Jackson and his fifteen employees used computers to write text, to keep accounts, and to run the business generally. They also used a computer to run their official bulletin board system for Steve Jackson Games, a board called Illuminati. On Illuminati, simulation gamers who happened to own computers and modems could associate, trade mail, debate the theory and practice of gaming, and keep up with the company's news and its product announcements. Illuminati was a modestly popular board, run on a small computer with limited storage, only one phone-line, and no ties to large-scale computer networks. It did, however, have hundreds of users, many of them dedicated gamers willing to call from out-of-state. Illuminati was NOT an "underground" board. It did not feature hints on computer intrusion, or "anarchy files," or illicitly posted credit card numbers, or long-distance access codes. Some of Illuminati's users, however, were members of the Legion of Doom. And so was one of Steve Jackson's senior employees--the Mentor. The Mentor wrote for Phrack, and also ran an underground board, Phoenix Project--but the Mentor was not a computer professional. The Mentor was the managing editor of Steve Jackson Games and a professional game designer by trade. These LoD members did not use Illuminati to help their HACKING activities. They used it to help their GAME-PLAYING activities--and they were even more dedicated to simulation gaming than they were to hacking. "Illuminati" got its name from a card-game that Steve Jackson himself, the company's founder and sole owner, had invented. This multi-player card-game was one of Mr Jackson's best-known, most successful, most technically innovative products. "Illuminati" was a game of paranoiac conspiracy in which various antisocial cults warred covertly to dominate the world. "Illuminati" was hilarious, and great fun to play, involving flying saucers, the CIA, the KGB, the phone companies, the Ku Klux Klan, the South American Nazis, the cocaine cartels, the Boy Scouts, and dozens of other splinter groups from the twisted depths of Mr. Jackson's professionally fervid imagination. For the uninitiated, any public discussion of the "Illuminati" card-game sounded, by turns, utterly menacing or completely insane. And then there was SJG's "Car Wars," in which souped-up armored hot-rods with rocket-launchers and heavy machine-guns did battle on the American highways of the future. The lively Car Wars discussion on the Illuminati board featured many meticulous, painstaking discussions of the effects of grenades, land-mines, flamethrowers and napalm. It sounded like hacker anarchy files run amuck. Mr Jackson and his co-workers earned their daily bread by supplying people with make-believe adventures and weird ideas. The more far-out, the better. Simulation gaming is an unusual pastime, but gamers have not generally had to beg the permission of the Secret Service to exist. Wargames and role-playing adventures are an old and honored pastime, much favored by professional military strategists. Once little-known, these games are now played by hundreds of thousands of enthusiasts throughout North America, Europe and Japan. Gaming-books, once restricted to hobby outlets, now commonly appear in chain-stores like B. Dalton's and Waldenbooks, and sell vigorously. Steve Jackson Games, Inc., of Austin, Texas, was a games company of the middle rank. In 1989, SJG grossed about a million dollars. Jackson himself had a good reputation in his industry as a talented and innovative designer of rather unconventional games, but his company was something less than a titan of the field--certainly not like the multimillion-dollar TSR Inc., or Britain's gigantic "Games Workshop." SJG's Austin headquarters was a modest two-story brick office-suite, cluttered with phones, photocopiers, fax machines and computers. It bustled with semi-organized activity and was littered with glossy promotional brochures and dog-eared science-fiction novels. Attached to the offices was a large tin-roofed warehouse piled twenty feet high with cardboard boxes of games and books. Despite the weird imaginings that went on within it, the SJG headquarters was quite a quotidian, everyday sort of place. It looked like what it was: a publishers' digs. Both "Car Wars" and "Illuminati" were well-known, popular games. But the mainstay of the Jackson organization was their Generic Universal Role-Playing System, "G.U.R.P.S." The GURPS system was considered solid and well-designed, an asset for players. But perhaps the most popular feature of the GURPS system was that it allowed gaming-masters to design scenarios that closely resembled well-known books, movies, and other works of fantasy. Jackson had licensed and adapted works from many science fiction and fantasy authors. There was GURPS Conan, GURPS Riverworld, GURPS Horseclans, GURPS Witch World, names eminently familiar to science-fiction readers. And there was GURPS Special Ops, from the world of espionage fantasy and unconventional warfare. And then there was GURPS Cyberpunk. "Cyberpunk" was a term given to certain science fiction writers who had entered the genre in the 1980s. "Cyberpunk," as the label implies, had two general distinguishing features. First, its writers had a compelling interest in information technology, an interest closely akin to science fiction's earlier fascination with space travel. And second, these writers were "punks," with all the distinguishing features that that implies: Bohemian artiness, youth run wild, an air of deliberate rebellion, funny clothes and hair, odd politics, a fondness for abrasive rock and roll; in a word, trouble. The "cyberpunk" SF writers were a small group of mostly college-educated white middle-class litterateurs, scattered through the US and Canada. Only one, Rudy Rucker, a professor of computer science in Silicon Valley, could rank with even the humblest computer hacker. But, except for Professor Rucker, the "cyberpunk" authors were not programmers or hardware experts; they considered themselves artists (as, indeed, did Professor Rucker). However, these writers all owned computers, and took an intense and public interest in the social ramifications of the information industry. The cyberpunks had a strong following among the global generation that had grown up in a world of computers, multinational networks, and cable television. Their outlook was considered somewhat morbid, cynical, and dark, but then again, so was the outlook of their generational peers. As that generation matured and increased in strength and influence, so did the cyberpunks. As science-fiction writers went, they were doing fairly well for themselves. By the late 1980s, their work had attracted attention from gaming companies, including Steve Jackson Games, which was planning a cyberpunk simulation for the flourishing GURPS gaming-system. The time seemed ripe for such a product, which had already been proven in the marketplace. The first games- company out of the gate, with a product boldly called "Cyberpunk" in defiance of possible infringement-of-copyright suits, had been an upstart group called R. Talsorian. Talsorian's Cyberpunk was a fairly decent game, but the mechanics of the simulation system left a lot to be desired. Commercially, however, the game did very well. The next cyberpunk game had been the even more successful Shadowrun by FASA Corporation. The mechanics of this game were fine, but the scenario was rendered moronic by sappy fantasy elements like elves, trolls, wizards, and dragons--all highly ideologically-incorrect, according to the hard-edged, high-tech standards of cyberpunk science fiction. Other game designers were champing at the bit. Prominent among them was the Mentor, a gentleman who, like most of his friends in the Legion of Doom, was quite the cyberpunk devotee. Mentor reasoned that the time had come for a REAL cyberpunk gaming-book--one that the princes of computer-mischief in the Legion of Doom could play without laughing themselves sick. This book, GURPS Cyberpunk, would reek of culturally on-line authenticity. Mentor was particularly well-qualified for this task. Naturally, he knew far more about computer-intrusion and digital skullduggery than any previously published cyberpunk author. Not only that, but he was good at his work. A vivid imagination, combined with an instinctive feeling for the working of systems and, especially, the loopholes within them, are excellent qualities for a professional game designer. By March 1st, GURPS Cyberpunk was almost complete, ready to print and ship. Steve Jackson expected vigorous sales for this item, which, he hoped, would keep the company financially afloat for several months. GURPS Cyberpunk, like the other GURPS "modules," was not a "game" like a Monopoly set, but a BOOK: a bound paperback book the size of a glossy magazine, with a slick color cover, and pages full of text, illustrations, tables and footnotes. It was advertised as a game, and was used as an aid to game-playing, but it was a book, with an ISBN number, published in Texas, copyrighted, and sold in bookstores. And now, that book, stored on a computer, had gone out the door in the custody of the Secret Service. The day after the raid, Steve Jackson visited the local Secret Service headquarters with a lawyer in tow. There he confronted Tim Foley (still in Austin at that time) and demanded his book back. But there was trouble. GURPS Cyberpunk, alleged a Secret Service agent to astonished businessman Steve Jackson, was "a manual for computer crime." "It's science fiction," Jackson said. "No, this is real." This statement was repeated several times, by several agents. Jackson's ominously accurate game had passed from pure, obscure, small-scale fantasy into the impure, highly publicized, large-scale fantasy of the Hacker Crackdown. No mention was made of the real reason for the search. According to their search warrant, the raiders had expected to find the E911 Document stored on Jackson's bulletin board system. But that warrant was sealed; a procedure that most law enforcement agencies will use only when lives are demonstrably in danger. The raiders' true motives were not discovered until the Jackson search-warrant was unsealed by his lawyers, many months later. The Secret Service, and the Chicago Computer Fraud and Abuse Task Force, said absolutely nothing to Steve Jackson about any threat to the police 911 System. They said nothing about the Atlanta Three, nothing about Phrack or Knight Lightning, nothing about Terminus. Jackson was left to believe that his computers had been seized because he intended to publish a science fiction book that law enforcement considered too dangerous to see print. This misconception was repeated again and again, for months, to an ever-widening public audience. It was not the truth of the case; but as months passed, and this misconception was publicly printed again and again, it became one of the few publicly known "facts" about the mysterious Hacker Crackdown. The Secret Service had seized a computer to stop the publication of a cyberpunk science fiction book. The second section of this book, "The Digital Underground," is almost finished now. We have become acquainted with all the major figures of this case who actually belong to the underground milieu of computer intrusion. We have some idea of their history, their motives, their general modus operandi. We now know, I hope, who they are, where they came from, and more or less what they want. In the next section of this book, "Law and Order," we will leave this milieu and directly enter the world of America's computer-crime police. At this point, however, I have another figure to introduce: myself. My name is Bruce Sterling. I live in Austin, Texas, where I am a science fiction writer by trade: specifically, a CYBERPUNK science fiction writer. Like my "cyberpunk" colleagues in the U.S. and Canada, I've never been entirely happy with this literary label-- especially after it became a synonym for computer criminal. But I did once edit a book of stories by my colleagues, called Mirrorshades: the Cyberpunk Anthology, and I've long been a writer of literary-critical cyberpunk manifestos. I am not a "hacker" of any description, though I do have readers in the digital underground. When the Steve Jackson Games seizure occurred, I naturally took an intense interest. If "cyberpunk" books were being banned by federal police in my own home town, I reasonably wondered whether I myself might be next. Would my computer be seized by the Secret Service? At the time, I was in possession of an aging Apple IIe without so much as a hard disk. If I were to be raided as an author of computer-crime manuals, the loss of my feeble word-processor would likely provoke more snickers than sympathy. I'd known Steve Jackson for many years. We knew one another as colleagues, for we frequented the same local science-fiction conventions. I'd played Jackson games, and recognized his cleverness; but he certainly had never struck me as a potential mastermind of computer crime. I also knew a little about computer bulletin-board systems. In the mid-1980s I had taken an active role in an Austin board called "SMOF-BBS," one of the first boards dedicated to science fiction. I had a modem, and on occasion I'd logged on to Illuminati, which always looked entertainly wacky, but certainly harmless enough. At the time of the Jackson seizure, I had no experience whatsoever with underground boards. But I knew that no one on Illuminati talked about breaking into systems illegally, or about robbing phone companies. Illuminati didn't even offer pirated computer games. Steve Jackson, like many creative artists, was markedly touchy about theft of intellectual property. It seemed to me that Jackson was either seriously suspected of some crime--in which case, he would be charged soon, and would have his day in court--or else he was innocent, in which case the Secret Service would quickly return his equipment, and everyone would have a good laugh. I rather expected the good laugh. The situation was not without its comic side. The raid, known as the "Cyberpunk Bust" in the science fiction community, was winning a great deal of free national publicity both for Jackson himself and the "cyberpunk" science fiction writers generally. Besides, science fiction people are used to being misinterpreted. Science fiction is a colorful, disreputable, slipshod occupation, full of unlikely oddballs, which, of course, is why we like it. Weirdness can be an occupational hazard in our field. People who wear Halloween costumes are sometimes mistaken for monsters. Once upon a time--back in 1939, in New York City-- science fiction and the U.S. Secret Service collided in a comic case of mistaken identity. This weird incident involved a literary group quite famous in science fiction, known as "the Futurians," whose membership included such future genre greats as Isaac Asimov, Frederik Pohl, and Damon Knight. The Futurians were every bit as offbeat and wacky as any of their spiritual descendants, including the cyberpunks, and were given to communal living, spontaneous group renditions of light opera, and midnight fencing exhibitions on the lawn. The Futurians didn't have bulletin board systems, but they did have the technological equivalent in 1939--mimeographs and a private printing press. These were in steady use, producing a stream of science-fiction fan magazines, literary manifestos, and weird articles, which were picked up in ink-sticky bundles by a succession of strange, gangly, spotty young men in fedoras and overcoats. The neighbors grew alarmed at the antics of the Futurians and reported them to the Secret Service as suspected counterfeiters. In the winter of 1939, a squad of USSS agents with drawn guns burst into "Futurian House," prepared to confiscate the forged currency and illicit printing presses. There they discovered a slumbering science fiction fan named George Hahn, a guest of the Futurian commune who had just arrived in New York. George Hahn managed to explain himself and his group, and the Secret Service agents left the Futurians in peace henceforth. (Alas, Hahn died in 1991, just before I had discovered this astonishing historical parallel, and just before I could interview him for this book.) But the Jackson case did not come to a swift and comic end. No quick answers came his way, or mine; no swift reassurances that all was right in the digital world, that matters were well in hand after all. Quite the opposite. In my alternate role as a sometime pop-science journalist, I interviewed Jackson and his staff for an article in a British magazine. The strange details of the raid left me more concerned than ever. Without its computers, the company had been financially and operationally crippled. Half the SJG workforce, a group of entirely innocent people, had been sorrowfully fired, deprived of their livelihoods by the seizure. It began to dawn on me that authors--American writers--might well have their computers seized, under sealed warrants, without any criminal charge; and that, as Steve Jackson had discovered, there was no immediate recourse for this. This was no joke; this wasn't science fiction; this was real. I determined to put science fiction aside until I had discovered what had happened and where this trouble had come from. It was time to enter the purportedly real world of electronic free expression and computer crime. Hence, this book. Hence, the world of the telcos; and the world of the digital underground; and next, the world of the police. PART THREE: LAW AND ORDER Of the various anti-hacker activities of 1990, "Operation Sundevil" had by far the highest public profile. The sweeping, nationwide computer seizures of May 8, 1990 were unprecedented in scope and highly, if rather selectively, publicized. Unlike the efforts of the Chicago Computer Fraud and Abuse Task Force, "Operation Sundevil" was not intended to combat "hacking" in the sense of computer intrusion or sophisticated raids on telco switching stations. Nor did it have anything to do with hacker misdeeds with AT&T's software, or with Southern Bell's proprietary documents. Instead, "Operation Sundevil" was a crackdown on those traditional scourges of the digital underground: credit-card theft and telephone code abuse. The ambitious activities out of Chicago, and the somewhat lesser-known but vigorous anti-hacker actions of the New York State Police in 1990, were never a part of "Operation Sundevil" per se, which was based in Arizona. Nevertheless, after the spectacular May 8 raids, the public, misled by police secrecy, hacker panic, and a puzzled national press-corps, conflated all aspects of the nationwide crackdown in 1990 under the blanket term "Operation Sundevil." "Sundevil" is still the best-known synonym for the crackdown of 1990. But the Arizona organizers of "Sundevil" did not really deserve this reputation--any more, for instance, than all hackers deserve a reputation as "hackers." There was some justice in this confused perception, though. For one thing, the confusion was abetted by the Washington office of the Secret Service, who responded to Freedom of Information Act requests on "Operation Sundevil" by referring investigators to the publicly known cases of Knight Lightning and the Atlanta Three. And "Sundevil" was certainly the largest aspect of the Crackdown, the most deliberate and the best-organized. As a crackdown on electronic fraud, "Sundevil" lacked the frantic pace of the war on the Legion of Doom; on the contrary, Sundevil's targets were picked out with cool deliberation over an elaborate investigation lasting two full years. And once again the targets were bulletin board systems. Boards can be powerful aids to organized fraud. Underground boards carry lively, extensive, detailed, and often quite flagrant "discussions" of lawbreaking techniques and lawbreaking activities. "Discussing" crime in the abstract, or "discussing" the particulars of criminal cases, is not illegal--but there are stern state and federal laws against coldbloodedly conspiring in groups in order to commit crimes. In the eyes of police, people who actively conspire to break the law are not regarded as "clubs," "debating salons," "users' groups," or "free speech advocates." Rather, such people tend to find themselves formally indicted by prosecutors as "gangs," "racketeers," "corrupt organizations" and "organized crime figures." What's more, the illicit data contained on outlaw boards goes well beyond mere acts of speech and/or possible criminal conspiracy. As we have seen, it was common practice in the digital underground to post purloined telephone codes on boards, for any phreak or hacker who cared to abuse them. Is posting digital booty of this sort supposed to be protected by the First Amendment? Hardly--though the issue, like most issues in cyberspace, is not entirely resolved. Some theorists argue that to merely RECITE a number publicly is not illegal--only its USE is illegal. But anti-hacker police point out that magazines and newspapers (more traditional forms of free expression) never publish stolen telephone codes (even though this might well raise their circulation). Stolen credit card numbers, being riskier and more valuable, were less often publicly posted on boards--but there is no question that some underground boards carried "carding" traffic, generally exchanged through private mail. Underground boards also carried handy programs for "scanning" telephone codes and raiding credit card companies, as well as the usual obnoxious galaxy of pirated software, cracked passwords, blue-box schematics, intrusion manuals, anarchy files, porn files, and so forth. But besides their nuisance potential for the spread of illicit knowledge, bulletin boards have another vitally interesting aspect for the professional investigator. Bulletin boards are cram-full of EVIDENCE. All that busy trading of electronic mail, all those hacker boasts, brags and struts, even the stolen codes and cards, can be neat, electronic, real-time recordings of criminal activity. As an investigator, when you seize a pirate board, you have scored a coup as effective as tapping phones or intercepting mail. However, you have not actually tapped a phone or intercepted a letter. The rules of evidence regarding phone-taps and mail interceptions are old, stern and well-understood by police, prosecutors and defense attorneys alike. The rules of evidence regarding boards are new, waffling, and understood by nobody at all. Sundevil was the largest crackdown on boards in world history. On May 7, 8, and 9, 1990, about forty-two computer systems were seized. Of those forty-two computers, about twenty-five actually were running boards. (The vagueness of this estimate is attributable to the vagueness of (a) what a "computer system" is, and (b) what it actually means to "run a board" with one--or with two computers, or with three.) About twenty-five boards vanished into police custody in May 1990. As we have seen, there are an estimated 30,000 boards in America today. If we assume that one board in a hundred is up to no good with codes and cards (which rather flatters the honesty of the board-using community), then that would leave 2,975 outlaw boards untouched by Sundevil. Sundevil seized about one tenth of one percent of all computer bulletin boards in America. Seen objectively, this is something less than a comprehensive assault. In 1990, Sundevil's organizers-- the team at the Phoenix Secret Service office, and the Arizona Attorney General's office-- had a list of at least THREE HUNDRED boards that they considered fully deserving of search and seizure warrants. The twenty-five boards actually seized were merely among the most obvious and egregious of this much larger list of candidates. All these boards had been examined beforehand--either by informants, who had passed printouts to the Secret Service, or by Secret Service agents themselves, who not only come equipped with modems but know how to use them. There were a number of motives for Sundevil. First, it offered a chance to get ahead of the curve on wire-fraud crimes. Tracking back credit-card ripoffs to their perpetrators can be appallingly difficult. If these miscreants have any kind of electronic sophistication, they can snarl their tracks through the phone network into a mind-boggling, untraceable mess, while still managing to "reach out and rob someone." Boards, however, full of brags and boasts, codes and cards, offer evidence in the handy congealed form. Seizures themselves--the mere physical removal of machines-- tends to take the pressure off. During Sundevil, a large number of code kids, warez d00dz, and credit card thieves would be deprived of those boards--their means of community and conspiracy--in one swift blow. As for the sysops themselves (commonly among the boldest offenders) they would be directly stripped of their computer equipment, and rendered digitally mute and blind. And this aspect of Sundevil was carried out with great success. Sundevil seems to have been a complete tactical surprise-- unlike the fragmentary and continuing seizures of the war on the Legion of Doom, Sundevil was precisely timed and utterly overwhelming. At least forty "computers" were seized during May 7, 8 and 9, 1990, in Cincinnati, Detroit, Los Angeles, Miami, Newark, Phoenix, Tucson, Richmond, San Diego, San Jose, Pittsburgh and San Francisco. Some cities saw multiple raids, such as the five separate raids in the New York City environs. Plano, Texas (essentially a suburb of the Dallas/Fort Worth metroplex, and a hub of the telecommunications industry) saw four computer seizures. Chicago, ever in the forefront, saw its own local Sundevil raid, briskly carried out by Secret Service agents Timothy Foley and Barbara Golden. Many of these raids occurred, not in the cities proper, but in associated white-middle class suburbs--places like Mount Lebanon, Pennsylvania and Clark Lake, Michigan. There were a few raids on offices; most took place in people's homes, the classic hacker basements and bedrooms. The Sundevil raids were searches and seizures, not a group of mass arrests. There were only four arrests during Sundevil. "Tony the Trashman," a longtime teenage bete noire of the Arizona Racketeering unit, was arrested in Tucson on May 9. "Dr. Ripco," sysop of an outlaw board with the misfortune to exist in Chicago itself, was also arrested-- on illegal weapons charges. Local units also arrested a 19-year-old female phone phreak named "Electra" in Pennsylvania, and a male juvenile in California. Federal agents however were not seeking arrests, but computers. Hackers are generally not indicted (if at all) until the evidence in their seized computers is evaluated--a process that can take weeks, months--even years. When hackers are arrested on the spot, it's generally an arrest for other reasons. Drugs and/or illegal weapons show up in a good third of anti-hacker computer seizures (though not during Sundevil). That scofflaw teenage hackers (or their parents) should have marijuana in their homes is probably not a shocking revelation, but the surprisingly common presence of illegal firearms in hacker dens is a bit disquieting. A Personal Computer can be a great equalizer for the techno-cowboy-- much like that more traditional American "Great Equalizer," the Personal Sixgun. Maybe it's not all that surprising that some guy obsessed with power through illicit technology would also have a few illicit high-velocity-impact devices around. An element of the digital underground particularly dotes on those "anarchy philes," and this element tends to shade into the crackpot milieu of survivalists, gun-nuts, anarcho-leftists and the ultra-libertarian right-wing. This is not to say that hacker raids to date have uncovered any major crack-dens or illegal arsenals; but Secret Service agents do not regard "hackers" as "just kids." They regard hackers as unpredictable people, bright and slippery. It doesn't help matters that the hacker himself has been "hiding behind his keyboard" all this time. Commonly, police have no idea what he looks like. This makes him an unknown quantity, someone best treated with proper caution. To date, no hacker has come out shooting, though they do sometimes brag on boards that they will do just that. Threats of this sort are taken seriously. Secret Service hacker raids tend to be swift, comprehensive, well-manned (even over-manned); and agents generally burst through every door in the home at once, sometimes with drawn guns. Any potential resistance is swiftly quelled. Hacker raids are usually raids on people's homes. It can be a very dangerous business to raid an American home; people can panic when strangers invade their sanctum. Statistically speaking, the most dangerous thing a policeman can do is to enter someone's home. (The second most dangerous thing is to stop a car in traffic.) People have guns in their homes. More cops are hurt in homes than are ever hurt in biker bars or massage parlors. But in any case, no one was hurt during Sundevil, or indeed during any part of the Hacker Crackdown. Nor were there any allegations of any physical mistreatment of a suspect. Guns were pointed, interrogations were sharp and prolonged; but no one in 1990 claimed any act of brutality by any crackdown raider. In addition to the forty or so computers, Sundevil reaped floppy disks in particularly great abundance--an estimated 23,000 of them, which naturally included every manner of illegitimate data: pirated games, stolen codes, hot credit card numbers, the complete text and software of entire pirate bulletin-boards. These floppy disks, which remain in police custody today, offer a gigantic, almost embarrassingly rich source of possible criminal indictments. These 23,000 floppy disks also include a thus-far unknown quantity of legitimate computer games, legitimate software, purportedly "private" mail from boards, business records, and personal correspondence of all kinds. Standard computer-crime search warrants lay great emphasis on seizing written documents as well as computers--specifically including photocopies, computer printouts, telephone bills, address books, logs, notes, memoranda and correspondence. In practice, this has meant that diaries, gaming magazines, software documentation, nonfiction books on hacking and computer security, sometimes even science fiction novels, have all vanished out the door in police custody. A wide variety of electronic items have been known to vanish as well, including telephones, televisions, answering machines, Sony Walkmans, desktop printers, compact disks, and audiotapes. No fewer than 150 members of the Secret Service were sent into the field during Sundevil. They were commonly accompanied by squads of local and/or state police. Most of these officers-- especially the locals--had never been on an anti-hacker raid before. (This was one good reason, in fact, why so many of them were invited along in the first place.) Also, the presence of a uniformed police officer assures the raidees that the people entering their homes are, in fact, police. Secret Service agents wear plain clothes. So do the telco security experts who commonly accompany the Secret Service on raids (and who make no particular effort to identify themselves as mere employees of telephone companies). A typical hacker raid goes something like this. First, police storm in rapidly, through every entrance, with overwhelming force, in the assumption that this tactic will keep casualties to a minimum. Second, possible suspects are immediately removed from the vicinity of any and all computer systems, so that they will have no chance to purge or destroy computer evidence. Suspects are herded into a room without computers, commonly the living room, and kept under guard-- not ARMED guard, for the guns are swiftly holstered, but under guard nevertheless. They are presented with the search warrant and warned that anything they say may be held against them. Commonly they have a great deal to say, especially if they are unsuspecting parents. Somewhere in the house is the "hot spot"--a computer tied to a phone line (possibly several computers and several phones). Commonly it's a teenager's bedroom, but it can be anywhere in the house; there may be several such rooms. This "hot spot" is put in charge of a two-agent team, the "finder" and the "recorder." The "finder" is computer-trained, commonly the case agent who has actually obtained the search warrant from a judge. He or she understands what is being sought, and actually carries out the seizures: unplugs machines, opens drawers, desks, files, floppy-disk containers, etc. The "recorder" photographs all the equipment, just as it stands--especially the tangle of wired connections in the back, which can otherwise be a real nightmare to restore. The recorder will also commonly photograph every room in the house, lest some wily criminal claim that the police had robbed him during the search. Some recorders carry videocams or tape recorders; however, it's more common for the recorder to simply take written notes. Objects are described and numbered as the finder seizes them, generally on standard preprinted police inventory forms. Even Secret Service agents were not, and are not, expert computer users. They have not made, and do not make, judgements on the fly about potential threats posed by various forms of equipment. They may exercise discretion; they may leave Dad his computer, for instance, but they don't HAVE to. Standard computer-crime search warrants, which date back to the early 80s, use a sweeping language that targets computers, most anything attached to a computer, most anything used to operate a computer--most anything that remotely resembles a computer--plus most any and all written documents surrounding it. Computer-crime investigators have strongly urged agents to seize the works. In this sense, Operation Sundevil appears to have been a complete success. Boards went down all over America, and were shipped en masse to the computer investigation lab of the Secret Service, in Washington DC, along with the 23,000 floppy disks and unknown quantities of printed material. But the seizure of twenty-five boards, and the multi-megabyte mountains of possibly useful evidence contained in these boards (and in their owners' other computers, also out the door), were far from the only motives for Operation Sundevil. An unprecedented action of great ambition and size, Sundevil's motives can only be described as political. It was a public-relations effort, meant to pass certain messages, meant to make certain situations clear: both in the mind of the general public, and in the minds of various constituencies of the electronic community. First --and this motivation was vital--a "message" would be sent from law enforcement to the digital underground. This very message was recited in so many words by Garry M. Jenkins, the Assistant Director of the US Secret Service, at the Sundevil press conference in Phoenix on May 9, 1990, immediately after the raids. In brief, hackers were mistaken in their foolish belief that they could hide behind the "relative anonymity of their computer terminals." On the contrary, they should fully understand that state and federal cops were actively patrolling the beat in cyberspace--that they were on the watch everywhere, even in those sleazy and secretive dens of cybernetic vice, the underground boards. This is not an unusual message for police to publicly convey to crooks. The message is a standard message; only the context is new. In this respect, the Sundevil raids were the digital equivalent of the standard vice-squad crackdown on massage parlors, porno bookstores, head-shops, or floating crap-games. There may be few or no arrests in a raid of this sort; no convictions, no trials, no interrogations. In cases of this sort, police may well walk out the door with many pounds of sleazy magazines, X-rated videotapes, sex toys, gambling equipment, baggies of marijuana. . . . Of course, if something truly horrendous is discovered by the raiders, there will be arrests and prosecutions. Far more likely, however, there will simply be a brief but sharp disruption of the closed and secretive world of the nogoodniks. There will be "street hassle." "Heat." "Deterrence." And, of course, the immediate loss of the seized goods. It is very unlikely that any of this seized material will ever be returned. Whether charged or not, whether convicted or not, the perpetrators will almost surely lack the nerve ever to ask for this stuff to be given back. Arrests and trials--putting people in jail--may involve all kinds of formal legalities; but dealing with the justice system is far from the only task of police. Police do not simply arrest people. They don't simply put people in jail. That is not how the police perceive their jobs. Police "protect and serve." Police "keep the peace," they "keep public order." Like other forms of public relations, keeping public order is not an exact science. Keeping public order is something of an art-form. If a group of tough-looking teenage hoodlums was loitering on a street-corner, no one would be surprised to see a street-cop arrive and sternly order them to "break it up." On the contrary, the surprise would come if one of these ne'er-do-wells stepped briskly into a phone-booth, called a civil rights lawyer, and instituted a civil suit in defense of his Constitutional rights of free speech and free assembly. But something much along this line was one of the many anomolous outcomes of the Hacker Crackdown. Sundevil also carried useful "messages" for other constituents of the electronic community. These messages may not have been read aloud from the Phoenix podium in front of the press corps, but there was little mistaking their meaning. There was a message of reassurance for the primary victims of coding and carding: the telcos, and the credit companies. Sundevil was greeted with joy by the security officers of the electronic business community. After years of high-tech harassment and spiralling revenue losses, their complaints of rampant outlawry were being taken seriously by law enforcement. No more head-scratching or dismissive shrugs; no more feeble excuses about "lack of computer-trained officers" or the low priority of "victimless" white-collar telecommunication crimes. Computer-crime experts have long believed that computer-related offenses are drastically under-reported. They regard this as a major open scandal of their field. Some victims are reluctant to come forth, because they believe that police and prosecutors are not computer-literate, and can and will do nothing. Others are embarrassed by their vulnerabilities, and will take strong measures to avoid any publicity; this is especially true of banks, who fear a loss of investor confidence should an embezzlement-case or wire-fraud surface. And some victims are so helplessly confused by their own high technology that they never even realize that a crime has occurred--even when they have been fleeced to the bone. The results of this situation can be dire. Criminals escape apprehension and punishment. The computer-crime units that do exist, can't get work. The true scope of computer-crime: its size, its real nature, the scope of its threats, and the legal remedies for it-- all remain obscured. Another problem is very little publicized, but it is a cause of genuine concern. Where there is persistent crime, but no effective police protection, then vigilantism can result. Telcos, banks, credit companies, the major corporations who maintain extensive computer networks vulnerable to hacking --these organizations are powerful, wealthy, and politically influential. They are disinclined to be pushed around by crooks (or by most anyone else, for that matter). They often maintain well-organized private security forces, commonly run by experienced veterans of military and police units, who have left public service for the greener pastures of the private sector. For police, the corporate security manager can be a powerful ally; but if this gentleman finds no allies in the police, and the pressure is on from his board-of-directors, he may quietly take certain matters into his own hands. Nor is there any lack of disposable hired-help in the corporate security business. Private security agencies-- the `security business' generally--grew explosively in the 1980s. Today there are spooky gumshoed armies of "security consultants," "rent-a- cops," "private eyes," "outside experts"--every manner of shady operator who retails in "results" and discretion. Or course, many of these gentlemen and ladies may be paragons of professional and moral rectitude. But as anyone who has read a hard-boiled detective novel knows, police tend to be less than fond of this sort of private-sector competition. Companies in search of computer-security have even been known to hire hackers. Police shudder at this prospect. Police treasure good relations with the business community. Rarely will you see a policeman so indiscreet as to allege publicly that some major employer in his state or city has succumbed to paranoia and gone off the rails. Nevertheless, police --and computer police in particular--are aware of this possibility. Computer-crime police can and do spend up to half of their business hours just doing public relations: seminars, "dog and pony shows," sometimes with parents' groups or computer users, but generally with their core audience: the likely victims of hacking crimes. These, of course, are telcos, credit card companies and large computer-equipped corporations. The police strongly urge these people, as good citizens, to report offenses and press criminal charges; they pass the message that there is someone in authority who cares, understands, and, best of all, will take useful action should a computer-crime occur. But reassuring talk is cheap. Sundevil offered action. The final message of Sundevil was intended for internal consumption by law enforcement. Sundevil was offered as proof that the community of American computer-crime police had come of age. Sundevil was proof that enormous things like Sundevil itself could now be accomplished. Sundevil was proof that the Secret Service and its local law-enforcement allies could act like a well-oiled machine--(despite the hampering use of those scrambled phones). It was also proof that the Arizona Organized Crime and Racketeering Unit--the sparkplug of Sundevil--ranked with the best in the world in ambition, organization, and sheer conceptual daring. And, as a final fillip, Sundevil was a message from the Secret Service to their longtime rivals in the Federal Bureau of Investigation. By Congressional fiat, both USSS and FBI formally share jurisdiction over federal computer-crimebusting activities. Neither of these groups has ever been remotely happy with this muddled situation. It seems to suggest that Congress cannot make up its mind as to which of these groups is better qualified. And there is scarcely a G-man or a Special Agent anywhere without a very firm opinion on that topic. # For the neophyte, one of the most puzzling aspects of the crackdown on hackers is why the United States Secret Service has anything at all to do with this matter. The Secret Service is best known for its primary public role: its agents protect the President of the United States. They also guard the President's family, the Vice President and his family, former Presidents, and Presidential candidates. They sometimes guard foreign dignitaries who are visiting the United States, especially foreign heads of state, and have been known to accompany American officials on diplomatic missions overseas. Special Agents of the Secret Service don't wear uniforms, but the Secret Service also has two uniformed police agencies. There's the former White House Police (now known as the Secret Service Uniformed Division, since they currently guard foreign embassies in Washington, as well as the White House itself). And there's the uniformed Treasury Police Force. The Secret Service has been charged by Congress with a number of little-known duties. They guard the precious metals in Treasury vaults. They guard the most valuable historical documents of the United States: originals of the Constitution, the Declaration of Independence, Lincoln's Second Inaugural Address, an American-owned copy of the Magna Carta, and so forth. Once they were assigned to guard the Mona Lisa, on her American tour in the 1960s. The entire Secret Service is a division of the Treasury Department. Secret Service Special Agents (there are about 1,900 of them) are bodyguards for the President et al, but they all work for the Treasury. And the Treasury (through its divisions of the U.S. Mint and the Bureau of Engraving and Printing) prints the nation's money. As Treasury police, the Secret Service guards the nation's currency; it is the only federal law enforcement agency with direct jurisdiction over counterfeiting and forgery. It analyzes documents for authenticity, and its fight against fake cash is still quite lively (especially since the skilled counterfeiters of Medellin, Columbia have gotten into the act). Government checks, bonds, and other obligations, which exist in untold millions and are worth untold billions, are common targets for forgery, which the Secret Service also battles. It even handles forgery of postage stamps. But cash is fading in importance today as money has become electronic. As necessity beckoned, the Secret Service moved from fighting the counterfeiting of paper currency and the forging of checks, to the protection of funds transferred by wire. From wire-fraud, it was a simple skip-and-jump to what is formally known as "access device fraud." Congress granted the Secret Service the authority to investigate "access device fraud" under Title 18 of the United States Code (U.S.C. Section 1029). The term "access device" seems intuitively simple. It's some kind of high-tech gizmo you use to get money with. It makes good sense to put this sort of thing in the charge of counterfeiting and wire-fraud experts. However, in Section 1029, the term "access device" is very generously defined. An access device is: "any card, plate, code, account number, or other means of account access that can be used, alone or in conjunction with another access device, to obtain money, goods, services, or any other thing of value, or that can be used to initiate a transfer of funds." "Access device" can therefore be construed to include credit cards themselves (a popular forgery item nowadays). It also includes credit card account NUMBERS, those standards of the digital underground. The same goes for telephone charge cards (an increasingly popular item with telcos, who are tired of being robbed of pocket change by phone-booth thieves). And also telephone access CODES, those OTHER standards of the digital underground. (Stolen telephone codes may not "obtain money," but they certainly do obtain valuable "services," which is specifically forbidden by Section 1029.) We can now see that Section 1029 already pits the United States Secret Service directly against the digital underground, without any mention at all of the word "computer." Standard phreaking devices, like "blue boxes," used to steal phone service from old-fashioned mechanical switches, are unquestionably "counterfeit access devices." Thanks to Sec.1029, it is not only illegal to USE counterfeit access devices, but it is even illegal to BUILD them. "Producing," "designing" "duplicating" or "assembling" blue boxes are all federal crimes today, and if you do this, the Secret Service has been charged by Congress to come after you. Automatic Teller Machines, which replicated all over America during the 1980s, are definitely "access devices," too, and an attempt to tamper with their punch-in codes and plastic bank cards falls directly under Sec. 1029. Section 1029 is remarkably elastic. Suppose you find a computer password in somebody's trash. That password might be a "code"--it's certainly a "means of account access." Now suppose you log on to a computer and copy some software for yourself. You've certainly obtained "service" (computer service) and a "thing of value" (the software). Suppose you tell a dozen friends about your swiped password, and let them use it, too. Now you're "trafficking in unauthorized access devices." And when the Prophet, a member of the Legion of Doom, passed a stolen telephone company document to Knight Lightning at Phrack magazine, they were both charged under Sec. 1029! There are two limitations on Section 1029. First, the offense must "affect interstate or foreign commerce" in order to become a matter of federal jurisdiction. The term "affecting commerce" is not well defined; but you may take it as a given that the Secret Service can take an interest if you've done most anything that happens to cross a state line. State and local police can be touchy about their jurisdictions, and can sometimes be mulish when the feds show up. But when it comes to computer-crime, the local police are pathetically grateful for federal help--in fact they complain that they can't get enough of it. If you're stealing long-distance service, you're almost certainly crossing state lines, and you're definitely "affecting the interstate commerce" of the telcos. And if you're abusing credit cards by ordering stuff out of glossy catalogs from, say, Vermont, you're in for it. The second limitation is money. As a rule, the feds don't pursue penny-ante offenders. Federal judges will dismiss cases that appear to waste their time. Federal crimes must be serious; Section 1029 specifies a minimum loss of a thousand dollars. We now come to the very next section of Title 18, which is Section 1030, "Fraud and related activity in connection with computers." This statute gives the Secret Service direct jurisdiction over acts of computer intrusion. On the face of it, the Secret Service would now seem to command the field. Section 1030, however, is nowhere near so ductile as Section 1029. The first annoyance is Section 1030(d), which reads: "(d) The United States Secret Service shall, IN ADDITION TO ANY OTHER AGENCY HAVING SUCH AUTHORITY, have the authority to investigate offenses under this section. Such authority of the United States Secret Service shall be exercised in accordance with an agreement which shall be entered into by the Secretary of the Treasury AND THE ATTORNEY GENERAL." (Author's italics.) [Represented by capitals.] The Secretary of the Treasury is the titular head of the Secret Service, while the Attorney General is in charge of the FBI. In Section (d), Congress shrugged off responsibility for the computer-crime turf-battle between the Service and the Bureau, and made them fight it out all by themselves. The result was a rather dire one for the Secret Service, for the FBI ended up with exclusive jurisdiction over computer break-ins having to do with national security, foreign espionage, federally insured banks, and U.S. military bases, while retaining joint jurisdiction over all the other computer intrusions. Essentially, when it comes to Section 1030, the FBI not only gets the real glamor stuff for itself, but can peer over the shoulder of the Secret Service and barge in to meddle whenever it suits them. The second problem has to do with the dicey term "Federal interest computer." Section 1030(a)(2) makes it illegal to "access a computer without authorization" if that computer belongs to a financial institution or an issuer of credit cards (fraud cases, in other words). Congress was quite willing to give the Secret Service jurisdiction over money-transferring computers, but Congress balked at letting them investigate any and all computer intrusions. Instead, the USSS had to settle for the money machines and the "Federal interest computers." A "Federal interest computer" is a computer which the government itself owns, or is using. Large networks of interstate computers, linked over state lines, are also considered to be of "Federal interest." (This notion of "Federal interest" is legally rather foggy and has never been clearly defined in the courts. The Secret Service has never yet had its hand slapped for investigating computer break-ins that were NOT of "Federal interest," but conceivably someday this might happen.) So the Secret Service's authority over "unauthorized access" to computers covers a lot of territory, but by no means the whole ball of cyberspatial wax. If you are, for instance, a LOCAL computer retailer, or the owner of a LOCAL bulletin board system, then a malicious LOCAL intruder can break in, crash your system, trash your files and scatter viruses, and the U.S. Secret Service cannot do a single thing about it. At least, it can't do anything DIRECTLY. But the Secret Service will do plenty to help the local people who can. The FBI may have dealt itself an ace off the bottom of the deck when it comes to Section 1030; but that's not the whole story; that's not the street. What's Congress thinks is one thing, and Congress has been known to change its mind. The REAL turf-struggle is out there in the streets where it's happening. If you're a local street-cop with a computer problem, the Secret Service wants you to know where you can find the real expertise. While the Bureau crowd are off having their favorite shoes polished--(wing-tips)--and making derisive fun of the Service's favorite shoes--("pansy-ass tassels")-- the tassel-toting Secret Service has a crew of ready-and-able hacker-trackers installed in the capital of every state in the Union. Need advice? They'll give you advice, or at least point you in the right direction. Need training? They can see to that, too. If you're a local cop and you call in the FBI, the FBI (as is widely and slanderously rumored) will order you around like a coolie, take all the credit for your busts, and mop up every possible scrap of reflected glory. The Secret Service, on the other hand, doesn't brag a lot. They're the quiet types. VERY quiet. Very cool. Efficient. High-tech. Mirrorshades, icy stares, radio ear-plugs, an Uzi machine-pistol tucked somewhere in that well-cut jacket. American samurai, sworn to give their lives to protect our President. "The granite agents." Trained in martial arts, absolutely fearless. Every single one of 'em has a top-secret security clearance. Something goes a little wrong, you're not gonna hear any whining and moaning and political buck-passing out of these guys. The facade of the granite agent is not, of course, the reality. Secret Service agents are human beings. And the real glory in Service work is not in battling computer crime--not yet, anyway--but in protecting the President. The real glamour of Secret Service work is in the White House Detail. If you're at the President's side, then the kids and the wife see you on television; you rub shoulders with the most powerful people in the world. That's the real heart of Service work, the number one priority. More than one computer investigation has stopped dead in the water when Service agents vanished at the President's need. There's romance in the work of the Service. The intimate access to circles of great power; the esprit-de-corps of a highly trained and disciplined elite; the high responsibility of defending the Chief Executive; the fulfillment of a patriotic duty. And as police work goes, the pay's not bad. But there's squalor in Service work, too. You may get spat upon by protesters howling abuse--and if they get violent, if they get too close, sometimes you have to knock one of them down-- discreetly. The real squalor in Service work is drudgery such as "the quarterlies," traipsing out four times a year, year in, year out, to interview the various pathetic wretches, many of them in prisons and asylums, who have seen fit to threaten the President's life. And then there's the grinding stress of searching all those faces in the endless bustling crowds, looking for hatred, looking for psychosis, looking for the tight, nervous face of an Arthur Bremer, a Squeaky Fromme, a Lee Harvey Oswald. It's watching all those grasping, waving hands for sudden movements, while your ears strain at your radio headphone for the long-rehearsed cry of "Gun!" It's poring, in grinding detail, over the biographies of every rotten loser who ever shot at a President. It's the unsung work of the Protective Research Section, who study scrawled, anonymous death threats with all the meticulous tools of anti-forgery techniques. And it's maintaining the hefty computerized files on anyone who ever threatened the President's life. Civil libertarians have become increasingly concerned at the Government's use of computer files to track American citizens--but the Secret Service file of potential Presidential assassins, which has upward of twenty thousand names, rarely causes a peep of protest. If you EVER state that you intend to kill the President, the Secret Service will want to know and record who you are, where you are, what you are, and what you're up to. If you're a serious threat-- if you're officially considered "of protective interest"-- then the Secret Service may well keep tabs on you for the rest of your natural life. Protecting the President has first call on all the Service's resources. But there's a lot more to the Service's traditions and history than standing guard outside the Oval Office. The Secret Service is the nation's oldest general federal law-enforcement agency. Compared to the Secret Service, the FBI are new-hires and the CIA are temps. The Secret Service was founded 'way back in 1865, at the suggestion of Hugh McCulloch, Abraham Lincoln's Secretary of the Treasury. McCulloch wanted a specialized Treasury police to combat counterfeiting. Abraham Lincoln agreed that this seemed a good idea, and, with a terrible irony, Abraham Lincoln was shot that very night by John Wilkes Booth. The Secret Service originally had nothing to do with protecting Presidents. They didn't take this on as a regular assignment until after the Garfield assassination in 1881. And they didn't get any Congressional money for it until President McKinley was shot in 1901. The Service was originally designed for one purpose: destroying counterfeiters. # There are interesting parallels between the Service's nineteenth-century entry into counterfeiting, and America's twentieth-century entry into computer-crime. In 1865, America's paper currency was a terrible muddle. Security was drastically bad. Currency was printed on the spot by local banks in literally hundreds of different designs. No one really knew what the heck a dollar bill was supposed to look like. Bogus bills passed easily. If some joker told you that a one-dollar bill from the Railroad Bank of Lowell, Massachusetts had a woman leaning on a shield, with a locomotive, a cornucopia, a compass, various agricultural implements, a railroad bridge, and some factories, then you pretty much had to take his word for it. (And in fact he was telling the truth!) SIXTEEN HUNDRED local American banks designed and printed their own paper currency, and there were no general standards for security. Like a badly guarded node in a computer network, badly designed bills were easy to fake, and posed a security hazard for the entire monetary system. No one knew the exact extent of the threat to the currency. There were panicked estimates that as much as a third of the entire national currency was faked. Counterfeiters-- known as "boodlers" in the underground slang of the time-- were mostly technically skilled printers who had gone to the bad. Many had once worked printing legitimate currency. Boodlers operated in rings and gangs. Technical experts engraved the bogus plates--commonly in basements in New York City. Smooth confidence men passed large wads of high-quality, high-denomination fakes, including the really sophisticated stuff-- government bonds, stock certificates, and railway shares. Cheaper, botched fakes were sold or sharewared to low-level gangs of boodler wannabes. (The really cheesy lowlife boodlers merely upgraded real bills by altering face values, changing ones to fives, tens to hundreds, and so on.) The techniques of boodling were little-known and regarded with a certain awe by the mid- nineteenth-century public. The ability to manipulate the system for rip-off seemed diabolically clever. As the skill and daring of the boodlers increased, the situation became intolerable. The federal government stepped in, and began offering its own federal currency, which was printed in fancy green ink, but only on the back--the original "greenbacks." And at first, the improved security of the well-designed, well-printed federal greenbacks seemed to solve the problem; but then the counterfeiters caught on. Within a few years things were worse than ever: a CENTRALIZED system where ALL security was bad! The local police were helpless. The Government tried offering blood money to potential informants, but this met with little success. Banks, plagued by boodling, gave up hope of police help and hired private security men instead. Merchants and bankers queued up by the thousands to buy privately-printed manuals on currency security, slim little books like Laban Heath's INFALLIBLE GOVERNMENT COUNTERFEIT DETECTOR. The back of the book offered Laban Heath's patent microscope for five bucks. Then the Secret Service entered the picture. The first agents were a rough and ready crew. Their chief was one William P. Wood, a former guerilla in the Mexican War who'd won a reputation busting contractor fraudsters for the War Department during the Civil War. Wood, who was also Keeper of the Capital Prison, had a sideline as a counterfeiting expert, bagging boodlers for the federal bounty money. Wood was named Chief of the new Secret Service in July 1865. There were only ten Secret Service agents in all: Wood himself, a handful who'd worked for him in the War Department, and a few former private investigators--counterfeiting experts--whom Wood had won over to public service. (The Secret Service of 1865 was much the size of the Chicago Computer Fraud Task Force or the Arizona Racketeering Unit of 1990.) These ten "Operatives" had an additional twenty or so "Assistant Operatives" and "Informants." Besides salary and per diem, each Secret Service employee received a whopping twenty-five dollars for each boodler he captured. Wood himself publicly estimated that at least HALF of America's currency was counterfeit, a perhaps pardonable perception. Within a year the Secret Service had arrested over 200 counterfeiters. They busted about two hundred boodlers a year for four years straight. Wood attributed his success to travelling fast and light, hitting the bad-guys hard, and avoiding bureaucratic baggage. "Because my raids were made without military escort and I did not ask the assistance of state officers, I surprised the professional counterfeiter." Wood's social message to the once-impudent boodlers bore an eerie ring of Sundevil: "It was also my purpose to convince such characters that it would no longer be healthy for them to ply their vocation without being handled roughly, a fact they soon discovered." William P. Wood, the Secret Service's guerilla pioneer, did not end well. He succumbed to the lure of aiming for the really big score. The notorious Brockway Gang of New York City, headed by William E. Brockway, the "King of the Counterfeiters," had forged a number of government bonds. They'd passed these brilliant fakes on the prestigious Wall Street investment firm of Jay Cooke and Company. The Cooke firm were frantic and offered a huge reward for the forgers' plates. Laboring diligently, Wood confiscated the plates (though not Mr. Brockway) and claimed the reward. But the Cooke company treacherously reneged. Wood got involved in a down-and-dirty lawsuit with the Cooke capitalists. Wood's boss, Secretary of the Treasury McCulloch, felt that Wood's demands for money and glory were unseemly, and even when the reward money finally came through, McCulloch refused to pay Wood anything. Wood found himself mired in a seemingly endless round of federal suits and Congressional lobbying. Wood never got his money. And he lost his job to boot. He resigned in 1869. Wood's agents suffered, too. On May 12, 1869, the second Chief of the Secret Service took over, and almost immediately fired most of Wood's pioneer Secret Service agents: Operatives, Assistants and Informants alike. The practice of receiving $25 per crook was abolished. And the Secret Service began the long, uncertain process of thorough professionalization. Wood ended badly. He must have felt stabbed in the back. In fact his entire organization was mangled. On the other hand, William P. Wood WAS the first head of the Secret Service. William Wood was the pioneer. People still honor his name. Who remembers the name of the SECOND head of the Secret Service? As for William Brockway (also known as "Colonel Spencer"), he was finally arrested by the Secret Service in 1880. He did five years in prison, got out, and was still boodling at the age of seventy-four. # Anyone with an interest in Operation Sundevil-- or in American computer-crime generally-- could scarcely miss the presence of Gail Thackeray, Assistant Attorney General of the State of Arizona. Computer-crime training manuals often cited Thackeray's group and her work; she was the highest-ranking state official to specialize in computer-related offenses. Her name had been on the Sundevil press release (though modestly ranked well after the local federal prosecuting attorney and the head of the Phoenix Secret Service office). As public commentary, and controversy, began to mount about the Hacker Crackdown, this Arizonan state official began to take a higher and higher public profile. Though uttering almost nothing specific about the Sundevil operation itself, she coined some of the most striking soundbites of the growing propaganda war: "Agents are operating in good faith, and I don't think you can say that for the hacker community," was one. Another was the memorable "I am not a mad dog prosecutor" (Houston Chronicle, Sept 2, 1990.) In the meantime, the Secret Service maintained its usual extreme discretion; the Chicago Unit, smarting from the backlash of the Steve Jackson scandal, had gone completely to earth. As I collated my growing pile of newspaper clippings, Gail Thackeray ranked as a comparative fount of public knowledge on police operations. I decided that I had to get to know Gail Thackeray. I wrote to her at the Arizona Attorney General's Office. Not only did she kindly reply to me, but, to my astonishment, she knew very well what "cyberpunk" science fiction was. Shortly after this, Gail Thackeray lost her job. And I temporarily misplaced my own career as a science-fiction writer, to become a full-time computer-crime journalist. In early March, 1991, I flew to Phoenix, Arizona, to interview Gail Thackeray for my book on the hacker crackdown. # "Credit cards didn't used to cost anything to get," says Gail Thackeray. "Now they cost forty bucks-- and that's all just to cover the costs from RIP-OFF ARTISTS." Electronic nuisance criminals are parasites. One by one they're not much harm, no big deal. But they never come just one by one. They come in swarms, heaps, legions, sometimes whole subcultures. And they bite. Every time we buy a credit card today, we lose a little financial vitality to a particular species of bloodsucker. What, in her expert opinion, are the worst forms of electronic crime, I ask, consulting my notes. Is it--credit card fraud? Breaking into ATM bank machines? Phone-phreaking? Computer intrusions? Software viruses? Access-code theft? Records tampering? Software piracy? Pornographic bulletin boards? Satellite TV piracy? Theft of cable service? It's a long list. By the time I reach the end of it I feel rather depressed. "Oh no," says Gail Thackeray, leaning forward over the table, her whole body gone stiff with energetic indignation, "the biggest damage is telephone fraud. Fake sweepstakes, fake charities. Boiler-room con operations. You could pay off the national debt with what these guys steal. . . . They target old people, they get hold of credit ratings and demographics, they rip off the old and the weak." The words come tumbling out of her. It's low-tech stuff, your everyday boiler-room fraud. Grifters, conning people out of money over the phone, have been around for decades. This is where the word "phony" came from! It's just that it's so much EASIER now, horribly facilitated by advances in technology and the byzantine structure of the modern phone system. The same professional fraudsters do it over and over, Thackeray tells me, they hide behind dense onion-shells of fake companies. . . fake holding corporations nine or ten layers deep, registered all over the map. They get a phone installed under a false name in an empty safe-house. And then they call-forward everything out of that phone to yet another phone, a phone that may even be in another STATE. And they don't even pay the charges on their phones; after a month or so, they just split; set up somewhere else in another Podunkville with the same seedy crew of veteran phone-crooks. They buy or steal commercial credit card reports, slap them on the PC, have a program pick out people over sixty-five who pay a lot to charities. A whole subculture living off this, merciless folks on the con. "The `light-bulbs for the blind' people," Thackeray muses, with a special loathing. "There's just no end to them." We're sitting in a downtown diner in Phoenix, Arizona. It's a tough town, Phoenix. A state capital seeing some hard times. Even to a Texan like myself, Arizona state politics seem rather baroque. There was, and remains, endless trouble over the Martin Luther King holiday, the sort of stiff-necked, foot-shooting incident for which Arizona politics seem famous. There was Evan Mecham, the eccentric Republican millionaire governor who was impeached, after reducing state government to a ludicrous shambles. Then there was the national Keating scandal, involving Arizona savings and loans, in which both of Arizona's U.S. senators, DeConcini and McCain, played sadly prominent roles. And the very latest is the bizarre AzScam case, in which state legislators were videotaped, eagerly taking cash from an informant of the Phoenix city police department, who was posing as a Vegas mobster. "Oh," says Thackeray cheerfully. "These people are amateurs here, they thought they were finally getting to play with the big boys. They don't have the least idea how to take a bribe! It's not institutional corruption. It's not like back in Philly." Gail Thackeray was a former prosecutor in Philadelphia. Now she's a former assistant attorney general of the State of Arizona. Since moving to Arizona in 1986, she had worked under the aegis of Steve Twist, her boss in the Attorney General's office. Steve Twist wrote Arizona's pioneering computer crime laws and naturally took an interest in seeing them enforced. It was a snug niche, and Thackeray's Organized Crime and Racketeering Unit won a national reputation for ambition and technical knowledgeability. . . . Until the latest election in Arizona. Thackeray's boss ran for the top job, and lost. The victor, the new Attorney General, apparently went to some pains to eliminate the bureaucratic traces of his rival, including his pet group--Thackeray's group. Twelve people got their walking papers. Now Thackeray's painstakingly assembled computer lab sits gathering dust somewhere in the glass-and-concrete Attorney General's HQ on 1275 Washington Street. Her computer-crime books, her painstakingly garnered back issues of phreak and hacker zines, all bought at her own expense--are piled in boxes somewhere. The State of Arizona is simply not particularly interested in electronic racketeering at the moment. At the moment of our interview, Gail Thackeray, officially unemployed, is working out of the county sheriff's office, living on her savings, and prosecuting several cases--working 60-hour weeks, just as always-- for no pay at all. "I'm trying to train people," she mutters. Half her life seems to be spent training people--merely pointing out, to the naive and incredulous (such as myself) that this stuff is ACTUALLY GOING ON OUT THERE. It's a small world, computer crime. A young world. Gail Thackeray, a trim blonde Baby-Boomer who favors Grand Canyon white-water rafting to kill some slow time, is one of the world's most senior, most veteran "hacker-trackers." Her mentor was Donn Parker, the California think-tank theorist who got it all started `way back in the mid-70s, the "grandfather of the field," "the great bald eagle of computer crime." And what she has learned, Gail Thackeray teaches. Endlessly. Tirelessly. To anybody. To Secret Service agents and state police, at the Glynco, Georgia federal training center. To local police, on "roadshows" with her slide projector and notebook. To corporate security personnel. To journalists. To parents. Even CROOKS look to Gail Thackeray for advice. Phone-phreaks call her at the office. They know very well who she is. They pump her for information on what the cops are up to, how much they know. Sometimes whole CROWDS of phone phreaks, hanging out on illegal conference calls, will call Gail Thackeray up. They taunt her. And, as always, they boast. Phone-phreaks, real stone phone-phreaks, simply CANNOT SHUT UP. They natter on for hours. Left to themselves, they mostly talk about the intricacies of ripping-off phones; it's about as interesting as listening to hot-rodders talk about suspension and distributor-caps. They also gossip cruelly about each other. And when talking to Gail Thackeray, they incriminate themselves. "I have tapes," Thackeray says coolly. Phone phreaks just talk like crazy. "Dial-Tone" out in Alabama has been known to spend half-an-hour simply reading stolen phone-codes aloud into voice-mail answering machines. Hundreds, thousands of numbers, recited in a monotone, without a break--an eerie phenomenon. When arrested, it's a rare phone phreak who doesn't inform at endless length on everybody he knows. Hackers are no better. What other group of criminals, she asks rhetorically, publishes newsletters and holds conventions? She seems deeply nettled by the sheer brazenness of this behavior, though to an outsider, this activity might make one wonder whether hackers should be considered "criminals" at all. Skateboarders have magazines, and they trespass a lot. Hot rod people have magazines and they break speed limits and sometimes kill people. . . . I ask her whether it would be any loss to society if phone phreaking and computer hacking, as hobbies, simply dried up and blew away, so that nobody ever did it again. She seems surprised. "No," she says swiftly. "Maybe a little. . . in the old days. . .the MIT stuff. . . . But there's a lot of wonderful, legal stuff you can do with computers now, you don't have to break into somebody else's just to learn. You don't have that excuse. You can learn all you like." Did you ever hack into a system? I ask. The trainees do it at Glynco. Just to demonstrate system vulnerabilities. She's cool to the notion. Genuinely indifferent. "What kind of computer do you have?" "A Compaq 286LE," she mutters. "What kind do you WISH you had?" At this question, the unmistakable light of true hackerdom flares in Gail Thackeray's eyes. She becomes tense, animated, the words pour out: "An Amiga 2000 with an IBM card and Mac emulation! The most common hacker machines are Amigas and Commodores. And Apples." If she had the Amiga, she enthuses, she could run a whole galaxy of seized computer-evidence disks on one convenient multifunctional machine. A cheap one, too. Not like the old Attorney General lab, where they had an ancient CP/M machine, assorted Amiga flavors and Apple flavors, a couple IBMS, all the utility software. . .but no Commodores. The workstations down at the Attorney General's are Wang dedicated word-processors. Lame machines tied in to an office net--though at least they get on- line to the Lexis and Westlaw legal data services. I don't say anything. I recognize the syndrome, though. This computer-fever has been running through segments of our society for years now. It's a strange kind of lust: K-hunger, Meg-hunger; but it's a shared disease; it can kill parties dead, as conversation spirals into the deepest and most deviant recesses of software releases and expensive peripherals. . . . The mark of the hacker beast. I have it too. The whole "electronic community," whatever the hell that is, has it. Gail Thackeray has it. Gail Thackeray is a hacker cop. My immediate reaction is a strong rush of indignant pity: WHY DOESN'T SOMEBODY BUY THIS WOMAN HER AMIGA?! It's not like she's asking for a Cray X-MP supercomputer mainframe; an Amiga's a sweet little cookie-box thing. We're losing zillions in organized fraud; prosecuting and defending a single hacker case in court can cost a hundred grand easy. How come nobody can come up with four lousy grand so this woman can do her job? For a hundred grand we could buy every computer cop in America an Amiga. There aren't that many of 'em. Computers. The lust, the hunger, for computers. The loyalty they inspire, the intense sense of possessiveness. The culture they have bred. I myself am sitting in downtown Phoenix, Arizona because it suddenly occurred to me that the police might-- just MIGHT--come and take away my computer. The prospect of this, the mere IMPLIED THREAT, was unbearable. It literally changed my life. It was changing the lives of many others. Eventually it would change everybody's life. Gail Thackeray was one of the top computer-crime people in America. And I was just some novelist, and yet I had a better computer than hers. PRACTICALLY EVERYBODY I KNEW had a better computer than Gail Thackeray and her feeble laptop 286. It was like sending the sheriff in to clean up Dodge City and arming her with a slingshot cut from an old rubber tire. But then again, you don't need a howitzer to enforce the law. You can do a lot just with a badge. With a badge alone, you can basically wreak havoc, take a terrible vengeance on wrongdoers. Ninety percent of "computer crime investigation" is just "crime investigation:" names, places, dossiers, modus operandi, search warrants, victims, complainants, informants. . . . What will computer crime look like in ten years? Will it get better? Did "Sundevil" send 'em reeling back in confusion? It'll be like it is now, only worse, she tells me with perfect conviction. Still there in the background, ticking along, changing with the times: the criminal underworld. It'll be like drugs are. Like our problems with alcohol. All the cops and laws in the world never solved our problems with alcohol. If there's something people want, a certain percentage of them are just going to take it. Fifteen percent of the populace will never steal. Fifteen percent will steal most anything not nailed down. The battle is for the hearts and minds of the remaining seventy percent. And criminals catch on fast. If there's not "too steep a learning curve"-- if it doesn't require a baffling amount of expertise and practice-- then criminals are often some of the first through the gate of a new technology. Especially if it helps them to hide. They have tons of cash, criminals. The new communications tech-- like pagers, cellular phones, faxes, Federal Express--were pioneered by rich corporate people, and by criminals. In the early years of pagers and beepers, dope dealers were so enthralled this technology that owing a beeper was practically prima facie evidence of cocaine dealing. CB radio exploded when the speed limit hit 55 and breaking the highway law became a national pastime. Dope dealers send cash by Federal Express, despite, or perhaps BECAUSE OF, the warnings in FedEx offices that tell you never to try this. Fed Ex uses X-rays and dogs on their mail, to stop drug shipments. That doesn't work very well. Drug dealers went wild over cellular phones. There are simple methods of faking ID on cellular phones, making the location of the call mobile, free of charge, and effectively untraceable. Now victimized cellular companies routinely bring in vast toll-lists of calls to Colombia and Pakistan. Judge Greene's fragmentation of the phone company is driving law enforcement nuts. Four thousand telecommunications companies. Fraud skyrocketing. Every temptation in the world available with a phone and a credit card number. Criminals untraceable. A galaxy of "new neat rotten things to do." If there were one thing Thackeray would like to have, it would be an effective legal end-run through this new fragmentation minefield. It would be a new form of electronic search warrant, an "electronic letter of marque" to be issued by a judge. It would create a new category of "electronic emergency." Like a wiretap, its use would be rare, but it would cut across state lines and force swift cooperation from all concerned. Cellular, phone, laser, computer network, PBXes, AT&T, Baby Bells, long-distance entrepreneurs, packet radio. Some document, some mighty court-order, that could slice through four thousand separate forms of corporate red-tape, and get her at once to the source of calls, the source of email threats and viruses, the sources of bomb threats, kidnapping threats. "From now on," she says, "the Lindbergh baby will always die." Something that would make the Net sit still, if only for a moment. Something that would get her up to speed. Seven league boots. That's what she really needs. "Those guys move in nanoseconds and I'm on the Pony Express." And then, too, there's the coming international angle. Electronic crime has never been easy to localize, to tie to a physical jurisdiction. And phone-phreaks and hackers loathe boundaries, they jump them whenever they can. The English. The Dutch. And the Germans, especially the ubiquitous Chaos Computer Club. The Australians. They've all learned phone-phreaking from America. It's a growth mischief industry. The multinational networks are global, but governments and the police simply aren't. Neither are the laws. Or the legal frameworks for citizen protection. One language is global, though--English. Phone phreaks speak English; it's their native tongue even if they're Germans. English may have started in England but now it's the Net language; it might as well be called "CNNese." Asians just aren't much into phone phreaking. They're the world masters at organized software piracy. The French aren't into phone-phreaking either. The French are into computerized industrial espionage. In the old days of the MIT righteous hackerdom, crashing systems didn't hurt anybody. Not all that much, anyway. Not permanently. Now the players are more venal. Now the consequences are worse. Hacking will begin killing people soon. Already there are methods of stacking calls onto 911 systems, annoying the police, and possibly causing the death of some poor soul calling in with a genuine emergency. Hackers in Amtrak computers, or air-traffic control computers, will kill somebody someday. Maybe a lot of people. Gail Thackeray expects it. And the viruses are getting nastier. The "Scud" virus is the latest one out. It wipes hard-disks. According to Thackeray, the idea that phone-phreaks are Robin Hoods is a fraud. They don't deserve this repute. Basically, they pick on the weak. AT&T now protects itself with the fearsome ANI (Automatic Number Identification) trace capability. When AT&T wised up and tightened security generally, the phreaks drifted into the Baby Bells. The Baby Bells lashed out in 1989 and 1990, so the phreaks switched to smaller long-distance entrepreneurs. Today, they are moving into locally owned PBXes and voice-mail systems, which are full of security holes, dreadfully easy to hack. These victims aren't the moneybags Sheriff of Nottingham or Bad King John, but small groups of innocent people who find it hard to protect themselves, and who really suffer from these depredations. Phone phreaks pick on the weak. They do it for power. If it were legal, they wouldn't do it. They don't want service, or knowledge, they want the thrill of power-tripping. There's plenty of knowledge or service around if you're willing to pay. Phone phreaks don't pay, they steal. It's because it is illegal that it feels like power, that it gratifies their vanity. I leave Gail Thackeray with a handshake at the door of her office building-- a vast International-Style office building downtown. The Sheriff's office is renting part of it. I get the vague impression that quite a lot of the building is empty--real estate crash. In a Phoenix sports apparel store, in a downtown mall, I meet the "Sun Devil" himself. He is the cartoon mascot of Arizona State University, whose football stadium, "Sundevil," is near the local Secret Service HQ--hence the name Operation Sundevil. The Sun Devil himself is named "Sparky." Sparky the Sun Devil is maroon and bright yellow, the school colors. Sparky brandishes a three-tined yellow pitchfork. He has a small mustache, pointed ears, a barbed tail, and is dashing forward jabbing the air with the pitchfork, with an expression of devilish glee. Phoenix was the home of Operation Sundevil. The Legion of Doom ran a hacker bulletin board called "The Phoenix Project." An Australian hacker named "Phoenix" once burrowed through the Internet to attack Cliff Stoll, then bragged and boasted about it to The New York Times. This net of coincidence is both odd and meaningless. The headquarters of the Arizona Attorney General, Gail Thackeray's former workplace, is on 1275 Washington Avenue. Many of the downtown streets in Phoenix are named after prominent American presidents: Washington, Jefferson, Madison. . . . After dark, all the employees go home to their suburbs. Washington, Jefferson and Madison--what would be the Phoenix inner city, if there were an inner city in this sprawling automobile-bred town--become the haunts of transients and derelicts. The homeless. The sidewalks along Washington are lined with orange trees. Ripe fallen fruit lies scattered like croquet balls on the sidewalks and gutters. No one seems to be eating them. I try a fresh one. It tastes unbearably bitter. The Attorney General's office, built in 1981 during the Babbitt administration, is a long low two-story building of white cement and wall-sized sheets of curtain-glass. Behind each glass wall is a lawyer's office, quite open and visible to anyone strolling by. Across the street is a dour government building labelled simply ECONOMIC SECURITY, something that has not been in great supply in the American Southwest lately. The offices are about twelve feet square. They feature tall wooden cases full of red-spined lawbooks; Wang computer monitors; telephones; Post-it notes galore. Also framed law diplomas and a general excess of bad Western landscape art. Ansel Adams photos are a big favorite, perhaps to compensate for the dismal specter of the parking lot, two acres of striped black asphalt, which features gravel landscaping and some sickly-looking barrel cacti. It has grown dark. Gail Thackeray has told me that the people who work late here, are afraid of muggings in the parking lot. It seems cruelly ironic that a woman tracing electronic racketeers across the interstate labyrinth of Cyberspace should fear an assault by a homeless derelict in the parking lot of her own workplace. Perhaps this is less than coincidence. Perhaps these two seemingly disparate worlds are somehow generating one another. The poor and disenfranchised take to the streets, while the rich and computer-equipped, safe in their bedrooms, chatter over their modems. Quite often the derelicts kick the glass out and break in to the lawyers' offices, if they see something they need or want badly enough. I cross the parking lot to the street behind the Attorney General's office. A pair of young tramps are bedding down on flattened sheets of cardboard, under an alcove stretching over the sidewalk. One tramp wears a glitter-covered T-shirt reading "CALIFORNIA" in Coca-Cola cursive. His nose and cheeks look chafed and swollen; they glisten with what seems to be Vaseline. The other tramp has a ragged long-sleeved shirt and lank brown hair parted in the middle. They both wear blue jeans coated in grime. They are both drunk. "You guys crash here a lot?" I ask them. They look at me warily. I am wearing black jeans, a black pinstriped suit jacket and a black silk tie. I have odd shoes and a funny haircut. "It's our first time here," says the red-nosed tramp unconvincingly. There is a lot of cardboard stacked here. More than any two people could use. "We usually stay at the Vinnie's down the street," says the brown-haired tramp, puffing a Marlboro with a meditative air, as he sprawls with his head on a blue nylon backpack. "The Saint Vincent's." "You know who works in that building over there?" I ask, pointing. The brown-haired tramp shrugs. "Some kind of attorneys, it says." We urge one another to take it easy. I give them five bucks. A block down the street I meet a vigorous workman who is wheeling along some kind of industrial trolley; it has what appears to be a tank of propane on it. We make eye contact. We nod politely. I walk past him. "Hey! Excuse me sir!" he says. "Yes?" I say, stopping and turning. "Have you seen," the guy says rapidly, "a black guy, about 6'7", scars on both his cheeks like this--" he gestures-- "wears a black baseball cap on backwards, wandering around here anyplace?" "Sounds like I don't much WANT to meet him," I say. "He took my wallet," says my new acquaintance. "Took it this morning. Y'know, some people would be SCARED of a guy like that. But I'm not scared. I'm from Chicago. I'm gonna hunt him down. We do things like that in Chicago." "Yeah?" "I went to the cops and now he's got an APB out on his ass," he says with satisfaction. "You run into him, you let me know." "Okay," I say. "What is your name, sir?" "Stanley. . . ." "And how can I reach you?" "Oh," Stanley says, in the same rapid voice, "you don't have to reach, uh, me. You can just call the cops. Go straight to the cops." He reaches into a pocket and pulls out a greasy piece of pasteboard. "See, here's my report on him." I look. The "report," the size of an index card, is labelled PRO-ACT: Phoenix Residents Opposing Active Crime Threat. . . . or is it Organized Against Crime Threat? In the darkening street it's hard to read. Some kind of vigilante group? Neighborhood watch? I feel very puzzled. "Are you a police officer, sir?" He smiles, seems very pleased by the question. "No," he says. "But you are a `Phoenix Resident?'" "Would you believe a homeless person," Stanley says. "Really? But what's with the. . . ." For the first time I take a close look at Stanley's trolley. It's a rubber-wheeled thing of industrial metal, but the device I had mistaken for a tank of propane is in fact a water-cooler. Stanley also has an Army duffel-bag, stuffed tight as a sausage with clothing or perhaps a tent, and, at the base of his trolley, a cardboard box and a battered leather briefcase. "I see," I say, quite at a loss. For the first time I notice that Stanley has a wallet. He has not lost his wallet at all. It is in his back pocket and chained to his belt. It's not a new wallet. It seems to have seen a lot of wear. "Well, you know how it is, brother," says Stanley. Now that I know that he is homeless--A POSSIBLE THREAT--my entire perception of him has changed in an instant. His speech, which once seemed just bright and enthusiastic, now seems to have a dangerous tang of mania. "I have to do this!" he assures me. "Track this guy down. . . . It's a thing I do. . . you know. . .to keep myself together!" He smiles, nods, lifts his trolley by its decaying rubber handgrips. "Gotta work together, y'know," Stanley booms, his face alight with cheerfulness, "the police can't do everything!" The gentlemen I met in my stroll in downtown Phoenix are the only computer illiterates in this book. To regard them as irrelevant, however, would be a grave mistake. As computerization spreads across society, the populace at large is subjected to wave after wave of future shock. But, as a necessary converse, the "computer community" itself is subjected to wave after wave of incoming computer illiterates. How will those currently enjoying America's digital bounty regard, and treat, all this teeming refuse yearning to breathe free? Will the electronic frontier be another Land of Opportunity-- or an armed and monitored enclave, where the disenfranchised snuggle on their cardboard at the locked doors of our houses of justice? Some people just don't get along with computers. They can't read. They can't type. They just don't have it in their heads to master arcane instructions in wirebound manuals. Somewhere, the process of computerization of the populace will reach a limit. Some people-- quite decent people maybe, who might have thrived in any other situation-- will be left irretrievably outside the bounds. What's to be done with these people, in the bright new shiny electroworld? How will they be regarded, by the mouse-whizzing masters of cyberspace? With contempt? Indifference? Fear? In retrospect, it astonishes me to realize how quickly poor Stanley became a perceived threat. Surprise and fear are closely allied feelings. And the world of computing is full of surprises. I met one character in the streets of Phoenix whose role in this book is supremely and directly relevant. That personage was Stanley's giant thieving scarred phantom. This phantasm is everywhere in this book. He is the specter haunting cyberspace. Sometimes he's a maniac vandal ready to smash the phone system for no sane reason at all. Sometimes he's a fascist fed, coldly programming his mighty mainframes to destroy our Bill of Rights. Sometimes he's a telco bureaucrat, covertly conspiring to register all modems in the service of an Orwellian surveillance regime. Mostly, though, this fearsome phantom is a "hacker." He's strange, he doesn't belong, he's not authorized, he doesn't smell right, he's not keeping his proper place, he's not one of us. The focus of fear is the hacker, for much the same reasons that Stanley's fancied assailant is black. Stanley's demon can't go away, because he doesn't exist. Despite singleminded and tremendous effort, he can't be arrested, sued, jailed, or fired. The only constructive way to do ANYTHING about him is to learn more about Stanley himself. This learning process may be repellent, it may be ugly, it may involve grave elements of paranoiac confusion, but it's necessary. Knowing Stanley requires something more than class-crossing condescension. It requires more than steely legal objectivity. It requires human compassion and sympathy. To know Stanley is to know his demon. If you know the other guy's demon, then maybe you'll come to know some of your own. You'll be able to separate reality from illusion. And then you won't do your cause, and yourself, more harm than good. Like poor damned Stanley from Chicago did. # The Federal Computer Investigations Committee (FCIC) is the most important and influential organization in the realm of American computer-crime. Since the police of other countries have largely taken their computer-crime cues from American methods, the FCIC might well be called the most important computer crime group in the world. It is also, by federal standards, an organization of great unorthodoxy. State and local investigators mix with federal agents. Lawyers, financial auditors and computer-security programmers trade notes with street cops. Industry vendors and telco security people show up to explain their gadgetry and plead for protection and justice. Private investigators, think-tank experts and industry pundits throw in their two cents' worth. The FCIC is the antithesis of a formal bureaucracy. Members of the FCIC are obscurely proud of this fact; they recognize their group as aberrant, but are entirely convinced that this, for them, outright WEIRD behavior is nevertheless ABSOLUTELY NECESSARY to get their jobs done. FCIC regulars --from the Secret Service, the FBI, the IRS, the Department of Labor, the offices of federal attorneys, state police, the Air Force, from military intelligence-- often attend meetings, held hither and thither across the country, at their own expense. The FCIC doesn't get grants. It doesn't charge membership fees. It doesn't have a boss. It has no headquarters-- just a mail drop in Washington DC, at the Fraud Division of the Secret Service. It doesn't have a budget. It doesn't have schedules. It meets three times a year--sort of. Sometimes it issues publications, but the FCIC has no regular publisher, no treasurer, not even a secretary. There are no minutes of FCIC meetings. Non-federal people are considered "non-voting members," but there's not much in the way of elections. There are no badges, lapel pins or certificates of membership. Everyone is on a first-name basis. There are about forty of them. Nobody knows how many, exactly. People come, people go-- sometimes people "go" formally but still hang around anyway. Nobody has ever exactly figured out what "membership" of this "Committee" actually entails. Strange as this may seem to some, to anyone familiar with the social world of computing, the "organization" of the FCIC is very recognizable. For years now, economists and management theorists have speculated that the tidal wave of the information revolution would destroy rigid, pyramidal bureaucracies, where everything is top-down and centrally controlled. Highly trained "employees" would take on much greater autonomy, being self-starting, and self-motivating, moving from place to place, task to task, with great speed and fluidity. "Ad-hocracy" would rule, with groups of people spontaneously knitting together across organizational lines, tackling the problem at hand, applying intense computer-aided expertise to it, and then vanishing whence they came. This is more or less what has actually happened in the world of federal computer investigation. With the conspicuous exception of the phone companies, which are after all over a hundred years old, practically EVERY organization that plays any important role in this book functions just like the FCIC. The Chicago Task Force, the Arizona Racketeering Unit, the Legion of Doom, the Phrack crowd, the Electronic Frontier Foundation--they ALL look and act like "tiger teams" or "user's groups." They are all electronic ad-hocracies leaping up spontaneously to attempt to meet a need. Some are police. Some are, by strict definition, criminals. Some are political interest-groups. But every single group has that same quality of apparent spontaneity--"Hey, gang! My uncle's got a barn--let's put on a show!" Every one of these groups is embarrassed by this "amateurism," and, for the sake of their public image in a world of non-computer people, they all attempt to look as stern and formal and impressive as possible. These electronic frontier-dwellers resemble groups of nineteenth-century pioneers hankering after the respectability of statehood. There are however, two crucial differences in the historical experience of these "pioneers" of the nineteeth and twenty-first centuries. First, powerful information technology DOES play into the hands of small, fluid, loosely organized groups. There have always been "pioneers," "hobbyists," "amateurs," "dilettantes," "volunteers," "movements," "users' groups" and "blue-ribbon panels of experts" around. But a group of this kind--when technically equipped to ship huge amounts of specialized information, at lightning speed, to its members, to government, and to the press--is simply a different kind of animal. It's like the difference between an eel and an electric eel. The second crucial change is that American society is currently in a state approaching permanent technological revolution. In the world of computers particularly, it is practically impossible to EVER stop being a "pioneer," unless you either drop dead or deliberately jump off the bus. The scene has never slowed down enough to become well-institutionalized. And after twenty, thirty, forty years the "computer revolution" continues to spread, to permeate new corners of society. Anything that really works is already obsolete. If you spend your entire working life as a "pioneer," the word "pioneer" begins to lose its meaning. Your way of life looks less and less like an introduction to something else" more stable and organized, and more and more like JUST THE WAY THINGS ARE. A "permanent revolution" is really a contradiction in terms. If "turmoil" lasts long enough, it simply becomes A NEW KIND OF SOCIETY--still the same game of history, but new players, new rules. Apply this to the world of late twentieth-century law enforcement, and the implications are novel and puzzling indeed. Any bureaucratic rulebook you write about computer-crime will be flawed when you write it, and almost an antique by the time it sees print. The fluidity and fast reactions of the FCIC give them a great advantage in this regard, which explains their success. Even with the best will in the world (which it does not, in fact, possess) it is impossible for an organization the size of the U.S. Federal Bureau of Investigation to get up to speed on the theory and practice of computer crime. If they tried to train all their agents to do this, it would be SUICIDAL, as they would NEVER BE ABLE TO DO ANYTHING ELSE. The FBI does try to train its agents in the basics of electronic crime, at their base in Quantico, Virginia. And the Secret Service, along with many other law enforcement groups, runs quite successful and well-attended training courses on wire fraud, business crime, and computer intrusion at the Federal Law Enforcement Training Center (FLETC, pronounced "fletsy") in Glynco, Georgia. But the best efforts of these bureaucracies does not remove the absolute need for a "cutting-edge mess" like the FCIC. For you see--the members of FCIC ARE the trainers of the rest of law enforcement. Practically and literally speaking, they are the Glynco computer-crime faculty by another name. If the FCIC went over a cliff on a bus, the U.S. law enforcement community would be rendered deaf dumb and blind in the world of computer crime, and would swiftly feel a desperate need to reinvent them. And this is no time to go starting from scratch. On June 11, 1991, I once again arrived in Phoenix, Arizona, for the latest meeting of the Federal Computer Investigations Committee. This was more or less the twentieth meeting of this stellar group. The count was uncertain, since nobody could figure out whether to include the meetings of "the Colluquy," which is what the FCIC was called in the mid-1980s before it had even managed to obtain the dignity of its own acronym. Since my last visit to Arizona, in May, the local AzScam bribery scandal had resolved itself in a general muddle of humiliation. The Phoenix chief of police, whose agents had videotaped nine state legislators up to no good, had resigned his office in a tussle with the Phoenix city council over the propriety of his undercover operations. The Phoenix Chief could now join Gail Thackeray and eleven of her closest associates in the shared experience of politically motivated unemployment. As of June, resignations were still continuing at the Arizona Attorney General's office, which could be interpreted as either a New Broom Sweeping Clean or a Night of the Long Knives Part II, depending on your point of view. The meeting of FCIC was held at the Scottsdale Hilton Resort. Scottsdale is a wealthy suburb of Phoenix, known as "Scottsdull" to scoffing local trendies, but well-equipped with posh shopping-malls and manicured lawns, while conspicuously undersupplied with homeless derelicts. The Scottsdale Hilton Resort was a sprawling hotel in postmodern crypto-Southwestern style. It featured a "mission bell tower" plated in turquoise tile and vaguely resembling a Saudi minaret. Inside it was all barbarically striped Santa Fe Style decor. There was a health spa downstairs and a large oddly-shaped pool in the patio. A poolside umbrella-stand offered Ben and Jerry's politically correct Peace Pops. I registered as a member of FCIC, attaining a handy discount rate, then went in search of the Feds. Sure enough, at the back of the hotel grounds came the unmistakable sound of Gail Thackeray holding forth. Since I had also attended the Computers Freedom and Privacy conference (about which more later), this was the second time I had seen Thackeray in a group of her law enforcement colleagues. Once again I was struck by how simply pleased they seemed to see her. It was natural that she'd get SOME attention, as Gail was one of two women in a group of some thirty men; but there was a lot more to it than that. Gail Thackeray personifies the social glue of the FCIC. They could give a damn about her losing her job with the Attorney General. They were sorry about it, of course, but hell, they'd all lost jobs. If they were the kind of guys who liked steady boring jobs, they would never have gotten into computer work in the first place. I wandered into her circle and was immediately introduced to five strangers. The conditions of my visit at FCIC were reviewed. I would not quote anyone directly. I would not tie opinions expressed to the agencies of the attendees. I would not (a purely hypothetical example) report the conversation of a guy from the Secret Service talking quite civilly to a guy from the FBI, as these two agencies NEVER talk to each other, and the IRS (also present, also hypothetical) NEVER TALKS TO ANYBODY. Worse yet, I was forbidden to attend the first conference. And I didn't. I have no idea what the FCIC was up to behind closed doors that afternoon. I rather suspect that they were engaging in a frank and thorough confession of their errors, goof-ups and blunders, as this has been a feature of every FCIC meeting since their legendary Memphis beer-bust of 1986. Perhaps the single greatest attraction of FCIC is that it is a place where you can go, let your hair down, and completely level with people who actually comprehend what you are talking about. Not only do they understand you, but they REALLY PAY ATTENTION, they are GRATEFUL FOR YOUR INSIGHTS, and they FORGIVE YOU, which in nine cases out of ten is something even your boss can't do, because as soon as you start talking "ROM," "BBS," or "T-1 trunk," his eyes glaze over. I had nothing much to do that afternoon. The FCIC were beavering away in their conference room. Doors were firmly closed, windows too dark to peer through. I wondered what a real hacker, a computer intruder, would do at a meeting like this. The answer came at once. He would "trash" the place. Not reduce the place to trash in some orgy of vandalism; that's not the use of the term in the hacker milieu. No, he would quietly EMPTY THE TRASH BASKETS and silently raid any valuable data indiscreetly thrown away. Journalists have been known to do this. (Journalists hunting information have been known to do almost every single unethical thing that hackers have ever done. They also throw in a few awful techniques all their own.) The legality of `trashing' is somewhat dubious but it is not in fact flagrantly illegal. It was, however, absurd to contemplate trashing the FCIC. These people knew all about trashing. I wouldn't last fifteen seconds. The idea sounded interesting, though. I'd been hearing a lot about the practice lately. On the spur of the moment, I decided I would try trashing the office ACROSS THE HALL from the FCIC, an area which had nothing to do with the investigators. The office was tiny; six chairs, a table. . . . Nevertheless, it was open, so I dug around in its plastic trash can. To my utter astonishment, I came up with the torn scraps of a SPRINT long-distance phone bill. More digging produced a bank statement and the scraps of a hand-written letter, along with gum, cigarette ashes, candy wrappers and a day-old-issue of USA TODAY. The trash went back in its receptacle while the scraps of data went into my travel bag. I detoured through the hotel souvenir shop for some Scotch tape and went up to my room. Coincidence or not, it was quite true. Some poor soul had, in fact, thrown a SPRINT bill into the hotel's trash. Date May 1991, total amount due: $252.36. Not a business phone, either, but a residential bill, in the name of someone called Evelyn (not her real name). Evelyn's records showed a ## PAST DUE BILL ##! Here was her nine-digit account ID. Here was a stern computer-printed warning: "TREAT YOUR FONCARD AS YOU WOULD ANY CREDIT CARD. TO SECURE AGAINST FRAUD, NEVER GIVE YOUR FONCARD NUMBER OVER THE PHONE UNLESS YOU INITIATED THE CALL. IF YOU RECEIVE SUSPICIOUS CALLS PLEASE NOTIFY CUSTOMER SERVICE IMMEDIATELY!" I examined my watch. Still plenty of time left for the FCIC to carry on. I sorted out the scraps of Evelyn's SPRINT bill and re-assembled them with fresh Scotch tape. Here was her ten-digit FONCARD number. Didn't seem to have the ID number necessary to cause real fraud trouble. I did, however, have Evelyn's home phone number. And the phone numbers for a whole crowd of Evelyn's long-distance friends and acquaintances. In San Diego, Folsom, Redondo, Las Vegas, La Jolla, Topeka, and Northampton Massachusetts. Even somebody in Australia! I examined other documents. Here was a bank statement. It was Evelyn's IRA account down at a bank in San Mateo California (total balance $1877.20). Here was a charge-card bill for $382.64. She was paying it off bit by bit. Driven by motives that were completely unethical and prurient, I now examined the handwritten notes. They had been torn fairly thoroughly, so much so that it took me almost an entire five minutes to reassemble them. They were drafts of a love letter. They had been written on the lined stationery of Evelyn's employer, a biomedical company. Probably written at work when she should have been doing something else. "Dear Bob," (not his real name) "I guess in everyone's life there comes a time when hard decisions have to be made, and this is a difficult one for me--very upsetting. Since you haven't called me, and I don't understand why, I can only surmise it's because you don't want to. I thought I would have heard from you Friday. I did have a few unusual problems with my phone and possibly you tried, I hope so. "Robert, you asked me to `let go'. . . ." The first note ended. UNUSUAL PROBLEMS WITH HER PHONE? I looked swiftly at the next note. "Bob, not hearing from you for the whole weekend has left me very perplexed. . . ." Next draft. "Dear Bob, there is so much I don't understand right now, and I wish I did. I wish I could talk to you, but for some unknown reason you have elected not to call--this is so difficult for me to understand. . . ." She tried again. "Bob, Since I have always held you in such high esteem, I had every hope that we could remain good friends, but now one essential ingredient is missing-- respect. Your ability to discard people when their purpose is served is appalling to me. The kindest thing you could do for me now is to leave me alone. You are no longer welcome in my heart or home. . . ." Try again. "Bob, I wrote a very factual note to you to say how much respect I had lost for you, by the way you treat people, me in particular, so uncaring and cold. The kindest thing you can do for me is to leave me alone entirely, as you are no longer welcome in my heart or home. I would appreciate it if you could retire your debt to me as soon as possible--I wish no link to you in any way. Sincerely, Evelyn." Good heavens, I thought, the bastard actually owes her money! I turned to the next page. "Bob: very simple. GOODBYE! No more mind games--no more fascination-- no more coldness--no more respect for you! It's over--Finis. Evie" There were two versions of the final brushoff letter, but they read about the same. Maybe she hadn't sent it. The final item in my illicit and shameful booty was an envelope addressed to "Bob" at his home address, but it had no stamp on it and it hadn't been mailed. Maybe she'd just been blowing off steam because her rascal boyfriend had neglected to call her one weekend. Big deal. Maybe they'd kissed and made up, maybe she and Bob were down at Pop's Chocolate Shop now, sharing a malted. Sure. Easy to find out. All I had to do was call Evelyn up. With a half-clever story and enough brass-plated gall I could probably trick the truth out of her. Phone-phreaks and hackers deceive people over the phone all the time. It's called "social engineering." Social engineering is a very common practice in the underground, and almost magically effective. Human beings are almost always the weakest link in computer security. The simplest way to learn Things You Are Not Meant To Know is simply to call up and exploit the knowledgeable people. With social engineering, you use the bits of specialized knowledge you already have as a key, to manipulate people into believing that you are legitimate. You can then coax, flatter, or frighten them into revealing almost anything you want to know. Deceiving people (especially over the phone) is easy and fun. Exploiting their gullibility is very gratifying; it makes you feel very superior to them. If I'd been a malicious hacker on a trashing raid, I would now have Evelyn very much in my power. Given all this inside data, it wouldn't take much effort at all to invent a convincing lie. If I were ruthless enough, and jaded enough, and clever enough, this momentary indiscretion of hers-- maybe committed in tears, who knows--could cause her a whole world of confusion and grief. I didn't even have to have a MALICIOUS motive. Maybe I'd be "on her side," and call up Bob instead, and anonymously threaten to break both his kneecaps if he didn't take Evelyn out for a steak dinner pronto. It was still profoundly NONE OF MY BUSINESS. To have gotten this knowledge at all was a sordid act and to use it would be to inflict a sordid injury. To do all these awful things would require exactly zero high-tech expertise. All it would take was the willingness to do it and a certain amount of bent imagination. I went back downstairs. The hard-working FCIC, who had labored forty-five minutes over their schedule, were through for the day, and adjourned to the hotel bar. We all had a beer. I had a chat with a guy about "Isis," or rather IACIS, the International Association of Computer Investigation Specialists. They're into "computer forensics," the techniques of picking computer- systems apart without destroying vital evidence. IACIS, currently run out of Oregon, is comprised of investigators in the U.S., Canada, Taiwan and Ireland. "Taiwan and Ireland?" I said. Are TAIWAN and IRELAND really in the forefront of this stuff? Well not exactly, my informant admitted. They just happen to have been the first ones to have caught on by word of mouth. Still, the international angle counts, because this is obviously an international problem. Phone-lines go everywhere. There was a Mountie here from the Royal Canadian Mounted Police. He seemed to be having quite a good time. Nobody had flung this Canadian out because he might pose a foreign security risk. These are cyberspace cops. They still worry a lot about "jurisdictions," but mere geography is the least of their troubles. NASA had failed to show. NASA suffers a lot from computer intrusions, in particular from Australian raiders and a well-trumpeted Chaos Computer Club case, and in 1990 there was a brief press flurry when it was revealed that one of NASA's Houston branch-exchanges had been systematically ripped off by a gang of phone-phreaks. But the NASA guys had had their funding cut. They were stripping everything. Air Force OSI, its Office of Special Investigations, is the ONLY federal entity dedicated full-time to computer security. They'd been expected to show up in force, but some of them had cancelled--a Pentagon budget pinch. As the empties piled up, the guys began joshing around and telling war-stories. "These are cops," Thackeray said tolerantly. "If they're not talking shop they talk about women and beer." I heard the story about the guy who, asked for "a copy" of a computer disk, PHOTOCOPIED THE LABEL ON IT. He put the floppy disk onto the glass plate of a photocopier. The blast of static when the copier worked completely erased all the real information on the disk. Some other poor souls threw a whole bag of confiscated diskettes into the squad-car trunk next to the police radio. The powerful radio signal blasted them, too. We heard a bit about Dave Geneson, the first computer prosecutor, a mainframe-runner in Dade County, turned lawyer. Dave Geneson was one guy who had hit the ground running, a signal virtue in making the transition to computer-crime. It was generally agreed that it was easier to learn the world of computers first, then police or prosecutorial work. You could take certain computer people and train 'em to successful police work--but of course they had to have the COP MENTALITY. They had to have street smarts. Patience. Persistence. And discretion. You've got to make sure they're not hot-shots, show-offs, "cowboys." Most of the folks in the bar had backgrounds in military intelligence, or drugs, or homicide. It was rudely opined that "military intelligence" was a contradiction in terms, while even the grisly world of homicide was considered cleaner than drug enforcement. One guy had been 'way undercover doing dope-work in Europe for four years straight. "I'm almost recovered now," he said deadpan, with the acid black humor that is pure cop. "Hey, now I can say FUCKER without putting MOTHER in front of it." "In the cop world," another guy said earnestly, "everything is good and bad, black and white. In the computer world everything is gray." One guy--a founder of the FCIC, who'd been with the group since it was just the Colluquy--described his own introduction to the field. He'd been a Washington DC homicide guy called in on a "hacker" case. From the word "hacker," he naturally assumed he was on the trail of a knife-wielding marauder, and went to the computer center expecting blood and a body. When he finally figured out what was happening there (after loudly demanding, in vain, that the programmers "speak English"), he called headquarters and told them he was clueless about computers. They told him nobody else knew diddly either, and to get the hell back to work. So, he said, he had proceeded by comparisons. By analogy. By metaphor. "Somebody broke in to your computer, huh?" Breaking and entering; I can understand that. How'd he get in? "Over the phone-lines." Harassing phone-calls, I can understand that! What we need here is a tap and a trace! It worked. It was better than nothing. And it worked a lot faster when he got hold of another cop who'd done something similar. And then the two of them got another, and another, and pretty soon the Colluquy was a happening thing. It helped a lot that everybody seemed to know Carlton Fitzpatrick, the data-processing trainer in Glynco. The ice broke big-time in Memphis in '86. The Colluquy had attracted a bunch of new guys--Secret Service, FBI, military, other feds, heavy guys. Nobody wanted to tell anybody anything. They suspected that if word got back to the home office they'd all be fired. They passed an uncomfortably guarded afternoon. The formalities got them nowhere. But after the formal session was over, the organizers brought in a case of beer. As soon as the participants knocked it off with the bureaucratic ranks and turf-fighting, everything changed. "I bared my soul," one veteran reminisced proudly. By nightfall they were building pyramids of empty beer-cans and doing everything but composing a team fight song. FCIC were not the only computer-crime people around. There was DATTA (District Attorneys' Technology Theft Association), though they mostly specialized in chip theft, intellectual property, and black-market cases. There was HTCIA (High Tech Computer Investigators Association), also out in Silicon Valley, a year older than FCIC and featuring brilliant people like Donald Ingraham. There was LEETAC (Law Enforcement Electronic Technology Assistance Committee) in Florida, and computer-crime units in Illinois and Maryland and Texas and Ohio and Colorado and Pennsylvania. But these were local groups. FCIC were the first to really network nationally and on a federal level. FCIC people live on the phone lines. Not on bulletin board systems-- they know very well what boards are, and they know that boards aren't secure. Everyone in the FCIC has a voice-phone bill like you wouldn't believe. FCIC people have been tight with the telco people for a long time. Telephone cyberspace is their native habitat. FCIC has three basic sub-tribes: the trainers, the security people, and the investigators. That's why it's called an "Investigations Committee" with no mention of the term "computer-crime"--the dreaded "C-word." FCIC, officially, is "an association of agencies rather than individuals;" unofficially, this field is small enough that the influence of individuals and individual expertise is paramount. Attendance is by invitation only, and most everyone in FCIC considers himself a prophet without honor in his own house. Again and again I heard this, with different terms but identical sentiments. "I'd been sitting in the wilderness talking to myself." "I was totally isolated." "I was desperate." "FCIC is the best thing there is about computer crime in America." "FCIC is what really works." "This is where you hear real people telling you what's really happening out there, not just lawyers picking nits." "We taught each other everything we knew." The sincerity of these statements convinces me that this is true. FCIC is the real thing and it is invaluable. It's also very sharply at odds with the rest of the traditions and power structure in American law enforcement. There probably hasn't been anything around as loose and go-getting as the FCIC since the start of the U.S. Secret Service in the 1860s. FCIC people are living like twenty-first-century people in a twentieth-century environment, and while there's a great deal to be said for that, there's also a great deal to be said against it, and those against it happen to control the budgets. I listened to two FCIC guys from Jersey compare life histories. One of them had been a biker in a fairly heavy-duty gang in the 1960s. "Oh, did you know so-and-so?" said the other guy from Jersey. "Big guy, heavyset?" "Yeah, I knew him." "Yeah, he was one of ours. He was our plant in the gang." "Really? Wow! Yeah, I knew him. Helluva guy." Thackeray reminisced at length about being tear-gassed blind in the November 1969 antiwar protests in Washington Circle, covering them for her college paper. "Oh yeah, I was there," said another cop. "Glad to hear that tear gas hit somethin'. Haw haw haw." He'd been so blind himself, he confessed, that later that day he'd arrested a small tree. FCIC are an odd group, sifted out by coincidence and necessity, and turned into a new kind of cop. There are a lot of specialized cops in the world--your bunco guys, your drug guys, your tax guys, but the only group that matches FCIC for sheer isolation are probably the child-pornography people. Because they both deal with conspirators who are desperate to exchange forbidden data and also desperate to hide; and because nobody else in law enforcement even wants to hear about it. FCIC people tend to change jobs a lot. They tend not to get the equipment and training they want and need. And they tend to get sued quite often. As the night wore on and a band set up in the bar, the talk grew darker. Nothing ever gets done in government, someone opined, until there's a DISASTER. Computing disasters are awful, but there's no denying that they greatly help the credibility of FCIC people. The Internet Worm, for instance. "For years we'd been warning about that--but it's nothing compared to what's coming." They expect horrors, these people. They know that nothing will really get done until there is a horror. # Next day we heard an extensive briefing from a guy who'd been a computer cop, gotten into hot water with an Arizona city council, and now installed computer networks for a living (at a considerable rise in pay). He talked about pulling fiber-optic networks apart. Even a single computer, with enough peripherals, is a literal "network"--a bunch of machines all cabled together, generally with a complexity that puts stereo units to shame. FCIC people invent and publicize methods of seizing computers and maintaining their evidence. Simple things, sometimes, but vital rules of thumb for street cops, who nowadays often stumble across a busy computer in the midst of a drug investigation or a white-collar bust. For instance: Photograph the system before you touch it. Label the ends of all the cables before you detach anything. "Park" the heads on the disk drives before you move them. Get the diskettes. Don't put the diskettes in magnetic fields. Don't write on diskettes with ballpoint pens. Get the manuals. Get the printouts. Get the handwritten notes. Copy data before you look at it, and then examine the copy instead of the original. Now our lecturer distributed copied diagrams of a typical LAN or "Local Area Network", which happened to be out of Connecticut. ONE HUNDRED AND FIFTY-NINE desktop computers, each with its own peripherals. Three "file servers." Five "star couplers" each with thirty-two ports. One sixteen-port coupler off in the corner office. All these machines talking to each other, distributing electronic mail, distributing software, distributing, quite possibly, criminal evidence. All linked by high-capacity fiber-optic cable. A bad guy--cops talk a about "bad guys" --might be lurking on PC #47 lot or #123 and distributing his ill doings onto some dupe's "personal" machine in another office--or another floor--or, quite possibly, two or three miles away! Or, conceivably, the evidence might be "data-striped"--split up into meaningless slivers stored, one by one, on a whole crowd of different disk drives. The lecturer challenged us for solutions. I for one was utterly clueless. As far as I could figure, the Cossacks were at the gate; there were probably more disks in this single building than were seized during the entirety of Operation Sundevil. "Inside informant," somebody said. Right. There's always the human angle, something easy to forget when contemplating the arcane recesses of high technology. Cops are skilled at getting people to talk, and computer people, given a chair and some sustained attention, will talk about their computers till their throats go raw. There's a case on record of a single question-- "How'd you do it?"--eliciting a forty-five-minute videotaped confession from a computer criminal who not only completely incriminated himself but drew helpful diagrams. Computer people talk. Hackers BRAG. Phone-phreaks talk PATHOLOGICALLY--why else are they stealing phone-codes, if not to natter for ten hours straight to their friends on an opposite seaboard? Computer-literate people do in fact possess an arsenal of nifty gadgets and techniques that would allow them to conceal all kinds of exotic skullduggery, and if they could only SHUT UP about it, they could probably get away with all manner of amazing information-crimes. But that's just not how it works--or at least, that's not how it's worked SO FAR. Most every phone-phreak ever busted has swiftly implicated his mentors, his disciples, and his friends. Most every white-collar computer-criminal, smugly convinced that his clever scheme is bulletproof, swiftly learns otherwise when, for the first time in his life, an actual no-kidding policeman leans over, grabs the front of his shirt, looks him right in the eye and says: "All right, ASSHOLE--you and me are going downtown!" All the hardware in the world will not insulate your nerves from these actual real-life sensations of terror and guilt. Cops know ways to get from point A to point Z without thumbing through every letter in some smart-ass bad-guy's alphabet. Cops know how to cut to the chase. Cops know a lot of things other people don't know. Hackers know a lot of things other people don't know, too. Hackers know, for instance, how to sneak into your computer through the phone-lines. But cops can show up RIGHT ON YOUR DOORSTEP and carry off YOU and your computer in separate steel boxes. A cop interested in hackers can grab them and grill them. A hacker interested in cops has to depend on hearsay, underground legends, and what cops are willing to publicly reveal. And the Secret Service didn't get named "the SECRET Service" because they blab a lot. Some people, our lecturer informed us, were under the mistaken impression that it was "impossible" to tap a fiber-optic line. Well, he announced, he and his son had just whipped up a fiber-optic tap in his workshop at home. He passed it around the audience, along with a circuit-covered LAN plug-in card so we'd all recognize one if we saw it on a case. We all had a look. The tap was a classic "Goofy Prototype"--a thumb-length rounded metal cylinder with a pair of plastic brackets on it. From one end dangled three thin black cables, each of which ended in a tiny black plastic cap. When you plucked the safety-cap off the end of a cable, you could see the glass fiber-- no thicker than a pinhole. Our lecturer informed us that the metal cylinder was a "wavelength division multiplexer." Apparently, what one did was to cut the fiber-optic cable, insert two of the legs into the cut to complete the network again, and then read any passing data on the line by hooking up the third leg to some kind of monitor. Sounded simple enough. I wondered why nobody had thought of it before. I also wondered whether this guy's son back at the workshop had any teenage friends. We had a break. The guy sitting next to me was wearing a giveaway baseball cap advertising the Uzi submachine gun. We had a desultory chat about the merits of Uzis. Long a favorite of the Secret Service, it seems Uzis went out of fashion with the advent of the Persian Gulf War, our Arab allies taking some offense at Americans toting Israeli weapons. Besides, I was informed by another expert, Uzis jam. The equivalent weapon of choice today is the Heckler & Koch, manufactured in Germany. The guy with the Uzi cap was a forensic photographer. He also did a lot of photographic surveillance work in computer crime cases. He used to, that is, until the firings in Phoenix. He was now a private investigator and, with his wife, ran a photography salon specializing in weddings and portrait photos. At--one must repeat--a considerable rise in income. He was still FCIC. If you were FCIC, and you needed to talk to an expert about forensic photography, well, there he was, willing and able. If he hadn't shown up, people would have missed him. Our lecturer had raised the point that preliminary investigation of a computer system is vital before any seizure is undertaken. It's vital to understand how many machines are in there, what kinds there are, what kind of operating system they use, how many people use them, where the actual data itself is stored. To simply barge into an office demanding "all the computers" is a recipe for swift disaster. This entails some discreet inquiries beforehand. In fact, what it entails is basically undercover work. An intelligence operation. SPYING, not to put too fine a point on it. In a chat after the lecture, I asked an attendee whether "trashing" might work. I received a swift briefing on the theory and practice of "trash covers." Police "trash covers," like "mail covers" or like wiretaps, require the agreement of a judge. This obtained, the "trashing" work of cops is just like that of hackers, only more so and much better organized. So much so, I was informed, that mobsters in Phoenix make extensive use of locked garbage cans picked up by a specialty high-security trash company. In one case, a tiger team of Arizona cops had trashed a local residence for four months. Every week they showed up on the municipal garbage truck, disguised as garbagemen, and carried the contents of the suspect cans off to a shade tree, where they combed through the garbage--a messy task, especially considering that one of the occupants was undergoing kidney dialysis. All useful documents were cleaned, dried and examined. A discarded typewriter-ribbon was an especially valuable source of data, as its long one-strike ribbon of film contained the contents of every letter mailed out of the house. The letters were neatly retyped by a police secretary equipped with a large desk-mounted magnifying glass. There is something weirdly disquieting about the whole subject of "trashing"-- an unsuspected and indeed rather disgusting mode of deep personal vulnerability. Things that we pass by every day, that we take utterly for granted, can be exploited with so little work. Once discovered, the knowledge of these vulnerabilities tend to spread. Take the lowly subject of MANHOLE COVERS. The humble manhole cover reproduces many of the dilemmas of computer-security in miniature. Manhole covers are, of course, technological artifacts, access-points to our buried urban infrastructure. To the vast majority of us, manhole covers are invisible. They are also vulnerable. For many years now, the Secret Service has made a point of caulking manhole covers along all routes of the Presidential motorcade. This is, of course, to deter terrorists from leaping out of underground ambush or, more likely, planting remote-control car-smashing bombs beneath the street. Lately, manhole covers have seen more and more criminal exploitation, especially in New York City. Recently, a telco in New York City discovered that a cable television service had been sneaking into telco manholes and installing cable service alongside the phone-lines-- WITHOUT PAYING ROYALTIES. New York companies have also suffered a general plague of (a) underground copper cable theft; (b) dumping of garbage, including toxic waste, and (c) hasty dumping of murder victims. Industry complaints reached the ears of an innovative New England industrial-security company, and the result was a new product known as "the Intimidator," a thick titanium-steel bolt with a precisely machined head that requires a special device to unscrew. All these "keys" have registered serial numbers kept on file with the manufacturer. There are now some thousands of these "Intimidator" bolts being sunk into American pavements wherever our President passes, like some macabre parody of strewn roses. They are also spreading as fast as steel dandelions around US military bases and many centers of private industry. Quite likely it has never occurred to you to peer under a manhole cover, perhaps climb down and walk around down there with a flashlight, just to see what it's like. Formally speaking, this might be trespassing, but if you didn't hurt anything, and didn't make an absolute habit of it, nobody would really care. The freedom to sneak under manholes was likely a freedom you never intended to exercise. You now are rather less likely to have that freedom at all. You may never even have missed it until you read about it here, but if you're in New York City it's gone, and elsewhere it's likely going. This is one of the things that crime, and the reaction to crime, does to us. The tenor of the meeting now changed as the Electronic Frontier Foundation arrived. The EFF, whose personnel and history will be examined in detail in the next chapter, are a pioneering civil liberties group who arose in direct response to the Hacker Crackdown of 1990. Now Mitchell Kapor, the Foundation's president, and Michael Godwin, its chief attorney, were confronting federal law enforcement MANO A MANO for the first time ever. Ever alert to the manifold uses of publicity, Mitch Kapor and Mike Godwin had brought their own journalist in tow: Robert Draper, from Austin, whose recent well-received book about ROLLING STONE magazine was still on the stands. Draper was on assignment for TEXAS MONTHLY. The Steve Jackson/EFF civil lawsuit against the Chicago Computer Fraud and Abuse Task Force was a matter of considerable regional interest in Texas. There were now two Austinite journalists here on the case. In fact, counting Godwin (a former Austinite and former journalist) there were three of us. Lunch was like Old Home Week. Later, I took Draper up to my hotel room. We had a long frank talk about the case, networking earnestly like a miniature freelance-journo version of the FCIC: privately confessing the numerous blunders of journalists covering the story, and trying hard to figure out who was who and what the hell was really going on out there. I showed Draper everything I had dug out of the Hilton trashcan. We pondered the ethics of "trashing" for a while, and agreed that they were dismal. We also agreed that finding a SPRINT bill on your first time out was a heck of a coincidence. First I'd "trashed"--and now, mere hours later, I'd bragged to someone else. Having entered the lifestyle of hackerdom, I was now, unsurprisingly, following its logic. Having discovered something remarkable through a surreptitious action, I of course HAD to "brag," and to drag the passing Draper into my iniquities. I felt I needed a witness. Otherwise nobody would have believed what I'd discovered. . . . Back at the meeting, Thackeray cordially, if rather tentatively, introduced Kapor and Godwin to her colleagues. Papers were distributed. Kapor took center stage. The brilliant Bostonian high-tech entrepreneur, normally the hawk in his own administration and quite an effective public speaker, seemed visibly nervous, and frankly admitted as much. He began by saying he consided computer-intrusion to be morally wrong, and that the EFF was not a "hacker defense fund," despite what had appeared in print. Kapor chatted a bit about the basic motivations of his group, emphasizing their good faith and willingness to listen and seek common ground with law enforcement--when, er, possible. Then, at Godwin's urging, Kapor suddenly remarked that EFF's own Internet machine had been "hacked" recently, and that EFF did not consider this incident amusing. After this surprising confession, things began to loosen up quite rapidly. Soon Kapor was fielding questions, parrying objections, challenging definitions, and juggling paradigms with something akin to his usual gusto. Kapor seemed to score quite an effect with his shrewd and skeptical analysis of the merits of telco "Caller-ID" services. (On this topic, FCIC and EFF have never been at loggerheads, and have no particular established earthworks to defend.) Caller-ID has generally been promoted as a privacy service for consumers, a presentation Kapor described as a "smokescreen," the real point of Caller-ID being to ALLOW CORPORATE CUSTOMERS TO BUILD EXTENSIVE COMMERCIAL DATABASES ON EVERYBODY WHO PHONES OR FAXES THEM. Clearly, few people in the room had considered this possibility, except perhaps for two late-arrivals from US WEST RBOC security, who chuckled nervously. Mike Godwin then made an extensive presentation on "Civil Liberties Implications of Computer Searches and Seizures." Now, at last, we were getting to the real nitty-gritty here, real political horse-trading. The audience listened with close attention, angry mutters rising occasionally: "He's trying to teach us our jobs!" "We've been thinking about this for years! We think about these issues every day!" "If I didn't seize the works, I'd be sued by the guy's victims!" "I'm violating the law if I leave ten thousand disks full of illegal PIRATED SOFTWARE and STOLEN CODES!" "It's our job to make sure people don't trash the Constitution-- we're the DEFENDERS of the Constitution!" "We seize stuff when we know it will be forfeited anyway as restitution for the victim!" "If it's forfeitable, then don't get a search warrant, get a forfeiture warrant," Godwin suggested coolly. He further remarked that most suspects in computer crime don't WANT to see their computers vanish out the door, headed God knew where, for who knows how long. They might not mind a search, even an extensive search, but they want their machines searched on-site. "Are they gonna feed us?" somebody asked sourly. "How about if you take copies of the data?" Godwin parried. "That'll never stand up in court." "Okay, you make copies, give THEM the copies, and take the originals." Hmmm. Godwin championed bulletin-board systems as repositories of First Amendment protected free speech. He complained that federal computer-crime training manuals gave boards a bad press, suggesting that they are hotbeds of crime haunted by pedophiles and crooks, whereas the vast majority of the nation's thousands of boards are completely innocuous, and nowhere near so romantically suspicious. People who run boards violently resent it when their systems are seized, and their dozens (or hundreds) of users look on in abject horror. Their rights of free expression are cut short. Their right to associate with other people is infringed. And their privacy is violated as their private electronic mail becomes police property. Not a soul spoke up to defend the practice of seizing boards. The issue passed in chastened silence. Legal principles aside-- (and those principles cannot be settled without laws passed or court precedents)--seizing bulletin boards has become public-relations poison for American computer police. And anyway, it's not entirely necessary. If you're a cop, you can get 'most everything you need from a pirate board, just by using an inside informant. Plenty of vigilantes--well, CONCERNED CITIZENS--will inform police the moment they see a pirate board hit their area (and will tell the police all about it, in such technical detail, actually, that you kinda wish they'd shut up). They will happily supply police with extensive downloads or printouts. It's IMPOSSIBLE to keep this fluid electronic information out of the hands of police. Some people in the electronic community become enraged at the prospect of cops "monitoring" bulletin boards. This does have touchy aspects, as Secret Service people in particular examine bulletin boards with some regularity. But to expect electronic police to be deaf dumb and blind in regard to this particular medium rather flies in the face of common sense. Police watch television, listen to radio, read newspapers and magazines; why should the new medium of boards be different? Cops can exercise the same access to electronic information as everybody else. As we have seen, quite a few computer police maintain THEIR OWN bulletin boards, including anti-hacker "sting" boards, which have generally proven quite effective. As a final clincher, their Mountie friends in Canada (and colleagues in Ireland and Taiwan) don't have First Amendment or American constitutional restrictions, but they do have phone lines, and can call any bulletin board in America whenever they please. The same technological determinants that play into the hands of hackers, phone phreaks and software pirates can play into the hands of police. "Technological determinants" don't have ANY human allegiances. They're not black or white, or Establishment or Underground, or pro-or-anti anything. Godwin complained at length about what he called "the Clever Hobbyist hypothesis" --the assumption that the "hacker" you're busting is clearly a technical genius, and must therefore by searched with extreme thoroughness. So: from the law's point of view, why risk missing anything? Take the works. Take the guy's computer. Take his books. Take his notebooks. Take the electronic drafts of his love letters. Take his Walkman. Take his wife's computer. Take his dad's computer. Take his kid sister's computer. Take his employer's computer. Take his compact disks-- they MIGHT be CD-ROM disks, cunningly disguised as pop music. Take his laser printer--he might have hidden something vital in the printer's 5meg of memory. Take his software manuals and hardware documentation. Take his science-fiction novels and his simulation- gaming books. Take his Nintendo Game-Boy and his Pac-Man arcade game. Take his answering machine, take his telephone out of the wall. Take anything remotely suspicious. Godwin pointed out that most "hackers" are not, in fact, clever genius hobbyists. Quite a few are crooks and grifters who don't have much in the way of technical sophistication; just some rule-of-thumb rip-off techniques. The same goes for most fifteen-year-olds who've downloaded a code-scanning program from a pirate board. There's no real need to seize everything in sight. It doesn't require an entire computer system and ten thousand disks to prove a case in court. What if the computer is the instrumentality of a crime? someone demanded. Godwin admitted quietly that the doctrine of seizing the instrumentality of a crime was pretty well established in the American legal system. The meeting broke up. Godwin and Kapor had to leave. Kapor was testifying next morning before the Massachusetts Department Of Public Utility, about ISDN narrowband wide-area networking. As soon as they were gone, Thackeray seemed elated. She had taken a great risk with this. Her colleagues had not, in fact, torn Kapor and Godwin's heads off. She was very proud of them, and told them so. "Did you hear what Godwin said about INSTRUMENTALITY OF A CRIME?" she exulted, to nobody in particular. "Wow, that means MITCH ISN'T GOING TO SUE ME." # America's computer police are an interesting group. As a social phenomenon they are far more interesting, and far more important, than teenage phone phreaks and computer hackers. First, they're older and wiser; not dizzy hobbyists with leaky morals, but seasoned adult professionals with all the responsibilities of public service. And, unlike hackers, they possess not merely TECHNICAL power alone, but heavy-duty legal and social authority. And, very interestingly, they are just as much at sea in cyberspace as everyone else. They are not happy about this. Police are authoritarian by nature, and prefer to obey rules and precedents. (Even those police who secretly enjoy a fast ride in rough territory will soberly disclaim any "cowboy" attitude.) But in cyberspace there ARE no rules and precedents. They are groundbreaking pioneers, Cyberspace Rangers, whether they like it or not. In my opinion, any teenager enthralled by computers, fascinated by the ins and outs of computer security, and attracted by the lure of specialized forms of knowledge and power, would do well to forget all about "hacking" and set his (or her) sights on becoming a fed. Feds can trump hackers at almost every single thing hackers do, including gathering intelligence, undercover disguise, trashing, phone-tapping, building dossiers, networking, and infiltrating computer systems--CRIMINAL computer systems. Secret Service agents know more about phreaking, coding and carding than most phreaks can find out in years, and when it comes to viruses, break-ins, software bombs and trojan horses, Feds have direct access to red-hot confidential information that is only vague rumor in the underground. And if it's an impressive public rep you're after, there are few people in the world who can be so chillingly impressive as a well-trained, well-armed United States Secret Service agent. Of course, a few personal sacrifices are necessary in order to obtain that power and knowledge. First, you'll have the galling discipline of belonging to a large organization; but the world of computer crime is still so small, and so amazingly fast-moving, that it will remain spectacularly fluid for years to come. The second sacrifice is that you'll have to give up ripping people off. This is not a great loss. Abstaining from the use of illegal drugs, also necessary, will be a boon to your health. A career in computer security is not a bad choice for a young man or woman today. The field will almost certainly expand drastically in years to come. If you are a teenager today, by the time you become a professional, the pioneers you have read about in this book will be the grand old men and women of the field, swamped by their many disciples and successors. Of course, some of them, like William P. Wood of the 1865 Secret Service, may well be mangled in the whirring machinery of legal controversy; but by the time you enter the computer-crime field, it may have stabilized somewhat, while remaining entertainingly challenging. But you can't just have a badge. You have to win it. First, there's the federal law enforcement training. And it's hard--it's a challenge. A real challenge--not for wimps and rodents. Every Secret Service agent must complete gruelling courses at the Federal Law Enforcement Training Center. (In fact, Secret Service agents are periodically re-trained during their entire careers.) In order to get a glimpse of what this might be like, I myself travelled to FLETC. # The Federal Law Enforcement Training Center is a 1500-acre facility on Georgia's Atlantic coast. It's a milieu of marshgrass, seabirds, damp, clinging sea-breezes, palmettos, mosquitos, and bats. Until 1974, it was a Navy Air Base, and still features a working runway, and some WWII vintage blockhouses and officers' quarters. The Center has since benefitted by a forty-million-dollar retrofit, but there's still enough forest and swamp on the facility for the Border Patrol to put in tracking practice. As a town, "Glynco" scarcely exists. The nearest real town is Brunswick, a few miles down Highway 17, where I stayed at the aptly named Marshview Holiday Inn. I had Sunday dinner at a seafood restaurant called "Jinright's," where I feasted on deep-fried alligator tail. This local favorite was a heaped basket of bite-sized chunks of white, tender, almost fluffy reptile meat, steaming in a peppered batter crust. Alligator makes a culinary experience that's hard to forget, especially when liberally basted with homemade cocktail sauce from a Jinright squeeze-bottle. The crowded clientele were tourists, fishermen, local black folks in their Sunday best, and white Georgian locals who all seemed to bear an uncanny resemblance to Georgia humorist Lewis Grizzard. The 2,400 students from 75 federal agencies who make up the FLETC population scarcely seem to make a dent in the low-key local scene. The students look like tourists, and the teachers seem to have taken on much of the relaxed air of the Deep South. My host was Mr. Carlton Fitzpatrick, the Program Coordinator of the Financial Fraud Institute. Carlton Fitzpatrick is a mustached, sinewy, well-tanned Alabama native somewhere near his late forties, with a fondness for chewing tobacco, powerful computers, and salty, down-home homilies. We'd met before, at FCIC in Arizona. The Financial Fraud Institute is one of the nine divisions at FLETC. Besides Financial Fraud, there's Driver & Marine, Firearms, and Physical Training. These are specialized pursuits. There are also five general training divisions: Basic Training, Operations, Enforcement Techniques, Legal Division, and Behavioral Science. Somewhere in this curriculum is everything necessary to turn green college graduates into federal agents. First they're given ID cards. Then they get the rather miserable-looking blue coveralls known as "smurf suits." The trainees are assigned a barracks and a cafeteria, and immediately set on FLETC's bone-grinding physical training routine. Besides the obligatory daily jogging--(the trainers run up danger flags beside the track when the humidity rises high enough to threaten heat stroke)-- here's the Nautilus machines, the martial arts, the survival skills. . . . The eighteen federal agencies who maintain on-site academies at FLETC employ a wide variety of specialized law enforcement units, some of them rather arcane. There's Border Patrol, IRS Criminal Investigation Division, Park Service, Fish and Wildlife, Customs, Immigration, Secret Service and the Treasury's uniformed subdivisions. . . . If you're a federal cop and you don't work for the FBI, you train at FLETC. This includes people as apparently obscure as the agents of the Railroad Retirement Board Inspector General. Or the Tennessee Valley Authority Police, who are in fact federal police officers, and can and do arrest criminals on the federal property of the Tennessee Valley Authority. And then there are the computer-crime people. All sorts, all backgrounds. Mr. Fitzpatrick is not jealous of his specialized knowledge. Cops all over, in every branch of service, may feel a need to learn what he can teach. Backgrounds don't matter much. Fitzpatrick himself was originally a Border Patrol veteran, then became a Border Patrol instructor at FLETC. His Spanish is still fluent--but he found himself strangely fascinated when the first computers showed up at the Training Center. Fitzpatrick did have a background in electrical engineering, and though he never considered himself a computer hacker, he somehow found himself writing useful little programs for this new and promising gizmo. He began looking into the general subject of computers and crime, reading Donn Parker's books and articles, keeping an ear cocked for war stories, useful insights from the field, the up-and-coming people of the local computer-crime and high-technology units. . . . Soon he got a reputation around FLETC as the resident "computer expert," and that reputation alone brought him more exposure, more experience-- until one day he looked around, and sure enough he WAS a federal computer-crime expert. In fact, this unassuming, genial man may be THE federal computer-crime expert. There are plenty of very good computer people, and plenty of very good federal investigators, but the area where these worlds of expertise overlap is very slim. And Carlton Fitzpatrick has been right at the center of that since 1985, the first year of the Colluquy, a group which owes much to his influence. He seems quite at home in his modest, acoustic-tiled office, with its Ansel Adams-style Western photographic art, a gold-framed Senior Instructor Certificate, and a towering bookcase crammed with three-ring binders with ominous titles such as Datapro Reports on Information Security and CFCA Telecom Security '90. The phone rings every ten minutes; colleagues show up at the door to chat about new developments in locksmithing or to shake their heads over the latest dismal developments in the BCCI global banking scandal. Carlton Fitzpatrick is a fount of computer-crime war-stories, related in an acerbic drawl. He tells me the colorful tale of a hacker caught in California some years back. He'd been raiding systems, typing code without a detectable break, for twenty, twenty-four, thirty-six hours straight. Not just logged on--TYPING. Investigators were baffled. Nobody could do that. Didn't he have to go to the bathroom? Was it some kind of automatic keyboard-whacking device that could actually type code? A raid on the suspect's home revealed a situation of astonishing squalor. The hacker turned out to be a Pakistani computer-science student who had flunked out of a California university. He'd gone completely underground as an illegal electronic immigrant, and was selling stolen phone-service to stay alive. The place was not merely messy and dirty, but in a state of psychotic disorder. Powered by some weird mix of culture shock, computer addiction, and amphetamines, the suspect had in fact been sitting in front of his computer for a day and a half straight, with snacks and drugs at hand on the edge of his desk and a chamber-pot under his chair. Word about stuff like this gets around in the hacker-tracker community. Carlton Fitzpatrick takes me for a guided tour by car around the FLETC grounds. One of our first sights is the biggest indoor firing range in the world. There are federal trainees in there, Fitzpatrick assures me politely, blasting away with a wide variety of automatic weapons: Uzis, Glocks, AK-47s. . . . He's willing to take me inside. I tell him I'm sure that's really interesting, but I'd rather see his computers. Carlton Fitzpatrick seems quite surprised and pleased. I'm apparently the first journalist he's ever seen who has turned down the shooting gallery in favor of microchips. Our next stop is a favorite with touring Congressmen: the three-mile long FLETC driving range. Here trainees of the Driver & Marine Division are taught high-speed pursuit skills, setting and breaking road-blocks, diplomatic security driving for VIP limousines. . . . A favorite FLETC pastime is to strap a passing Senator into the passenger seat beside a Driver & Marine trainer, hit a hundred miles an hour, then take it right into "the skid-pan," a section of greased track where two tons of Detroit iron can whip and spin like a hockey puck. Cars don't fare well at FLETC. First they're rifled again and again for search practice. Then they do 25,000 miles of high-speed pursuit training; they get about seventy miles per set of steel-belted radials. Then it's off to the skid pan, where sometimes they roll and tumble headlong in the grease. When they're sufficiently grease-stained, dented, and creaky, they're sent to the roadblock unit, where they're battered without pity. And finally then they're sacrificed to the Bureau of Alcohol, Tobacco and Firearms, whose trainees learn the ins and outs of car-bomb work by blowing them into smoking wreckage. There's a railroad box-car on the FLETC grounds, and a large grounded boat, and a propless plane; all training-grounds for searches. The plane sits forlornly on a patch of weedy tarmac next to an eerie blockhouse known as the "ninja compound," where anti-terrorism specialists practice hostage rescues. As I gaze on this creepy paragon of modern low-intensity warfare, my nerves are jangled by a sudden staccato outburst of automatic weapons fire, somewhere in the woods to my right. "Nine-millimeter," Fitzpatrick judges calmly. Even the eldritch ninja compound pales somewhat compared to the truly surreal area known as "the raid-houses." This is a street lined on both sides with nondescript concrete-block houses with flat pebbled roofs. They were once officers' quarters. Now they are training grounds. The first one to our left, Fitzpatrick tells me, has been specially adapted for computer search-and-seizure practice. Inside it has been wired for video from top to bottom, with eighteen pan-and-tilt remotely controlled videocams mounted on walls and in corners. Every movement of the trainee agent is recorded live by teachers, for later taped analysis. Wasted movements, hesitations, possibly lethal tactical mistakes--all are gone over in detail. Perhaps the weirdest single aspect of this building is its front door, scarred and scuffed all along the bottom, from the repeated impact, day after day, of federal shoe-leather. Down at the far end of the row of raid-houses some people are practicing a murder. We drive by slowly as some very young and rather nervous-looking federal trainees interview a heavyset bald man on the raid-house lawn. Dealing with murder takes a lot of practice; first you have to learn to control your own instinctive disgust and panic, then you have to learn to control the reactions of a nerve-shredded crowd of civilians, some of whom may have just lost a loved one, some of whom may be murderers-- quite possibly both at once. A dummy plays the corpse. The roles of the bereaved, the morbidly curious, and the homicidal are played, for pay, by local Georgians: waitresses, musicians, most anybody who needs to moonlight and can learn a script. These people, some of whom are FLETC regulars year after year, must surely have one of the strangest jobs in the world. Something about the scene: "normal" people in a weird situation, standing around talking in bright Georgia sunshine, unsuccessfully pretending that something dreadful has gone on, while a dummy lies inside on faked bloodstains. . . . While behind this weird masquerade, like a nested set of Russian dolls, are grim future realities of real death, real violence, real murders of real people, that these young agents will really investigate, many times during their careers. . . . Over and over. . . . Will those anticipated murders look like this, feel like this--not as "real" as these amateur actors are trying to make it seem, but both as "real," and as numbingly unreal, as watching fake people standing around on a fake lawn? Something about this scene unhinges me. It seems nightmarish to me, Kafkaesque. I simply don't know how to take it; my head is turned around; I don't know whether to laugh, cry, or just shudder. When the tour is over, Carlton Fitzpatrick and I talk about computers. For the first time cyberspace seems like quite a comfortable place. It seems very real to me suddenly, a place where I know what I'm talking about, a place I'm used to. It's real. "Real." Whatever. Carlton Fitzpatrick is the only person I've met in cyberspace circles who is happy with his present equipment. He's got a 5 Meg RAM PC with a 112 meg hard disk; a 660 meg's on the way. He's got a Compaq 386 desktop, and a Zenith 386 laptop with 120 meg. Down the hall is a NEC Multi-Sync 2A with a CD-ROM drive and a 9600 baud modem with four com-lines. There's a training minicomputer, and a 10-meg local mini just for the Center, and a lab-full of student PC clones and half-a-dozen Macs or so. There's a Data General MV 2500 with 8 meg on board and a 370 meg disk. Fitzpatrick plans to run a UNIX board on the Data General when he's finished beta-testing the software for it, which he wrote himself. It'll have E-mail features, massive files on all manner of computer-crime and investigation procedures, and will follow the computer-security specifics of the Department of Defense "Orange Book." He thinks it will be the biggest BBS in the federal government. Will it have Phrack on it? I ask wryly. Sure, he tells me. Phrack, TAP, Computer Underground Digest, all that stuff. With proper disclaimers, of course. I ask him if he plans to be the sysop. Running a system that size is very time-consuming, and Fitzpatrick teaches two three-hour courses every day. No, he says seriously, FLETC has to get its money worth out of the instructors. He thinks he can get a local volunteer to do it, a high-school student. He says a bit more, something I think about an Eagle Scout law-enforcement liaison program, but my mind has rocketed off in disbelief. "You're going to put a TEENAGER in charge of a federal security BBS?" I'm speechless. It hasn't escaped my notice that the FLETC Financial Fraud Institute is the ULTIMATE hacker-trashing target; there is stuff in here, stuff of such utter and consummate cool by every standard of the digital underground. . . . I imagine the hackers of my acquaintance, fainting dead-away from forbidden-knowledge greed-fits, at the mere prospect of cracking the superultra top-secret computers used to train the Secret Service in computer-crime. . . . "Uhm, Carlton," I babble, "I'm sure he's a really nice kid and all, but that's a terrible temptation to set in front of somebody who's, you know, into computers and just starting out. . . ." "Yeah," he says, "that did occur to me." For the first time I begin to suspect that he's pulling my leg. He seems proudest when he shows me an ongoing project called JICC, Joint Intelligence Control Council. It's based on the services provided by EPIC, the El Paso Intelligence Center, which supplies data and intelligence to the Drug Enforcement Administration, the Customs Service, the Coast Guard, and the state police of the four southern border states. Certain EPIC files can now be accessed by drug-enforcement police of Central America, South America and the Caribbean, who can also trade information among themselves. Using a telecom program called "White Hat," written by two brothers named Lopez from the Dominican Republic, police can now network internationally on inexpensive PCs. Carlton Fitzpatrick is teaching a class of drug-war agents from the Third World, and he's very proud of their progress. Perhaps soon the sophisticated smuggling networks of the Medellin Cartel will be matched by a sophisticated computer network of the Medellin Cartel's sworn enemies. They'll track boats, track contraband, track the international drug-lords who now leap over borders with great ease, defeating the police through the clever use of fragmented national jurisdictions. JICC and EPIC must remain beyond the scope of this book. They seem to me to be very large topics fraught with complications that I am not fit to judge. I do know, however, that the international, computer-assisted networking of police, across national boundaries, is something that Carlton Fitzpatrick considers very important, a harbinger of a desirable future. I also know that networks by their nature ignore physical boundaries. And I also know that where you put communications you put a community, and that when those communities become self-aware they will fight to preserve themselves and to expand their influence. I make no judgements whether this is good or bad. It's just cyberspace; it's just the way things are. I asked Carlton Fitzpatrick what advice he would have for a twenty-year-old who wanted to shine someday in the world of electronic law enforcement. He told me that the number one rule was simply not to be scared of computers. You don't need to be an obsessive "computer weenie," but you mustn't be buffaloed just because some machine looks fancy. The advantages computers give smart crooks are matched by the advantages they give smart cops. Cops in the future will have to enforce the law "with their heads, not their holsters." Today you can make good cases without ever leaving your office. In the future, cops who resist the computer revolution will never get far beyond walking a beat. I asked Carlton Fitzpatrick if he had some single message for the public; some single thing that he would most like the American public to know about his work. He thought about it while. "Yes," he said finally. "TELL me the rules, and I'll TEACH those rules!" He looked me straight in the eye. "I do the best that I can." PART FOUR: THE CIVIL LIBERTARIANS The story of the Hacker Crackdown, as we have followed it thus far, has been technological, subcultural, criminal and legal. The story of the Civil Libertarians, though it partakes of all those other aspects, is profoundly and thoroughly POLITICAL. In 1990, the obscure, long-simmering struggle over the ownership and nature of cyberspace became loudly and irretrievably public. People from some of the oddest corners of American society suddenly found themselves public figures. Some of these people found this situation much more than they had ever bargained for. They backpedalled, and tried to retreat back to the mandarin obscurity of their cozy subcultural niches. This was generally to prove a mistake. But the civil libertarians seized the day in 1990. They found themselves organizing, propagandizing, podium-pounding, persuading, touring, negotiating, posing for publicity photos, submitting to interviews, squinting in the limelight as they tried a tentative, but growingly sophisticated, buck-and-wing upon the public stage. It's not hard to see why the civil libertarians should have this competitive advantage. The hackers of the digital underground are an hermetic elite. They find it hard to make any remotely convincing case for their actions in front of the general public. Actually, hackers roundly despise the "ignorant" public, and have never trusted the judgement of "the system." Hackers do propagandize, but only among themselves, mostly in giddy, badly spelled manifestos of class warfare, youth rebellion or naive techie utopianism. Hackers must strut and boast in order to establish and preserve their underground reputations. But if they speak out too loudly and publicly, they will break the fragile surface-tension of the underground, and they will be harrassed or arrested. Over the longer term, most hackers stumble, get busted, get betrayed, or simply give up. As a political force, the digital underground is hamstrung. The telcos, for their part, are an ivory tower under protracted seige. They have plenty of money with which to push their calculated public image, but they waste much energy and goodwill attacking one another with slanderous and demeaning ad campaigns. The telcos have suffered at the hands of politicians, and, like hackers, they don't trust the public's judgement. And this distrust may be well-founded. Should the general public of the high-tech 1990s come to understand its own best interests in telecommunications, that might well pose a grave threat to the specialized technical power and authority that the telcos have relished for over a century. The telcos do have strong advantages: loyal employees, specialized expertise, influence in the halls of power, tactical allies in law enforcement, and unbelievably vast amounts of money. But politically speaking, they lack genuine grassroots support; they simply don't seem to have many friends. Cops know a lot of things other people don't know. But cops willingly reveal only those aspects of their knowledge that they feel will meet their institutional purposes and further public order. Cops have respect, they have responsibilities, they have power in the streets and even power in the home, but cops don't do particularly well in limelight. When pressed, they will step out in the public gaze to threaten bad-guys, or to cajole prominent citizens, or perhaps to sternly lecture the naive and misguided. But then they go back within their time-honored fortress of the station-house, the courtroom and the rule-book. The electronic civil libertarians, however, have proven to be born political animals. They seemed to grasp very early on the postmodern truism that communication is power. Publicity is power. Soundbites are power. The ability to shove one's issue onto the public agenda--and KEEP IT THERE--is power. Fame is power. Simple personal fluency and eloquence can be power, if you can somehow catch the public's eye and ear. The civil libertarians had no monopoly on "technical power"-- though they all owned computers, most were not particularly advanced computer experts. They had a good deal of money, but nowhere near the earthshaking wealth and the galaxy of resources possessed by telcos or federal agencies. They had no ability to arrest people. They carried out no phreak and hacker covert dirty-tricks. But they really knew how to network. Unlike the other groups in this book, the civil libertarians have operated very much in the open, more or less right in the public hurly-burly. They have lectured audiences galore and talked to countless journalists, and have learned to refine their spiels. They've kept the cameras clicking, kept those faxes humming, swapped that email, run those photocopiers on overtime, licked envelopes and spent small fortunes on airfare and long-distance. In an information society, this open, overt, obvious activity has proven to be a profound advantage. In 1990, the civil libertarians of cyberspace assembled out of nowhere in particular, at warp speed. This "group" (actually, a networking gaggle of interested parties which scarcely deserves even that loose term) has almost nothing in the way of formal organization. Those formal civil libertarian organizations which did take an interest in cyberspace issues, mainly the Computer Professionals for Social Responsibility and the American Civil Liberties Union, were carried along by events in 1990, and acted mostly as adjuncts, underwriters or launching-pads. The civil libertarians nevertheless enjoyed the greatest success of any of the groups in the Crackdown of 1990. At this writing, their future looks rosy and the political initiative is firmly in their hands. This should be kept in mind as we study the highly unlikely lives and lifestyles of the people who actually made this happen. # In June 1989, Apple Computer, Inc., of Cupertino, California, had a problem. Someone had illicitly copied a small piece of Apple's proprietary software, software which controlled an internal chip driving the Macintosh screen display. This Color QuickDraw source code was a closely guarded piece of Apple's intellectual property. Only trusted Apple insiders were supposed to possess it. But the "NuPrometheus League" wanted things otherwise. This person (or persons) made several illicit copies of this source code, perhaps as many as two dozen. He (or she, or they) then put those illicit floppy disks into envelopes and mailed them to people all over America: people in the computer industry who were associated with, but not directly employed by, Apple Computer. The NuPrometheus caper was a complex, highly ideological, and very hacker-like crime. Prometheus, it will be recalled, stole the fire of the Gods and gave this potent gift to the general ranks of downtrodden mankind. A similar god-in-the-manger attitude was implied for the corporate elite of Apple Computer, while the "Nu" Prometheus had himself cast in the role of rebel demigod. The illicitly copied data was given away for free. The new Prometheus, whoever he was, escaped the fate of the ancient Greek Prometheus, who was chained to a rock for centuries by the vengeful gods while an eagle tore and ate his liver. On the other hand, NuPrometheus chickened out somewhat by comparison with his role model. The small chunk of Color QuickDraw code he had filched and replicated was more or less useless to Apple's industrial rivals (or, in fact, to anyone else). Instead of giving fire to mankind, it was more as if NuPrometheus had photocopied the schematics for part of a Bic lighter. The act was not a genuine work of industrial espionage. It was best interpreted as a symbolic, deliberate slap in the face for the Apple corporate heirarchy. Apple's internal struggles were well-known in the industry. Apple's founders, Jobs and Wozniak, had both taken their leave long since. Their raucous core of senior employees had been a barnstorming crew of 1960s Californians, many of them markedly less than happy with the new button-down multimillion dollar regime at Apple. Many of the programmers and developers who had invented the Macintosh model in the early 1980s had also taken their leave of the company. It was they, not the current masters of Apple's corporate fate, who had invented the stolen Color QuickDraw code. The NuPrometheus stunt was well-calculated to wound company morale. Apple called the FBI. The Bureau takes an interest in high-profile intellectual-property theft cases, industrial espionage and theft of trade secrets. These were likely the right people to call, and rumor has it that the entities responsible were in fact discovered by the FBI, and then quietly squelched by Apple management. NuPrometheus was never publicly charged with a crime, or prosecuted, or jailed. But there were no further illicit releases of Macintosh internal software. Eventually the painful issue of NuPrometheus was allowed to fade. In the meantime, however, a large number of puzzled bystanders found themselves entertaining surprise guests from the FBI. One of these people was John Perry Barlow. Barlow is a most unusual man, difficult to describe in conventional terms. He is perhaps best known as a songwriter for the Grateful Dead, for he composed lyrics for "Hell in a Bucket," "Picasso Moon," "Mexicali Blues," "I Need a Miracle," and many more; he has been writing for the band since 1970. Before we tackle the vexing question as to why a rock lyricist should be interviewed by the FBI in a computer-crime case, it might be well to say a word or two about the Grateful Dead. The Grateful Dead are perhaps the most successful and long-lasting of the numerous cultural emanations from the Haight-Ashbury district of San Francisco, in the glory days of Movement politics and lysergic transcendance. The Grateful Dead are a nexus, a veritable whirlwind, of applique decals, psychedelic vans, tie-dyed T-shirts, earth-color denim, frenzied dancing and open and unashamed drug use. The symbols, and the realities, of Californian freak power surround the Grateful Dead like knotted macrame. The Grateful Dead and their thousands of Deadhead devotees are radical Bohemians. This much is widely understood. Exactly what this implies in the 1990s is rather more problematic. The Grateful Dead are among the world's most popular and wealthy entertainers: number 20, according to Forbes magazine, right between M.C. Hammer and Sean Connery. In 1990, this jeans-clad group of purported raffish outcasts earned seventeen million dollars. They have been earning sums much along this line for quite some time now. And while the Dead are not investment bankers or three-piece-suit tax specialists--they are, in point of fact, hippie musicians-- this money has not been squandered in senseless Bohemian excess. The Dead have been quietly active for many years, funding various worthy activities in their extensive and widespread cultural community. The Grateful Dead are not conventional players in the American power establishment. They nevertheless are something of a force to be reckoned with. They have a lot of money and a lot of friends in many places, both likely and unlikely. The Dead may be known for back-to-the-earth environmentalist rhetoric, but this hardly makes them anti-technological Luddites. On the contrary, like most rock musicians, the Grateful Dead have spent their entire adult lives in the company of complex electronic equipment. They have funds to burn on any sophisticated tool and toy that might happen to catch their fancy. And their fancy is quite extensive. The Deadhead community boasts any number of recording engineers, lighting experts, rock video mavens, electronic technicians of all descriptions. And the drift goes both ways. Steve Wozniak, Apple's co-founder, used to throw rock festivals. Silicon Valley rocks out. These are the 1990s, not the 1960s. Today, for a surprising number of people all over America, the supposed dividing line between Bohemian and technician simply no longer exists. People of this sort may have a set of windchimes and a dog with a knotted kerchief 'round its neck, but they're also quite likely to own a multimegabyte Macintosh running MIDI synthesizer software and trippy fractal simulations. These days, even Timothy Leary himself, prophet of LSD, does virtual-reality computer-graphics demos in his lecture tours. John Perry Barlow is not a member of the Grateful Dead. He is, however, a ranking Deadhead. Barlow describes himself as a "techno-crank." A vague term like "social activist" might not be far from the mark, either. But Barlow might be better described as a "poet"--if one keeps in mind Percy Shelley's archaic definition of poets as "unacknowledged legislators of the world." Barlow once made a stab at acknowledged legislator status. In 1987, he narrowly missed the Republican nomination for a seat in the Wyoming State Senate. Barlow is a Wyoming native, the third-generation scion of a well-to-do cattle-ranching family. He is in his early forties, married and the father of three daughters. Barlow is not much troubled by other people's narrow notions of consistency. In the late 1980s, this Republican rock lyricist cattle rancher sold his ranch and became a computer telecommunications devotee. The free-spirited Barlow made this transition with ease. He genuinely enjoyed computers. With a beep of his modem, he leapt from small-town Pinedale, Wyoming, into electronic contact with a large and lively crowd of bright, inventive, technological sophisticates from all over the world. Barlow found the social milieu of computing attractive: its fast-lane pace, its blue-sky rhetoric, its open-endedness. Barlow began dabbling in computer journalism, with marked success, as he was a quick study, and both shrewd and eloquent. He frequently travelled to San Francisco to network with Deadhead friends. There Barlow made extensive contacts throughout the Californian computer community, including friendships among the wilder spirits at Apple. In May 1990, Barlow received a visit from a local Wyoming agent of the FBI. The NuPrometheus case had reached Wyoming. Barlow was troubled to find himself under investigation in an area of his interests once quite free of federal attention. He had to struggle to explain the very nature of computer-crime to a headscratching local FBI man who specialized in cattle-rustling. Barlow, chatting helpfully and demonstrating the wonders of his modem to the puzzled fed, was alarmed to find all "hackers" generally under FBI suspicion as an evil influence in the electronic community. The FBI, in pursuit of a hacker called "NuPrometheus," were tracing attendees of a suspect group called the Hackers Conference. The Hackers Conference, which had been started in 1984, was a yearly Californian meeting of digital pioneers and enthusiasts. The hackers of the Hackers Conference had little if anything to do with the hackers of the digital underground. On the contrary, the hackers of this conference were mostly well-to-do Californian high-tech CEOs, consultants, journalists and entrepreneurs. (This group of hackers were the exact sort of "hackers" most likely to react with militant fury at any criminal degradation of the term "hacker.") Barlow, though he was not arrested or accused of a crime, and though his computer had certainly not gone out the door, was very troubled by this anomaly. He carried the word to the Well. Like the Hackers Conference, "the Well" was an emanation of the Point Foundation. Point Foundation, the inspiration of a wealthy Californian 60s radical named Stewart Brand, was to be a major launch-pad of the civil libertarian effort. Point Foundation's cultural efforts, like those of their fellow Bay Area Californians the Grateful Dead, were multifaceted and multitudinous. Rigid ideological consistency had never been a strong suit of the Whole Earth Catalog. This Point publication had enjoyed a strong vogue during the late 60s and early 70s, when it offered hundreds of practical (and not so practical) tips on communitarian living, environmentalism, and getting back-to-the-land. The Whole Earth Catalog, and its sequels, sold two and half million copies and won a National Book Award. With the slow collapse of American radical dissent, the Whole Earth Catalog had slipped to a more modest corner of the cultural radar; but in its magazine incarnation, CoEvolution Quarterly, the Point Foundation continued to offer a magpie potpourri of "access to tools and ideas." CoEvolution Quarterly, which started in 1974, was never a widely popular magazine. Despite periodic outbreaks of millenarian fervor, CoEvolution Quarterly failed to revolutionize Western civilization and replace leaden centuries of history with bright new Californian paradigms. Instead, this propaganda arm of Point Foundation cakewalked a fine line between impressive brilliance and New Age flakiness. CoEvolution Quarterly carried no advertising, cost a lot, and came out on cheap newsprint with modest black-and-white graphics. It was poorly distributed, and spread mostly by subscription and word of mouth. It could not seem to grow beyond 30,000 subscribers. And yet--it never seemed to shrink much, either. Year in, year out, decade in, decade out, some strange demographic minority accreted to support the magazine. The enthusiastic readership did not seem to have much in the way of coherent politics or ideals. It was sometimes hard to understand what held them together (if the often bitter debate in the letter-columns could be described as "togetherness"). But if the magazine did not flourish, it was resilient; it got by. Then, in 1984, the birth-year of the Macintosh computer, CoEvolution Quarterly suddenly hit the rapids. Point Foundation had discovered the computer revolution. Out came the Whole Earth Software Catalog of 1984, arousing headscratching doubts among the tie-dyed faithful, and rabid enthusiasm among the nascent "cyberpunk" milieu, present company included. Point Foundation started its yearly Hackers Conference, and began to take an extensive interest in the strange new possibilities of digital counterculture. CoEvolution Quarterlyfolded its teepee, replaced by Whole Earth Software Review and eventually by Whole Earth Review (the magazine's present incarnation, currently under the editorship of virtual-reality maven Howard Rheingold). 1985 saw the birth of the "WELL"--the "Whole Earth 'Lectronic Link." The Well was Point Foundation's bulletin board system. As boards went, the Well was an anomaly from the beginning, and remained one. It was local to San Francisco. It was huge, with multiple phonelines and enormous files of commentary. Its complex UNIX-based software might be most charitably described as "user-opaque." It was run on a mainframe out of the rambling offices of a non-profit cultural foundation in Sausalito. And it was crammed with fans of the Grateful Dead. Though the Well was peopled by chattering hipsters of the Bay Area counterculture, it was by no means a "digital underground" board. Teenagers were fairly scarce; most Well users (known as "Wellbeings") were thirty- and forty-something Baby Boomers. They tended to work in the information industry: hardware, software, telecommunications, media, entertainment. Librarians, academics, and journalists were especially common on the Well, attracted by Point Foundation's open-handed distribution of "tools and ideas." There were no anarchy files on the Well, scarcely a dropped hint about access codes or credit-card theft. No one used handles. Vicious "flame-wars" were held to a comparatively civilized rumble. Debates were sometimes sharp, but no Wellbeing ever claimed that a rival had disconnected his phone, trashed his house, or posted his credit card numbers. The Well grew slowly as the 1980s advanced. It charged a modest sum for access and storage, and lost money for years--but not enough to hamper the Point Foundation, which was nonprofit anyway. By 1990, the Well had about five thousand users. These users wandered about a gigantic cyberspace smorgasbord of "Conferences", each conference itself consisting of a welter of "topics," each topic containing dozens, sometimes hundreds of comments, in a tumbling, multiperson debate that could last for months or years on end. In 1991, the Well's list of conferences looked like this: CONFERENCES ON THE WELL WELL "Screenzine" Digest (g zine) Best of the WELL - vintage material - (g best) Index listing of new topics in all conferences - (g newtops) Business - Education ---------------------- Apple Library Users Group(g alug) Agriculture (g agri) Brainstorming (g brain) Classifieds (g cla) Computer Journalism (g cj) Consultants (g consult) Consumers (g cons) Design (g design) Desktop Publishing (g desk) Disability (g disability) Education (g ed) Energy (g energy91) Entrepreneurs (g entre) Homeowners (g home) Indexing (g indexing) Investments (g invest) Kids91 (g kids) Legal (g legal) One Person Business (g one) Periodical/newsletter (g per) Telecomm Law (g tcl) The Future (g fut) Translators (g trans) Travel (g tra) Work (g work) Electronic Frontier Foundation (g eff) Computers, Freedom & Privacy (g cfp) Computer Professionals for Social Responsibility (g cpsr) Social - Political - Humanities --------------------------------- Aging (g gray) AIDS (g aids) Amnesty International (g amnesty) Archives (g arc) Berkeley (g berk) Buddhist (g wonderland) Christian (g cross) Couples (g couples) Current Events (g curr) Dreams (g dream) Drugs (g dru) East Coast (g east) Emotional Health@@@@ (g private) Erotica (g eros) Environment (g env) Firearms (g firearms) First Amendment (g first) Fringes of Reason (g fringes) Gay (g gay) Gay (Private)# (g gaypriv) Geography (g geo) German (g german) Gulf War (g gulf) Hawaii (g aloha) Health (g heal) History (g hist) Holistic (g holi) Interview (g inter) Italian (g ital) Jewish (g jew) Liberty (g liberty) Mind (g mind) Miscellaneous (g misc) Men on the WELL@@ (g mow) Network Integration (g origin) Nonprofits (g non) North Bay (g north) Northwest (g nw) Pacific Rim (g pacrim) Parenting (g par) Peace (g pea) Peninsula (g pen) Poetry (g poetry) Philosophy (g phi) Politics (g pol) Psychology (g psy) Psychotherapy (g therapy) Recovery## (g recovery) San Francisco (g sanfran) Scams (g scam) Sexuality (g sex) Singles (g singles) Southern (g south) Spanish (g spanish) Spirituality (g spirit) Tibet (g tibet) Transportation (g transport) True Confessions (g tru) Unclear (g unclear) WELL Writer's Workshop@@@(g www) Whole Earth (g we) Women on the WELL@(g wow) Words (g words) Writers (g wri) @@@@Private Conference - mail wooly for entry @@@Private conference - mail sonia for entry @@Private conference - mail flash for entry @ Private conference - mail reva for entry # Private Conference - mail hudu for entry ## Private Conference - mail dhawk for entry Arts - Recreation - Entertainment ----------------------------------- ArtCom Electronic Net (g acen) Audio-Videophilia (g aud) Bicycles (g bike) Bay Area Tonight@@(g bat) Boating (g wet) Books (g books) CD's (g cd) Comics (g comics) Cooking (g cook) Flying (g flying) Fun (g fun) Games (g games) Gardening (g gard) Kids (g kids) Nightowls@ (g owl) Jokes (g jokes) MIDI (g midi) Movies (g movies) Motorcycling (g ride) Motoring (g car) Music (g mus) On Stage (g onstage) Pets (g pets) Radio (g rad) Restaurant (g rest) Science Fiction (g sf) Sports (g spo) Star Trek (g trek) Television (g tv) Theater (g theater) Weird (g weird) Zines/Factsheet Five(g f5) @Open from midnight to 6am @@Updated daily Grateful Dead ------------- Grateful Dead (g gd) Deadplan@ (g dp) Deadlit (g deadlit) Feedback (g feedback) GD Hour (g gdh) Tapes (g tapes) Tickets (g tix) Tours (g tours) @Private conference - mail tnf for entry Computers ----------- AI/Forth/Realtime (g realtime) Amiga (g amiga) Apple (g app) Computer Books (g cbook) Art & Graphics (g gra) Hacking (g hack) HyperCard (g hype) IBM PC (g ibm) LANs (g lan) Laptop (g lap) Macintosh (g mac) Mactech (g mactech) Microtimes (g microx) Muchomedia (g mucho) NeXt (g next) OS/2 (g os2) Printers (g print) Programmer's Net (g net) Siggraph (g siggraph) Software Design (g sdc) Software/Programming (g software) Software Support (g ssc) Unix (g unix) Windows (g windows) Word Processing (g word) Technical - Communications ---------------------------- Bioinfo (g bioinfo) Info (g boing) Media (g media) NAPLPS (g naplps) Netweaver (g netweaver) Networld (g networld) Packet Radio (g packet) Photography (g pho) Radio (g rad) Science (g science) Technical Writers (g tec) Telecommunications(g tele) Usenet (g usenet) Video (g vid) Virtual Reality (g vr) The WELL Itself --------------- Deeper (g deeper) Entry (g ent) General (g gentech) Help (g help) Hosts (g hosts) Policy (g policy) System News (g news) Test (g test) The list itself is dazzling, bringing to the untutored eye a dizzying impression of a bizarre milieu of mountain-climbing Hawaiian holistic photographers trading true-life confessions with bisexual word-processing Tibetans. But this confusion is more apparent than real. Each of these conferences was a little cyberspace world in itself, comprising dozens and perhaps hundreds of sub-topics. Each conference was commonly frequented by a fairly small, fairly like-minded community of perhaps a few dozen people. It was humanly impossible to encompass the entire Well (especially since access to the Well's mainframe computer was billed by the hour). Most long-time users contented themselves with a few favorite topical neighborhoods, with the occasional foray elsewhere for a taste of exotica. But especially important news items, and hot topical debates, could catch the attention of the entire Well community. Like any community, the Well had its celebrities, and John Perry Barlow, the silver-tongued and silver-modemed lyricist of the Grateful Dead, ranked prominently among them. It was here on the Well that Barlow posted his true-life tale of computer-crime encounter with the FBI. The story, as might be expected, created a great stir. The Well was already primed for hacker controversy. In December 1989, Harper's magazine had hosted a debate on the Well about the ethics of illicit computer intrusion. While over forty various computer-mavens took part, Barlow proved a star in the debate. So did "Acid Phreak" and "Phiber Optik," a pair of young New York hacker-phreaks whose skills at telco switching-station intrusion were matched only by their apparently limitless hunger for fame. The advent of these two boldly swaggering outlaws in the precincts of the Well created a sensation akin to that of Black Panthers at a cocktail party for the radically chic. Phiber Optik in particular was to seize the day in 1990. A devotee of the 2600 circle and stalwart of the New York hackers' group "Masters of Deception," Phiber Optik was a splendid exemplar of the computer intruder as committed dissident. The eighteen-year-old Optik, a high-school dropout and part-time computer repairman, was young, smart, and ruthlessly obsessive, a sharp-dressing, sharp-talking digital dude who was utterly and airily contemptuous of anyone's rules but his own. By late 1991, Phiber Optik had appeared in Harper's, Esquire, The New York Times, in countless public debates and conventions, even on a television show hosted by Geraldo Rivera. Treated with gingerly respect by Barlow and other Well mavens, Phiber Optik swiftly became a Well celebrity. Strangely, despite his thorny attitude and utter single-mindedness, Phiber Optik seemed to arouse strong protective instincts in most of the people who met him. He was great copy for journalists, always fearlessly ready to swagger, and, better yet, to actually DEMONSTRATE some off-the-wall digital stunt. He was a born media darling. Even cops seemed to recognize that there was something peculiarly unworldly and uncriminal about this particular troublemaker. He was so bold, so flagrant, so young, and so obviously doomed, that even those who strongly disapproved of his actions grew anxious for his welfare, and began to flutter about him as if he were an endangered seal pup. In January 24, 1990 (nine days after the Martin Luther King Day Crash), Phiber Optik, Acid Phreak, and a third NYC scofflaw named Scorpion were raided by the Secret Service. Their computers went out the door, along with the usual blizzard of papers, notebooks, compact disks, answering machines, Sony Walkmans, etc. Both Acid Phreak and Phiber Optik were accused of having caused the Crash. The mills of justice ground slowly. The case eventually fell into the hands of the New York State Police. Phiber had lost his machinery in the raid, but there were no charges filed against him for over a year. His predicament was extensively publicized on the Well, where it caused much resentment for police tactics. It's one thing to merely hear about a hacker raided or busted; it's another to see the police attacking someone you've come to know personally, and who has explained his motives at length. Through the Harper's debate on the Well, it had become clear to the Wellbeings that Phiber Optik was not in fact going to "hurt anything." In their own salad days, many Wellbeings had tasted tear-gas in pitched street-battles with police. They were inclined to indulgence for acts of civil disobedience. Wellbeings were also startled to learn of the draconian thoroughness of a typical hacker search-and-seizure. It took no great stretch of imagination for them to envision themselves suffering much the same treatment. As early as January 1990, sentiment on the Well had already begun to sour, and people had begun to grumble that "hackers" were getting a raw deal from the ham-handed powers-that-be. The resultant issue of Harper's magazine posed the question as to whether computer-intrusion was a "crime" at all. As Barlow put it later: "I've begun to wonder if we wouldn't also regard spelunkers as desperate criminals if AT&T owned all the caves." In February 1991, more than a year after the raid on his home, Phiber Optik was finally arrested, and was charged with first-degree Computer Tampering and Computer Trespass, New York state offenses. He was also charged with a theft-of-service misdemeanor, involving a complex free-call scam to a 900 number. Phiber Optik pled guilty to the misdemeanor charge, and was sentenced to 35 hours of community service. This passing harassment from the unfathomable world of straight people seemed to bother Optik himself little if at all. Deprived of his computer by the January search-and-seizure, he simply bought himself a portable computer so the cops could no longer monitor the phone where he lived with his Mom, and he went right on with his depredations, sometimes on live radio or in front of television cameras. The crackdown raid may have done little to dissuade Phiber Optik, but its galling affect on the Wellbeings was profound. As 1990 rolled on, the slings and arrows mounted: the Knight Lightning raid, the Steve Jackson raid, the nation-spanning Operation Sundevil. The rhetoric of law enforcement made it clear that there was, in fact, a concerted crackdown on hackers in progress. The hackers of the Hackers Conference, the Wellbeings, and their ilk, did not really mind the occasional public misapprehension of "hacking;" if anything, this membrane of differentiation from straight society made the "computer community" feel different, smarter, better. They had never before been confronted, however, by a concerted vilification campaign. Barlow's central role in the counter-struggle was one of the major anomalies of 1990. Journalists investigating the controversy often stumbled over the truth about Barlow, but they commonly dusted themselves off and hurried on as if nothing had happened. It was as if it were TOO MUCH TO BELIEVE that a 1960s freak from the Grateful Dead had taken on a federal law enforcement operation head-to-head and ACTUALLY SEEMED TO BE WINNING! Barlow had no easily detectable power-base for a political struggle of this kind. He had no formal legal or technical credentials. Barlow was, however, a computer networker of truly stellar brilliance. He had a poet's gift of concise, colorful phrasing. He also had a journalist's shrewdness, an off-the-wall, self-deprecating wit, and a phenomenal wealth of simple personal charm. The kind of influence Barlow possessed is fairly common currency in literary, artistic, or musical circles. A gifted critic can wield great artistic influence simply through defining the temper of the times, by coining the catch-phrases and the terms of debate that become the common currency of the period. (And as it happened, Barlow WAS a part-time art critic, with a special fondness for the Western art of Frederic Remington.) Barlow was the first commentator to adopt William Gibson's striking science-fictional term "cyberspace" as a synonym for the present-day nexus of computer and telecommunications networks. Barlow was insistent that cyberspace should be regarded as a qualitatively new world, a "frontier." According to Barlow, the world of electronic communications, now made visible through the computer screen, could no longer be usefully regarded as just a tangle of high-tech wiring. Instead, it had become a PLACE, cyberspace, which demanded a new set of metaphors, a new set of rules and behaviors. The term, as Barlow employed it, struck a useful chord, and this concept of cyberspace was picked up by Time, Scientific American, computer police, hackers, and even Constitutional scholars. "Cyberspace" now seems likely to become a permanent fixture of the language. Barlow was very striking in person: a tall, craggy-faced, bearded, deep-voiced Wyomingan in a dashing Western ensemble of jeans, jacket, cowboy boots, a knotted throat-kerchief and an ever-present Grateful Dead cloisonne lapel pin. Armed with a modem, however, Barlow was truly in his element. Formal hierarchies were not Barlow's strong suit; he rarely missed a chance to belittle the "large organizations and their drones," with their uptight, institutional mindset. Barlow was very much of the free-spirit persuasion, deeply unimpressed by brass-hats and jacks-in-office. But when it came to the digital grapevine, Barlow was a cyberspace ad-hocrat par excellence. There was not a mighty army of Barlows. There was only one Barlow, and he was a fairly anomolous individual. However, the situation only seemed to REQUIRE a single Barlow. In fact, after 1990, many people must have concluded that a single Barlow was far more than they'd ever bargained for. Barlow's querulous mini-essay about his encounter with the FBI struck a strong chord on the Well. A number of other free spirits on the fringes of Apple Computing had come under suspicion, and they liked it not one whit better than he did. One of these was Mitchell Kapor, the co-inventor of the spreadsheet program "Lotus 1-2-3" and the founder of Lotus Development Corporation. Kapor had written-off the passing indignity of being fingerprinted down at his own local Boston FBI headquarters, but Barlow's post made the full national scope of the FBI's dragnet clear to Kapor. The issue now had Kapor's full attention. As the Secret Service swung into anti-hacker operation nationwide in 1990, Kapor watched every move with deep skepticism and growing alarm. As it happened, Kapor had already met Barlow, who had interviewed Kapor for a California computer journal. Like most people who met Barlow, Kapor had been very taken with him. Now Kapor took it upon himself to drop in on Barlow for a heart-to-heart talk about the situation. Kapor was a regular on the Well. Kapor had been a devotee of the Whole Earth Catalogsince the beginning, and treasured a complete run of the magazine. And Kapor not only had a modem, but a private jet. In pursuit of the scattered high-tech investments of Kapor Enterprises Inc., his personal, multi-million dollar holding company, Kapor commonly crossed state lines with about as much thought as one might give to faxing a letter. The Kapor-Barlow council of June 1990, in Pinedale, Wyoming, was the start of the Electronic Frontier Foundation. Barlow swiftly wrote a manifesto, "Crime and Puzzlement," which announced his, and Kapor's, intention to form a political organization to "raise and disburse funds for education, lobbying, and litigation in the areas relating to digital speech and the extension of the Constitution into Cyberspace." Furthermore, proclaimed the manifesto, the foundation would "fund, conduct, and support legal efforts to demonstrate that the Secret Service has exercised prior restraint on publications, limited free speech, conducted improper seizure of equipment and data, used undue force, and generally conducted itself in a fashion which is arbitrary, oppressive, and unconstitutional." "Crime and Puzzlement" was distributed far and wide through computer networking channels, and also printed in the Whole Earth Review. The sudden declaration of a coherent, politicized counter-strike from the ranks of hackerdom electrified the community. Steve Wozniak (perhaps a bit stung by the NuPrometheus scandal) swiftly offered to match any funds Kapor offered the Foundation. John Gilmore, one of the pioneers of Sun Microsystems, immediately offered his own extensive financial and personal support. Gilmore, an ardent libertarian, was to prove an eloquent advocate of electronic privacy issues, especially freedom from governmental and corporate computer-assisted surveillance of private citizens. A second meeting in San Francisco rounded up further allies: Stewart Brand of the Point Foundation, virtual-reality pioneers Jaron Lanier and Chuck Blanchard, network entrepreneur and venture capitalist Nat Goldhaber. At this dinner meeting, the activists settled on a formal title: the Electronic Frontier Foundation, Incorporated. Kapor became its president. A new EFF Conference was opened on the Point Foundation's Well, and the Well was declared "the home of the Electronic Frontier Foundation." Press coverage was immediate and intense. Like their nineteenth-century spiritual ancestors, Alexander Graham Bell and Thomas Watson, the high-tech computer entrepreneurs of the 1970s and 1980s--people such as Wozniak, Jobs, Kapor, Gates, and H. Ross Perot, who had raised themselves by their bootstraps to dominate a glittering new industry--had always made very good copy. But while the Wellbeings rejoiced, the press in general seemed nonplussed by the self-declared "civilizers of cyberspace." EFF's insistence that the war against "hackers" involved grave Constitutional civil liberties issues seemed somewhat farfetched, especially since none of EFF's organizers were lawyers or established politicians. The business press in particular found it easier to seize on the apparent core of the story-- that high-tech entrepreneur Mitchell Kapor had established a "defense fund for hackers." Was EFF a genuinely important political development--or merely a clique of wealthy eccentrics, dabbling in matters better left to the proper authorities? The jury was still out. But the stage was now set for open confrontation. And the first and the most critical battle was the hacker show-trial of "Knight Lightning." # It has been my practice throughout this book to refer to hackers only by their "handles." There is little to gain by giving the real names of these people, many of whom are juveniles, many of whom have never been convicted of any crime, and many of whom had unsuspecting parents who have already suffered enough. But the trial of Knight Lightning on July 24-27, 1990, made this particular "hacker" a nationally known public figure. It can do no particular harm to himself or his family if I repeat the long-established fact that his name is Craig Neidorf (pronounced NYE-dorf). Neidorf's jury trial took place in the United States District Court, Northern District of Illinois, Eastern Division, with the Honorable Nicholas J. Bua presiding. The United States of America was the plaintiff, the defendant Mr. Neidorf. The defendant's attorney was Sheldon T. Zenner of the Chicago firm of Katten, Muchin and Zavis. The prosecution was led by the stalwarts of the Chicago Computer Fraud and Abuse Task Force: William J. Cook, Colleen D. Coughlin, and David A. Glockner, all Assistant United States Attorneys. The Secret Service Case Agent was Timothy M. Foley. It will be recalled that Neidorf was the co-editor of an underground hacker "magazine" called Phrack. Phrack was an entirely electronic publication, distributed through bulletin boards and over electronic networks. It was amateur publication given away for free. Neidorf had never made any money for his work in Phrack. Neither had his unindicted co-editor "Taran King" or any of the numerous Phrack contributors. The Chicago Computer Fraud and Abuse Task Force, however, had decided to prosecute Neidorf as a fraudster. To formally admit that Phrack was a "magazine" and Neidorf a "publisher" was to open a prosecutorial Pandora's Box of First Amendment issues. To do this was to play into the hands of Zenner and his EFF advisers, which now included a phalanx of prominent New York civil rights lawyers as well as the formidable legal staff of Katten, Muchin and Zavis. Instead, the prosecution relied heavily on the issue of access device fraud: Section 1029 of Title 18, the section from which the Secret Service drew its most direct jurisdiction over computer crime. Neidorf's alleged crimes centered around the E911 Document. He was accused of having entered into a fraudulent scheme with the Prophet, who, it will be recalled, was the Atlanta LoD member who had illicitly copied the E911 Document from the BellSouth AIMSX system. The Prophet himself was also a co-defendant in the Neidorf case, part-and-parcel of the alleged "fraud scheme" to "steal" BellSouth's E911 Document (and to pass the Document across state lines, which helped establish the Neidorf trial as a federal case). The Prophet, in the spirit of full co-operation, had agreed to testify against Neidorf. In fact, all three of the Atlanta crew stood ready to testify against Neidorf. Their own federal prosecutors in Atlanta had charged the Atlanta Three with: (a) conspiracy, (b) computer fraud, (c) wire fraud, (d) access device fraud, and (e) interstate transportation of stolen property (Title 18, Sections 371, 1030, 1343, 1029, and 2314). Faced with this blizzard of trouble, Prophet and Leftist had ducked any public trial and had pled guilty to reduced charges--one conspiracy count apiece. Urvile had pled guilty to that odd bit of Section 1029 which makes it illegal to possess "fifteen or more" illegal access devices (in his case, computer passwords). And their sentences were scheduled for September 14, 1990--well after the Neidorf trial. As witnesses, they could presumably be relied upon to behave. Neidorf, however, was pleading innocent. Most everyone else caught up in the crackdown had "cooperated fully" and pled guilty in hope of reduced sentences. (Steve Jackson was a notable exception, of course, and had strongly protested his innocence from the very beginning. But Steve Jackson could not get a day in court-- Steve Jackson had never been charged with any crime in the first place.) Neidorf had been urged to plead guilty. But Neidorf was a political science major and was disinclined to go to jail for "fraud" when he had not made any money, had not broken into any computer, and had been publishing a magazine that he considered protected under the First Amendment. Neidorf's trial was the ONLY legal action of the entire Crackdown that actually involved bringing the issues at hand out for a public test in front of a jury of American citizens. Neidorf, too, had cooperated with investigators. He had voluntarily handed over much of the evidence that had led to his own indictment. He had already admitted in writing that he knew that the E911 Document had been stolen before he had "published" it in Phrack--or, from the prosecution's point of view, illegally transported stolen property by wire in something purporting to be a "publication." But even if the "publication" of the E911 Document was not held to be a crime, that wouldn't let Neidorf off the hook. Neidorf had still received the E911 Document when Prophet had transferred it to him from Rich Andrews' Jolnet node. On that occasion, it certainly hadn't been "published"-- it was hacker booty, pure and simple, transported across state lines. The Chicago Task Force led a Chicago grand jury to indict Neidorf on a set of charges that could have put him in jail for thirty years. When some of these charges were successfully challenged before Neidorf actually went to trial, the Chicago Task Force rearranged his indictment so that he faced a possible jail term of over sixty years! As a first offender, it was very unlikely that Neidorf would in fact receive a sentence so drastic; but the Chicago Task Force clearly intended to see Neidorf put in prison, and his conspiratorial "magazine" put permanently out of commission. This was a federal case, and Neidorf was charged with the fraudulent theft of property worth almost eighty thousand dollars. William Cook was a strong believer in high-profile prosecutions with symbolic overtones. He often published articles on his work in the security trade press, arguing that "a clear message had to be sent to the public at large and the computer community in particular that unauthorized attacks on computers and the theft of computerized information would not be tolerated by the courts." The issues were complex, the prosecution's tactics somewhat unorthodox, but the Chicago Task Force had proved sure-footed to date. "Shadowhawk" had been bagged on the wing in 1989 by the Task Force, and sentenced to nine months in prison, and a $10,000 fine. The Shadowhawk case involved charges under Section 1030, the "federal interest computer" section. Shadowhawk had not in fact been a devotee of "federal-interest" computers per se. On the contrary, Shadowhawk, who owned an AT&T home computer, seemed to cherish a special aggression toward AT&T. He had bragged on the underground boards "Phreak Klass 2600" and "Dr. Ripco" of his skills at raiding AT&T, and of his intention to crash AT&T's national phone system. Shadowhawk's brags were noticed by Henry Kluepfel of Bellcore Security, scourge of the outlaw boards, whose relations with the Chicago Task Force were long and intimate. The Task Force successfully established that Section 1030 applied to the teenage Shadowhawk, despite the objections of his defense attorney. Shadowhawk had entered a computer "owned" by U.S. Missile Command and merely "managed" by AT&T. He had also entered an AT&T computer located at Robbins Air Force Base in Georgia. Attacking AT&T was of "federal interest" whether Shadowhawk had intended it or not. The Task Force also convinced the court that a piece of AT&T software that Shadowhawk had illicitly copied from Bell Labs, the "Artificial Intelligence C5 Expert System," was worth a cool one million dollars. Shadowhawk's attorney had argued that Shadowhawk had not sold the program and had made no profit from the illicit copying. And in point of fact, the C5 Expert System was experimental software, and had no established market value because it had never been on the market in the first place. AT&T's own assessment of a "one million dollar" figure for its own intangible property was accepted without challenge by the court, however. And the court concurred with the government prosecutors that Shadowhawk showed clear "intent to defraud" whether he'd gotten any money or not. Shadowhawk went to jail. The Task Force's other best-known triumph had been the conviction and jailing of "Kyrie." Kyrie, a true denizen of the digital criminal underground, was a 36-year-old Canadian woman, convicted and jailed for telecommunications fraud in Canada. After her release from prison, she had fled the wrath of Canada Bell and the Royal Canadian Mounted Police, and eventually settled, very unwisely, in Chicago. "Kyrie," who also called herself "Long Distance Information," specialized in voice-mail abuse. She assembled large numbers of hot long-distance codes, then read them aloud into a series of corporate voice-mail systems. Kyrie and her friends were electronic squatters in corporate voice-mail systems, using them much as if they were pirate bulletin boards, then moving on when their vocal chatter clogged the system and the owners necessarily wised up. Kyrie's camp followers were a loose tribe of some hundred and fifty phone-phreaks, who followed her trail of piracy from machine to machine, ardently begging for her services and expertise. Kyrie's disciples passed her stolen credit-card numbers, in exchange for her stolen "long distance information." Some of Kyrie's clients paid her off in cash, by scamming credit-card cash advances from Western Union. Kyrie travelled incessantly, mostly through airline tickets and hotel rooms that she scammed through stolen credit cards. Tiring of this, she found refuge with a fellow female phone phreak in Chicago. Kyrie's hostess, like a surprising number of phone phreaks, was blind. She was also physically disabled. Kyrie allegedly made the best of her new situation by applying for, and receiving, state welfare funds under a false identity as a qualified caretaker for the handicapped. Sadly, Kyrie's two children by a former marriage had also vanished underground with her; these pre-teen digital refugees had no legal American identity, and had never spent a day in school. Kyrie was addicted to technical mastery and enthralled by her own cleverness and the ardent worship of her teenage followers. This foolishly led her to phone up Gail Thackeray in Arizona, to boast, brag, strut, and offer to play informant. Thackeray, however, had already learned far more than enough about Kyrie, whom she roundly despised as an adult criminal corrupting minors, a "female Fagin." Thackeray passed her tapes of Kyrie's boasts to the Secret Service. Kyrie was raided and arrested in Chicago in May 1989. She confessed at great length and pled guilty. In August 1990, Cook and his Task Force colleague Colleen Coughlin sent Kyrie to jail for 27 months, for computer and telecommunications fraud. This was a markedly severe sentence by the usual wrist-slapping standards of "hacker" busts. Seven of Kyrie's foremost teenage disciples were also indicted and convicted. The Kyrie "high-tech street gang," as Cook described it, had been crushed. Cook and his colleagues had been the first ever to put someone in prison for voice-mail abuse. Their pioneering efforts had won them attention and kudos. In his article on Kyrie, Cook drove the message home to the readers of Security Management magazine, a trade journal for corporate security professionals. The case, Cook said, and Kyrie's stiff sentence, "reflect a new reality for hackers and computer crime victims in the '90s. . . . Individuals and corporations who report computer and telecommunications crimes can now expect that their cooperation with federal law enforcement will result in meaningful punishment. Companies and the public at large must report computer-enhanced crimes if they want prosecutors and the course to protect their rights to the tangible and intangible property developed and stored on computers." Cook had made it his business to construct this "new reality for hackers." He'd also made it his business to police corporate property rights to the intangible. Had the Electronic Frontier Foundation been a "hacker defense fund" as that term was generally understood, they presumably would have stood up for Kyrie. Her 1990 sentence did indeed send a "message" that federal heat was coming down on "hackers." But Kyrie found no defenders at EFF, or anywhere else, for that matter. EFF was not a bail-out fund for electronic crooks. The Neidorf case paralleled the Shadowhawk case in certain ways. The victim once again was allowed to set the value of the "stolen" property. Once again Kluepfel was both investigator and technical advisor. Once again no money had changed hands, but the "intent to defraud" was central. The prosecution's case showed signs of weakness early on. The Task Force had originally hoped to prove Neidorf the center of a nationwide Legion of Doom criminal conspiracy. The Phrack editors threw physical get-togethers every summer, which attracted hackers from across the country; generally two dozen or so of the magazine's favorite contributors and readers. (Such conventions were common in the hacker community; 2600 Magazine, for instance, held public meetings of hackers in New York, every month.) LoD heavy-dudes were always a strong presence at these Phrack-sponsored "Summercons." In July 1988, an Arizona hacker named "Dictator" attended Summercon in Neidorf's home town of St. Louis. Dictator was one of Gail Thackeray's underground informants; Dictator's underground board in Phoenix was a sting operation for the Secret Service. Dictator brought an undercover crew of Secret Service agents to Summercon. The agents bored spyholes through the wall of Dictator's hotel room in St Louis, and videotaped the frolicking hackers through a one-way mirror. As it happened, however, nothing illegal had occurred on videotape, other than the guzzling of beer by a couple of minors. Summercons were social events, not sinister cabals. The tapes showed fifteen hours of raucous laughter, pizza-gobbling, in-jokes and back-slapping. Neidorf's lawyer, Sheldon Zenner, saw the Secret Service tapes before the trial. Zenner was shocked by the complete harmlessness of this meeting, which Cook had earlier characterized as a sinister interstate conspiracy to commit fraud. Zenner wanted to show the Summercon tapes to the jury. It took protracted maneuverings by the Task Force to keep the tapes from the jury as "irrelevant." The E911 Document was also proving a weak reed. It had originally been valued at $79,449. Unlike Shadowhawk's arcane Artificial Intelligence booty, the E911 Document was not software--it was written in English. Computer-knowledgeable people found this value--for a twelve-page bureaucratic document--frankly incredible. In his "Crime and Puzzlement" manifesto for EFF, Barlow commented: "We will probably never know how this figure was reached or by whom, though I like to imagine an appraisal team consisting of Franz Kafka, Joseph Heller, and Thomas Pynchon." As it happened, Barlow was unduly pessimistic. The EFF did, in fact, eventually discover exactly how this figure was reached, and by whom-- but only in 1991, long after the Neidorf trial was over. Kim Megahee, a Southern Bell security manager, had arrived at the document's value by simply adding up the "costs associated with the production" of the E911 Document. Those "costs" were as follows: 1. A technical writer had been hired to research and write the E911 Document. 200 hours of work, at $35 an hour, cost : $7,000. A Project Manager had overseen the technical writer. 200 hours, at $31 an hour, made: $6,200. 2. A week of typing had cost $721 dollars. A week of formatting had cost $721. A week of graphics formatting had cost $742. 3. Two days of editing cost $367. 4. A box of order labels cost five dollars. 5. Preparing a purchase order for the Document, including typing and the obtaining of an authorizing signature from within the BellSouth bureaucracy, cost $129. 6. Printing cost $313. Mailing the Document to fifty people took fifty hours by a clerk, and cost $858. 7. Placing the Document in an index took two clerks an hour each, totalling $43. Bureaucratic overhead alone, therefore, was alleged to have cost a whopping $17,099. According to Mr. Megahee, the typing of a twelve-page document had taken a full week. Writing it had taken five weeks, including an overseer who apparently did nothing else but watch the author for five weeks. Editing twelve pages had taken two days. Printing and mailing an electronic document (which was already available on the Southern Bell Data Network to any telco employee who needed it), had cost over a thousand dollars. But this was just the beginning. There were also the HARDWARE EXPENSES. Eight hundred fifty dollars for a VT220 computer monitor. THIRTY-ONE THOUSAND DOLLARS for a sophisticated VAXstation II computer. Six thousand dollars for a computer printer. TWENTY-TWO THOUSAND DOLLARS for a copy of "Interleaf" software. Two thousand five hundred dollars for VMS software. All this to create the twelve-page Document. Plus ten percent of the cost of the software and the hardware, for maintenance. (Actually, the ten percent maintenance costs, though mentioned, had been left off the final $79,449 total, apparently through a merciful oversight). Mr. Megahee's letter had been mailed directly to William Cook himself, at the office of the Chicago federal attorneys. The United States Government accepted these telco figures without question. As incredulity mounted, the value of the E911 Document was officially revised downward. This time, Robert Kibler of BellSouth Security estimated the value of the twelve pages as a mere $24,639.05--based, purportedly, on "R&D costs." But this specific estimate, right down to the nickel, did not move the skeptics at all; in fact it provoked open scorn and a torrent of sarcasm. The financial issues concerning theft of proprietary information have always been peculiar. It could be argued that BellSouth had not "lost" its E911 Document at all in the first place, and therefore had not suffered any monetary damage from this "theft." And Sheldon Zenner did in fact argue this at Neidorf's trial-- that Prophet's raid had not been "theft," but was better understood as illicit copying. The money, however, was not central to anyone's true purposes in this trial. It was not Cook's strategy to convince the jury that the E911 Document was a major act of theft and should be punished for that reason alone. His strategy was to argue that the E911 Document was DANGEROUS. It was his intention to establish that the E911 Document was "a road-map" to the Enhanced 911 System. Neidorf had deliberately and recklessly distributed a dangerous weapon. Neidorf and the Prophet did not care (or perhaps even gloated at the sinister idea) that the E911 Document could be used by hackers to disrupt 911 service, "a life line for every person certainly in the Southern Bell region of the United States, and indeed, in many communities throughout the United States," in Cook's own words. Neidorf had put people's lives in danger. In pre-trial maneuverings, Cook had established that the E911 Document was too hot to appear in the public proceedings of the Neidorf trial. The JURY ITSELF would not be allowed to ever see this Document, lest it slip into the official court records, and thus into the hands of the general public, and, thus, somehow, to malicious hackers who might lethally abuse it. Hiding the E911 Document from the jury may have been a clever legal maneuver, but it had a severe flaw. There were, in point of fact, hundreds, perhaps thousands, of people, already in possession of the E911 Document, just as Phrack had published it. Its true nature was already obvious to a wide section of the interested public (all of whom, by the way, were, at least theoretically, party to a gigantic wire-fraud conspiracy). Most everyone in the electronic community who had a modem and any interest in the Neidorf case already had a copy of the Document. It had already been available in Phrack for over a year. People, even quite normal people without any particular prurient interest in forbidden knowledge, did not shut their eyes in terror at the thought of beholding a "dangerous" document from a telephone company. On the contrary, they tended to trust their own judgement and simply read the Document for themselves. And they were not impressed. One such person was John Nagle. Nagle was a forty-one-year-old professional programmer with a masters' degree in computer science from Stanford. He had worked for Ford Aerospace, where he had invented a computer-networking technique known as the "Nagle Algorithm," and for the prominent Californian computer-graphics firm "Autodesk," where he was a major stockholder. Nagle was also a prominent figure on the Well, much respected for his technical knowledgeability. Nagle had followed the civil-liberties debate closely, for he was an ardent telecommunicator. He was no particular friend of computer intruders, but he believed electronic publishing had a great deal to offer society at large, and attempts to restrain its growth, or to censor free electronic expression, strongly roused his ire. The Neidorf case, and the E911 Document, were both being discussed in detail on the Internet, in an electronic publication called Telecom Digest. Nagle, a longtime Internet maven, was a regular reader of Telecom Digest. Nagle had never seen a copy of Phrack, but the implications of the case disturbed him. While in a Stanford bookstore hunting books on robotics, Nagle happened across a book called The Intelligent Network. Thumbing through it at random, Nagle came across an entire chapter meticulously detailing the workings of E911 police emergency systems. This extensive text was being sold openly, and yet in Illinois a young man was in danger of going to prison for publishing a thin six-page document about 911 service. Nagle made an ironic comment to this effect in Telecom Digest. From there, Nagle was put in touch with Mitch Kapor, and then with Neidorf's lawyers. Sheldon Zenner was delighted to find a computer telecommunications expert willing to speak up for Neidorf, one who was not a wacky teenage "hacker." Nagle was fluent, mature, and respectable; he'd once had a federal security clearance. Nagle was asked to fly to Illinois to join the defense team. Having joined the defense as an expert witness, Nagle read the entire E911 Document for himself. He made his own judgement about its potential for menace. The time has now come for you yourself, the reader, to have a look at the E911 Document. This six-page piece of work was the pretext for a federal prosecution that could have sent an electronic publisher to prison for thirty, or even sixty, years. It was the pretext for the search and seizure of Steve Jackson Games, a legitimate publisher of printed books. It was also the formal pretext for the search and seizure of the Mentor's bulletin board, "Phoenix Project," and for the raid on the home of Erik Bloodaxe. It also had much to do with the seizure of Richard Andrews' Jolnet node and the shutdown of Charles Boykin's AT&T node. The E911 Document was the single most important piece of evidence in the Hacker Crackdown. There can be no real and legitimate substitute for the Document itself. ==Phrack Inc.== Volume Two, Issue 24, File 5 of 13 Control Office Administration Of Enhanced 911 Services For Special Services and Account Centers by the Eavesdropper March, 1988 Description of Service ~~~~~~~~~~~~~~~~~~~~~ The control office for Emergency 911 service is assigned in accordance with the existing standard guidelines to one of the following centers: o Special Services Center (SSC) o Major Accounts Center (MAC) o Serving Test Center (STC) o Toll Control Center (TCC) The SSC/MAC designation is used in this document interchangeably for any of these four centers. The Special Services Centers (SSCs) or Major Account Centers (MACs) have been designated as the trouble reporting contact for all E911 customer (PSAP) reported troubles. Subscribers who have trouble on an E911 call will continue to contact local repair service (CRSAB) who will refer the trouble to the SSC/MAC, when appropriate. Due to the critical nature of E911 service, the control and timely repair of troubles is demanded. As the primary E911 customer contact, the SSC/MAC is in the unique position to monitor the status of the trouble and insure its resolution. System Overview ~~~~~~~~~~~~~~ The number 911 is intended as a nationwide universal telephone number which provides the public with direct access to a Public Safety Answering Point (PSAP). A PSAP is also referred to as an Emergency Service Bureau (ESB). A PSAP is an agency or facility which is authorized by a municipality to receive and respond to police, fire and/or ambulance services. One or more attendants are located at the PSAP facilities to receive and handle calls of an emergency nature in accordance with the local municipal requirements. An important advantage of E911 emergency service is improved (reduced) response times for emergency services. Also close coordination among agencies providing various emergency services is a valuable capability provided by E911 service. 1A ESS is used as the tandem office for the E911 network to route all 911 calls to the correct (primary) PSAP designated to serve the calling station. The E911 feature was developed primarily to provide routing to the correct PSAP for all 911 calls. Selective routing allows a 911 call originated from a particular station located in a particular district, zone, or town, to be routed to the primary PSAP designated to serve that customer station regardless of wire center boundaries. Thus, selective routing eliminates the problem of wire center boundaries not coinciding with district or other political boundaries. The services available with the E911 feature include: Forced Disconnect Default Routing Alternative Routing Night Service Selective Routing Automatic Number Identification (ANI) Selective Transfer Automatic Location Identification (ALI) Preservice/Installation Guidelines ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ When a contract for an E911 system has been signed, it is the responsibility of Network Marketing to establish an implementation/cutover committee which should include a representative from the SSC/MAC. Duties of the E911 Implementation Team include coordination of all phases of the E911 system deployment and the formation of an on-going E911 maintenance subcommittee. Marketing is responsible for providing the following customer specific information to the SSC/MAC prior to the start of call through testing: o All PSAP's (name, address, local contact) o All PSAP circuit ID's o 1004 911 service request including PSAP details on each PSAP (1004 Section K, L, M) o Network configuration o Any vendor information (name, telephone number, equipment) The SSC/MAC needs to know if the equipment and sets at the PSAP are maintained by the BOCs, an independent company, or an outside vendor, or any combination. This information is then entered on the PSAP profile sheets and reviewed quarterly for changes, additions and deletions. Marketing will secure the Major Account Number (MAN) and provide this number to Corporate Communications so that the initial issue of the service orders carry the MAN and can be tracked by the SSC/MAC via CORDNET. PSAP circuits are official services by definition. All service orders required for the installation of the E911 system should include the MAN assigned to the city/county which has purchased the system. In accordance with the basic SSC/MAC strategy for provisioning, the SSC/MAC will be Overall Control Office (OCO) for all Node to PSAP circuits (official services) and any other services for this customer. Training must be scheduled for all SSC/MAC involved personnel during the pre-service stage of the project. The E911 Implementation Team will form the on-going maintenance subcommittee prior to the initial implementation of the E911 system. This sub-committee will establish post implementation quality assurance procedures to ensure that the E911 system continues to provide quality service to the customer. Customer/Company training, trouble reporting interfaces for the customer, telephone company and any involved independent telephone companies needs to be addressed and implemented prior to E911 cutover. These functions can be best addressed by the formation of a sub- committee of the E911 Implementation Team to set up guidelines for and to secure service commitments of interfacing organizations. A SSC/MAC supervisor should chair this subcommittee and include the following organizations: 1) Switching Control Center - E911 translations - Trunking - End office and Tandem office hardware/software 2) Recent Change Memory Administration Center - Daily RC update activity for TN/ESN translations - Processes validity errors and rejects 3) Line and Number Administration - Verification of TN/ESN translations 4) Special Service Center/Major Account Center - Single point of contact for all PSAP and Node to host troubles - Logs, tracks & statusing of all trouble reports - Trouble referral, follow up, and escalation - Customer notification of status and restoration - Analyzation of "chronic" troubles - Testing, installation and maintenance of E911 circuits 5) Installation and Maintenance (SSIM/I&M) - Repair and maintenance of PSAP equipment and Telco owned sets 6) Minicomputer Maintenance Operations Center - E911 circuit maintenance (where applicable) 7) Area Maintenance Engineer - Technical assistance on voice (CO-PSAP) network related E911 troubles Maintenance Guidelines ~~~~~~~~~~~~~~~~~~~~~ The CCNC will test the Node circuit from the 202T at the Host site to the 202T at the Node site. Since Host to Node (CCNC to MMOC) circuits are official company services, the CCNC will refer all Node circuit troubles to the SSC/MAC. The SSC/MAC is responsible for the testing and follow up to restoration of these circuit troubles. Although Node to PSAP circuit are official services, the MMOC will refer PSAP circuit troubles to the appropriate SSC/MAC. The SSC/MAC is responsible for testing and follow up to restoration of PSAP circuit troubles. The SSC/MAC will also receive reports from CRSAB/IMC(s) on subscriber 911 troubles when they are not line troubles. The SSC/MAC is responsible for testing and restoration of these troubles. Maintenance responsibilities are as follows: SCC@ Voice Network (ANI to PSAP) @SCC responsible for tandem switch SSIM/I&M PSAP Equipment (Modems, CIU's, sets) Vendor PSAP Equipment (when CPE) SSC/MAC PSAP to Node circuits, and tandem to PSAP voice circuits (EMNT) MMOC Node site (Modems, cables, etc) Note: All above work groups are required to resolve troubles by interfacing with appropriate work groups for resolution. The Switching Control Center (SCC) is responsible for E911/1AESS translations in tandem central offices. These translations route E911 calls, selective transfer, default routing, speed calling, etc., for each PSAP. The SCC is also responsible for troubleshooting on the voice network (call originating to end office tandem equipment). For example, ANI failures in the originating offices would be a responsibility of the SCC. Recent Change Memory Administration Center (RCMAC) performs the daily tandem translation updates (recent change) for routing of individual telephone numbers. Recent changes are generated from service order activity (new service, address changes, etc.) and compiled into a daily file by the E911 Center (ALI/DMS E911 Computer). SSIM/I&M is responsible for the installation and repair of PSAP equipment. PSAP equipment includes ANI Controller, ALI Controller, data sets, cables, sets, and other peripheral equipment that is not vendor owned. SSIM/I&M is responsible for establishing maintenance test kits, complete with spare parts for PSAP maintenance. This includes test gear, data sets, and ANI/ALI Controller parts. Special Services Center (SSC) or Major Account Center (MAC) serves as the trouble reporting contact for all (PSAP) troubles reported by customer. The SSC/MAC refers troubles to proper organizations for handling and tracks status of troubles, escalating when necessary. The SSC/MAC will close out troubles with customer. The SSC/MAC will analyze all troubles and tracks "chronic" PSAP troubles. Corporate Communications Network Center (CCNC) will test and refer troubles on all node to host circuits. All E911 circuits are classified as official company property. The Minicomputer Maintenance Operations Center (MMOC) maintains the E911 (ALI/DMS) computer hardware at the Host site. This MMOC is also responsible for monitoring the system and reporting certain PSAP and system problems to the local MMOC's, SCC's or SSC/MAC's. The MMOC personnel also operate software programs that maintain the TN data base under the direction of the E911 Center. The maintenance of the NODE computer (the interface between the PSAP and the ALI/DMS computer) is a function of the MMOC at the NODE site. The MMOC's at the NODE sites may also be involved in the testing of NODE to Host circuits. The MMOC will also assist on Host to PSAP and data network related troubles not resolved through standard trouble clearing procedures. Installation And Maintenance Center (IMC) is responsible for referral of E911 subscriber troubles that are not subscriber line problems. E911 Center - Performs the role of System Administration and is responsible for overall operation of the E911 computer software. The E911 Center does A-Z trouble analysis and provides statistical information on the performance of the system. This analysis includes processing PSAP inquiries (trouble reports) and referral of network troubles. The E911 Center also performs daily processing of tandem recent change and provides information to the RCMAC for tandem input. The E911 Center is responsible for daily processing of the ALI/DMS computer data base and provides error files, etc. to the Customer Services department for investigation and correction. The E911 Center participates in all system implementations and on-going maintenance effort and assists in the development of procedures, training and education of information to all groups. Any group receiving a 911 trouble from the SSC/MAC should close out the trouble with the SSC/MAC or provide a status if the trouble has been referred to another group. This will allow the SSC/MAC to provide a status back to the customer or escalate as appropriate. Any group receiving a trouble from the Host site (MMOC or CCNC) should close the trouble back to that group. The MMOC should notify the appropriate SSC/MAC when the Host, Node, or all Node circuits are down so that the SSC/MAC can reply to customer reports that may be called in by the PSAPs. This will eliminate duplicate reporting of troubles. On complete outages the MMOC will follow escalation procedures for a Node after two (2) hours and for a PSAP after four (4) hours. Additionally the MMOC will notify the appropriate SSC/MAC when the Host, Node, or all Node circuits are down. The PSAP will call the SSC/MAC to report E911 troubles. The person reporting the E911 trouble may not have a circuit I.D. and will therefore report the PSAP name and address. Many PSAP troubles are not circuit specific. In those instances where the caller cannot provide a circuit I.D., the SSC/MAC will be required to determine the circuit I.D. using the PSAP profile. Under no circumstances will the SSC/MAC Center refuse to take the trouble. The E911 trouble should be handled as quickly as possible, with the SSC/MAC providing as much assistance as possible while taking the trouble report from the caller. The SSC/MAC will screen/test the trouble to determine the appropriate handoff organization based on the following criteria: PSAP equipment problem: SSIM/I&M Circuit problem: SSC/MAC Voice network problem: SCC (report trunk group number) Problem affecting multiple PSAPs (No ALI report from all PSAPs): Contact the MMOC to check for NODE or Host computer problems before further testing. The SSC/MAC will track the status of reported troubles and escalate as appropriate. The SSC/MAC will close out customer/company reports with the initiating contact. Groups with specific maintenance responsibilities, defined above, will investigate "chronic" troubles upon request from the SSC/MAC and the ongoing maintenance subcommittee. All "out of service" E911 troubles are priority one type reports. One link down to a PSAP is considered a priority one trouble and should be handled as if the PSAP was isolated. The PSAP will report troubles with the ANI controller, ALI controller or set equipment to the SSC/MAC. NO ANI: Where the PSAP reports NO ANI (digital display screen is blank) ask if this condition exists on all screens and on all calls. It is important to differentiate between blank screens and screens displaying 911-00XX, or all zeroes. When the PSAP reports all screens on all calls, ask if there is any voice contact with callers. If there is no voice contact the trouble should be referred to the SCC immediately since 911 calls are not getting through which may require alternate routing of calls to another PSAP. When the PSAP reports this condition on all screens but not all calls and has voice contact with callers, the report should be referred to SSIM/I&M for dispatch. The SSC/MAC should verify with the SCC that ANI is pulsing before dispatching SSIM. When the PSAP reports this condition on one screen for all calls (others work fine) the trouble should be referred to SSIM/I&M for dispatch, because the trouble is isolated to one piece of equipment at the customer premise. An ANI failure (i.e. all zeroes) indicates that the ANI has not been received by the PSAP from the tandem office or was lost by the PSAP ANI controller. The PSAP may receive "02" alarms which can be caused by the ANI controller logging more than three all zero failures on the same trunk. The PSAP has been instructed to report this condition to the SSC/MAC since it could indicate an equipment trouble at the PSAP which might be affecting all subscribers calling into the PSAP. When all zeroes are being received on all calls or "02" alarms continue, a tester should analyze the condition to determine the appropriate action to be taken. The tester must perform cooperative testing with the SCC when there appears to be a problem on the Tandem-PSAP trunks before requesting dispatch. When an occasional all zero condition is reported, the SSC/MAC should dispatch SSIM/I&M to routine equipment on a "chronic" troublesweep. The PSAPs are instructed to report incidental ANI failures to the BOC on a PSAP inquiry trouble ticket (paper) that is sent to the Customer Services E911 group and forwarded to E911 center when required. This usually involves only a particular telephone number and is not a condition that would require a report to the SSC/MAC. Multiple ANI failures which our from the same end office (XX denotes end office), indicate a hard trouble condition may exist in the end office or end office tandem trunks. The PSAP will report this type of condition to the SSC/MAC and the SSC/MAC should refer the report to the SCC responsible for the tandem office. NOTE: XX is the ESCO (Emergency Service Number) associated with the incoming 911 trunks into the tandem. It is important that the C/MAC tell the SCC what is displayed at the PSAP (i.e. 911-0011) which indicates to the SCC which end office is in trouble. Note: It is essential that the PSAP fill out inquiry form on every ANI failure. The PSAP will report a trouble any time an address is not received on an address display (screen blank) E911 call. (If a record is not in the 911 data base or an ANI failure is encountered, the screen will provide a display noticing such condition). The SSC/MAC should verify with the PSAP whether the NO ALI condition is on one screen or all screens. When the condition is on one screen (other screens receive ALI information) the SSC/MAC will request SSIM/I&M to dispatch. If no screens are receiving ALI information, there is usually a circuit trouble between the PSAP and the Host computer. The SSC/MAC should test the trouble and refer for restoral. Note: If the SSC/MAC receives calls from multiple PSAP's, all of which are receiving NO ALI, there is a problem with the Node or Node to Host circuits or the Host computer itself. Before referring the trouble the SSC/MAC should call the MMOC to inquire if the Node or Host is in trouble. Alarm conditions on the ANI controller digital display at the PSAP are to be reported by the PSAP's. These alarms can indicate various trouble conditions so the SSC/MAC should ask the PSAP if any portion of the E911 system is not functioning properly. The SSC/MAC should verify with the PSAP attendant that the equipment's primary function is answering E911 calls. If it is, the SSC/MAC should request a dispatch SSIM/I&M. If the equipment is not primarily used for E911, then the SSC/MAC should advise PSAP to contact their CPE vendor. Note: These troubles can be quite confusing when the PSAP has vendor equipment mixed in with equipment that the BOC maintains. The Marketing representative should provide the SSC/MAC information concerning any unusual or exception items where the PSAP should contact their vendor. This information should be included in the PSAP profile sheets. ANI or ALI controller down: When the host computer sees the PSAP equipment down and it does not come back up, the MMOC will report the trouble to the SSC/MAC; the equipment is down at the PSAP, a dispatch will be required. PSAP link (circuit) down: The MMOC will provide the SSC/MAC with the circuit ID that the Host computer indicates in trouble. Although each PSAP has two circuits, when either circuit is down the condition must be treated as an emergency since failure of the second circuit will cause the PSAP to be isolated. Any problems that the MMOC identifies from the Node location to the Host computer will be handled directly with the appropriate MMOC(s)/CCNC. Note: The customer will call only when a problem is apparent to the PSAP. When only one circuit is down to the PSAP, the customer may not be aware there is a trouble, even though there is one link down, notification should appear on the PSAP screen. Troubles called into the SSC/MAC from the MMOC or other company employee should not be closed out by calling the PSAP since it may result in the customer responding that they do not have a trouble. These reports can only be closed out by receiving information that the trouble was fixed and by checking with the company employee that reported the trouble. The MMOC personnel will be able to verify that the trouble has cleared by reviewing a printout from the host. When the CRSAB receives a subscriber complaint (i.e., cannot dial 911) the RSA should obtain as much information as possible while the customer is on the line. For example, what happened when the subscriber dialed 911? The report is automatically directed to the IMC for subscriber line testing. When no line trouble is found, the IMC will refer the trouble condition to the SSC/MAC. The SSC/MAC will contact Customer Services E911 Group and verify that the subscriber should be able to call 911 and obtain the ESN. The SSC/MAC will verify the ESN via 2SCCS. When both verifications match, the SSC/MAC will refer the report to the SCC responsible for the 911 tandem office for investigation and resolution. The MAC is responsible for tracking the trouble and informing the IMC when it is resolved. For more information, please refer to E911 Glossary of Terms. End of Phrack File _____________________________________ The reader is forgiven if he or she was entirely unable to read this document. John Perry Barlow had a great deal of fun at its expense, in "Crime and Puzzlement:" "Bureaucrat-ese of surpassing opacity. . . . To read the whole thing straight through without entering coma requires either a machine or a human who has too much practice thinking like one. Anyone who can understand it fully and fluidly had altered his consciousness beyond the ability to ever again read Blake, Whitman, or Tolstoy. . . . the document contains little of interest to anyone who is not a student of advanced organizational sclerosis." With the Document itself to hand, however, exactly as it was published (in its six-page edited form) in Phrack, the reader may be able to verify a few statements of fact about its nature. First, there is no software, no computer code, in the Document. It is not computer-programming language like FORTRAN or C++, it is English; all the sentences have nouns and verbs and punctuation. It does not explain how to break into the E911 system. It does not suggest ways to destroy or damage the E911 system. There are no access codes in the Document. There are no computer passwords. It does not explain how to steal long distance service. It does not explain how to break in to telco switching stations. There is nothing in it about using a personal computer or a modem for any purpose at all, good or bad. Close study will reveal that this document is not about machinery. The E911 Document is about ADMINISTRATION. It describes how one creates and administers certain units of telco bureaucracy: Special Service Centers and Major Account Centers (SSC/MAC). It describes how these centers should distribute responsibility for the E911 service, to other units of telco bureaucracy, in a chain of command, a formal hierarchy. It describes who answers customer complaints, who screens calls, who reports equipment failures, who answers those reports, who handles maintenance, who chairs subcommittees, who gives orders, who follows orders, WHO tells WHOM what to do. The Document is not a "roadmap" to computers. The Document is a roadmap to PEOPLE. As an aid to breaking into computer systems, the Document is USELESS. As an aid to harassing and deceiving telco people, however, the Document might prove handy (especially with its Glossary, which I have not included). An intense and protracted study of this Document and its Glossary, combined with many other such documents, might teach one to speak like a telco employee. And telco people live by SPEECH--they live by phone communication. If you can mimic their language over the phone, you can "social-engineer" them. If you can con telco people, you can wreak havoc among them. You can force them to no longer trust one another; you can break the telephonic ties that bind their community; you can make them paranoid. And people will fight harder to defend their community than they will fight to defend their individual selves. This was the genuine, gut-level threat posed by Phrack magazine. The real struggle was over the control of telco language, the control of telco knowledge. It was a struggle to defend the social "membrane of differentiation" that forms the walls of the telco community's ivory tower --the special jargon that allows telco professionals to recognize one another, and to exclude charlatans, thieves, and upstarts. And the prosecution brought out this fact. They repeatedly made reference to the threat posed to telco professionals by hackers using "social engineering." However, Craig Neidorf was not on trial for learning to speak like a professional telecommunications expert. Craig Neidorf was on trial for access device fraud and transportation of stolen property. He was on trial for stealing a document that was purportedly highly sensitive and purportedly worth tens of thousands of dollars. # John Nagle read the E911 Document. He drew his own conclusions. And he presented Zenner and his defense team with an overflowing box of similar material, drawn mostly from Stanford University's engineering libraries. During the trial, the defense team--Zenner, half-a-dozen other attorneys, Nagle, Neidorf, and computer-security expert Dorothy Denning, all pored over the E911 Document line-by-line. On the afternoon of July 25, 1990, Zenner began to cross-examine a woman named Billie Williams, a service manager for Southern Bell in Atlanta. Ms. Williams had been responsible for the E911 Document. (She was not its author--its original "author" was a Southern Bell staff manager named Richard Helms. However, Mr. Helms should not bear the entire blame; many telco staff people and maintenance personnel had amended the Document. It had not been so much "written" by a single author, as built by committee out of concrete-blocks of jargon.) Ms. Williams had been called as a witness for the prosecution, and had gamely tried to explain the basic technical structure of the E911 system, aided by charts. Now it was Zenner's turn. He first established that the "proprietary stamp" that BellSouth had used on the E911 Document was stamped on EVERY SINGLE DOCUMENT that BellSouth wrote-- THOUSANDS of documents. "We do not publish anything other than for our own company," Ms. Williams explained. "Any company document of this nature is considered proprietary." Nobody was in charge of singling out special high-security publications for special high-security protection. They were ALL special, no matter how trivial, no matter what their subject matter-- the stamp was put on as soon as any document was written, and the stamp was never removed. Zenner now asked whether the charts she had been using to explain the mechanics of E911 system were "proprietary," too. Were they PUBLIC INFORMATION, these charts, all about PSAPs, ALIs, nodes, local end switches? Could he take the charts out in the street and show them to anybody, "without violating some proprietary notion that BellSouth has?" Ms Williams showed some confusion, but finally areed that the charts were, in fact, public. "But isn't this what you said was basically what appeared in Phrack?" Ms. Williams denied this. Zenner now pointed out that the E911 Document as published in Phrack was only half the size of the original E911 Document (as Prophet had purloined it). Half of it had been deleted--edited by Neidorf. Ms. Williams countered that "Most of the information that is in the text file is redundant." Zenner continued to probe. Exactly what bits of knowledge in the Document were, in fact, unknown to the public? Locations of E911 computers? Phone numbers for telco personnel? Ongoing maintenance subcommittees? Hadn't Neidorf removed much of this? Then he pounced. "Are you familiar with Bellcore Technical Reference Document TR-TSY-000350?" It was, Zenner explained, officially titled "E911 Public Safety Answering Point Interface Between 1-1AESS Switch and Customer Premises Equipment." It contained highly detailed and specific technical information about the E911 System. It was published by Bellcore and publicly available for about $20. He showed the witness a Bellcore catalog which listed thousands of documents from Bellcore and from all the Baby Bells, BellSouth included. The catalog, Zenner pointed out, was free. Anyone with a credit card could call the Bellcore toll-free 800 number and simply order any of these documents, which would be shipped to any customer without question. Including, for instance, "BellSouth E911 Service Interfaces to Customer Premises Equipment at a Public Safety Answering Point." Zenner gave the witness a copy of "BellSouth E911 Service Interfaces," which cost, as he pointed out, $13, straight from the catalog. "Look at it carefully," he urged Ms. Williams, "and tell me if it doesn't contain about twice as much detailed information about the E911 system of BellSouth than appeared anywhere in Phrack." "You want me to. . . ." Ms. Williams trailed off. "I don't understand." "Take a careful look," Zenner persisted. "Take a look at that document, and tell me when you're done looking at it if, indeed, it doesn't contain much more detailed information about the E911 system than appeared in Phrack." "Phrack wasn't taken from this," Ms. Williams said. "Excuse me?" said Zenner. "Phrack wasn't taken from this." "I can't hear you," Zenner said. "Phrack was not taken from this document. I don't understand your question to me." "I guess you don't," Zenner said. At this point, the prosecution's case had been gutshot. Ms. Williams was distressed. Her confusion was quite genuine. Phrack had not been taken from any publicly available Bellcore document. Phrack's E911 Document had been stolen from her own company's computers, from her own company's text files, that her own colleagues had written, and revised, with much labor. But the "value" of the Document had been blown to smithereens. It wasn't worth eighty grand. According to Bellcore it was worth thirteen bucks. And the looming menace that it supposedly posed had been reduced in instants to a scarecrow. Bellcore itself was selling material far more detailed and "dangerous," to anybody with a credit card and a phone. Actually, Bellcore was not giving this information to just anybody. They gave it to ANYBODY WHO ASKED, but not many did ask. Not many people knew that Bellcore had a free catalog and an 800 number. John Nagle knew, but certainly the average teenage phreak didn't know. "Tuc," a friend of Neidorf's and sometime Phrack contributor, knew, and Tuc had been very helpful to the defense, behind the scenes. But the Legion of Doom didn't know--otherwise, they would never have wasted so much time raiding dumpsters. Cook didn't know. Foley didn't know. Kluepfel didn't know. The right hand of Bellcore knew not what the left hand was doing. The right hand was battering hackers without mercy, while the left hand was distributing Bellcore's intellectual property to anybody who was interested in telephone technical trivia--apparently, a pathetic few. The digital underground was so amateurish and poorly organized that they had never discovered this heap of unguarded riches. The ivory tower of the telcos was so wrapped-up in the fog of its own technical obscurity that it had left all the windows open and flung open the doors. No one had even noticed. Zenner sank another nail in the coffin. He produced a printed issue of Telephone Engineer & Management, a prominent industry journal that comes out twice a month and costs $27 a year. This particular issue of TE&M, called "Update on 911," featured a galaxy of technical details on 911 service and a glossary far more extensive than Phrack's. The trial rumbled on, somehow, through its own momentum. Tim Foley testified about his interrogations of Neidorf. Neidorf's written admission that he had known the E911 Document was pilfered was officially read into the court record. An interesting side issue came up: "Terminus" had once passed Neidorf a piece of UNIX AT&T software, a log-in sequence, that had been cunningly altered so that it could trap passwords. The UNIX software itself was illegally copied AT&T property, and the alterations "Terminus" had made to it, had transformed it into a device for facilitating computer break-ins. Terminus himself would eventually plead guilty to theft of this piece of software, and the Chicago group would send Terminus to prison for it. But it was of dubious relevance in the Neidorf case. Neidorf hadn't written the program. He wasn't accused of ever having used it. And Neidorf wasn't being charged with software theft or owning a password trapper. On the next day, Zenner took the offensive. The civil libertarians now had their own arcane, untried legal weaponry to launch into action-- the Electronic Communications Privacy Act of 1986, 18 US Code, Section 2701 et seq. Section 2701 makes it a crime to intentionally access without authorization a facility in which an electronic communication service is provided--it is, at heart, an anti-bugging and anti-tapping law, intended to carry the traditional protections of telephones into other electronic channels of communication. While providing penalties for amateur snoops, however, Section 2703 of the ECPA also lays some formal difficulties on the bugging and tapping activities of police. The Secret Service, in the person of Tim Foley, had served Richard Andrews with a federal grand jury subpoena, in their pursuit of Prophet, the E911 Document, and the Terminus software ring. But according to the Electronic Communications Privacy Act, a "provider of remote computing service" was legally entitled to "prior notice" from the government if a subpoena was used. Richard Andrews and his basement UNIX node, Jolnet, had not received any "prior notice." Tim Foley had purportedly violated the ECPA and committed an electronic crime! Zenner now sought the judge's permission to cross-examine Foley on the topic of Foley's own electronic misdeeds. Cook argued that Richard Andrews' Jolnet was a privately owned bulletin board, and not within the purview of ECPA. Judge Bua granted the motion of the government to prevent cross-examination on that point, and Zenner's offensive fizzled. This, however, was the first direct assault on the legality of the actions of the Computer Fraud and Abuse Task Force itself-- the first suggestion that they themselves had broken the law, and might, perhaps, be called to account. Zenner, in any case, did not really need the ECPA. Instead, he grilled Foley on the glaring contradictions in the supposed value of the E911 Document. He also brought up the embarrassing fact that the supposedly red-hot E911 Document had been sitting around for months, in Jolnet, with Kluepfel's knowledge, while Kluepfel had done nothing about it. In the afternoon, the Prophet was brought in to testify for the prosecution. (The Prophet, it will be recalled, had also been indicted in the case as partner in a fraud scheme with Neidorf.) In Atlanta, the Prophet had already pled guilty to one charge of conspiracy, one charge of wire fraud and one charge of interstate transportation of stolen property. The wire fraud charge, and the stolen property charge, were both directly based on the E911 Document. The twenty-year-old Prophet proved a sorry customer, answering questions politely but in a barely audible mumble, his voice trailing off at the ends of sentences. He was constantly urged to speak up. Cook, examining Prophet, forced him to admit that he had once had a "drug problem," abusing amphetamines, marijuana, cocaine, and LSD. This may have established to the jury that "hackers" are, or can be, seedy lowlife characters, but it may have damaged Prophet's credibility somewhat. Zenner later suggested that drugs might have damaged Prophet's memory. The interesting fact also surfaced that Prophet had never physically met Craig Neidorf. He didn't even know Neidorf's last name--at least, not until the trial. Prophet confirmed the basic facts of his hacker career. He was a member of the Legion of Doom. He had abused codes, he had broken into switching stations and re-routed calls, he had hung out on pirate bulletin boards. He had raided the BellSouth AIMSX computer, copied the E911 Document, stored it on Jolnet, mailed it to Neidorf. He and Neidorf had edited it, and Neidorf had known where it came from. Zenner, however, had Prophet confirm that Neidorf was not a member of the Legion of Doom, and had not urged Prophet to break into BellSouth computers. Neidorf had never urged Prophet to defraud anyone, or to steal anything. Prophet also admitted that he had never known Neidorf to break in to any computer. Prophet said that no one in the Legion of Doom considered Craig Neidorf a "hacker" at all. Neidorf was not a UNIX maven, and simply lacked the necessary skill and ability to break into computers. Neidorf just published a magazine. On Friday, July 27, 1990, the case against Neidorf collapsed. Cook moved to dismiss the indictment, citing "information currently available to us that was not available to us at the inception of the trial." Judge Bua praised the prosecution for this action, which he described as "very responsible," then dismissed a juror and declared a mistrial. Neidorf was a free man. His defense, however, had cost himself and his family dearly. Months of his life had been consumed in anguish; he had seen his closest friends shun him as a federal criminal. He owed his lawyers over a hundred thousand dollars, despite a generous payment to the defense by Mitch Kapor. Neidorf was not found innocent. The trial was simply dropped. Nevertheless, on September 9, 1991, Judge Bua granted Neidorf's motion for the "expungement and sealing" of his indictment record. The United States Secret Service was ordered to delete and destroy all fingerprints, photographs, and other records of arrest or processing relating to Neidorf's indictment, including their paper documents and their computer records. Neidorf went back to school, blazingly determined to become a lawyer. Having seen the justice system at work, Neidorf lost much of his enthusiasm for merely technical power. At this writing, Craig Neidorf is working in Washington as a salaried researcher for the American Civil Liberties Union. # The outcome of the Neidorf trial changed the EFF from voices-in-the-wilderness to the media darlings of the new frontier. Legally speaking, the Neidorf case was not a sweeping triumph for anyone concerned. No constitutional principles had been established. The issues of "freedom of the press" for electronic publishers remained in legal limbo. There were public misconceptions about the case. Many people thought Neidorf had been found innocent and relieved of all his legal debts by Kapor. The truth was that the government had simply dropped the case, and Neidorf's family had gone deeply into hock to support him. But the Neidorf case did provide a single, devastating, public sound-bite: THE FEDS SAID IT WAS WORTH EIGHTY GRAND, AND IT WAS ONLY WORTH THIRTEEN BUCKS. This is the Neidorf case's single most memorable element. No serious report of the case missed this particular element. Even cops could not read this without a wince and a shake of the head. It left the public credibility of the crackdown agents in tatters. The crackdown, in fact, continued, however. Those two charges against Prophet, which had been based on the E911 Document, were quietly forgotten at his sentencing--even though Prophet had already pled guilty to them. Georgia federal prosecutors strongly argued for jail time for the Atlanta Three, insisting on "the need to send a message to the community," "the message that hackers around the country need to hear." There was a great deal in their sentencing memorandum about the awful things that various other hackers had done (though the Atlanta Three themselves had not, in fact, actually committed these crimes). There was also much speculation about the awful things that the Atlanta Three MIGHT have done and WERE CAPABLE of doing (even though they had not, in fact, actually done them). The prosecution's argument carried the day. The Atlanta Three were sent to prison: Urvile and Leftist both got 14 months each, while Prophet (a second offender) got 21 months. The Atlanta Three were also assessed staggering fines as "restitution": $233,000 each. BellSouth claimed that the defendants had "stolen" "approximately $233,880 worth" of "proprietary computer access information"-- specifically, $233,880 worth of computer passwords and connect addresses. BellSouth's astonishing claim of the extreme value of its own computer passwords and addresses was accepted at face value by the Georgia court. Furthermore (as if to emphasize its theoretical nature) this enormous sum was not divvied up among the Atlanta Three, but each of them had to pay all of it. A striking aspect of the sentence was that the Atlanta Three were specifically forbidden to use computers, except for work or under supervision. Depriving hackers of home computers and modems makes some sense if one considers hackers as "computer addicts," but EFF, filing an amicus brief in the case, protested that this punishment was unconstitutional-- it deprived the Atlanta Three of their rights of free association and free expression through electronic media. Terminus, the "ultimate hacker," was finally sent to prison for a year through the dogged efforts of the Chicago Task Force. His crime, to which he pled guilty, was the transfer of the UNIX password trapper, which was officially valued by AT&T at $77,000, a figure which aroused intense skepticism among those familiar with UNIX "login.c" programs. The jailing of Terminus and the Atlanta Legionnaires of Doom, however, did not cause the EFF any sense of embarrassment or defeat. On the contrary, the civil libertarians were rapidly gathering strength. An early and potent supporter was Senator Patrick Leahy, Democrat from Vermont, who had been a Senate sponsor of the Electronic Communications Privacy Act. Even before the Neidorf trial, Leahy had spoken out in defense of hacker-power and freedom of the keyboard: "We cannot unduly inhibit the inquisitive 13-year-old who, if left to experiment today, may tomorrow develop the telecommunications or computer technology to lead the United States into the 21st century. He represents our future and our best hope to remain a technologically competitive nation." It was a handsome statement, rendered perhaps rather more effective by the fact that the crackdown raiders DID NOT HAVE any Senators speaking out for THEM. On the contrary, their highly secretive actions and tactics, all "sealed search warrants" here and "confidential ongoing investigations" there, might have won them a burst of glamorous publicity at first, but were crippling them in the on-going propaganda war. Gail Thackeray was reduced to unsupported bluster: "Some of these people who are loudest on the bandwagon may just slink into the background," she predicted in Newsweek--when all the facts came out, and the cops were vindicated. But all the facts did not come out. Those facts that did, were not very flattering. And the cops were not vindicated. And Gail Thackeray lost her job. By the end of 1991, William Cook had also left public employment. 1990 had belonged to the crackdown, but by '91 its agents were in severe disarray, and the libertarians were on a roll. People were flocking to the cause. A particularly interesting ally had been Mike Godwin of Austin, Texas. Godwin was an individual almost as difficult to describe as Barlow; he had been editor of the student newspaper of the University of Texas, and a computer salesman, and a programmer, and in 1990 was back in law school, looking for a law degree. Godwin was also a bulletin board maven. He was very well-known in the Austin board community under his handle "Johnny Mnemonic," which he adopted from a cyberpunk science fiction story by William Gibson. Godwin was an ardent cyberpunk science fiction fan. As a fellow Austinite of similar age and similar interests, I myself had known Godwin socially for many years. When William Gibson and myself had been writing our collaborative SF novel, The Difference Engine, Godwin had been our technical advisor in our effort to link our Apple word-processors from Austin to Vancouver. Gibson and I were so pleased by his generous expert help that we named a character in the novel "Michael Godwin" in his honor. The handle "Mnemonic" suited Godwin very well. His erudition and his mastery of trivia were impressive to the point of stupor; his ardent curiosity seemed insatiable, and his desire to debate and argue seemed the central drive of his life. Godwin had even started his own Austin debating society, wryly known as the "Dull Men's Club." In person, Godwin could be overwhelming; a flypaper-brained polymath who could not seem to let any idea go. On bulletin boards, however, Godwin's closely reasoned, highly grammatical, erudite posts suited the medium well, and he became a local board celebrity. Mike Godwin was the man most responsible for the public national exposure of the Steve Jackson case. The Izenberg seizure in Austin had received no press coverage at all. The March 1 raids on Mentor, Bloodaxe, and Steve Jackson Games had received a brief front-page splash in the front page of the Austin American-Statesman, but it was confused and ill-informed: the warrants were sealed, and the Secret Service wasn't talking. Steve Jackson seemed doomed to obscurity. Jackson had not been arrested; he was not charged with any crime; he was not on trial. He had lost some computers in an ongoing investigation--so what? Jackson tried hard to attract attention to the true extent of his plight, but he was drawing a blank; no one in a position to help him seemed able to get a mental grip on the issues. Godwin, however, was uniquely, almost magically, qualified to carry Jackson's case to the outside world. Godwin was a board enthusiast, a science fiction fan, a former journalist, a computer salesman, a lawyer-to-be, and an Austinite. Through a coincidence yet more amazing, in his last year of law school Godwin had specialized in federal prosecutions and criminal procedure. Acting entirely on his own, Godwin made up a press packet which summarized the issues and provided useful contacts for reporters. Godwin's behind-the-scenes effort (which he carried out mostly to prove a point in a local board debate) broke the story again in the Austin American-Statesman and then in Newsweek. Life was never the same for Mike Godwin after that. As he joined the growing civil liberties debate on the Internet, it was obvious to all parties involved that here was one guy who, in the midst of complete murk and confusion, GENUINELY UNDERSTOOD EVERYTHING HE WAS TALKING ABOUT. The disparate elements of Godwin's dilettantish existence suddenly fell together as neatly as the facets of a Rubik's cube. When the time came to hire a full-time EFF staff attorney, Godwin was the obvious choice. He took the Texas bar exam, left Austin, moved to Cambridge, became a full-time, professional, computer civil libertarian, and was soon touring the nation on behalf of EFF, delivering well-received addresses on the issues to crowds as disparate as academics, industrialists, science fiction fans, and federal cops. Michael Godwin is currently the chief legal counsel of the Electronic Frontier Foundation in Cambridge, Massachusetts. # Another early and influential participant in the controversy was Dorothy Denning. Dr. Denning was unique among investigators of the computer underground in that she did not enter the debate with any set of politicized motives. She was a professional cryptographer and computer security expert whose primary interest in hackers was SCHOLARLY. She had a B.A. and M.A. in mathematics, and a Ph.D. in computer science from Purdue. She had worked for SRI International, the California think-tank that was also the home of computer-security maven Donn Parker, and had authored an influential text called Cryptography and Data Security. In 1990, Dr. Denning was working for Digital Equipment Corporation in their Systems Reseach Center. Her husband, Peter Denning, was also a computer security expert, working for NASA's Research Institute for Advanced Computer Science. He had edited the well-received Computers Under Attack: Intruders, Worms and Viruses. Dr. Denning took it upon herself to contact the digital underground, more or less with an anthropological interest. There she discovered that these computer-intruding hackers, who had been characterized as unethical, irresponsible, and a serious danger to society, did in fact have their own subculture and their own rules. They were not particularly well-considered rules, but they were, in fact, rules. Basically, they didn't take money and they didn't break anything. Her dispassionate reports on her researches did a great deal to influence serious-minded computer professionals--the sort of people who merely rolled their eyes at the cyberspace rhapsodies of a John Perry Barlow. For young hackers of the digital underground, meeting Dorothy Denning was a genuinely mind-boggling experience. Here was this neatly coiffed, conservatively dressed, dainty little personage, who reminded most hackers of their moms or their aunts. And yet she was an IBM systems programmer with profound expertise in computer architectures and high-security information flow, who had personal friends in the FBI and the National Security Agency. Dorothy Denning was a shining example of the American mathematical intelligentsia, a genuinely brilliant person from the central ranks of the computer-science elite. And here she was, gently questioning twenty-year-old hairy-eyed phone-phreaks over the deeper ethical implications of their behavior. Confronted by this genuinely nice lady, most hackers sat up very straight and did their best to keep the anarchy-file stuff down to a faint whiff of brimstone. Nevertheless, the hackers WERE in fact prepared to seriously discuss serious issues with Dorothy Denning. They were willing to speak the unspeakable and defend the indefensible, to blurt out their convictions that information cannot be owned, that the databases of governments and large corporations were a threat to the rights and privacy of individuals. Denning's articles made it clear to many that "hacking" was not simple vandalism by some evil clique of psychotics. "Hacking" was not an aberrant menace that could be charmed away by ignoring it, or swept out of existence by jailing a few ringleaders. Instead, "hacking" was symptomatic of a growing, primal struggle over knowledge and power in the age of information. Denning pointed out that the attitude of hackers were at least partially shared by forward-looking management theorists in the business community: people like Peter Drucker and Tom Peters. Peter Drucker, in his book The New Realities, had stated that "control of information by the government is no longer possible. Indeed, information is now transnational. Like money, it has no `fatherland.'" And management maven Tom Peters had chided large corporations for uptight, proprietary attitudes in his bestseller, Thriving on Chaos: "Information hoarding, especially by politically motivated, power-seeking staffs, had been commonplace throughout American industry, service and manufacturing alike. It will be an impossible millstone aroung the neck of tomorrow's organizations." Dorothy Denning had shattered the social membrane of the digital underground. She attended the Neidorf trial, where she was prepared to testify for the defense as an expert witness. She was a behind-the-scenes organizer of two of the most important national meetings of the computer civil libertarians. Though not a zealot of any description, she brought disparate elements of the electronic community into a surprising and fruitful collusion. Dorothy Denning is currently the Chair of the Computer Science Department at Georgetown University in Washington, DC. # There were many stellar figures in the civil libertarian community. There's no question, however, that its single most influential figure was Mitchell D. Kapor. Other people might have formal titles, or governmental positions, have more experience with crime, or with the law, or with the arcanities of computer security or constitutional theory. But by 1991 Kapor had transcended any such narrow role. Kapor had become "Mitch." Mitch had become the central civil-libertarian ad-hocrat. Mitch had stood up first, he had spoken out loudly, directly, vigorously and angrily, he had put his own reputation, and his very considerable personal fortune, on the line. By mid-'91 Kapor was the best-known advocate of his cause and was known PERSONALLY by almost every single human being in America with any direct influence on the question of civil liberties in cyberspace. Mitch had built bridges, crossed voids, changed paradigms, forged metaphors, made phone-calls and swapped business cards to such spectacular effect that it had become impossible for anyone to take any action in the "hacker question" without wondering what Mitch might think-- and say--and tell his friends. The EFF had simply NETWORKED the situation into an entirely new status quo. And in fact this had been EFF's deliberate strategy from the beginning. Both Barlow and Kapor loathed bureaucracies and had deliberately chosen to work almost entirely through the electronic spiderweb of "valuable personal contacts." After a year of EFF, both Barlow and Kapor had every reason to look back with satisfaction. EFF had established its own Internet node, "eff.org," with a well-stocked electronic archive of documents on electronic civil rights, privacy issues, and academic freedom. EFF was also publishing EFFector, a quarterly printed journal, as well as EFFector Online, an electronic newsletter with over 1,200 subscribers. And EFF was thriving on the Well. EFF had a national headquarters in Cambridge and a full-time staff. It had become a membership organization and was attracting grass-roots support. It had also attracted the support of some thirty civil-rights lawyers, ready and eager to do pro bono work in defense of the Constitution in Cyberspace. EFF had lobbied successfully in Washington and in Massachusetts to change state and federal legislation on computer networking. Kapor in particular had become a veteran expert witness, and had joined the Computer Science and Telecommunications Board of the National Academy of Science and Engineering. EFF had sponsored meetings such as "Computers, Freedom and Privacy" and the CPSR Roundtable. It had carried out a press offensive that, in the words of EFFector, "has affected the climate of opinion about computer networking and begun to reverse the slide into `hacker hysteria' that was beginning to grip the nation." It had helped Craig Neidorf avoid prison. And, last but certainly not least, the Electronic Frontier Foundation had filed a federal lawsuit in the name of Steve Jackson, Steve Jackson Games Inc., and three users of the Illuminati bulletin board system. The defendants were, and are, the United States Secret Service, William Cook, Tim Foley, Barbara Golden and Henry Kleupfel. The case, which is in pre-trial procedures in an Austin federal court as of this writing, is a civil action for damages to redress alleged violations of the First and Fourth Amendments to the United States Constitution, as well as the Privacy Protection Act of 1980 (42 USC 2000aa et seq.), and the Electronic Communications Privacy Act (18 USC 2510 et seq and 2701 et seq). EFF had established that it had credibility. It had also established that it had teeth. In the fall of 1991 I travelled to Massachusetts to speak personally with Mitch Kapor. It was my final interview for this book. # The city of Boston has always been one of the major intellectual centers of the American republic. It is a very old city by American standards, a place of skyscrapers overshadowing seventeenth-century graveyards, where the high-tech start-up companies of Route 128 co-exist with the hand-wrought pre-industrial grace of "Old Ironsides," the USS CONSTITUTION. The Battle of Bunker Hill, one of the first and bitterest armed clashes of the American Revolution, was fought in Boston's environs. Today there is a monumental spire on Bunker Hill, visible throughout much of the city. The willingness of the republican revolutionaries to take up arms and fire on their oppressors has left a cultural legacy that two full centuries have not effaced. Bunker Hill is still a potent center of American political symbolism, and the Spirit of '76 is still a potent image for those who seek to mold public opinion. Of course, not everyone who wraps himself in the flag is necessarily a patriot. When I visited the spire in September 1991, it bore a huge, badly-erased, spray-can grafitto around its bottom reading "BRITS OUT--IRA PROVOS." Inside this hallowed edifice was a glass-cased diorama of thousands of tiny toy soldiers, rebels and redcoats, fighting and dying over the green hill, the riverside marshes, the rebel trenchworks. Plaques indicated the movement of troops, the shiftings of strategy. The Bunker Hill Monument is occupied at its very center by the toy soldiers of a military war-game simulation. The Boston metroplex is a place of great universities, prominent among the Massachusetts Institute of Technology, where the term "computer hacker" was first coined. The Hacker Crackdown of 1990 might be interpreted as a political struggle among American cities: traditional strongholds of longhair intellectual liberalism, such as Boston, San Francisco, and Austin, versus the bare-knuckle industrial pragmatism of Chicago and Phoenix (with Atlanta and New York wrapped in internal struggle). The headquarters of the Electronic Frontier Foundation is on 155 Second Street in Cambridge, a Bostonian suburb north of the River Charles. Second Street has weedy sidewalks of dented, sagging brick and elderly cracked asphalt; large street-signs warn "NO PARKING DURING DECLARED SNOW EMERGENCY." This is an old area of modest manufacturing industries; the EFF is catecorner from the Greene Rubber Company. EFF's building is two stories of red brick; its large wooden windows feature gracefully arched tops and stone sills. The glass window beside the Second Street entrance bears three sheets of neatly laser-printed paper, taped against the glass. They read: ON Technology. EFF. KEI. "ON Technology" is Kapor's software company, which currently specializes in "groupware" for the Apple Macintosh computer. "Groupware" is intended to promote efficient social interaction among office-workers linked by computers. ON Technology's most successful software products to date are "Meeting Maker" and "Instant Update." "KEI" is Kapor Enterprises Inc., Kapor's personal holding company, the commercial entity that formally controls his extensive investments in other hardware and software corporations. "EFF" is a political action group--of a special sort. Inside, someone's bike has been chained to the handrails of a modest flight of stairs. A wall of modish glass brick separates this anteroom from the offices. Beyond the brick, there's an alarm system mounted on the wall, a sleek, complex little number that resembles a cross between a thermostat and a CD player. Piled against the wall are box after box of a recent special issue of Scientific American, "How to Work, Play, and Thrive in Cyberspace," with extensive coverage of electronic networking techniques and political issues, including an article by Kapor himself. These boxes are addressed to Gerard Van der Leun, EFF's Director of Communications, who will shortly mail those magazines to every member of the EFF. The joint headquarters of EFF, KEI, and ON Technology, which Kapor currently rents, is a modestly bustling place. It's very much the same physical size as Steve Jackson's gaming company. It's certainly a far cry from the gigantic gray steel-sided railway shipping barn, on the Monsignor O'Brien Highway, that is owned by Lotus Development Corporation. Lotus is, of course, the software giant that Mitchell Kapor founded in the late 70s. The software program Kapor co-authored, "Lotus 1-2-3," is still that company's most profitable product. "Lotus 1-2-3" also bears a singular distinction in the digital underground: it's probably the most pirated piece of application software in world history. Kapor greets me cordially in his own office, down a hall. Kapor, whose name is pronounced KAY-por, is in his early forties, married and the father of two. He has a round face, high forehead, straight nose, a slightly tousled mop of black hair peppered with gray. His large brown eyes are wideset, reflective, one might almost say soulful. He disdains ties, and commonly wears Hawaiian shirts and tropical prints, not so much garish as simply cheerful and just that little bit anomalous. There is just the whiff of hacker brimstone about Mitch Kapor. He may not have the hard-riding, hell-for-leather, guitar-strumming charisma of his Wyoming colleague John Perry Barlow, but there's something about the guy that still stops one short. He has the air of the Eastern city dude in the bowler hat, the dreamy, Longfellow-quoting poker shark who only HAPPENS to know the exact mathematical odds against drawing to an inside straight. Even among his computer-community colleagues, who are hardly known for mental sluggishness, Kapor strikes one forcefully as a very intelligent man. He speaks rapidly, with vigorous gestures, his Boston accent sometimes slipping to the sharp nasal tang of his youth in Long Island. Kapor, whose Kapor Family Foundation does much of his philanthropic work, is a strong supporter of Boston's Computer Museum. Kapor's interest in the history of his industry has brought him some remarkable curios, such as the "byte" just outside his office door. This "byte"-- eight digital bits--has been salvaged from the wreck of an electronic computer of the pre-transistor age. It's a standing gunmetal rack about the size of a small toaster-oven: with eight slots of hand-soldered breadboarding featuring thumb-sized vacuum tubes. If it fell off a table it could easily break your foot, but it was state-of-the-art computation in the 1940s. (It would take exactly 157,184 of these primordial toasters to hold the first part of this book.) There's also a coiling, multicolored, scaly dragon that some inspired techno-punk artist has cobbled up entirely out of transistors, capacitors, and brightly plastic-coated wiring. Inside the office, Kapor excuses himself briefly to do a little mouse-whizzing housekeeping on his personal Macintosh IIfx. If its giant screen were an open window, an agile person could climb through it without much trouble at all. There's a coffee-cup at Kapor's elbow, a memento of his recent trip to Eastern Europe, which has a black-and-white stencilled photo and the legend CAPITALIST FOOLS TOUR. It's Kapor, Barlow, and two California venture-capitalist luminaries of their acquaintance, four windblown, grinning Baby Boomer dudes in leather jackets, boots, denim, travel bags, standing on airport tarmac somewhere behind the formerly Iron Curtain. They look as if they're having the absolute time of their lives. Kapor is in a reminiscent mood. We talk a bit about his youth-- high school days as a "math nerd," Saturdays attending Columbia University's high-school science honors program, where he had his first experience programming computers. IBM 1620s, in 1965 and '66. "I was very interested," says Kapor, "and then I went off to college and got distracted by drugs sex and rock and roll, like anybody with half a brain would have then!" After college he was a progressive-rock DJ in Hartford, Connecticut, for a couple of years. I ask him if he ever misses his rock and roll days--if he ever wished he could go back to radio work. He shakes his head flatly. "I stopped thinking about going back to be a DJ the day after Altamont." Kapor moved to Boston in 1974 and got a job programming mainframes in COBOL. He hated it. He quit and became a teacher of transcendental meditation. (It was Kapor's long flirtation with Eastern mysticism that gave the world "Lotus.") In 1976 Kapor went to Switzerland, where the Transcendental Meditation movement had rented a gigantic Victorian hotel in St-Moritz. It was an all-male group--a hundred and twenty of them--determined upon Enlightenment or Bust. Kapor had given the transcendant his best shot. He was becoming disenchanted by "the nuttiness in the organization." "They were teaching people to levitate," he says, staring at the floor. His voice drops an octave, becomes flat. "THEY DON'T LEVITATE." Kapor chose Bust. He went back to the States and acquired a degree in counselling psychology. He worked a while in a hospital, couldn't stand that either. "My rep was," he says "a very bright kid with a lot of potential who hasn't found himself. Almost thirty. Sort of lost." Kapor was unemployed when he bought his first personal computer--an Apple II. He sold his stereo to raise cash and drove to New Hampshire to avoid the sales tax. "The day after I purchased it," Kapor tells me, "I was hanging out in a computer store and I saw another guy, a man in his forties, well-dressed guy, and eavesdropped on his conversation with the salesman. He didn't know anything about computers. I'd had a year programming. And I could program in BASIC. I'd taught myself. So I went up to him, and I actually sold myself to him as a consultant." He pauses. "I don't know where I got the nerve to do this. It was uncharacteristic. I just said, `I think I can help you, I've been listening, this is what you need to do and I think I can do it for you.' And he took me on! He was my first client! I became a computer consultant the first day after I bought the Apple II." Kapor had found his true vocation. He attracted more clients for his consultant service, and started an Apple users' group. A friend of Kapor's, Eric Rosenfeld, a graduate student at MIT, had a problem. He was doing a thesis on an arcane form of financial statistics, but could not wedge himself into the crowded queue for time on MIT's mainframes. (One might note at this point that if Mr. Rosenfeld had dishonestly broken into the MIT mainframes, Kapor himself might have never invented Lotus 1-2-3 and the PC business might have been set back for years!) Eric Rosenfeld did have an Apple II, however, and he thought it might be possible to scale the problem down. Kapor, as favor, wrote a program for him in BASIC that did the job. It then occurred to the two of them, out of the blue, that it might be possible to SELL this program. They marketed it themselves, in plastic baggies, for about a hundred bucks a pop, mail order. "This was a total cottage industry by a marginal consultant," Kapor says proudly. "That's how I got started, honest to God." Rosenfeld, who later became a very prominent figure on Wall Street, urged Kapor to go to MIT's business school for an MBA. Kapor did seven months there, but never got his MBA. He picked up some useful tools--mainly a firm grasp of the principles of accounting--and, in his own words, "learned to talk MBA." Then he dropped out and went to Silicon Valley. The inventors of VisiCalc, the Apple computer's premier business program, had shown an interest in Mitch Kapor. Kapor worked diligently for them for six months, got tired of California, and went back to Boston where they had better bookstores. The VisiCalc group had made the critical error of bringing in "professional management." "That drove them into the ground," Kapor says. "Yeah, you don't hear a lot about VisiCalc these days," I muse. Kapor looks surprised. "Well, Lotus. . . we BOUGHT it." "Oh. You BOUGHT it?" "Yeah." "Sort of like the Bell System buying Western Union?" Kapor grins. "Yep! Yep! Yeah, exactly!" Mitch Kapor was not in full command of the destiny of himself or his industry. The hottest software commodities of the early 1980s were COMPUTER GAMES--the Atari seemed destined to enter every teenage home in America. Kapor got into business software simply because he didn't have any particular feeling for computer games. But he was supremely fast on his feet, open to new ideas and inclined to trust his instincts. And his instincts were good. He chose good people to deal with-- gifted programmer Jonathan Sachs (the co-author of Lotus 1-2-3). Financial wizard Eric Rosenfeld, canny Wall Street analyst and venture capitalist Ben Rosen. Kapor was the founder and CEO of Lotus, one of the most spectacularly successful business ventures of the later twentieth century. He is now an extremely wealthy man. I ask him if he actually knows how much money he has. "Yeah," he says. "Within a percent or two." How much does he actually have, then? He shakes his head. "A lot. A lot. Not something I talk about. Issues of money and class are things that cut pretty close to the bone." I don't pry. It's beside the point. One might presume, impolitely, that Kapor has at least forty million--that's what he got the year he left Lotus. People who ought to know claim Kapor has about a hundred and fifty million, give or take a market swing in his stock holdings. If Kapor had stuck with Lotus, as his colleague friend and rival Bill Gates has stuck with his own software start-up, Microsoft, then Kapor would likely have much the same fortune Gates has-- somewhere in the neighborhood of three billion, give or take a few hundred million. Mitch Kapor has all the money he wants. Money has lost whatever charm it ever held for him--probably not much in the first place. When Lotus became too uptight, too bureaucratic, too far from the true sources of his own satisfaction, Kapor walked. He simply severed all connections with the company and went out the door. It stunned everyone--except those who knew him best. Kapor has not had to strain his resources to wreak a thorough transformation in cyberspace politics. In its first year, EFF's budget was about a quarter of a million dollars. Kapor is running EFF out of his pocket change. Kapor takes pains to tell me that he does not consider himself a civil libertarian per se. He has spent quite some time with true-blue civil libertarians lately, and there's a political-correctness to them that bugs him. They seem to him to spend entirely too much time in legal nitpicking and not enough vigorously exercising civil rights in the everyday real world. Kapor is an entrepreneur. Like all hackers, he prefers his involvements direct, personal, and hands-on. "The fact that EFF has a node on the Internet is a great thing. We're a publisher. We're a distributor of information." Among the items the eff.org Internet node carries is back issues of Phrack. They had an internal debate about that in EFF, and finally decided to take the plunge. They might carry other digital underground publications--but if they do, he says, "we'll certainly carry Donn Parker, and anything Gail Thackeray wants to put up. We'll turn it into a public library, that has the whole spectrum of use. Evolve in the direction of people making up their own minds." He grins. "We'll try to label all the editorials." Kapor is determined to tackle the technicalities of the Internet in the service of the public interest. "The problem with being a node on the Net today is that you've got to have a captive technical specialist. We have Chris Davis around, for the care and feeding of the balky beast! We couldn't do it ourselves!" He pauses. "So one direction in which technology has to evolve is much more standardized units, that a non-technical person can feel comfortable with. It's the same shift as from minicomputers to PCs. I can see a future in which any person can have a Node on the Net. Any person can be a publisher. It's better than the media we now have. It's possible. We're working actively." Kapor is in his element now, fluent, thoroughly in command in his material. "You go tell a hardware Internet hacker that everyone should have a node on the Net," he says, "and the first thing they're going to say is, `IP doesn't scale!'" ("IP" is the interface protocol for the Internet. As it currently exists, the IP software is simply not capable of indefinite expansion; it will run out of usable addresses, it will saturate.) "The answer," Kapor says, "is: evolve the protocol! Get the smart people together and figure out what to do. Do we add ID? Do we add new protocol? Don't just say, WE CAN'T DO IT." Getting smart people together to figure out what to do is a skill at which Kapor clearly excels. I counter that people on the Internet rather enjoy their elite technical status, and don't seem particularly anxious to democratize the Net. Kapor agrees, with a show of scorn. "I tell them that this is the snobbery of the people on the Mayflower looking down their noses at the people who came over ON THE SECOND BOAT! Just because they got here a year, or five years, or ten years before everybody else, that doesn't give them ownership of cyberspace! By what right?" I remark that the telcos are an electronic network, too, and they seem to guard their specialized knowledge pretty closely. Kapor ripostes that the telcos and the Internet are entirely different animals. "The Internet is an open system, everything is published, everything gets argued about, basically by anybody who can get in. Mostly, it's exclusive and elitist just because it's so difficult. Let's make it easier to use." On the other hand, he allows with a swift change of emphasis, the so-called elitists do have a point as well. "Before people start coming in, who are new, who want to make suggestions, and criticize the Net as `all screwed up'. . . . They should at least take the time to understand the culture on its own terms. It has its own history--show some respect for it. I'm a conservative, to that extent." The Internet is Kapor's paradigm for the future of telecommunications. The Internet is decentralized, non-hierarchical, almost anarchic. There are no bosses, no chain of command, no secret data. If each node obeys the general interface standards, there's simply no need for any central network authority. Wouldn't that spell the doom of AT&T as an institution? I ask. That prospect doesn't faze Kapor for a moment. "Their big advantage, that they have now, is that they have all of the wiring. But two things are happening. Anyone with right-of-way is putting down fiber--Southern Pacific Railroad, people like that--there's enormous `dark fiber' laid in." ("Dark Fiber" is fiber-optic cable, whose enormous capacity so exceeds the demands of current usage that much of the fiber still has no light-signals on it--it's still `dark,' awaiting future use.) "The other thing that's happening is the local-loop stuff is going to go wireless. Everyone from Bellcore to the cable TV companies to AT&T wants to put in these things called `personal communication systems.' So you could have local competition-- you could have multiplicity of people, a bunch of neighborhoods, sticking stuff up on poles. And a bunch of other people laying in dark fiber. So what happens to the telephone companies? There's enormous pressure on them from both sides. "The more I look at this, the more I believe that in a post-industrial, digital world, the idea of regulated monopolies is bad. People will look back on it and say that in the 19th and 20th centuries the idea of public utilities was an okay compromise. You needed one set of wires in the ground. It was too economically inefficient, otherwise. And that meant one entity running it. But now, with pieces being wireless--the connections are going to be via high-level interfaces, not via wires. I mean, ULTIMATELY there are going to be wires--but the wires are just a commodity. Fiber, wireless. You no longer NEED a utility." Water utilities? Gas utilities? Of course we still need those, he agrees. "But when what you're moving is information, instead of physical substances, then you can play by a different set of rules. We're evolving those rules now! Hopefully you can have a much more decentralized system, and one in which there's more competition in the marketplace. "The role of government will be to make sure that nobody cheats. The proverbial `level playing field.' A policy that prevents monopolization. It should result in better service, lower prices, more choices, and local empowerment." He smiles. "I'm very big on local empowerment." Kapor is a man with a vision. It's a very novel vision which he and his allies are working out in considerable detail and with great energy. Dark, cynical, morbid cyberpunk that I am, I cannot avoid considering some of the darker implications of "decentralized, nonhierarchical, locally empowered" networking. I remark that some pundits have suggested that electronic networking--faxes, phones, small-scale photocopiers--played a strong role in dissolving the power of centralized communism and causing the collapse of the Warsaw Pact. Socialism is totally discredited, says Kapor, fresh back from the Eastern Bloc. The idea that faxes did it, all by themselves, is rather wishful thinking. Has it occurred to him that electronic networking might corrode America's industrial and political infrastructure to the point where the whole thing becomes untenable, unworkable--and the old order just collapses headlong, like in Eastern Europe? "No," Kapor says flatly. "I think that's extraordinarily unlikely. In part, because ten or fifteen years ago, I had similar hopes about personal computers--which utterly failed to materialize." He grins wryly, then his eyes narrow. "I'm VERY opposed to techno-utopias. Every time I see one, I either run away, or try to kill it." It dawns on me then that Mitch Kapor is not trying to make the world safe for democracy. He certainly is not trying to make it safe for anarchists or utopians-- least of all for computer intruders or electronic rip-off artists. What he really hopes to do is make the world safe for future Mitch Kapors. This world of decentralized, small-scale nodes, with instant global access for the best and brightest, would be a perfect milieu for the shoestring attic capitalism that made Mitch Kapor what he is today. Kapor is a very bright man. He has a rare combination of visionary intensity with a strong practical streak. The Board of the EFF: John Barlow, Jerry Berman of the ACLU, Stewart Brand, John Gilmore, Steve Wozniak, and Esther Dyson, the doyenne of East-West computer entrepreneurism--share his gift, his vision, and his formidable networking talents. They are people of the 1960s, winnowed-out by its turbulence and rewarded with wealth and influence. They are some of the best and the brightest that the electronic community has to offer. But can they do it, in the real world? Or are they only dreaming? They are so few. And there is so much against them. I leave Kapor and his networking employees struggling cheerfully with the promising intricacies of their newly installed Macintosh System 7 software. The next day is Saturday. EFF is closed. I pay a few visits to points of interest downtown. One of them is the birthplace of the telephone. It's marked by a bronze plaque in a plinth of black-and-white speckled granite. It sits in the plaza of the John F. Kennedy Federal Building, the very place where Kapor was once fingerprinted by the FBI. The plaque has a bas-relief picture of Bell's original telephone. "BIRTHPLACE OF THE TELEPHONE," it reads. "Here, on June 2, 1875, Alexander Graham Bell and Thomas A. Watson first transmitted sound over wires. "This successful experiment was completed in a fifth floor garret at what was then 109 Court Street and marked the beginning of world-wide telephone service." 109 Court Street is long gone. Within sight of Bell's plaque, across a street, is one of the central offices of NYNEX, the local Bell RBOC, on 6 Bowdoin Square. I cross the street and circle the telco building, slowly, hands in my jacket pockets. It's a bright, windy, New England autumn day. The central office is a handsome 1940s-era megalith in late Art Deco, eight stories high. Parked outside the back is a power-generation truck. The generator strikes me as rather anomalous. Don't they already have their own generators in this eight-story monster? Then the suspicion strikes me that NYNEX must have heard of the September 17 AT&T power-outage which crashed New York City. Belt-and-suspenders, this generator. Very telco. Over the glass doors of the front entrance is a handsome bronze bas-relief of Art Deco vines, sunflowers, and birds, entwining the Bell logo and the legend NEW ENGLAND TELEPHONE AND TELEGRAPH COMPANY --an entity which no longer officially exists. The doors are locked securely. I peer through the shadowed glass. Inside is an official poster reading: "New England Telephone a NYNEX Company ATTENTION "All persons while on New England Telephone Company premises are required to visibly wear their identification cards (C.C.P. Section 2, Page 1). "Visitors, vendors, contractors, and all others are required to visibly wear a daily pass. "Thank you. Kevin C. Stanton. Building Security Coordinator." Outside, around the corner, is a pull-down ribbed metal security door, a locked delivery entrance. Some passing stranger has grafitti-tagged this door, with a single word in red spray-painted cursive: Fury # My book on the Hacker Crackdown is almost over now. I have deliberately saved the best for last. In February 1991, I attended the CPSR Public Policy Roundtable, in Washington, DC. CPSR, Computer Professionals for Social Responsibility, was a sister organization of EFF, or perhaps its aunt, being older and perhaps somewhat wiser in the ways of the world of politics. Computer Professionals for Social Responsibility began in 1981 in Palo Alto, as an informal discussion group of Californian computer scientists and technicians, united by nothing more than an electronic mailing list. This typical high-tech ad-hocracy received the dignity of its own acronym in 1982, and was formally incorporated in 1983. CPSR lobbied government and public alike with an educational outreach effort, sternly warning against any foolish and unthinking trust in complex computer systems. CPSR insisted that mere computers should never be considered a magic panacea for humanity's social, ethical or political problems. CPSR members were especially troubled about the stability, safety, and dependability of military computer systems, and very especially troubled by those systems controlling nuclear arsenals. CPSR was best-known for its persistent and well-publicized attacks on the scientific credibility of the Strategic Defense Initiative ("Star Wars"). In 1990, CPSR was the nation's veteran cyber-political activist group, with over two thousand members in twenty- one local chapters across the US. It was especially active in Boston, Silicon Valley, and Washington DC, where its Washington office sponsored the Public Policy Roundtable. The Roundtable, however, had been funded by EFF, which had passed CPSR an extensive grant for operations. This was the first large-scale, official meeting of what was to become the electronic civil libertarian community. Sixty people attended, myself included--in this instance, not so much as a journalist as a cyberpunk author. Many of the luminaries of the field took part: Kapor and Godwin as a matter of course. Richard Civille and Marc Rotenberg of CPSR. Jerry Berman of the ACLU. John Quarterman, author of The Matrix. Steven Levy, author of Hackers. George Perry and Sandy Weiss of Prodigy Services, there to network about the civil-liberties troubles their young commercial network was experiencing. Dr. Dorothy Denning. Cliff Figallo, manager of the Well. Steve Jackson was there, having finally found his ideal target audience, and so was Craig Neidorf, "Knight Lightning" himself, with his attorney, Sheldon Zenner. Katie Hafner, science journalist, and co-author of Cyberpunk: Outlaws and Hackers on the Computer Frontier. Dave Farber, ARPAnet pioneer and fabled Internet guru. Janlori Goldman of the ACLU's Project on Privacy and Technology. John Nagle of Autodesk and the Well. Don Goldberg of the House Judiciary Committee. Tom Guidoboni, the defense attorney in the Internet Worm case. Lance Hoffman, computer-science professor at The George Washington University. Eli Noam of Columbia. And a host of others no less distinguished. Senator Patrick Leahy delivered the keynote address, expressing his determination to keep ahead of the curve on the issue of electronic free speech. The address was well-received, and the sense of excitement was palpable. Every panel discussion was interesting--some were entirely compelling. People networked with an almost frantic interest. I myself had a most interesting and cordial lunch discussion with Noel and Jeanne Gayler, Admiral Gayler being a former director of the National Security Agency. As this was the first known encounter between an actual no-kidding cyberpunk and a chief executive of America's largest and best-financed electronic espionage apparat, there was naturally a bit of eyebrow-raising on both sides. Unfortunately, our discussion was off-the-record. In fact all the discussions at the CPSR were officially off-the-record, the idea being to do some serious networking in an atmosphere of complete frankness, rather than to stage a media circus. In any case, CPSR Roundtable, though interesting and intensely valuable, was as nothing compared to the truly mind-boggling event that transpired a mere month later. # "Computers, Freedom and Privacy." Four hundred people from every conceivable corner of America's electronic community. As a science fiction writer, I have been to some weird gigs in my day, but this thing is truly BEYOND THE PALE. Even "Cyberthon," Point Foundation's "Woodstock of Cyberspace" where Bay Area psychedelia collided headlong with the emergent world of computerized virtual reality, was like a Kiwanis Club gig compared to this astonishing do. The "electronic community" had reached an apogee. Almost every principal in this book is in attendance. Civil Libertarians. Computer Cops. The Digital Underground. Even a few discreet telco people. Colorcoded dots for lapel tags are distributed. Free Expression issues. Law Enforcement. Computer Security. Privacy. Journalists. Lawyers. Educators. Librarians. Programmers. Stylish punk-black dots for the hackers and phone phreaks. Almost everyone here seems to wear eight or nine dots, to have six or seven professional hats. It is a community. Something like Lebanon perhaps, but a digital nation. People who had feuded all year in the national press, people who entertained the deepest suspicions of one another's motives and ethics, are now in each others' laps. "Computers, Freedom and Privacy" had every reason in the world to turn ugly, and yet except for small irruptions of puzzling nonsense from the convention's token lunatic, a surprising bonhomie reigned. CFP was like a wedding-party in which two lovers, unstable bride and charlatan groom, tie the knot in a clearly disastrous matrimony. It is clear to both families--even to neighbors and random guests-- that this is not a workable relationship, and yet the young couple's desperate attraction can brook no further delay. They simply cannot help themselves. Crockery will fly, shrieks from their newlywed home will wake the city block, divorce waits in the wings like a vulture over the Kalahari, and yet this is a wedding, and there is going to be a child from it. Tragedies end in death; comedies in marriage. The Hacker Crackdown is ending in marriage. And there will be a child. From the beginning, anomalies reign. John Perry Barlow, cyberspace ranger, is here. His color photo in The New York Times Magazine, Barlow scowling in a grim Wyoming snowscape, with long black coat, dark hat, a Macintosh SE30 propped on a fencepost and an awesome frontier rifle tucked under one arm, will be the single most striking visual image of the Hacker Crackdown. And he is CFP's guest of honor-- along with Gail Thackeray of the FCIC! What on earth do they expect these dual guests to do with each other? Waltz? Barlow delivers the first address. Uncharacteristically, he is hoarse--the sheer volume of roadwork has worn him down. He speaks briefly, congenially, in a plea for conciliation, and takes his leave to a storm of applause. Then Gail Thackeray takes the stage. She's visibly nervous. She's been on the Well a lot lately. Reading those Barlow posts. Following Barlow is a challenge to anyone. In honor of the famous lyricist for the Grateful Dead, she announces reedily, she is going to read-- A POEM. A poem she has composed herself. It's an awful poem, doggerel in the rollicking meter of Robert W. Service's The Cremation of Sam McGee, but it is in fact, a poem. It's the Ballad of the Electronic Frontier! A poem about the Hacker Crackdown and the sheer unlikelihood of CFP. It's full of in-jokes. The score or so cops in the audience, who are sitting together in a nervous claque, are absolutely cracking-up. Gail's poem is the funniest goddamn thing they've ever heard. The hackers and civil-libs, who had this woman figured for Ilsa She-Wolf of the SS, are staring with their jaws hanging loosely. Never in the wildest reaches of their imagination had they figured Gail Thackeray was capable of such a totally off-the-wall move. You can see them punching their mental CONTROL-RESET buttons. Jesus! This woman's a hacker weirdo! She's JUST LIKE US! God, this changes everything! Al Bayse, computer technician for the FBI, had been the only cop at the CPSR Roundtable, dragged there with his arm bent by Dorothy Denning. He was guarded and tightlipped at CPSR Roundtable; a "lion thrown to the Christians." At CFP, backed by a claque of cops, Bayse suddenly waxes eloquent and even droll, describing the FBI's "NCIC 2000", a gigantic digital catalog of criminal records, as if he has suddenly become some weird hybrid of George Orwell and George Gobel. Tentatively, he makes an arcane joke about statistical analysis. At least a third of the crowd laughs aloud. "They didn't laugh at that at my last speech," Bayse observes. He had been addressing cops--STRAIGHT cops, not computer people. It had been a worthy meeting, useful one supposes, but nothing like THIS. There has never been ANYTHING like this. Without any prodding, without any preparation, people in the audience simply begin to ask questions. Longhairs, freaky people, mathematicians. Bayse is answering, politely, frankly, fully, like a man walking on air. The ballroom's atmosphere crackles with surreality. A female lawyer behind me breaks into a sweat and a hot waft of surprisingly potent and musky perfume flows off her pulse-points. People are giddy with laughter. People are interested, fascinated, their eyes so wide and dark that they seem eroticized. Unlikely daisy-chains form in the halls, around the bar, on the escalators: cops with hackers, civil rights with FBI, Secret Service with phone phreaks. Gail Thackeray is at her crispest in a white wool sweater with a tiny Secret Service logo. "I found Phiber Optik at the payphones, and when he saw my sweater, he turned into a PILLAR OF SALT!" she chortles. Phiber discusses his case at much length with his arresting officer, Don Delaney of the New York State Police. After an hour's chat, the two of them look ready to begin singing "Auld Lang Syne." Phiber finally finds the courage to get his worst complaint off his chest. It isn't so much the arrest. It was the CHARGE. Pirating service off 900 numbers. I'm a PROGRAMMER, Phiber insists. This lame charge is going to hurt my reputation. It would have been cool to be busted for something happening, like Section 1030 computer intrusion. Maybe some kind of crime that's scarcely been invented yet. Not lousy phone fraud. Phooey. Delaney seems regretful. He had a mountain of possible criminal charges against Phiber Optik. The kid's gonna plead guilty anyway. He's a first timer, they always plead. Coulda charged the kid with most anything, and gotten the same result in the end. Delaney seems genuinely sorry not to have gratified Phiber in this harmless fashion. Too late now. Phiber's pled already. All water under the bridge. Whaddya gonna do? Delaney's got a good grasp on the hacker mentality. He held a press conference after he busted a bunch of Masters of Deception kids. Some journo had asked him: "Would you describe these people as GENIUSES?" Delaney's deadpan answer, perfect: "No, I would describe these people as DEFENDANTS." Delaney busts a kid for hacking codes with repeated random dialling. Tells the press that NYNEX can track this stuff in no time flat nowadays, and a kid has to be STUPID to do something so easy to catch. Dead on again: hackers don't mind being thought of as Genghis Khan by the straights, but if there's anything that really gets 'em where they live, it's being called DUMB. Won't be as much fun for Phiber next time around. As a second offender he's gonna see prison. Hackers break the law. They're not geniuses, either. They're gonna be defendants. And yet, Delaney muses over a drink in the hotel bar, he has found it impossible to treat them as common criminals. Delaney knows criminals. These kids, by comparison, are clueless--there is just no crook vibe off of them, they don't smell right, they're just not BAD. Delaney has seen a lot of action. He did Vietnam. He's been shot at, he has shot people. He's a homicide cop from New York. He has the appearance of a man who has not only seen the shit hit the fan but has seen it splattered across whole city blocks and left to ferment for years. This guy has been around. He listens to Steve Jackson tell his story. The dreamy game strategist has been dealt a bad hand. He has played it for all he is worth. Under his nerdish SF-fan exterior is a core of iron. Friends of his say Steve Jackson believes in the rules, believes in fair play. He will never compromise his principles, never give up. "Steve," Delaney says to Steve Jackson, "they had some balls, whoever busted you. You're all right!" Jackson, stunned, falls silent and actually blushes with pleasure. Neidorf has grown up a lot in the past year. The kid is a quick study, you gotta give him that. Dressed by his mom, the fashion manager for a national clothing chain, Missouri college techie-frat Craig Neidorf out-dappers everyone at this gig but the toniest East Coast lawyers. The iron jaws of prison clanged shut without him and now law school beckons for Neidorf. He looks like a larval Congressman. Not a "hacker," our Mr. Neidorf. He's not interested in computer science. Why should he be? He's not interested in writing C code the rest of his life, and besides, he's seen where the chips fall. To the world of computer science he and Phrack were just a curiosity. But to the world of law. . . . The kid has learned where the bodies are buried. He carries his notebook of press clippings wherever he goes. Phiber Optik makes fun of Neidorf for a Midwestern geek, for believing that "Acid Phreak" does acid and listens to acid rock. Hell no. Acid's never done ACID! Acid's into ACID HOUSE MUSIC. Jesus. The very idea of doing LSD. Our PARENTS did LSD, ya clown. Thackeray suddenly turns upon Craig Neidorf the full lighthouse glare of her attention and begins a determined half-hour attempt to WIN THE BOY OVER. The Joan of Arc of Computer Crime is GIVING CAREER ADVICE TO KNIGHT LIGHTNING! "Your experience would be very valuable--a real asset," she tells him with unmistakeable sixty-thousand-watt sincerity. Neidorf is fascinated. He listens with unfeigned attention. He's nodding and saying yes ma'am. Yes, Craig, you too can forget all about money and enter the glamorous and horribly underpaid world of PROSECUTING COMPUTER CRIME! You can put your former friends in prison--ooops. . . . You cannot go on dueling at modem's length indefinitely. You cannot beat one another senseless with rolled-up press-clippings. Sooner or later you have to come directly to grips. And yet the very act of assembling here has changed the entire situation drastically. John Quarterman, author of The Matrix, explains the Internet at his symposium. It is the largest news network in the world, it is growing by leaps and bounds, and yet you cannot measure Internet because you cannot stop it in place. It cannot stop, because there is no one anywhere in the world with the authority to stop Internet. It changes, yes, it grows, it embeds itself across the post-industrial, postmodern world and it generates community wherever it touches, and it is doing this all by itself. Phiber is different. A very fin de siecle kid, Phiber Optik. Barlow says he looks like an Edwardian dandy. He does rather. Shaven neck, the sides of his skull cropped hip-hop close, unruly tangle of black hair on top that looks pomaded, he stays up till four a.m. and misses all the sessions, then hangs out in payphone booths with his acoustic coupler gutsily CRACKING SYSTEMS RIGHT IN THE MIDST OF THE HEAVIEST LAW ENFORCEMENT DUDES IN THE U.S., or at least PRETENDING to. . . . Unlike "Frank Drake." Drake, who wrote Dorothy Denning out of nowhere, and asked for an interview for his cheapo cyberpunk fanzine, and then started grilling her on her ethics. She was squirmin', too. . . . Drake, scarecrow-tall with his floppy blond mohawk, rotting tennis shoes and black leather jacket lettered ILLUMINATI in red, gives off an unmistakeable air of the bohemian literatus. Drake is the kind of guy who reads British industrial design magazines and appreciates William Gibson because the quality of the prose is so tasty. Drake could never touch a phone or a keyboard again, and he'd still have the nose-ring and the blurry photocopied fanzines and the sampled industrial music. He's a radical punk with a desktop-publishing rig and an Internet address. Standing next to Drake, the diminutive Phiber looks like he's been physically coagulated out of phone-lines. Born to phreak. Dorothy Denning approaches Phiber suddenly. The two of them are about the same height and body-build. Denning's blue eyes flash behind the round window-frames of her glasses. "Why did you say I was `quaint?'" she asks Phiber, quaintly. It's a perfect description but Phiber is nonplussed. . . "Well, I uh, you know. . . ." "I also think you're quaint, Dorothy," I say, novelist to the rescue, the journo gift of gab. . . . She is neat and dapper and yet there's an arcane quality to her, something like a Pilgrim Maiden behind leaded glass; if she were six inches high Dorothy Denning would look great inside a china cabinet. . .The Cryptographeress. . . The Cryptographrix. . .whatever. . . . Weirdly, Peter Denning looks just like his wife, you could pick this gentleman out of a thousand guys as the soulmate of Dorothy Denning. Wearing tailored slacks, a spotless fuzzy varsity sweater, and a neatly knotted academician's tie. . . . This fineboned, exquisitely polite, utterly civilized and hyperintelligent couple seem to have emerged from some cleaner and finer parallel universe, where humanity exists to do the Brain Teasers column in Scientific American. Why does this Nice Lady hang out with these unsavory characters? Because the time has come for it, that's why. Because she's the best there is at what she does. Donn Parker is here, the Great Bald Eagle of Computer Crime. . . . With his bald dome, great height, and enormous Lincoln-like hands, the great visionary pioneer of the field plows through the lesser mortals like an icebreaker. . . . His eyes are fixed on the future with the rigidity of a bronze statue. . . . Eventually, he tells his audience, all business crime will be computer crime, because businesses will do everything through computers. "Computer crime" as a category will vanish. In the meantime, passing fads will flourish and fail and evaporate. . . . Parker's commanding, resonant voice is sphinxlike, everything is viewed from some eldritch valley of deep historical abstraction. . . . Yes, they've come and they've gone, these passing flaps in the world of digital computation. . . . The radio-frequency emanation scandal. . . KGB and MI5 and CIA do it every day, it's easy, but nobody else ever has. . . . The salami-slice fraud, mostly mythical. . . . "Crimoids," he calls them. . . . Computer viruses are the current crimoid champ, a lot less dangerous than most people let on, but the novelty is fading and there's a crimoid vacuum at the moment, the press is visibly hungering for something more outrageous. . . . The Great Man shares with us a few speculations on the coming crimoids. . . . Desktop Forgery! Wow. . . . Computers stolen just for the sake of the information within them--data-napping! Happened in Britain a while ago, could be the coming thing. . . . Phantom nodes in the Internet! Parker handles his overhead projector sheets with an ecclesiastical air. . . . He wears a grey double-breasted suit, a light blue shirt, and a very quiet tie of understated maroon and blue paisley. . . . Aphorisms emerge from him with slow, leaden emphasis. . . . There is no such thing as an adequately secure computer when one faces a sufficiently powerful adversary. . . . Deterrence is the most socially useful aspect of security. . . . People are the primary weakness in all information systems. . . . The entire baseline of computer security must be shifted upward. . . . Don't ever violate your security by publicly describing your security measures. . . . People in the audience are beginning to squirm, and yet there is something about the elemental purity of this guy's philosophy that compels uneasy respect. . . . Parker sounds like the only sane guy left in the lifeboat, sometimes. The guy who can prove rigorously, from deep moral principles, that Harvey there, the one with the broken leg and the checkered past, is the one who has to be, err. . .that is, Mr. Harvey is best placed to make the necessary sacrifice for the security and indeed the very survival of the rest of this lifeboat's crew. . . . Computer security, Parker informs us mournfully, is a nasty topic, and we wish we didn't have to have it. . . . The security expert, armed with method and logic, must think--imagine-- everything that the adversary might do before the adversary might actually do it. It is as if the criminal's dark brain were an extensive subprogram within the shining cranium of Donn Parker. He is a Holmes whose Moriarty does not quite yet exist and so must be perfectly simulated. CFP is a stellar gathering, with the giddiness of a wedding. It is a happy time, a happy ending, they know their world is changing forever tonight, and they're proud to have been there to see it happen, to talk, to think, to help. And yet as night falls, a certain elegiac quality manifests itself, as the crowd gathers beneath the chandeliers with their wineglasses and dessert plates. Something is ending here, gone forever, and it takes a while to pinpoint it. It is the End of the Amateurs. *** END OF THE PROJECT GUTENBERG EBOOK THE HACKER CRACKDOWN: LAW AND DISORDER ON THE ELECTRONIC FRONTIER *** Updated editions will replace the previous one—the old editions will be renamed. Creating the works from print editions not protected by U.S. copyright law means that no one owns a United States copyright in these works, so the Foundation (and you!) can copy and distribute it in the United States without permission and without paying copyright royalties. Special rules, set forth in the General Terms of Use part of this license, apply to copying and distributing Project Gutenberg™ electronic works to protect the PROJECT GUTENBERG™ concept and trademark. Project Gutenberg is a registered trademark, and may not be used if you charge for an eBook, except by following the terms of the trademark license, including paying royalties for use of the Project Gutenberg trademark. If you do not charge anything for copies of this eBook, complying with the trademark license is very easy. You may use this eBook for nearly any purpose such as creation of derivative works, reports, performances and research. Project Gutenberg eBooks may be modified and printed and given away—you may do practically ANYTHING in the United States with eBooks not protected by U.S. copyright law. Redistribution is subject to the trademark license, especially commercial redistribution. START: FULL LICENSE THE FULL PROJECT GUTENBERG LICENSE PLEASE READ THIS BEFORE YOU DISTRIBUTE OR USE THIS WORK To protect the Project Gutenberg™ mission of promoting the free distribution of electronic works, by using or distributing this work (or any other work associated in any way with the phrase “Project Gutenberg”), you agree to comply with all the terms of the Full Project Gutenberg™ License available with this file or online at www.gutenberg.org/license. Section 1. General Terms of Use and Redistributing Project Gutenberg™ electronic works 1.A. By reading or using any part of this Project Gutenberg™ electronic work, you indicate that you have read, understand, agree to and accept all the terms of this license and intellectual property (trademark/copyright) agreement. If you do not agree to abide by all the terms of this agreement, you must cease using and return or destroy all copies of Project Gutenberg™ electronic works in your possession. If you paid a fee for obtaining a copy of or access to a Project Gutenberg™ electronic work and you do not agree to be bound by the terms of this agreement, you may obtain a refund from the person or entity to whom you paid the fee as set forth in paragraph 1.E.8. 1.B. “Project Gutenberg” is a registered trademark. It may only be used on or associated in any way with an electronic work by people who agree to be bound by the terms of this agreement. There are a few things that you can do with most Project Gutenberg™ electronic works even without complying with the full terms of this agreement. See paragraph 1.C below. There are a lot of things you can do with Project Gutenberg™ electronic works if you follow the terms of this agreement and help preserve free future access to Project Gutenberg™ electronic works. See paragraph 1.E below. 1.C. The Project Gutenberg Literary Archive Foundation (“the Foundation” or PGLAF), owns a compilation copyright in the collection of Project Gutenberg™ electronic works. Nearly all the individual works in the collection are in the public domain in the United States. If an individual work is unprotected by copyright law in the United States and you are located in the United States, we do not claim a right to prevent you from copying, distributing, performing, displaying or creating derivative works based on the work as long as all references to Project Gutenberg are removed. Of course, we hope that you will support the Project Gutenberg™ mission of promoting free access to electronic works by freely sharing Project Gutenberg™ works in compliance with the terms of this agreement for keeping the Project Gutenberg™ name associated with the work. You can easily comply with the terms of this agreement by keeping this work in the same format with its attached full Project Gutenberg™ License when you share it without charge with others. This particular work is one of the few individual works protected by copyright law in the United States and most of the remainder of the world, included in the Project Gutenberg collection with the permission of the copyright holder. Information on the copyright owner for this particular work and the terms of use imposed by the copyright holder on this work are set forth at the beginning of this work. 1.D. The copyright laws of the place where you are located also govern what you can do with this work. Copyright laws in most countries are in a constant state of change. If you are outside the United States, check the laws of your country in addition to the terms of this agreement before downloading, copying, displaying, performing, distributing or creating derivative works based on this work or any other Project Gutenberg™ work. The Foundation makes no representations concerning the copyright status of any work in any country other than the United States. 1.E. Unless you have removed all references to Project Gutenberg: 1.E.1. The following sentence, with active links to, or other immediate access to, the full Project Gutenberg™ License must appear prominently whenever any copy of a Project Gutenberg™ work (any work on which the phrase “Project Gutenberg” appears, or with which the phrase “Project Gutenberg” is associated) is accessed, displayed, performed, viewed, copied or distributed: This eBook is for the use of anyone anywhere in the United States and most other parts of the world at no cost and with almost no restrictions whatsoever. You may copy it, give it away or re-use it under the terms of the Project Gutenberg License included with this eBook or online at www.gutenberg.org. If you are not located in the United States, you will have to check the laws of the country where you are located before using this eBook. 1.E.2. If an individual Project Gutenberg™ electronic work is derived from texts not protected by U.S. copyright law (does not contain a notice indicating that it is posted with permission of the copyright holder), the work can be copied and distributed to anyone in the United States without paying any fees or charges. If you are redistributing or providing access to a work with the phrase “Project Gutenberg” associated with or appearing on the work, you must comply either with the requirements of paragraphs 1.E.1 through 1.E.7 or obtain permission for the use of the work and the Project Gutenberg™ trademark as set forth in paragraphs 1.E.8 or 1.E.9. 1.E.3. If an individual Project Gutenberg™ electronic work is posted with the permission of the copyright holder, your use and distribution must comply with both paragraphs 1.E.1 through 1.E.7 and any additional terms imposed by the copyright holder. Additional terms will be linked to the Project Gutenberg™ License for all works posted with the permission of the copyright holder found at the beginning of this work. 1.E.4. Do not unlink or detach or remove the full Project Gutenberg™ License terms from this work, or any files containing a part of this work or any other work associated with Project Gutenberg™. 1.E.5. Do not copy, display, perform, distribute or redistribute this electronic work, or any part of this electronic work, without prominently displaying the sentence set forth in paragraph 1.E.1 with active links or immediate access to the full terms of the Project Gutenberg™ License. 1.E.6. You may convert to and distribute this work in any binary, compressed, marked up, nonproprietary or proprietary form, including any word processing or hypertext form. However, if you provide access to or distribute copies of a Project Gutenberg™ work in a format other than “Plain Vanilla ASCII” or other format used in the official version posted on the official Project Gutenberg™ website (www.gutenberg.org), you must, at no additional cost, fee or expense to the user, provide a copy, a means of exporting a copy, or a means of obtaining a copy upon request, of the work in its original “Plain Vanilla ASCII” or other form. Any alternate format must include the full Project Gutenberg™ License as specified in paragraph 1.E.1. 1.E.7. Do not charge a fee for access to, viewing, displaying, performing, copying or distributing any Project Gutenberg™ works unless you comply with paragraph 1.E.8 or 1.E.9. 1.E.8. You may charge a reasonable fee for copies of or providing access to or distributing Project Gutenberg™ electronic works provided that: • You pay a royalty fee of 20% of the gross profits you derive from the use of Project Gutenberg™ works calculated using the method you already use to calculate your applicable taxes. The fee is owed to the owner of the Project Gutenberg™ trademark, but he has agreed to donate royalties under this paragraph to the Project Gutenberg Literary Archive Foundation. Royalty payments must be paid within 60 days following each date on which you prepare (or are legally required to prepare) your periodic tax returns. Royalty payments should be clearly marked as such and sent to the Project Gutenberg Literary Archive Foundation at the address specified in Section 4, “Information about donations to the Project Gutenberg Literary Archive Foundation.” • You provide a full refund of any money paid by a user who notifies you in writing (or by e-mail) within 30 days of receipt that s/he does not agree to the terms of the full Project Gutenberg™ License. You must require such a user to return or destroy all copies of the works possessed in a physical medium and discontinue all use of and all access to other copies of Project Gutenberg™ works. • You provide, in accordance with paragraph 1.F.3, a full refund of any money paid for a work or a replacement copy, if a defect in the electronic work is discovered and reported to you within 90 days of receipt of the work. • You comply with all other terms of this agreement for free distribution of Project Gutenberg™ works. 1.E.9. If you wish to charge a fee or distribute a Project Gutenberg™ electronic work or group of works on different terms than are set forth in this agreement, you must obtain permission in writing from the Project Gutenberg Literary Archive Foundation, the manager of the Project Gutenberg™ trademark. Contact the Foundation as set forth in Section 3 below. 1.F. 1.F.1. Project Gutenberg volunteers and employees expend considerable effort to identify, do copyright research on, transcribe and proofread works not protected by U.S. copyright law in creating the Project Gutenberg™ collection. Despite these efforts, Project Gutenberg™ electronic works, and the medium on which they may be stored, may contain “Defects,” such as, but not limited to, incomplete, inaccurate or corrupt data, transcription errors, a copyright or other intellectual property infringement, a defective or damaged disk or other medium, a computer virus, or computer codes that damage or cannot be read by your equipment. 1.F.2. LIMITED WARRANTY, DISCLAIMER OF DAMAGES - Except for the “Right of Replacement or Refund” described in paragraph 1.F.3, the Project Gutenberg Literary Archive Foundation, the owner of the Project Gutenberg™ trademark, and any other party distributing a Project Gutenberg™ electronic work under this agreement, disclaim all liability to you for damages, costs and expenses, including legal fees. YOU AGREE THAT YOU HAVE NO REMEDIES FOR NEGLIGENCE, STRICT LIABILITY, BREACH OF WARRANTY OR BREACH OF CONTRACT EXCEPT THOSE PROVIDED IN PARAGRAPH 1.F.3. YOU AGREE THAT THE FOUNDATION, THE TRADEMARK OWNER, AND ANY DISTRIBUTOR UNDER THIS AGREEMENT WILL NOT BE LIABLE TO YOU FOR ACTUAL, DIRECT, INDIRECT, CONSEQUENTIAL, PUNITIVE OR INCIDENTAL DAMAGES EVEN IF YOU GIVE NOTICE OF THE POSSIBILITY OF SUCH DAMAGE. 1.F.3. LIMITED RIGHT OF REPLACEMENT OR REFUND - If you discover a defect in this electronic work within 90 days of receiving it, you can receive a refund of the money (if any) you paid for it by sending a written explanation to the person you received the work from. If you received the work on a physical medium, you must return the medium with your written explanation. The person or entity that provided you with the defective work may elect to provide a replacement copy in lieu of a refund. If you received the work electronically, the person or entity providing it to you may choose to give you a second opportunity to receive the work electronically in lieu of a refund. If the second copy is also defective, you may demand a refund in writing without further opportunities to fix the problem. 1.F.4. Except for the limited right of replacement or refund set forth in paragraph 1.F.3, this work is provided to you ‘AS-IS’, WITH NO OTHER WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PURPOSE. 1.F.5. Some states do not allow disclaimers of certain implied warranties or the exclusion or limitation of certain types of damages. If any disclaimer or limitation set forth in this agreement violates the law of the state applicable to this agreement, the agreement shall be interpreted to make the maximum disclaimer or limitation permitted by the applicable state law. The invalidity or unenforceability of any provision of this agreement shall not void the remaining provisions. 1.F.6. INDEMNITY - You agree to indemnify and hold the Foundation, the trademark owner, any agent or employee of the Foundation, anyone providing copies of Project Gutenberg™ electronic works in accordance with this agreement, and any volunteers associated with the production, promotion and distribution of Project Gutenberg™ electronic works, harmless from all liability, costs and expenses, including legal fees, that arise directly or indirectly from any of the following which you do or cause to occur: (a) distribution of this or any Project Gutenberg™ work, (b) alteration, modification, or additions or deletions to any Project Gutenberg™ work, and (c) any Defect you cause. Section 2. Information about the Mission of Project Gutenberg™ Project Gutenberg™ is synonymous with the free distribution of electronic works in formats readable by the widest variety of computers including obsolete, old, middle-aged and new computers. It exists because of the efforts of hundreds of volunteers and donations from people in all walks of life. Volunteers and financial support to provide volunteers with the assistance they need are critical to reaching Project Gutenberg™’s goals and ensuring that the Project Gutenberg™ collection will remain freely available for generations to come. In 2001, the Project Gutenberg Literary Archive Foundation was created to provide a secure and permanent future for Project Gutenberg™ and future generations. To learn more about the Project Gutenberg Literary Archive Foundation and how your efforts and donations can help, see Sections 3 and 4 and the Foundation information page at www.gutenberg.org. Section 3. Information about the Project Gutenberg Literary Archive Foundation The Project Gutenberg Literary Archive Foundation is a non-profit 501(c)(3) educational corporation organized under the laws of the state of Mississippi and granted tax exempt status by the Internal Revenue Service. The Foundation’s EIN or federal tax identification number is 64-6221541. Contributions to the Project Gutenberg Literary Archive Foundation are tax deductible to the full extent permitted by U.S. federal laws and your state’s laws. The Foundation’s business office is located at 809 North 1500 West, Salt Lake City, UT 84116, (801) 596-1887. Email contact links and up to date contact information can be found at the Foundation’s website and official page at www.gutenberg.org/contact Section 4. Information about Donations to the Project Gutenberg Literary Archive Foundation Project Gutenberg™ depends upon and cannot survive without widespread public support and donations to carry out its mission of increasing the number of public domain and licensed works that can be freely distributed in machine-readable form accessible by the widest array of equipment including outdated equipment. Many small donations ($1 to $5,000) are particularly important to maintaining tax exempt status with the IRS. The Foundation is committed to complying with the laws regulating charities and charitable donations in all 50 states of the United States. Compliance requirements are not uniform and it takes a considerable effort, much paperwork and many fees to meet and keep up with these requirements. We do not solicit donations in locations where we have not received written confirmation of compliance. To SEND DONATIONS or determine the status of compliance for any particular state visit www.gutenberg.org/donate. While we cannot and do not solicit contributions from states where we have not met the solicitation requirements, we know of no prohibition against accepting unsolicited donations from donors in such states who approach us with offers to donate. International donations are gratefully accepted, but we cannot make any statements concerning tax treatment of donations received from outside the United States. U.S. laws alone swamp our small staff. Please check the Project Gutenberg web pages for current donation methods and addresses. Donations are accepted in a number of other ways including checks, online payments and credit card donations. To donate, please visit: www.gutenberg.org/donate. Section 5. General Information About Project Gutenberg™ electronic works Professor Michael S. Hart was the originator of the Project Gutenberg™ concept of a library of electronic works that could be freely shared with anyone. For forty years, he produced and distributed Project Gutenberg™ eBooks with only a loose network of volunteer support. Project Gutenberg™ eBooks are often created from several printed editions, all of which are confirmed as not protected by copyright in the U.S. unless a copyright notice is included. Thus, we do not necessarily keep eBooks in compliance with any particular paper edition. Most people start at our website which has the main PG search facility: www.gutenberg.org. This website includes information about Project Gutenberg™, including how to make donations to the Project Gutenberg Literary Archive Foundation, how to help produce our new eBooks, and how to subscribe to our email newsletter to hear about new eBooks. The Project Gutenberg eBook of The Jargon File, Version 4.2.2, 20 Aug 2000 This ebook is for the use of anyone anywhere in the United States and most other parts of the world at no cost and with almost no restrictions whatsoever. You may copy it, give it away or re-use it under the terms of the Project Gutenberg License included with this ebook or online at www.gutenberg.org. If you are not located in the United States, you will have to check the laws of the country where you are located before using this eBook. Title: The Jargon File, Version 4.2.2, 20 Aug 2000 Editor: Eric S. Raymond Guy L. Steele Release date: January 1, 2002 [eBook #3008] Most recently updated: April 15, 2022 Language: English *** START OF THE PROJECT GUTENBERG EBOOK THE JARGON FILE, VERSION 4.2.2, 20 AUG 2000 *** #======= THIS IS THE JARGON FILE, VERSION 4.2.2, 20 AUG 2000 =======# This is the Jargon File, a comprehensive compendium of hacker slang illuminating many aspects of hackish tradition, folklore, and humor. This document (the Jargon File) is in the public domain, to be freely used, shared, and modified. There are (by intention) no legal restraints on what you can do with it, but there are traditions about its proper use to which many hackers are quite strongly attached. Please extend the courtesy of proper citation when you quote the File, ideally with a version number, as it will change and grow over time. (Examples of appropriate citation form: "Jargon File 4.2.2" or "The on-line hacker Jargon File, version 4.2.2, 20 AUG 2000".) The Jargon File is a common heritage of the hacker culture. Over the years a number of individuals have volunteered considerable time to maintaining the File and been recognized by the net at large as editors of it. Editorial responsibilities include: to collate contributions and suggestions from others; to seek out corroborating information; to cross-reference related entries; to keep the file in a consistent format; and to announce and distribute updated versions periodically. Current volunteer editors include: Eric Raymond Although there is no requirement that you do so, it is considered good form to check with an editor before quoting the File in a published work or commercial product. We may have additional information that would be helpful to you and can assist you in framing your quote to reflect not only the letter of the File but its spirit as well. All contributions and suggestions about this file sent to a volunteer editor are gratefully received and will be regarded, unless otherwise labelled, as freely given donations for possible use as part of this public-domain file. From time to time a snapshot of this file has been polished, edited, and formatted for commercial publication with the cooperation of the volunteer editors and the hacker community at large. If you wish to have a bound paper copy of this file, you may find it convenient to purchase one of these. They often contain additional material not found in on-line versions. The two `authorized' editions so far are described in the Revision History section; there may be more in the future. Introduction: The purpose and scope of this File A Few Terms: Of Slang, Jargon and Techspeak Revision History: How the File came to be Jargon Construction: How hackers invent jargon Hacker Writing Style: How they write Email Quotes: And the Inclusion Problem Hacker Speech Style: How hackers talk International Style: Some notes on usage outside the U.S. Lamer-speak: Crackers, Phreaks, and Lamers Pronunciation Guide: How to read the pronunciation keys Other Lexicon Conventions: How to read lexicon entries Format for New Entries: How to submit new entries for the File The Jargon Lexicon: The lexicon itself Appendix A: Hacker Folklore Appendix B: A Portrait of J. Random Hacker Appendix C: Helping Hacker Culture Grow Bibliography: For your further enjoyment Introduction This document is a collection of slang terms used by various subcultures of computer hackers. Though some technical material is included for background and flavor, it is not a technical dictionary; what we describe here is the language hackers use among themselves for fun, social communication, and technical debate. The `hacker culture' is actually a loosely networked collection of subcultures that is nevertheless conscious of some important shared experiences, shared roots, and shared values. It has its own myths, heroes, villains, folk epics, in-jokes, taboos, and dreams. Because hackers as a group are particularly creative people who define themselves partly by rejection of `normal' values and working habits, it has unusually rich and conscious traditions for an intentional culture less than 40 years old. As usual with slang, the special vocabulary of hackers helps hold their culture together -- it helps hackers recognize each other's places in the community and expresses shared values and experiences. Also as usual, not knowing the slang (or using it inappropriately) defines one as an outsider, a mundane, or (worst of all in hackish vocabulary) possibly even a suit. All human cultures use slang in this threefold way -- as a tool of communication, and of inclusion, and of exclusion. Among hackers, though, slang has a subtler aspect, paralleled perhaps in the slang of jazz musicians and some kinds of fine artists but hard to detect in most technical or scientific cultures; parts of it are code for shared states of consciousness. There is a whole range of altered states and problem-solving mental stances basic to high-level hacking which don't fit into conventional linguistic reality any better than a Coltrane solo or one of Maurits Escher's `trompe l'oeil' compositions (Escher is a favorite of hackers), and hacker slang encodes these subtleties in many unobvious ways. As a simple example, take the distinction between a kluge and an elegant solution, and the differing connotations attached to each. The distinction is not only of engineering significance; it reaches right back into the nature of the generative processes in program design and asserts something important about two different kinds of relationship between the hacker and the hack. Hacker slang is unusually rich in implications of this kind, of overtones and undertones that illuminate the hackish psyche. But there is more. Hackers, as a rule, love wordplay and are very conscious and inventive in their use of language. These traits seem to be common in young children, but the conformity-enforcing machine we are pleased to call an educational system bludgeons them out of most of us before adolescence. Thus, linguistic invention in most subcultures of the modern West is a halting and largely unconscious process. Hackers, by contrast, regard slang formation and use as a game to be played for conscious pleasure. Their inventions thus display an almost unique combination of the neotenous enjoyment of language-play with the discrimination of educated and powerful intelligence. Further, the electronic media which knit them together are fluid, `hot' connections, well adapted to both the dissemination of new slang and the ruthless culling of weak and superannuated specimens. The results of this process give us perhaps a uniquely intense and accelerated view of linguistic evolution in action. Hacker slang also challenges some common linguistic and anthropological assumptions. For example, it has recently become fashionable to speak of `low-context' versus `high-context' communication, and to classify cultures by the preferred context level of their languages and art forms. It is usually claimed that low-context communication (characterized by precision, clarity, and completeness of self-contained utterances) is typical in cultures which value logic, objectivity, individualism, and competition; by contrast, high-context communication (elliptical, emotive, nuance-filled, multi-modal, heavily coded) is associated with cultures which value subjectivity, consensus, cooperation, and tradition. What then are we to make of hackerdom, which is themed around extremely low-context interaction with computers and exhibits primarily "low-context" values, but cultivates an almost absurdly high-context slang style? The intensity and consciousness of hackish invention make a compilation of hacker slang a particularly effective window into the surrounding culture -- and, in fact, this one is the latest version of an evolving compilation called the `Jargon File', maintained by hackers themselves for over 15 years. This one (like its ancestors) is primarily a lexicon, but also includes topic entries which collect background or sidelight information on hacker culture that would be awkward to try to subsume under individual slang definitions. Though the format is that of a reference volume, it is intended that the material be enjoyable to browse. Even a complete outsider should find at least a chuckle on nearly every page, and much that is amusingly thought-provoking. But it is also true that hackers use humorous wordplay to make strong, sometimes combative statements about what they feel. Some of these entries reflect the views of opposing sides in disputes that have been genuinely passionate; this is deliberate. We have not tried to moderate or pretty up these disputes; rather we have attempted to ensure that everyone's sacred cows get gored, impartially. Compromise is not particularly a hackish virtue, but the honest presentation of divergent viewpoints is. The reader with minimal computer background who finds some references incomprehensibly technical can safely ignore them. We have not felt it either necessary or desirable to eliminate all such; they, too, contribute flavor, and one of this document's major intended audiences -- fledgling hackers already partway inside the culture -- will benefit from them. A selection of longer items of hacker folklore and humor is included in Appendix A. The `outside' reader's attention is particularly directed to the Portrait of J. Random Hacker in Appendix B. Appendix C, the Bibliography, lists some non-technical works which have either influenced or described the hacker culture. Because hackerdom is an intentional culture (one each individual must choose by action to join), one should not be surprised that the line between description and influence can become more than a little blurred. Earlier versions of the Jargon File have played a central role in spreading hacker language and the culture that goes with it to successively larger populations, and we hope and expect that this one will do likewise. Of Slang, Jargon, and Techspeak Linguists usually refer to informal language as `slang' and reserve the term `jargon' for the technical vocabularies of various occupations. However, the ancestor of this collection was called the `Jargon File', and hacker slang is traditionally `the jargon'. When talking about the jargon there is therefore no convenient way to distinguish it from what a linguist would call hackers' jargon -- the formal vocabulary they learn from textbooks, technical papers, and manuals. To make a confused situation worse, the line between hacker slang and the vocabulary of technical programming and computer science is fuzzy, and shifts over time. Further, this vocabulary is shared with a wider technical culture of programmers, many of whom are not hackers and do not speak or recognize hackish slang. Accordingly, this lexicon will try to be as precise as the facts of usage permit about the distinctions among three categories: `slang': informal language from mainstream English or non-technical subcultures (bikers, rock fans, surfers, etc). `jargon': without qualifier, denotes informal `slangy' language peculiar to or predominantly found among hackers -- the subject of this lexicon. `techspeak': the formal technical vocabulary of programming, computer science, electronics, and other fields connected to hacking. This terminology will be consistently used throughout the remainder of this lexicon. The jargon/techspeak distinction is the delicate one. A lot of techspeak originated as jargon, and there is a steady continuing uptake of jargon into techspeak. On the other hand, a lot of jargon arises from overgeneralization of techspeak terms (there is more about this in the Jargon Construction section below). In general, we have considered techspeak any term that communicates primarily by a denotation well established in textbooks, technical dictionaries, or standards documents. A few obviously techspeak terms (names of operating systems, languages, or documents) are listed when they are tied to hacker folklore that isn't covered in formal sources, or sometimes to convey critical historical background necessary to understand other entries to which they are cross-referenced. Some other techspeak senses of jargon words are listed in order to make the jargon senses clear; where the text does not specify that a straight technical sense is under discussion, these are marked with `[techspeak]' as an etymology. Some entries have a primary sense marked this way, with subsequent jargon meanings explained in terms of it. We have also tried to indicate (where known) the apparent origins of terms. The results are probably the least reliable information in the lexicon, for several reasons. For one thing, it is well known that many hackish usages have been independently reinvented multiple times, even among the more obscure and intricate neologisms. It often seems that the generative processes underlying hackish jargon formation have an internal logic so powerful as to create substantial parallelism across separate cultures and even in different languages! For another, the networks tend to propagate innovations so quickly that `first use' is often impossible to pin down. And, finally, compendia like this one alter what they observe by implicitly stamping cultural approval on terms and widening their use. Despite these problems, the organized collection of jargon-related oral history for the new compilations has enabled us to put to rest quite a number of folk etymologies, place credit where credit is due, and illuminate the early history of many important hackerisms such as kluge, cruft, and foo. We believe specialist lexicographers will find many of the historical notes more than casually instructive. Revision History The original Jargon File was a collection of hacker jargon from technical cultures including the MIT AI Lab, the Stanford AI lab (SAIL), and others of the old ARPANET AI/LISP/PDP-10 communities including Bolt, Beranek and Newman (BBN), Carnegie-Mellon University (CMU), and Worcester Polytechnic Institute (WPI). The Jargon File (hereafter referred to as `jargon-1' or `the File') was begun by Raphael Finkel at Stanford in 1975. From this time until the plug was finally pulled on the SAIL computer in 1991, the File was named AIWORD.RF[UP,DOC] there. Some terms in it date back considerably earlier (frob and some senses of moby, for instance, go back to the Tech Model Railroad Club at MIT and are believed to date at least back to the early 1960s). The revisions of jargon-1 were all unnumbered and may be collectively considered `Version 1'. In 1976, Mark Crispin, having seen an announcement about the File on the SAIL computer, FTPed a copy of the File to MIT. He noticed that it was hardly restricted to `AI words' and so stored the file on his directory as AI:MRC;SAIL JARGON. The file was quickly renamed JARGON > (the `>' caused versioning under ITS) as a flurry of enhancements were made by Mark Crispin and Guy L. Steele Jr. Unfortunately, amidst all this activity, nobody thought of correcting the term `jargon' to `slang' until the compendium had already become widely known as the Jargon File. Raphael Finkel dropped out of active participation shortly thereafter and Don Woods became the SAIL contact for the File (which was subsequently kept in duplicate at SAIL and MIT, with periodic resynchronizations). The File expanded by fits and starts until about 1983; Richard Stallman was prominent among the contributors, adding many MIT and ITS-related coinages. In Spring 1981, a hacker named Charles Spurgeon got a large chunk of the File published in Stewart Brand's "CoEvolution Quarterly" (issue 29, pages 26-35) with illustrations by Phil Wadler and Guy Steele (including a couple of the Crunchly cartoons). This appears to have been the File's first paper publication. A late version of jargon-1, expanded with commentary for the mass market, was edited by Guy Steele into a book published in 1983 as "The Hacker's Dictionary" (Harper & Row CN 1082, ISBN 0-06-091082-8). The other jargon-1 editors (Raphael Finkel, Don Woods, and Mark Crispin) contributed to this revision, as did Richard M. Stallman and Geoff Goodfellow. This book (now out of print) is hereafter referred to as `Steele-1983' and those six as the Steele-1983 coauthors. Shortly after the publication of Steele-1983, the File effectively stopped growing and changing. Originally, this was due to a desire to freeze the file temporarily to facilitate the production of Steele-1983, but external conditions caused the `temporary' freeze to become permanent. The AI Lab culture had been hit hard in the late 1970s by funding cuts and the resulting administrative decision to use vendor-supported hardware and software instead of homebrew whenever possible. At MIT, most AI work had turned to dedicated LISP Machines. At the same time, the commercialization of AI technology lured some of the AI Lab's best and brightest away to startups along the Route 128 strip in Massachusetts and out West in Silicon Valley. The startups built LISP machines for MIT; the central MIT-AI computer became a TWENEX system rather than a host for the AI hackers' beloved ITS. The Stanford AI Lab had effectively ceased to exist by 1980, although the SAIL computer continued as a Computer Science Department resource until 1991. Stanford became a major TWENEX site, at one point operating more than a dozen TOPS-20 systems; but by the mid-1980s most of the interesting software work was being done on the emerging BSD Unix standard. In April 1983, the PDP-10-centered cultures that had nourished the File were dealt a death-blow by the cancellation of the Jupiter project at Digital Equipment Corporation. The File's compilers, already dispersed, moved on to other things. Steele-1983 was partly a monument to what its authors thought was a dying tradition; no one involved realized at the time just how wide its influence was to be. By the mid-1980s the File's content was dated, but the legend that had grown up around it never quite died out. The book, and softcopies obtained off the ARPANET, circulated even in cultures far removed from MIT and Stanford; the content exerted a strong and continuing influence on hacker language and humor. Even as the advent of the microcomputer and other trends fueled a tremendous expansion of hackerdom, the File (and related materials such as the Some AI Koans in Appendix A) came to be seen as a sort of sacred epic, a hacker-culture Matter of Britain chronicling the heroic exploits of the Knights of the Lab. The pace of change in hackerdom at large accelerated tremendously -- but the Jargon File, having passed from living document to icon, remained essentially untouched for seven years. This revision contains nearly the entire text of a late version of jargon-1 (a few obsolete PDP-10-related entries were dropped after careful consultation with the editors of Steele-1983). It merges in about 80% of the Steele-1983 text, omitting some framing material and a very few entries introduced in Steele-1983 that are now also obsolete. This new version casts a wider net than the old Jargon File; its aim is to cover not just AI or PDP-10 hacker culture but all the technical computing cultures wherein the true hacker-nature is manifested. More than half of the entries now derive from Usenet and represent jargon now current in the C and Unix communities, but special efforts have been made to collect jargon from other cultures including IBM PC programmers, Amiga fans, Mac enthusiasts, and even the IBM mainframe world. Eric S. Raymond maintains the new File with assistance from Guy L. Steele Jr.; these are the persons primarily reflected in the File's editorial `we', though we take pleasure in acknowledging the special contribution of the other coauthors of Steele-1983. Please email all additions, corrections, and correspondence relating to the Jargon File to jargon@thyrsus.com. (Warning: other email addresses appear in this file but are not guaranteed to be correct later than the revision date on the first line. Don't email us if an attempt to reach your idol bounces -- we have no magic way of checking addresses or looking up people.) The 2.9.6 version became the main text of "The New Hacker's Dictionary", by Eric Raymond (ed.), MIT Press 1991, ISBN 0-262-68069-6. The 3.0.0 version was published in September 1993 as the second edition of "The New Hacker's Dictionary", again from MIT Press (ISBN 0-262-18154-1). If you want the book, you should be able to find it at any of the major bookstore chains. Failing that, you can order by mail from The MIT Press 55 Hayward Street Cambridge, MA 02142 or order by phone at (800)-356-0343 or (617)-625-8481. The maintainers are committed to updating the on-line version of the Jargon File through and beyond paper publication, and will continue to make it available to archives and public-access sites as a trust of the hacker community. Here is a chronology of the high points in the recent on-line revisions: Version 2.1.1, Jun 12 1990: the Jargon File comes alive again after a seven-year hiatus. Reorganization and massive additions were by Eric S. Raymond, approved by Guy Steele. Many items of UNIX, C, USENET, and microcomputer-based jargon were added at that time. Version 2.9.6, Aug 16 1991: corresponds to reproduction copy for book. This version had 18952 lines, 148629 words, 975551 characters, and 1702 entries. Version 2.9.7, Oct 28 1991: first markup for hypertext browser. This version had 19432 lines, 152132 words, 999595 characters, and 1750 entries. Version 2.9.8, Jan 01 1992: first public release since the book, including over fifty new entries and numerous corrections/additions to old ones. Packaged with version 1.1 of vh(1) hypertext reader. This version had 19509 lines, 153108 words, 1006023 characters, and 1760 entries. Version 2.9.9, Apr 01 1992: folded in XEROX PARC lexicon. This version had 20298 lines, 159651 words, 1048909 characters, and 1821 entries. Version 2.9.10, Jul 01 1992: lots of new historical material. This version had 21349 lines, 168330 words, 1106991 characters, and 1891 entries. Version 2.9.11, Jan 01 1993: lots of new historical material. This version had 21725 lines, 171169 words, 1125880 characters, and 1922 entries. Version 2.9.12, May 10 1993: a few new entries & changes, marginal MUD/IRC slang and some borderline techspeak removed, all in preparation for 2nd Edition of TNHD. This version had 22238 lines, 175114 words, 1152467 characters, and 1946 entries. Version 3.0.0, Jul 27 1993: manuscript freeze for 2nd edition of TNHD. This version had 22548 lines, 177520 words, 1169372 characters, and 1961 entries. Version 3.1.0, Oct 15 1994: interim release to test WWW conversion. This version had 23197 lines, 181001 words, 1193818 characters, and 1990 entries. Version 3.2.0, Mar 15 1995: Spring 1995 update. This version had 23822 lines, 185961 words, 1226358 characters, and 2031 entries. Version 3.3.0, Jan 20 1996: Winter 1996 update. This version had 24055 lines, 187957 words, 1239604 characters, and 2045 entries. Version 3.3.1, Jan 25 1996: Copy-corrected improvement on 3.3.0 shipped to MIT Press as a step towards TNHD III. This version had 24147 lines, 188728 words, 1244554 characters, and 2050 entries. Version 3.3.2, Mar 20 1996: A number of new entries pursuant on 3.3.2. This version had 24442 lines, 190867 words, 1262468 characters, and 2061 entries. Version 3.3.3, Mar 25 1996: Cleanup before TNHD III manuscript freeze. This version had 24584 lines, 191932 words, 1269996 characters, and 2064 entries. Version 4.0.0, Jul 25 1996: The actual TNHD III version after copy-edit. This version had 24801 lines, 193697 words, 1281402 characters, and 2067 entries. Version 4.1.0, 8 Apr 1999: The Jargon File rides again after three years. This version had 25777 lines, 206825 words, 1359992 characters, and 2217 entries. Version 4.1.1, 18 Apr 1999: Corrections for minor errors in 4.1.0, and some new entries. This version had 25921 lines, 208483 words, 1371279 characters, and 2225 entries. Version 4.1.2, 28 Apr 1999: Moving texi2html out of the production path. This version had 26006 lines, 209479 words, 1377687 characters, and 2225 entries. Version 4.1.3, 14 Jun 1999: Minor updates and markup fixes. This version had 26108 lines, 210480 words, 1384546 characters, and 2234 entries. Version 4.1.4, 17 Jun 1999: Markup fixes for framed HTML. This version had 26117 lines, 210527 words, 1384902 characters, and 2234 entries. Version 4.2.0, 31 Jan 2000: Fix processing of URLs. This version had 26598 lines, 214639 words, 1412243 characters, and 2267 entries. Version 4.2.1, 5 Mar 2000: Point release to test new production machinery. This version had 26647 lines, 215040 words, 1414942 characters, and 2269 entries. Version 4.2.2, 12 Aug 2000: This version had 27171 lines, 219630 words, 1444887 characters, and 2302 entries. Version numbering: Version numbers should be read as _major_._minor_._revision_. Major version 1 is reserved for the `old' (ITS) Jargon File, jargon-1. Major version 2 encompasses revisions by ESR (Eric S. Raymond) with assistance from GLS (Guy L. Steele, Jr.) leading up to and including the second paper edition. From now on, major version number N.00 will probably correspond to the Nth paper edition. Usually later versions will either completely supersede or incorporate earlier versions, so there is generally no point in keeping old versions around. Our thanks to the coauthors of Steele-1983 for oversight and assistance, and to the hundreds of Usenetters (too many to name here) who contributed entries and encouragement. More thanks go to several of the old-timers on the Usenet group _alt.folklore.computers_, who contributed much useful commentary and many corrections and valuable historical perspective: Joseph M. Newcomer, Bernie Cosell, Earl Boebert, and Joe Morris. We were fortunate enough to have the aid of some accomplished linguists. David Stampe and Charles Hoequist contributed valuable criticism; Joe Keane helped us improve the pronunciation guides. A few bits of this text quote previous works. We are indebted to Brian A. LaMacchia for obtaining permission for us to use material from the "TMRC Dictionary"; also, Don Libes contributed some appropriate material from his excellent book "Life With UNIX". We thank Per Lindberg, author of the remarkable Swedish-language 'zine "Hackerbladet", for bringing "FOO!" comics to our attention and smuggling one of the IBM hacker underground's own baby jargon files out to us. Thanks also to Maarten Litmaath for generously allowing the inclusion of the ASCII pronunciation guide he formerly maintained. And our gratitude to Marc Weiser of XEROX PARC for securing us permission to quote from PARC's own jargon lexicon and shipping us a copy. It is a particular pleasure to acknowledge the major contributions of Mark Brader and Steve Summit to the File and Dictionary; they have read and reread many drafts, checked facts, caught typos, submitted an amazing number of thoughtful comments, and done yeoman service in catching typos and minor usage bobbles. Their rare combination of enthusiasm, persistence, wide-ranging technical knowledge, and precisionism in matters of language has been of invaluable help. Indeed, the sustained volume and quality of Mr. Brader's input over several years and several different editions has only allowed him to escape co-editor credit by the slimmest of margins. Finally, George V. Reilly helped with TeX arcana and painstakingly proofread some 2.7 and 2.8 versions, and Eric Tiedemann contributed sage advice throughout on rhetoric, amphigory, and philosophunculism. How Jargon Works Jargon Construction There are some standard methods of jargonification that became established quite early (i.e., before 1970), spreading from such sources as the Tech Model Railroad Club, the PDP-1 SPACEWAR hackers, and John McCarthy's original crew of LISPers. These include verb doubling, soundalike slang, the `-P' convention, overgeneralization, spoken inarticulations, and anthropomorphization. Each is discussed below. We also cover the standard comparatives for design quality. Of these six, verb doubling, overgeneralization, anthropomorphization, and (especially) spoken inarticulations have become quite general; but soundalike slang is still largely confined to MIT and other large universities, and the `-P' convention is found only where LISPers flourish. Verb Doubling: Doubling a verb may change its semantics Soundalike Slang: Punning jargon The -P convention: A LISPy way to form questions Overgeneralization: Standard abuses of grammar Spoken Inarticulations: Sighing and <*sigh*>ing Anthropomorphization: Homunculi, daemons, and confused programs Comparatives: Standard comparatives for design quality Verb Doubling A standard construction in English is to double a verb and use it as an exclamation, such as "Bang, bang!" or "Quack, quack!". Most of these are names for noises. Hackers also double verbs as a concise, sometimes sarcastic comment on what the implied subject does. Also, a doubled verb is often used to terminate a conversation, in the process remarking on the current state of affairs or what the speaker intends to do next. Typical examples involve win, lose, hack, flame, barf, chomp: "The disk heads just crashed." "Lose, lose." "Mostly he talked about his latest crock. Flame, flame." "Boy, what a bagbiter! Chomp, chomp!" Some verb-doubled constructions have special meanings not immediately obvious from the verb. These have their own listings in the lexicon. The Usenet culture has one tripling convention unrelated to this; the names of `joke' topic groups often have a tripled last element. The first and paradigmatic example was _alt.swedish.chef.bork.bork.bork_ (a "Muppet Show" reference); other infamous examples have included: _alt.french.captain.borg.borg.borg_ _alt.wesley.crusher.die.die.die_ _comp.unix.internals.system.calls.brk.brk.brk_ _sci.physics.edward.teller.boom.boom.boom_ _alt.sadistic.dentists.drill.drill.drill_ Construction Soundalike slang Hackers will often make rhymes or puns in order to convert an ordinary word or phrase into something more interesting. It is considered particularly flavorful if the phrase is bent so as to include some other jargon word; thus the computer hobbyist magazine "Dr. Dobb's Journal" is almost always referred to among hackers as `Dr. Frob's Journal' or simply `Dr. Frob's'. Terms of this kind that have been in fairly wide use include names for newspapers: Boston Herald => Horrid (or Harried) Boston Globe => Boston Glob Houston (or San Francisco) Chronicle => the Crocknicle (or the Comical) New York Times => New York Slime Wall Street Journal => Wall Street Urinal However, terms like these are often made up on the spur of the moment. Standard examples include: Data General => Dirty Genitals IBM 360 => IBM Three-Sickly Government Property --- Do Not Duplicate (on keys) => Government Duplicity --- Do Not Propagate for historical reasons => for hysterical raisins Margaret Jacks Hall (the CS building at Stanford) => Marginal Hacks Hall Microsoft => Microsloth Internet Explorer => Internet Exploiter This is not really similar to the Cockney rhyming slang it has been compared to in the past, because Cockney substitutions are opaque whereas hacker punning jargon is intentionally transparent. The `-P' convention Turning a word into a question by appending the syllable `P'; from the LISP convention of appending the letter `P' to denote a predicate (a boolean-valued function). The question should expect a yes/no answer, though it needn't. (See T and NIL.) At dinnertime: Q: ``Foodp?'' A: ``Yeah, I'm pretty hungry.'' or ``T!'' At any time: Q: ``State-of-the-world-P?'' A: (Straight) ``I'm about to go home.'' A: (Humorous) ``Yes, the world has a state.'' On the phone to Florida: Q: ``State-p Florida?'' A: ``Been reading JARGON.TXT again, eh?'' [One of the best of these is a Gosperism. Once, when we were at a Chinese restaurant, Bill Gosper wanted to know whether someone would like to share with him a two-person-sized bowl of soup. His inquiry was: "Split-p soup?" -- GLS] Overgeneralization A very conspicuous feature of jargon is the frequency with which techspeak items such as names of program tools, command language primitives, and even assembler opcodes are applied to contexts outside of computing wherever hackers find amusing analogies to them. Thus (to cite one of the best-known examples) Unix hackers often grep for things rather than searching for them. Many of the lexicon entries are generalizations of exactly this kind. Hackers enjoy overgeneralization on the grammatical level as well. Many hackers love to take various words and add the wrong endings to them to make nouns and verbs, often by extending a standard rule to nonuniform cases (or vice versa). For example, because porous => porosity generous => generosity hackers happily generalize: mysterious => mysteriosity ferrous => ferrosity obvious => obviosity dubious => dubiosity Another class of common construction uses the suffix `-itude' to abstract a quality from just about any adjective or noun. This usage arises especially in cases where mainstream English would perform the same abstraction through `-iness' or `-ingness'. Thus: win => winnitude (a common exclamation) loss => lossitude cruft => cruftitude lame => lameitude Some hackers cheerfully reverse this transformation; they argue, for example, that the horizontal degree lines on a globe ought to be called `lats' -- after all, they're measuring latitude! Also, note that all nouns can be verbed. E.g.: "All nouns can be verbed", "I'll mouse it up", "Hang on while I clipboard it over", "I'm grepping the files". English as a whole is already heading in this direction (towards pure-positional grammar like Chinese); hackers are simply a bit ahead of the curve. The suffix "-full" can also be applied in generalized and fanciful ways, as in "As soon as you have more than one cachefull of data, the system starts thrashing," or "As soon as I have more than one headfull of ideas, I start writing it all down." A common use is "screenfull", meaning the amount of text that will fit on one screen, usually in text mode where you have no choice as to character size. Another common form is "bufferfull". However, hackers avoid the unimaginative verb-making techniques characteristic of marketroids, bean-counters, and the Pentagon; a hacker would never, for example, `productize', `prioritize', or `securitize' things. Hackers have a strong aversion to bureaucratic bafflegab and regard those who use it with contempt. Similarly, all verbs can be nouned. This is only a slight overgeneralization in modern English; in hackish, however, it is good form to mark them in some standard nonstandard way. Thus: win => winnitude, winnage disgust => disgustitude hack => hackification Further, note the prevalence of certain kinds of nonstandard plural forms. Some of these go back quite a ways; the TMRC Dictionary includes an entry which implies that the plural of `mouse' is meeces, and notes that the defined plural of `caboose' is `cabeese'. This latter has apparently been standard (or at least a standard joke) among railfans (railroad enthusiasts) for many years. On a similarly Anglo-Saxon note, almost anything ending in `x' may form plurals in `-xen' (see VAXen and boxen in the main text). Even words ending in phonetic /k/ alone are sometimes treated this way; e.g., `soxen' for a bunch of socks. Other funny plurals are `frobbotzim' for the plural of `frobbozz' (see frobnitz) and `Unices' and `Twenices' (rather than `Unixes' and `Twenexes'; see Unix, TWENEX in main text). But note that `Twenexen' was never used, and `Unixen' was not sighted in the wild until the year 2000, thirty years after it might logically have come into use; it has been suggested that this is because `-ix' and `-ex' are Latin singular endings that attract a Latinate plural. Finally, it has been suggested to general approval that the plural of `mongoose' ought to be `polygoose'. The pattern here, as with other hackish grammatical quirks, is generalization of an inflectional rule that in English is either an import or a fossil (such as the Hebrew plural ending `-im', or the Anglo-Saxon plural suffix `-en') to cases where it isn't normally considered to apply. This is not `poor grammar', as hackers are generally quite well aware of what they are doing when they distort the language. It is grammatical creativity, a form of playfulness. It is done not to impress but to amuse, and never at the expense of clarity. Construction Spoken inarticulations Words such as `mumble', `sigh', and `groan' are spoken in places where their referent might more naturally be used. It has been suggested that this usage derives from the impossibility of representing such noises on a comm link or in electronic mail, MUDs, and IRC channels (interestingly, the same sorts of constructions have been showing up with increasing frequency in comic strips). Another expression sometimes heard is "Complain!", meaning "I have a complaint!" Anthropomorphization Semantically, one rich source of jargon constructions is the hackish tendency to anthropomorphize hardware and software. English purists and academic computer scientists frequently look down on others for anthropomorphizing hardware and software, considering this sort of behavior to be characteristic of naive misunderstanding. But most hackers anthropomorphize freely, frequently describing program behavior in terms of wants and desires. Thus it is common to hear hardware or software talked about as though it has homunculi talking to each other inside it, with intentions and desires. Thus, one hears "The protocol handler got confused", or that programs "are trying" to do things, or one may say of a routine that "its goal in life is to X". One even hears explanations like "... and its poor little brain couldn't understand X, and it died." Sometimes modelling things this way actually seems to make them easier to understand, perhaps because it's instinctively natural to think of anything with a really complex behavioral repertoire as `like a person' rather than `like a thing'. At first glance, to anyone who understands how these programs actually work, this seems like an absurdity. As hackers are among the people who know best how these phenomena work, it seems odd that they would use language that seemds to ascribe conciousness to them. The mind-set behind this tendency thus demands examination. The key to understanding this kind of usage is that it isn't done in a naive way; hackers don't personalize their stuff in the sense of feeling empathy with it, nor do they mystically believe that the things they work on every day are `alive'. To the contrary: hackers who anthropomorphize are expressing not a vitalistic view of program behavior but a mechanistic view of human behavior. Almost all hackers subscribe to the mechanistic, materialistic ontology of science (this is in practice true even of most of the minority with contrary religious theories). In this view, people are biological machines - consciousness is an interesting and valuable epiphenomenon, but mind is implemented in machinery which is not fundamentally different in information-processing capacity from computers. Hackers tend to take this a step further and argue that the difference between a substrate of CHON atoms and water and a substrate of silicon and metal is a relatively unimportant one; what matters, what makes a thing `alive', is information and richness of pattern. This is animism from the flip side; it implies that humans and computers and dolphins and rocks are all machines exhibiting a continuum of modes of `consciousness' according to their information-processing capacity. Because hackers accept a that a human machine can have intentions, it is therefore easy for them to ascribe consciousness and intention to complex patterned systems such as computers. If consciousness is mechanical, it is neither more or less absurd to say that "The program wants to go into an infinite loop" than it is to say that "I want to go eat some chocolate" - and even defensible to say that "The stone, once dropped, wants to move towards the center of the earth". This viewpoint has respectable company in academic philosophy. Daniel Dennett organizes explanations of behavior using three stances: the "physical stance" (thing-to-be-explained as a physical object), the "design stance" (thing-to-be-explained as an artifact), and the "intentional stance" (thing-to-be-explained as an agent with desires and intentions). Which stances are appropriate is a matter not of truth but of utility. Hackers typically view simple programs from the design stance, but more complex ones are modelled using the intentional stance. Construction Comparatives Finally, note that many words in hacker jargon have to be understood as members of sets of comparatives. This is especially true of the adjectives and nouns used to describe the beauty and functional quality of code. Here is an approximately correct spectrum: monstrosity brain-damage screw bug lose misfeature crock kluge hack win feature elegance perfection The last is spoken of as a mythical absolute, approximated but never actually attained. Another similar scale is used for describing the reliability of software: broken flaky dodgy fragile brittle solid robust bulletproof armor-plated Note, however, that `dodgy' is primarily Commonwealth Hackish (it is rare in the U.S.) and may change places with `flaky' for some speakers. Coinages for describing lossage seem to call forth the very finest in hackish linguistic inventiveness; it has been truly said that hackers have even more words for equipment failures than Yiddish has for obnoxious people. Hacker Writing Style We've already seen that hackers often coin jargon by overgeneralizing grammatical rules. This is one aspect of a more general fondness for form-versus-content language jokes that shows up particularly in hackish writing. One correspondent reports that he consistently misspells `wrong' as `worng'. Others have been known to criticize glitches in Jargon File drafts by observing (in the mode of Douglas Hofstadter) "This sentence no verb", or "Too repetetetive", or "Bad speling", or "Incorrectspa cing." Similarly, intentional spoonerisms are often made of phrases relating to confusion or things that are confusing; `dain bramage' for `brain damage' is perhaps the most common (similarly, a hacker would be likely to write "Excuse me, I'm cixelsyd today", rather than "I'm dyslexic today"). This sort of thing is quite common and is enjoyed by all concerned. Hackers tend to use quotes as balanced delimiters like parentheses, much to the dismay of American editors. Thus, if "Jim is going" is a phrase, and so are "Bill runs" and "Spock groks", then hackers generally prefer to write: "Jim is going", "Bill runs", and "Spock groks". This is incorrect according to standard American usage (which would put the continuation commas and the final period inside the string quotes); however, it is counter-intuitive to hackers to mutilate literal strings with characters that don't belong in them. Given the sorts of examples that can come up in discussions of programming, American-style quoting can even be grossly misleading. When communicating command lines or small pieces of code, extra characters can be a real pain in the neck. Consider, for example, a sentence in a vi tutorial that looks like this: Then delete a line from the file by typing "dd". Standard usage would make this Then delete a line from the file by typing "dd." but that would be very bad -- because the reader would be prone to type the string d-d-dot, and it happens that in vi(1) dot repeats the last command accepted. The net result would be to delete two lines! The Jargon File follows hackish usage throughout. Interestingly, a similar style is now preferred practice in Great Britain, though the older style (which became established for typographical reasons having to do with the aesthetics of comma and quotes in typeset text) is still accepted there. "Hart's Rules" and the "Oxford Dictionary for Writers and Editors" call the hacker-like style `new' or `logical' quoting. This returns British English to the style Latin languages (including Spanish, French, Italian, Catalan) have been using all along. Another hacker habit is a tendency to distinguish between `scare' quotes and `speech' quotes; that is, to use British-style single quotes for marking and reserve American-style double quotes for actual reports of speech or text included from elsewhere. Interestingly, some authorities describe this as correct general usage, but mainstream American English has gone to using double-quotes indiscriminately enough that hacker usage appears marked [and, in fact, I thought this was a personal quirk of mine until I checked with Usenet --ESR]. One further permutation that is definitely not standard is a hackish tendency to do marking quotes by using apostrophes (single quotes) in pairs; that is, 'like this'. This is modelled on string and character literal syntax in some programming languages (reinforced by the fact that many character-only terminals display the apostrophe in typewriter style, as a vertical single quote). One quirk that shows up frequently in the email style of Unix hackers in particular is a tendency for some things that are normally all-lowercase (including usernames and the names of commands and C routines) to remain uncapitalized even when they occur at the beginning of sentences. It is clear that, for many hackers, the case of such identifiers becomes a part of their internal representation (the `spelling') and cannot be overridden without mental effort (an appropriate reflex because Unix and C both distinguish cases and confusing them can lead to lossage). A way of escaping this dilemma is simply to avoid using these constructions at the beginning of sentences. There seems to be a meta-rule behind these nonstandard hackerisms to the effect that precision of expression is more important than conformance to traditional rules; where the latter create ambiguity or lose information they can be discarded without a second thought. It is notable in this respect that other hackish inventions (for example, in vocabulary) also tend to carry very precise shades of meaning even when constructed to appear slangy and loose. In fact, to a hacker, the contrast between `loose' form and `tight' content in jargon is a substantial part of its humor! Hackers have also developed a number of punctuation and emphasis conventions adapted to single-font all-ASCII communications links, and these are occasionally carried over into written documents even when normal means of font changes, underlining, and the like are available. One of these is that TEXT IN ALL CAPS IS INTERPRETED AS `LOUD', and this becomes such an ingrained synesthetic reflex that a person who goes to caps-lock while in talk mode may be asked to "stop shouting, please, you're hurting my ears!". Also, it is common to use bracketing with unusual characters to signify emphasis. The asterisk is most common, as in "What the *hell*?" even though this interferes with the common use of the asterisk suffix as a footnote mark. The underscore is also common, suggesting underlining (this is particularly common with book titles; for example, "It is often alleged that Joe Haldeman wrote _The_Forever_War_ as a rebuttal to Robert Heinlein's earlier novel of the future military, _Starship_Troopers_."). Other forms exemplified by "=hell=", "\hell/", or "/hell/" are occasionally seen (it's claimed that in the last example the first slash pushes the letters over to the right to make them italic, and the second keeps them from falling over). On FidoNet, you might see #bright# and ^dark^ text, which was actually interpreted by some reader software. Finally, words may also be emphasized L I K E T H I S, or by a series of carets (^) under them on the next line of the text. There is a semantic difference between *emphasis like this* (which emphasizes the phrase as a whole), and *emphasis* *like* *this* (which suggests the writer speaking very slowly and distinctly, as if to a very young child or a mentally impaired person). Bracketing a word with the `*' character may also indicate that the writer wishes readers to consider that an action is taking place or that a sound is being made. Examples: *bang*, *hic*, *ring*, *grin*, *kick*, *stomp*, *mumble*. One might also see the above sound effects as <bang>, <hic>, <ring>, <grin>, <kick>, <stomp>, <mumble>. This use of angle brackets to mark their contents originally derives from conventions used in BNF, but since about 1993 it has been reinforced by the HTML markup used on the World Wide Web. Angle-bracket enclosure is also used to indicate that a term stands for some random member of a larger class (this is straight from BNF). Examples like the following are common: So this <ethnic> walks into a bar one day... There is also an accepted convention for `writing under erasure'; the text Be nice to this fool^H^H^H^Hgentleman, he's visiting from corporate HQ. reads roughly as "Be nice to this fool, er, gentleman...", with irony emphasized. The digraph ^H is often used as a print representation for a backspace, and was actually very visible on old-style printing terminals. As the text was being composed the characters would be echoed and printed immediately, and when a correction was made the backspace keystrokes would be echoed with the string '^H'. Of course, the final composed text would have no trace of the backspace characters (or the original erroneous text). This convention parallels (and may have been influenced by) the ironic use of `slashouts' in science-fiction fanzines. A related habit uses editor commands to signify corrections to previous text. This custom faded in email as more mailers got good editing capabilities, only to tale on new life on IRCs and other line-based chat systems. I've seen that term used on alt.foobar often. Send it to Erik for the File. Oops...s/Erik/Eric/. The s/Erik/Eric/ says "change Erik to Eric in the preceding". This syntax is borrowed from the Unix editing tools ed and sed, but is widely recognized by non-Unix hackers as well. In a formula, * signifies multiplication but two asterisks in a row are a shorthand for exponentiation (this derives from FORTRAN). Thus, one might write 2 ** 8 = 256. Another notation for exponentiation one sees more frequently uses the caret (^, ASCII 1011110); one might write instead 2^8 = 256. This goes all the way back to Algol-60, which used the archaic ASCII `up-arrow' that later became the caret; this was picked up by Kemeny and Kurtz's original BASIC, which in turn influenced the design of the bc(1) and dc(1) Unix tools, which have probably done most to reinforce the convention on Usenet. (TeX math mode also uses ^ for exponention.) The notation is mildly confusing to C programmers, because ^ means bitwise exclusive-or in C. Despite this, it was favored 3:1 over ** in a late-1990 snapshot of Usenet. It is used consistently in this lexicon. In on-line exchanges, hackers tend to use decimal forms or improper fractions (`3.5' or `7/2') rather than `typewriter style' mixed fractions (`3-1/2'). The major motive here is probably that the former are more readable in a monospaced font, together with a desire to avoid the risk that the latter might be read as `three minus one-half'. The decimal form is definitely preferred for fractions with a terminating decimal representation; there may be some cultural influence here from the high status of scientific notation. Another on-line convention, used especially for very large or very small numbers, is taken from C (which derived it from FORTRAN). This is a form of `scientific notation' using `e' to replace `*10^'; for example, one year is about 3e7 seconds long. The tilde (~) is commonly used in a quantifying sense of `approximately'; that is, ~50 means `about fifty'. On Usenet and in the MUD world, common C boolean, logical, and relational operators such as |, &, ||, &&, !, ==, !=, >, <, >=, and =< are often combined with English. The Pascal not-equals, <>, is also recognized, and occasionally one sees /= for not-equals (from Ada, Common Lisp, and Fortran 90). The use of prefix `!' as a loose synonym for `not-' or `no-' is particularly common; thus, `!clue' is read `no-clue' or `clueless'. A related practice borrows syntax from preferred programming languages to express ideas in a natural-language text. For example, one might see the following: In <jrh578689@thudpucker.com> J. R. Hacker wrote: >I recently had occasion to field-test the Snafu >Systems 2300E adaptive gonkulator. The price was >right, and the racing stripe on the case looked >kind of neat, but its performance left something >to be desired. Yeah, I tried one out too. #ifdef FLAME Hasn't anyone told those idiots that you can't get decent bogon suppression with AFJ filters at today's net volumes? #endif /* FLAME */ I guess they figured the price premium for true frame-based semantic analysis was too high. Unfortunately, it's also the only workable approach. I wouldn't recommend purchase of this product unless you're on a *very* tight budget. #include <disclaimer.h> -- == Frank Foonly (Fubarco Systems) In the above, the #ifdef/#endif pair is a conditional compilation syntax from C; here, it implies that the text between (which is a flame) should be evaluated only if you have turned on (or defined on) the switch FLAME. The #include at the end is C for "include standard disclaimer here"; the `standard disclaimer' is understood to read, roughly, "These are my personal opinions and not to be construed as the official position of my employer." The top section in the example, with > at the left margin, is an example of an inclusion convention we'll discuss below. More recently, following on the huge popularity of the World Wide Web, pseudo-HTML markup has become popular for similar purposes: <flame> Your father was a hamster and your mother smelt of elderberries! </flame> You'll even see this with an HTML-style modifier: <flame intensity="100%"> You seem well-suited for a career in government. </flame> Another recent (late 1990s) construction now common on USENET seems to be borrowed from Perl. It consists of using a dollar sign before an uppercased form of a word or acronym to suggest any random member of the class indicated by the word. Thus: `$PHB' means "any random member of the class `Pointy-Haired Boss'". Hackers also mix letters and numbers more freely than in mainstream usage. In particular, it is good hackish style to write a digit sequence where you intend the reader to understand the text string that names that number in English. So, hackers prefer to write `1970s' rather than `nineteen-seventies' or `1970's' (the latter looks like a possessive). It should also be noted that hackers exhibit much less reluctance to use multiply-nested parentheses than is normal in English. Part of this is almost certainly due to influence from LISP (which uses deeply nested parentheses (like this (see?)) in its syntax a lot), but it has also been suggested that a more basic hacker trait of enjoying playing with complexity and pushing systems to their limits is in operation. Finally, it is worth mentioning that many studies of on-line communication have shown that electronic links have a de-inhibiting effect on people. Deprived of the body-language cues through which emotional state is expressed, people tend to forget everything about other parties except what is presented over that ASCII link. This has both good and bad effects. A good one is that it encourages honesty and tends to break down hierarchical authority relationships; a bad one is that it may encourage depersonalization and gratuitous rudeness. Perhaps in response to this, experienced netters often display a sort of conscious formal _politesse_ in their writing that has passed out of fashion in other spoken and written media (for example, the phrase "Well said, sir!" is not uncommon). Many introverted hackers who are next to inarticulate in person communicate with considerable fluency over the net, perhaps precisely because they can forget on an unconscious level that they are dealing with people and thus don't feel stressed and anxious as they would face to face. Though it is considered gauche to publicly criticize posters for poor spelling or grammar, the network places a premium on literacy and clarity of expression. It may well be that future historians of literature will see in it a revival of the great tradition of personal letters as art. Email Quotes and Inclusion Conventions One area where conventions for on-line writing are still in some flux is the marking of included material from earlier messages -- what would be called `block quotations' in ordinary English. From the usual typographic convention employed for these (smaller font at an extra indent), there derived a practice of included text being indented by one ASCII TAB (0001001) character, which under Unix and many other environments gives the appearance of an 8-space indent. Early mail and netnews readers had no facility for including messages this way, so people had to paste in copy manually. BSD Mail(1) was the first message agent to support inclusion, and early Usenetters emulated its style. But the TAB character tended to push included text too far to the right (especially in multiply nested inclusions), leading to ugly wraparounds. After a brief period of confusion (during which an inclusion leader consisting of three or four spaces became established in EMACS and a few mailers), the use of leading > or > became standard, perhaps owing to its use in ed(1) to display tabs (alternatively, it may derive from the > that some early Unix mailers used to quote lines starting with "From" in text, so they wouldn't look like the beginnings of new message headers). Inclusions within inclusions keep their > leaders, so the `nesting level' of a quotation is visually apparent. The practice of including text from the parent article when posting a followup helped solve what had been a major nuisance on Usenet: the fact that articles do not arrive at different sites in the same order. Careless posters used to post articles that would begin with, or even consist entirely of, "No, that's wrong" or "I agree" or the like. It was hard to see who was responding to what. Consequently, around 1984, new news-posting software evolved a facility to automatically include the text of a previous article, marked with "> " or whatever the poster chose. The poster was expected to delete all but the relevant lines. The result has been that, now, careless posters post articles containing the entire text of a preceding article, followed only by "No, that's wrong" or "I agree". Many people feel that this cure is worse than the original disease, and there soon appeared newsreader software designed to let the reader skip over included text if desired. Today, some posting software rejects articles containing too high a proportion of lines beginning with `>' -- but this too has led to undesirable workarounds, such as the deliberate inclusion of zero-content filler lines which aren't quoted and thus pull the message below the rejection threshold. Because the default mailers supplied with Unix and other operating systems haven't evolved as quickly as human usage, the older conventions using a leading TAB or three or four spaces are still alive; however, >-inclusion is now clearly the prevalent form in both netnews and mail. Inclusion practice is still evolving, and disputes over the `correct' inclusion style occasionally lead to holy wars. Most netters view an inclusion as a promise that comment on it will immediately follow. The preferred, conversational style looks like this, > relevant excerpt 1 response to excerpt > relevant excerpt 2 response to excerpt > relevant excerpt 3 response to excerpt or for short messages like this: > entire message response to message Thanks to poor design of some PC-based mail agents, one will occasionally see the entire quoted message after the response, like this response to message > entire message but this practice is strongly deprecated. Though > remains the standard inclusion leader, | is occasionally used for extended quotations where original variations in indentation are being retained (one mailer even combines these and uses |>). One also sees different styles of quoting a number of authors in the same message: one (deprecated because it loses information) uses a leader of > for everyone, another (the most common) is > > > > , > > > , etc. (or >>>> , >>>, etc., depending on line length and nesting depth) reflecting the original order of messages, and yet another is to use a different citation leader for each author, say > , : , | , } (preserving nesting so that the inclusion order of messages is still apparent, or tagging the inclusions with authors' names). Yet another style is to use each poster's initials (or login name) as a citation leader for that poster. Occasionally one sees a # leader used for quotations from authoritative sources such as standards documents; the intended allusion is to the root prompt (the special Unix command prompt issued when one is running as the privileged super-user). Hacker Speech Style Hackish speech generally features extremely precise diction, careful word choice, a relatively large working vocabulary, and relatively little use of contractions or street slang. Dry humor, irony, puns, and a mildly flippant attitude are highly valued -- but an underlying seriousness and intelligence are essential. One should use just enough jargon to communicate precisely and identify oneself as a member of the culture; overuse of jargon or a breathless, excessively gung-ho attitude is considered tacky and the mark of a loser. This speech style is a variety of the precisionist English normally spoken by scientists, design engineers, and academics in technical fields. In contrast with the methods of jargon construction, it is fairly constant throughout hackerdom. It has been observed that many hackers are confused by negative questions -- or, at least, that the people to whom they are talking are often confused by the sense of their answers. The problem is that they have done so much programming that distinguishes between if (going) ... and if (!going) ... that when they parse the question "Aren't you going?" it may seem to be asking the opposite question from "Are you going?", and so to merit an answer in the opposite sense. This confuses English-speaking non-hackers because they were taught to answer as though the negative part weren't there. In some other languages (including Russian, Chinese, and Japanese) the hackish interpretation is standard and the problem wouldn't arise. Hackers often find themselves wishing for a word like French `si', German `doch', or Dutch `jawel' - a word with which one could unambiguously answer `yes' to a negative question. (See also mu) For similar reasons, English-speaking hackers almost never use double negatives, even if they live in a region where colloquial usage allows them. The thought of uttering something that logically ought to be an affirmative knowing it will be misparsed as a negative tends to disturb them. In a related vein, hackers sometimes make a game of answering questions containing logical connectives with a strictly literal rather than colloquial interpretation. A non-hacker who is indelicate enough to ask a question like "So, are you working on finding that bug now or leaving it until later?" is likely to get the perfectly correct answer "Yes!" (that is, "Yes, I'm doing it either now or later, and you didn't ask which!"). International Style Although the Jargon File remains primarily a lexicon of hacker usage in American English, we have made some effort to get input from abroad. Though the hacker-speak of other languages often uses translations of jargon from English (often as transmitted to them by earlier Jargon File versions!), the local variations are interesting, and knowledge of them may be of some use to travelling hackers. There are some references herein to `Commonwealth hackish'. These are intended to describe some variations in hacker usage as reported in the English spoken in Great Britain and the Commonwealth (Canada, Australia, India, etc. -- though Canada is heavily influenced by American usage). There is also an entry on Commonwealth Hackish reporting some general phonetic and vocabulary differences from U.S. hackish. Hackers in Western Europe and (especially) Scandinavia report that they often use a mixture of English and their native languages for technical conversation. Occasionally they develop idioms in their English usage that are influenced by their native-language styles. Some of these are reported here. On the other hand, English often gives rise to grammatical and vocabulary mutations in the native language. For example, Italian hackers often use the nonexistent verbs `scrollare' (to scroll) and `deletare' (to delete) rather than native Italian `scorrere' and `cancellare'. Similarly, the English verb `to hack' has been seen conjugated in Swedish. In German, many Unix terms in English are casually declined as if they were German verbs - thus: mount/mounten/gemountet; grep/grepen/gegrept; fork/forken/geforkt; core dump/core-dumpen, core-gedumpt. And Spanish-speaking hackers use `linkar' (to link), `debugear' (to debug), and `lockear' (to lock). European hackers report that this happens partly because the English terms make finer distinctions than are available in their native vocabularies, and partly because deliberate language-crossing makes for amusing wordplay. A few notes on hackish usages in Russian have been added where they are parallel with English idioms and thus comprehensible to English-speakers. Crackers, Phreaks, and Lamers From the early 1980s onward, a flourishing culture of local, MS-DOS-based bulletin boards developed separately from Internet hackerdom. The BBS culture has, as its seamy underside, a stratum of `pirate boards' inhabited by crackers, phone phreaks, and warez d00dz. These people (mostly teenagers running IBM-PC clones from their bedrooms) have developed their own characteristic jargon, heavily influenced by skateboard lingo and underground-rock slang. Though crackers often call themselves `hackers', they aren't (they typically have neither significant programming ability, nor Internet expertise, nor experience with UNIX or other true multi-user systems). Their vocabulary has little overlap with hackerdom's. Nevertheless, this lexicon covers much of it so the reader will be able to understand what goes by on bulletin-board systems. Here is a brief guide to cracker and warez d00dz usage: Misspell frequently. The substitutions phone => fone freak => phreak are obligatory. Always substitute `z's for `s's. (i.e. "codes" -> "codez"). The substitution of 'z' for 's' has evolved so that a 'z' is bow systematically put at the end of words to denote an illegal or cracking connection. Examples : Appz, passwordz, passez, utilz, MP3z, distroz, pornz, sitez, gamez, crackz, serialz, downloadz, FTPz, etc. Type random emphasis characters after a post line (i.e. "Hey Dudes!#!$#$!#!$"). Use the emphatic `k' prefix ("k-kool", "k-rad", "k-awesome") frequently. Abbreviate compulsively ("I got lotsa warez w/ docs"). Substitute `0' for `o' ("r0dent", "l0zer"). TYPE ALL IN CAPS LOCK, SO IT LOOKS LIKE YOU'RE YELLING ALL THE TIME. These traits are similar to those of B1FF, who originated as a parody of naive BBS users; also of his latter-day equivalent Jeff K.. Occasionally, this sort of distortion may be used as heavy sarcasm by a real hacker, as in: > I got X Windows running under Linux! d00d! u R an 31337 hax0r The only practice resembling this in actual hacker usage is the substitution of a dollar sign of `s' in names of products or service felt to be excessively expensive, e.g. Compu$erve, Micro$oft. For further discussion of the pirate-board subculture, see lamer, elite, leech, poser, cracker, and especially warez d00dz, banner site, ratio site, leech mode. How to Use the Lexicon Pronunciation Guide Pronunciation keys are provided in the jargon listings for all entries that are neither dictionary words pronounced as in standard English nor obvious compounds thereof. Slashes bracket phonetic pronunciations, which are to be interpreted using the following conventions: Syllables are hyphen-separated, except that an accent or back-accent follows each accented syllable (the back-accent marks a secondary accent in some words of four or more syllables). If no accent is given, the word is pronounced with equal accentuation on all syllables (this is common for abbreviations). Consonants are pronounced as in American English. The letter `g' is always hard (as in "got" rather than "giant"); `ch' is soft ("church" rather than "chemist"). The letter `j' is the sound that occurs twice in "judge". The letter `s' is always as in "pass", never a z sound. The digraph `kh' is the guttural of "loch" or "l'chaim". The digraph 'gh' is the aspirated g+h of "bughouse" or "ragheap" (rare in English). Uppercase letters are pronounced as their English letter names; thus (for example) /H-L-L/ is equivalent to /aych el el/. /Z/ may be pronounced /zee/ or /zed/ depending on your local dialect. Vowels are represented as follows: /a/ back, that /ah/ father, palm (see note) /ar/ far, mark /aw/ flaw, caught /ay/ bake, rain /e/ less, men /ee/ easy, ski /eir/ their, software /i/ trip, hit /i:/ life, sky /o/ block, stock (see note) /oh/ flow, sew /oo/ loot, through /or/ more, door /ow/ out, how /oy/ boy, coin /uh/ but, some /u/ put, foot /y/ yet, young /yoo/ few, chew /[y]oo/ /oo/ with optional fronting as in `news' (/nooz/ or /nyooz/) The glyph /*/ is used for the `schwa' sound of unstressed or occluded vowels (the one that is often written with an upside-down `e'). The schwa vowel is omitted in syllables containing vocalic r, l, m or n; that is, `kitten' and `color' would be rendered /kit'n/ and /kuhl'r/, not /kit'*n/ and /kuhl'*r/. Note that the above table reflects mainly distinctions found in standard American English (that is, the neutral dialect spoken by TV network announcers and typical of educated speech in the Upper Midwest, Chicago, Minneapolis/St. Paul and Philadelphia). However, we separate /o/ from /ah/, which tend to merge in standard American. This may help readers accustomed to accents resembling British Received Pronunciation. The intent of this scheme is to permit as many readers as possible to map the pronunciations into their local dialect by ignoring some subset of the distinctions we make. Speakers of British RP, for example, can smash terminal /r/ and all unstressed vowels. Speakers of many varieties of southern American will automatically map /o/ to /aw/; and so forth. (Standard American makes a good reference dialect for this purpose because it has crisp consonants and more vowel distinctions than other major dialects, and tends to retain distinctions between unstressed vowels. It also happens to be what your editor speaks.) Entries with a pronunciation of `//' are written-only usages. (No, Unix weenies, this does not mean `pronounce like previous pronunciation'!) Other Lexicon Conventions Entries are sorted in case-blind ASCII collation order (rather than the letter-by-letter order ignoring interword spacing common in mainstream dictionaries), except that all entries beginning with nonalphabetic characters are sorted after Z. The case-blindness is a feature, not a bug. The beginning of each entry is marked by a colon (:) at the left margin. This convention helps out tools like hypertext browsers that benefit from knowing where entry boundaries are, but aren't as context-sensitive as humans. In pure ASCII renderings of the Jargon File, you will see {} used to bracket words which themselves have entries in the File. This isn't done all the time for every such word, but it is done everywhere that a reminder seems useful that the term has a jargon meaning and one might wish to refer to its entry. In this all-ASCII version, headwords for topic entries are distinguished from those for ordinary entries by being followed by "::" rather than ":"; similarly, references are surrounded by "{{" and "}}" rather than "{" and "}". Defining instances of terms and phrases appear in `slanted type'. A defining instance is one which occurs near to or as part of an explanation of it. Prefixed ** is used as linguists do; to mark examples of incorrect usage. We follow the `logical' quoting convention described in the Writing Style section above. In addition, we reserve double quotes for actual excerpts of text or (sometimes invented) speech. Scare quotes (which mark a word being used in a nonstandard way), and philosopher's quotes (which turn an utterance into the string of letters or words that name it) are both rendered with single quotes. References such as malloc(3) and patch(1) are to Unix facilities (some of which, such as patch(1), are actually freeware distributed over Usenet). The Unix manuals use foo(n) to refer to item foo in section (n) of the manual, where n=1 is utilities, n=2 is system calls, n=3 is C library routines, n=6 is games, and n=8 (where present) is system administration utilities. Sections 4, 5, and 7 of the manuals have changed roles frequently and in any case are not referred to in any of the entries. Various abbreviations used frequently in the lexicon are summarized here: _abbrev._ abbreviation _adj._ adjective _adv._ adverb _alt._ alternate _cav._ caveat _conj._ conjunction _esp._ especially _excl._ exclamation _imp._ imperative _interj._ interjection _n._ noun _obs._ obsolete _pl._ plural _poss._ possibly _pref._ prefix _prob._ probably _prov._ proverbial _quant._ quantifier _suff._ suffix _syn._ synonym (or synonymous with) _v._ verb (may be transitive or intransitive) _var._ variant _vi._ intransitive verb _vt._ transitive verb Where alternate spellings or pronunciations are given, _alt._ separates two possibilities with nearly equal distribution, while _var._ prefixes one that is markedly less common than the primary. Where a term can be attributed to a particular subculture or is known to have originated there, we have tried to so indicate. Here is a list of abbreviations used in etymologies: Amateur Packet Radio A technical culture of ham-radio sites using AX.25 and TCP/IP for wide-area networking and BBS systems. Berkeley University of California at Berkeley BBN Bolt, Beranek & Newman Cambridge the university in England (not the city in Massachusetts where MIT happens to be located!) CMU Carnegie-Mellon University Commodore Commodore Business Machines DEC The Digital Equipment Corporation (now Compaq). Fairchild The Fairchild Instruments Palo Alto development group FidoNet See the FidoNet entry IBM International Business Machines MIT Massachusetts Institute of Technology; esp. the legendary MIT AI Lab culture of roughly 1971 to 1983 and its feeder groups, including the Tech Model Railroad Club NRL Naval Research Laboratories NYU New York University OED The Oxford English Dictionary Purdue Purdue University SAIL Stanford Artificial Intelligence Laboratory (at Stanford University) SI From _Système International_, the name for the standard conventions of metric nomenclature used in the sciences Stanford Stanford University Sun Sun Microsystems TMRC Some MITisms go back as far as the Tech Model Railroad Club (TMRC) at MIT c. 1960. Material marked TMRC is from "An Abridged Dictionary of the TMRC Language", originally compiled by Pete Samson in 1959 UCLA University of California at Los Angeles UK the United Kingdom (England, Wales, Scotland, Northern Ireland) Usenet See the Usenet entry WPI Worcester Polytechnic Institute, site of a very active community of PDP-10 hackers during the 1970s WWW The World-Wide-Web. XEROX PARC XEROX's Palo Alto Research Center, site of much pioneering research in user interface design and networking Yale Yale University Some other etymology abbreviations such as Unix and PDP-10 refer to technical cultures surrounding specific operating systems, processors, or other environments. The fact that a term is labelled with any one of these abbreviations does not necessarily mean its use is confined to that culture. In particular, many terms labelled `MIT' and `Stanford' are in quite general use. We have tried to give some indication of the distribution of speakers in the usage notes; however, a number of factors mentioned in the introduction conspire to make these indications less definite than might be desirable. A few new definitions attached to entries are marked [proposed]. These are usually generalizations suggested by editors or Usenet respondents in the process of commenting on previous definitions of those entries. These are not represented as established jargon. Format For New Entries You can mail submissions for the Jargon File to jargon@snark.thyrsus.com. We welcome new jargon, and corrections to or amplifications of existing entries. You can improve your submission's chances of being included by adding background information on user population and years of currency. References to actual usage via URLs and/or DejaNews pointers are particularly welcomed. All contributions and suggestions about the Jargon File will be considered donations to be placed in the public domain as part of this File, and may be used in subsequent paper editions. Submissions may be edited for accuracy, clarity and concision. We are looking to expand the File's range of technical specialties covered. There are doubtless rich veins of jargon yet untapped in the scientific computing, graphics, and networking hacker communities; also in numerical analysis, computer architectures and VLSI design, language design, and many other related fields. Send us your jargon! We are not interested in straight technical terms explained by textbooks or technical dictionaries unless an entry illuminates `underground' meanings or aspects not covered by official histories. We are also not interested in `joke' entries -- there is a lot of humor in the file but it must flow naturally out of the explanations of what hackers do and how they think. It is OK to submit items of jargon you have originated if they have spread to the point of being used by people who are not personally acquainted with you. We prefer items to be attested by independent submission from two different sites. An HTML version of the File is available at http://www.tuxedo.org/jargon. Please send us URLs for materials related to the entries, so we can enrich the File's link structure. The Jargon File will be regularly maintained and made available for browsing on the World Wide Web, and will include a version number. Read it, pass it around, contribute -- this is your monument! The Jargon Lexicon = 0 =: = A =: = B =: = C =: = D =: = E =: = F =: = G =: = H =: = I =: = J =: = K =: = L =: = M =: = N =: = O =: = P =: = Q =: = R =: = S =: = T =: = U =: = V =: = W =: = X =: = Y =: = Z =: = 0 = 0: 1TBS: 120 reset: 2: 404: 404 compliant: 4.2: @-party: 0 Numeric zero, as opposed to the letter `O' (the 15th letter of the English alphabet). In their unmodified forms they look a lot alike, and various kluges invented to make them visually distinct have compounded the confusion. If your zero is center-dotted and letter-O is not, or if letter-O looks almost rectangular but zero looks more like an American football stood on end (or the reverse), you're probably looking at a modern character display (though the dotted zero seems to have originated as an option on IBM 3270 controllers). If your zero is slashed but letter-O is not, you're probably looking at an old-style ASCII graphic set descended from the default typewheel on the venerable ASR-33 Teletype (Scandinavians, for whom Ø is a letter, curse this arrangement). (Interestingly, the slashed zero long predates computers; Florian Cajori's monumental "A History of Mathematical Notations" notes that it was used in the twelfth and thirteenth centuries.) If letter-O has a slash across it and the zero does not, your display is tuned for a very old convention used at IBM and a few other early mainframe makers (Scandinavians curse this arrangement even more, because it means two of their letters collide). Some Burroughs/Unisys equipment displays a zero with a reversed slash. Old CDC computers rendered letter O as an unbroken oval and 0 as an oval broken at upper right and lower left. And yet another convention common on early line printers left zero unornamented but added a tail or hook to the letter-O so that it resembled an inverted Q or cursive capital letter-O (this was endorsed by a draft ANSI standard for how to draw ASCII characters, but the final standard changed the distinguisher to a tick-mark in the upper-left corner). Are we sufficiently confused yet? 1TBS // n. The "One True Brace Style"; see indent style. 120 reset /wuhn-twen'tee ree'set/ n. [from 120 volts, U.S. wall voltage] To cycle power on a machine in order to reset or unjam it. Compare Big Red Switch, power cycle. 2 infix. In translation software written by hackers, infix 2 often represents the syllable to with the connotation `translate to': as in dvi2ps (DVI to PostScript), int2string (integer to string), and texi2roff (Texinfo to [nt]roff). Several versions of a joke have floated around the internet in which some idiot programmer fixes the Y2K bug by changing all the Y's in something to K's, as in Januark, Februark, etc. 404 // n. [from the HTTP error "file not found on server"] Extended to humans to convey that the subject has no idea or no clue - sapience not found. May be used reflexively; "Uh, I'm 404ing" means "I'm drawing a blank". 404 compliant adj. The status of a website which has been completely removed, usually by the administrators of the hosting site as a result of net abuse by the website operators. The term is a tongue-in-cheek reference to the standard "301 compliant" Murkowski Bill disclaimer used by spammers. See also: spam, spamvertize. 4.2 /for' poynt too'/ n. Without a prefix, this almost invariably refers to BSD Unix release 4.2. Note that it is an indication of cluelessness to say "version 4.2", and "release 4.2" is rare; the number stands on its own, or is used in the more explicit forms 4.2BSD or (less commonly) BSD 4.2. Similar remarks apply to "4.3", "4.4" and to earlier, less-widespread releases 4.1 and 2.9. @-party /at'par`tee/ n. [from the @-sign in an Internet address] (alt. `@-sign party' /at'si:n par`tee/) A semi-closed party thrown for hackers at a science-fiction convention (esp. the annual World Science Fiction Convention or "Worldcon"); one must have a network address to get in, or at least be in company with someone who does. One of the most reliable opportunities for hackers to meet face to face with people who might otherwise be represented by mere phosphor dots on their screens. Compare boink. The first recorded @-party was held at the Westercon (a U.S. western regional SF convention) over the July 4th weekend in 1980. It is not clear exactly when the canonical @-party venue shifted to the Worldcon but it had certainly become established by Constellation in 1983. Sadly, the @-party tradition has been in decline since about 1996, mainly because having an @-address no longer functions as an effective lodge pin. = A = abbrev: ABEND: accumulator: ACK: Acme: acolyte: ad-hockery: Ada: address harvester: adger: admin: ADVENT: AFAIK: AFJ: AFK: AI: AI-complete: AI koans: AIDS: AIDX: airplane rule: Alderson loop: aliasing bug: Alice and Bob: all-elbows: alpha geek: alpha particles: alt: alt bit: Aluminum Book: ambimouseterous: Amiga: Amiga Persecution Complex: amoeba: amp off: amper: Angband: angle brackets: angry fruit salad: annoybot: annoyware: ANSI: ANSI standard: ANSI standard pizza: AOL!: app: arena: arg: ARMM: armor-plated: asbestos: asbestos cork award: asbestos longjohns: ASCII: ASCII art: ASCIIbetical order: astroturfing: atomic: attoparsec: AUP: autobogotiphobia: automagically: avatar: awk: A = abbrev /*-breev'/, /*-brev'/ n. Common abbreviation for `abbreviation'. = ABEND /a'bend/, /*-bend'/ n. [ABnormal END] 1. Abnormal termination (of software); crash; lossage. Derives from an error message on the IBM 360; used jokingly by hackers but seriously mainly by code grinders. Usually capitalized, but may appear as `abend'. Hackers will try to persuade you that ABEND is called `abend' because it is what system operators do to the machine late on Friday when they want to call it a day, and hence is from the German `Abend' = `Evening'. 2. [_alt.callahans_] Absent By Enforced Net Deprivation - used in the subject lines of postings warning friends of an imminent loss of Internet access. (This can be because of computer downtime, loss of provider, moving or illness.) Variants of this also appear: ABVND = `Absent By Voluntary Net Deprivation' and ABSEND = `Absent By Self-Enforced Net Deprivation' have been sighted. = accumulator n. obs. 1. Archaic term for a register. On-line use of it as a synonym for `register' is a fairly reliable indication that the user has been around for quite a while and/or that the architecture under discussion is quite old. The term in full is almost never used of microprocessor registers, for example, though symbolic names for arithmetic registers beginning in `A' derive from historical use of the term `accumulator' (and not, actually, from `arithmetic'). Confusingly, though, an `A' register name prefix may also stand for `address', as for example on the Motorola 680x0 family. 2. A register being used for arithmetic or logic (as opposed to addressing or a loop index), especially one being used to accumulate a sum or count of many items. This use is in context of a particular routine or stretch of code. "The FOOBAZ routine uses A3 as an accumulator." 3. One's in-basket (esp. among old-timers who might use sense 1). "You want this reviewed? Sure, just put it in the accumulator." (See stack.) ACK /ak/ interj. 1. [common; from the ASCII mnemonic for 0000110] Acknowledge. Used to register one's presence (compare mainstream Yo!). An appropriate response to ping or ENQ. 2. [from the comic strip "Bloom County"] An exclamation of surprised disgust, esp. in "Ack pffft!" Semi-humorous. Generally this sense is not spelled in caps (ACK) and is distinguished by a following exclamation point. 3. Used to politely interrupt someone to tell them you understand their point (see NAK). Thus, for example, you might cut off an overly long explanation with "Ack. Ack. Ack. I get it now". 4. An affirmative. "Think we ought to ditch that damn NT server for a Linux box?" "ACK!" There is also a usage "ACK?" (from sense 1) meaning "Are you there?", often used in email when earlier mail has produced no reply, or during a lull in talk mode to see if the person has gone away (the standard humorous response is of course NAK (sense 1), i.e., "I'm not here"). Acme n. The canonical supplier of bizarre, elaborate, and non-functional gadgetry - where Rube Goldberg and Heath Robinson (two cartoonists who specialized in elaborate contraptions) shop. The name has been humorously expanded as A (or American) Company Making Everything. (In fact, Acme was a real brand sold from Sears Roebuck catalogs in the early 1900s.) Describing some X as an "Acme X" either means "This is insanely great", or, more likely, "This looks insanely great on paper, but in practice it's really easy to shoot yourself in the foot with it." Compare pistol. This term, specially cherished by American hackers and explained here for the benefit of our overseas brethren, comes from the Warner Brothers' series of "Roadrunner" cartoons. In these cartoons, the famished Wile E. Coyote was forever attempting to catch up with, trap, and eat the Roadrunner. His attempts usually involved one or more high-technology Rube Goldberg devices - rocket jetpacks, catapults, magnetic traps, high-powered slingshots, etc. These were usually delivered in large cardboard boxes, labeled prominently with the Acme name. These devices invariably malfunctioned in improbable and violent ways. acolyte n. obs. [TMRC] An OSU privileged enough to submit data and programs to a member of the priesthood. = ad-hockery /ad-hok'*r-ee/ n. [Purdue] 1. Gratuitous assumptions made inside certain programs, esp. expert systems, which lead to the appearance of semi-intelligent behavior but are in fact entirely arbitrary. For example, fuzzy-matching of input tokens that might be typing errors against a symbol table can make it look as though a program knows how to spell. 2. Special-case code to cope with some awkward input that would otherwise cause a program to choke, presuming normal inputs are dealt with in some cleaner and more regular way. Also called `ad-hackery', `ad-hocity' (/ad-hos'*-tee/), `ad-crockery'. See also ELIZA effect. Ada n. A Pascal-descended language that was at one time made mandatory for Department of Defense software projects by the Pentagon. Hackers are nearly unanimous in observing that, technically, it is precisely what one might expect given that kind of endorsement by fiat; designed by committee, crockish, difficult to use, and overall a disastrous, multi-billion-dollar boondoggle (one common description wss "The PL/I of the 1980s"). Hackers find Ada's exception-handling and inter-process communication features particularly hilarious. Ada Lovelace (the daughter of Lord Byron who became the world's first programmer while cooperating with Charles Babbage on the design of his mechanical computing engines in the mid-1800s) would almost certainly blanch at the use to which her name has latterly been put; the kindest thing that has been said about it is that there is probably a good small language screaming to get out from inside its vast, elephantine bulk. = address harvester n. A robot that searches web pages and/or filters netnews traffic looking for valid email addresses. Some address harvesters are benign, used only for compiling address directories. Most, unfortunately, are run by miscreants compiling address lists to spam. Address harvesters can be foiled by a teergrube. adger /aj'r/ vt. [UCLA mutant of nadger, poss. also from the middle name of an infamous tenured graduate student] To make a bonehead move with consequences that could have been foreseen with even slight mental effort. E.g., "He started removing files and promptly adgered the whole project". Compare dumbass attack. = admin /ad-min'/ n. Short for `administrator'; very commonly used in speech or on-line to refer to the systems person in charge on a computer. Common constructions on this include `sysadmin' and `site admin' (emphasizing the administrator's role as a site contact for email and news) or `newsadmin' (focusing specifically on news). Compare postmaster, sysop, system mangler. = ADVENT /ad'vent/ n. The prototypical computer adventure game, first designed by Will Crowther on the PDP-10 in the mid-1970s as an attempt at computer-refereed fantasy gaming, and expanded into a puzzle-oriented game by Don Woods at Stanford in 1976. (Woods had been one of the authors of INTERCAL.) Now better known as Adventure or Colossal Cave Adventure, but the TOPS-10 operating system permitted only six-letter filenames. See also vadding, Zork, and Infocom. This game defined the terse, dryly humorous style since expected in text adventure games, and popularized several tag lines that have become fixtures of hacker-speak: "A huge green fierce snake bars the way!" "I see no X here" (for some noun X). "You are in a maze of twisty little passages, all alike." "You are in a little maze of twisty passages, all different." The `magic words' xyzzy and plugh also derive from this game. Crowther, by the way, participated in the exploration of the Mammoth & Flint Ridge cave system; it actually has a `Colossal Cave' and a `Bedquilt' as in the game, and the `Y2' that also turns up is cavers' jargon for a map reference to a secondary entrance. ADVENT sources are available for FTP at ftp://ftp.wustl.edu/doc/misc/if-archive/games/source/advent.tar.Z. = AFAIK // n. [Usenet] Abbrev. for "As Far As I Know". = AFJ // n. Written-only abbreviation for "April Fool's Joke". Elaborate April Fool's hoaxes are a long-established tradition on Usenet and Internet; see kremvax for an example. In fact, April Fool's Day is the only seasonal holiday consistently marked by customary observances on Internet and other hacker networks. AFK [MUD] Abbrev. for "Away From Keyboard". Used to notify others that you will be momentarily unavailable online. eg. "Let's not go kill that frost giant yet, I need to go AFK to make a phone call". Often MUDs will have a command to politely inform others of your absence when they try to talk with you. The term is not restricted to MUDs, however, and has become common in many chat situations, from IRC to Unix talk. AI /A-I/ n. Abbreviation for `Artificial Intelligence', so common that the full form is almost never written or spoken among hackers. AI-complete /A-I k*m-pleet'/ adj. [MIT, Stanford: by analogy with `NP-complete' (see NP-)] Used to describe problems or subproblems in AI, to indicate that the solution presupposes a solution to the `strong AI problem' (that is, the synthesis of a human-level intelligence). A problem that is AI-complete is, in other words, just too hard. Examples of AI-complete problems are `The Vision Problem' (building a system that can see as well as a human) and `The Natural Language Problem' (building a system that can understand and speak a natural language as well as a human). These may appear to be modular, but all attempts so far (1999) to solve them have foundered on the amount of context information and `intelligence' they seem to require. See also gedanken. AI koans /A-I koh'anz/ pl.n. A series of pastiches of Zen teaching riddles created by Danny Hillis at the MIT AI Lab around various major figures of the Lab's culture (several are included under Some AI Koans in Appendix A). See also ha ha only serious, mu, and hacker humor. AIDS /aydz/ n. Short for A* Infected Disk Syndrome (`A*' is a glob pattern that matches, but is not limited to, Apple or Amiga), this condition is quite often the result of practicing unsafe SEX. See virus, worm, Trojan horse, virgin. = AIDX /ayd'k*z/ n. Derogatory term for IBM's perverted version of Unix, AIX, especially for the AIX 3.? used in the IBM RS/6000 series (some hackers think it is funnier just to pronounce "AIX" as "aches"). A victim of the dreaded "hybridism" disease, this attempt to combine the two main currents of the Unix stream (BSD and USG Unix) became a monstrosity to haunt system administrators' dreams. For example, if new accounts are created while many users are logged on, the load average jumps quickly over 20 due to silly implementation of the user databases. For a quite similar disease, compare HP-SUX. Also, compare Macintrash, Nominal Semidestructor, ScumOS, sun-stools. airplane rule n. "Complexity increases the possibility of failure; a twin-engine airplane has twice as many engine problems as a single-engine airplane." By analogy, in both software and electronics, the rule that simplicity increases robustness. It is correspondingly argued that the right way to build reliable systems is to put all your eggs in one basket, after making sure that you've built a really good basket. See also KISS Principle, elegant. Alderson loop n. [Intel] A special version of an infinite loop where there is an exit condition available, but inaccessible in the current implementation of the code. Typically this is created while debugging user interface code. An example would be when there is a menu stating, "Select 1-3 or 9 to quit" and 9 is not allowed by the function that takes the selection from the user. This term received its name from a programmer who had coded a modal message box in MSAccess with no Ok or Cancel buttons, thereby disabling the entire program whenever the box came up. The message box had the proper code for dismissal and even was set up so that when the non-existent Ok button was pressed the proper code would be called. aliasing bug n. A class of subtle programming errors that can arise in code that does dynamic allocation, esp. via malloc(3) or equivalent. If several pointers address (`aliases for') a given hunk of storage, it may happen that the storage is freed or reallocated (and thus moved) through one alias and then referenced through another, which may lead to subtle (and possibly intermittent) lossage depending on the state and the allocation history of the malloc arena. Avoidable by use of allocation strategies that never alias allocated core, or by use of higher-level languages, such as LISP, which employ a garbage collector (see GC). Also called a stale pointer bug. See also precedence lossage, smash the stack, fandango on core, memory leak, memory smash, overrun screw, spam. Historical note: Though this term is nowadays associated with C programming, it was already in use in a very similar sense in the Algol-60 and FORTRAN communities in the 1960s. Alice and Bob n. The archetypal individuals used as examples in discussions of cryptographic protocols. Originally, theorists would say something like: "A communicates with someone who claims to be B, So to be sure, A tests that B knows a secret number K. So A sends to B a random number X. B then forms Y by encrypting X under key K and sends Y back to A" Because this sort of thing is is quite hard to follow, theorists stopped using the unadorned letters A and B to represent the main players and started calling them Alice and Bob. So now we say "Alice communicates with someone claiming to be Bob, and to be sure, So Alice tests that Bob knows a secret number K. Alice sends to Bob a random number X. Bob then forms Y by encrypting X under key K and sends Y back to Alice". A whole mythology rapidly grew up around the metasyntactic names; see http://www.conceptlabs.co.uk/alicebob.html. In Bruce Schneier's definitive introductory text "Applied Cryptography" (2nd ed., 1996, John Wiley & Sons, ISBN 0-471-11709-9) he introduces a table of dramatis personae headed by Alice and Bob. Others include Carol (a participant in three- and four-party protocols), Dave (a participant in four-party protocols), Eve (an eavesdropper), Mallory (a malicious active attacker), Trent (a trusted arbitrator), Walter (a warden), Peggy (a prover) and Victor (a verifier). These names for roles are either already standard or, given the wide popularity of the book, may be expected to quickly become so. all-elbows adj. [MS-DOS] Of a TSR (terminate-and-stay-resident) IBM PC program, such as the N pop-up calendar and calculator utilities that circulate on BBS systems: unsociable. Used to describe a program that rudely steals the resources that it needs without considering that other TSRs may also be resident. One particularly common form of rudeness is lock-up due to programs fighting over the keyboard interrupt. See rude, also mess-dos. alpha geek n. [from animal ethologists' `alpha male'] The most technically accomplished or skillful person in some implied context. "Ask Larry, he's the alpha geek here." alpha particles n. See bit rot. alt /awlt/ 1. n. The alt shift key on an IBM PC or clone keyboard; see bucky bits, sense 2 (though typical PC usage does not simply set the 0200 bit). 2. n. The `option' key on a Macintosh; use of this term usually reveals that the speaker hacked PCs before coming to the Mac (see also feature key, which is sometimes incorrectly called `alt'). 3. n.,obs. [PDP-10; often capitalized to ALT] Alternate name for the ASCII ESC character (ASCII 0011011), after the keycap labeling on some older terminals; also `altmode' (/awlt'mohd/). This character was almost never pronounced `escape' on an ITS system, in TECO, or under TOPS-10 -- always alt, as in "Type alt alt to end a TECO command" or "alt-U onto the system" (for "log onto the [ITS] system"). This usage probably arose because alt is more convenient to say than `escape', especially when followed by another alt or a character (or another alt and a character, for that matter). 4. The _alt_ hierarchy on Usenet, the tree of newsgroups created by users without a formal vote and approval procedure. There is a myth, not entirely implausible, that _alt_ is acronymic for "anarchists, lunatics, and terrorists"; but in fact it is simply short for "alternative". = alt bit /awlt bit/ [from alternate] adj. See meta bit. Aluminum Book n. [MIT] "Common LISP: The Language", by Guy L. Steele Jr. (Digital Press, first edition 1984, second edition 1990). Note that due to a technical screwup some printings of the second edition are actually of a color the author describes succinctly as "yucky green". See also book titles. ambimouseterous /am-b*-mows'ter-us/ or /am-b*-mows'trus/ adj. [modeled on _ambidextrous_] Able to use a mouse with either hand. Amiga n A series of personal computer models originally sold by Commodore, based on 680x0 processors, custom support chips and an operating system that combined some of the best features of Macintosh and Unix with compatibility with neither. The Amiga was released just as the personal computing world standardized on IBM-PC clones. This prevented it from gaining serious market share, despite the fact that the first Amigas had a substantial technological lead on the IBM XTs of the time. Instead, it acquired a small but zealous population of enthusiastic hackers who dreamt of one day unseating the clones (see Amiga Persecution Complex). The traits of this culture are both spoofed and illuminated in The BLAZE Humor Viewer. The strength of the Amiga platform seeded a small industry of companies building software and hardware for the platform, especially in graphics and video applications (see video toaster). Due to spectacular mismanagement, Commodore did hardly any R&D, allowing the competition to close Amiga's technological lead. After Commodore went bankrupt in 1994 the technology passed through several hands, none of whom did much with it. However, the Amiga is still being produced in Europe under license and has a substantial number of fans, which will probably extend the platform's life considerably. Amiga Persecution Complex n. The disorder suffered by a particularly egregious variety of bigot, those who believe that the marginality of their preferred machine is the result of some kind of industry-wide conspiracy (for without a conspiracy of some kind, the eminent superiority of their beloved shining jewel of a platform would obviously win over all, market pressures be damned!) Those afflicted are prone to engaging in flame wars and calling for boycotts and mailbombings. Amiga Persecution Complex is by no means limited to Amiga users; NeXT, NeWS, OS/2, Macintosh, LISP, and GNU users are also common victims. Linux users used to display symptoms very frequently before Linux started winning; some still do. See also newbie, troll, holy wars, weenie, Get a life!. amoeba n. Humorous term for the Commodore Amiga personal computer. = amp off vt. [Purdue] To run in background. From the Unix shell `&' operator. A = amper n. Common abbreviation for the name of the ampersand (`&', ASCII 0100110) character. See ASCII for other synonyms. Angband n. /ang'band/ Like nethack, moria, and rogue, one of the large freely distributed Dungeons-and-Dragons-like simulation games, available for a wide range of machines and operating systems. The name is from Tolkien's Pits of Angband (compare elder days, elvish). Has been described as "Moria on steroids"; but, unlike Moria, many aspects of the game are customizable. This leads many hackers and would-be hackers into fooling with these instead of doing productive work. There are many Angband variants, of which the most notorious is probably the rather whimsical Zangband. In this game, when a key that does not correspond to a command is pressed, the game will display "Type ? for help" 50% of the time. The other 50% of the time, random error messages including "An error has occurred because an error of type 42 has occurred" and "Windows 95 uninstalled successfully" will be displayed. Zangband also allows the player to kill Santa Claus (who has some really good stuff, but also has a lot of friends), "Bull Gates", and Barney the Dinosaur (but be watchful; Barney has a nasty case of halitosis). There is an official angband home page at http://www.phial.com/angband and a zangband one at http://thangorodrim.angband.org. See also Random Number God. angle brackets n. Either of the characters < (ASCII 0111100) and > (ASCII 0111110) (ASCII less-than or greater-than signs). Typographers in the Real World use angle brackets which are either taller and slimmer (the ISO `Bra' and `Ket' characters), or significantly smaller (single or double guillemets) than the less-than and greater-than signs. See broket, ASCII. angry fruit salad n. A bad visual-interface design that uses too many colors. (This term derives, of course, from the bizarre day-glo colors found in canned fruit salad.) Too often one sees similar effects from interface designers using color window systems such as X; there is a tendency to create displays that are flashy and attention-getting but uncomfortable for long-term use. annoybot /*-noy-bot/ n. [IRC] See bot. A = annoyware n. A type of shareware that frequently disrupts normal program operation to display requests for payment to the author in return for the ability to disable the request messages. (Also called `nagware') The requests generally require user action to acknowledge the message before normal operation is resumed and are often tied to the most frequently used features of the software. See also careware, charityware, crippleware, freeware, FRS, guiltware, postcardware, and -ware; compare payware. ANSI /an'see/ 1. n. [techspeak] The American National Standards Institute. ANSI, along with the International Organization for Standards (ISO), standardized the C programming language (see K&R, Classic C), and promulgates many other important software standards. 2. n. [techspeak] A terminal may be said to be `ANSI' if it meets the ANSI X.364 standard for terminal control. Unfortunately, this standard was both over-complicated and too permissive. It has been retired and replaced by the ECMA-48 standard, which shares both flaws. 3. n. [BBS jargon] The set of screen-painting codes that most MS-DOS and Amiga computers accept. This comes from the ANSI.SYS device driver that must be loaded on an MS-DOS computer to view such codes. Unfortunately, neither DOS ANSI nor the BBS ANSIs derived from it exactly match the ANSI X.364 terminal standard. For example, the ESC-[1m code turns on the bold highlight on large machines, but in IBM PC/MS-DOS ANSI, it turns on `intense' (bright) colors. Also, in BBS-land, the term `ANSI' is often used to imply that a particular computer uses or can emulate the IBM high-half character set from MS-DOS. Particular use depends on context. Occasionally, the vanilla ASCII character set is used with the color codes, but on BBSs, ANSI and `IBM characters' tend to go together. ANSI standard /an'see stan'd*rd/ The ANSI standard usage of `ANSI standard' refers to any practice which is typical or broadly done. It's most appropriately applied to things that everyone does that are not quite regulation. For example: ANSI standard shaking of a laser printer cartridge to get extra life from it, or the ANSI standard word tripling in names of usenet alt groups. ANSI standard pizza /an'see stan'd*rd peet'z*/ [CMU] Pepperoni and mushroom pizza. Coined allegedly because most pizzas ordered by CMU hackers during some period leading up to mid-1990 were of that flavor. See also rotary debugger; compare ISO standard cup of tea. AOL! n. [Usenet] Common synonym for "Me, too!" alluding to the legendary propensity of America Online users to utter contentless "Me, too!" postings. The number of exclamation points following varies from zero to five or so. The pseudo-HTML <AOL>Me, too!</AOL> is also frequently seen. See also September that never ended. app /ap/ n. Short for `application program', as opposed to a systems program. Apps are what systems vendors are forever chasing developers to create for their environments so they can sell more boxes. Hackers tend not to think of the things they themselves run as apps; thus, in hacker parlance the term excludes compilers, program editors, games, and messaging systems, though a user would consider all those to be apps. (Broadly, an app is often a self-contained environment for performing some well-defined task such as `word processing'; hackers tend to prefer more general-purpose tools.) See killer app; oppose tool, operating system. arena n. [common; Unix] The area of memory attached to a process by brk(2) and sbrk(2) and used by malloc(3) as dynamic storage. So named from a malloc: corrupt arena message emitted when some early versions detected an impossible value in the free block list. See overrun screw, aliasing bug, memory leak, memory smash, smash the stack. = arg /arg/ n. Abbreviation for `argument' (to a function), used so often as to have become a new word (like `piano' from `pianoforte'). "The sine function takes 1 arg, but the arc-tangent function can take either 1 or 2 args." Compare param, parm, var. = ARMM n. [acronym, `Automated Retroactive Minimal Moderation'] A Usenet cancelbot created by Dick Depew of Munroe Falls, Ohio. ARMM was intended to automatically cancel posts from anonymous-posting sites. Unfortunately, the robot's recognizer for anonymous postings triggered on its own automatically-generated control messages! Transformed by this stroke of programming ineptitude into a monster of Frankensteinian proportions, it broke loose on the night of March 31, 1993 and proceeded to spam _news.admin.policy_ with a recursive explosion of over 200 messages. ARMM's bug produced a recursive cascade of messages each of which mechanically added text to the ID and Subject and some other headers of its parent. This produced a flood of messages in which each header took up several screens and each message ID and subject line got longer and longer and longer. Reactions varied from amusement to outrage. The pathological messages crashed at least one mail system, and upset people paying line charges for their Usenet feeds. One poster described the ARMM debacle as "instant Usenet history" (also establishing the term despew), and it has since been widely cited as a cautionary example of the havoc the combination of good intentions and incompetence can wreak on a network. Compare Great Worm; sorcerer's apprentice mode. See also software laser, network meltdown. armor-plated n. Syn. for bulletproof. asbestos adj. [common] Used as a modifier to anything intended to protect one from flames; also in other highly flame-suggestive usages. See, for example, asbestos longjohns and asbestos cork award. A = asbestos cork award n. Once, long ago at MIT, there was a flamer so consistently obnoxious that another hacker designed, had made, and distributed posters announcing that said flamer had been nominated for the `asbestos cork award'. (Any reader in doubt as to the intended application of the cork should consult the etymology under flame.) Since then, it is agreed that only a select few have risen to the heights of bombast required to earn this dubious dignity -- but there is no agreement on which few. asbestos longjohns n. Notional garments donned by Usenet posters just before emitting a remark they expect will elicit flamage. This is the most common of the asbestos coinages. Also `asbestos underwear', `asbestos overcoat', etc. ASCII /as'kee/ n. [originally an acronym (American Standard Code for Information Interchange) but now merely conventional] The predominant character set encoding of present-day computers. The standard version uses 7 bits for each character, whereas most earlier codes (including early drafts of of ASCII prior to June 1961) used fewer. This change allowed the inclusion of lowercase letters -- a major win -- but it did not provide for accented letters or any other letterforms not used in English (such as the German sharp-S or the ae-ligature which is a letter in, for example, Norwegian). It could be worse, though. It could be much worse. See EBCDIC to understand how. A history of ASCII and its ancestors is at http://www.wps.com/texts/codes/index.html. Computers are much pickier and less flexible about spelling than humans; thus, hackers need to be very precise when talking about characters, and have developed a considerable amount of verbal shorthand for them. Every character has one or more names -- some formal, some concise, some silly. Common jargon names for ASCII characters are collected here. See also individual entries for bang, excl, open, ques, semi, shriek, splat, twiddle, and Yu-Shiang Whole Fish. This list derives from revision 2.3 of the Usenet ASCII pronunciation guide. Single characters are listed in ASCII order; character pairs are sorted in by first member. For each character, common names are given in rough order of popularity, followed by names that are reported but rarely seen; official ANSI/CCITT names are surrounded by brokets: <>. Square brackets mark the particularly silly names introduced by INTERCAL. The abbreviations "l/r" and "o/c" stand for left/right and "open/close" respectively. Ordinary parentheticals provide some usage information. ! Common: bang; pling; excl; shriek; ball-bat; <exclamation mark>. Rare: factorial; exclam; smash; cuss; boing; yell; wow; hey; wham; eureka; [spark-spot]; soldier, control. " Common: double quote; quote. Rare: literal mark; double-glitch; <quotation marks>; <dieresis>; dirk; [rabbit-ears]; double prime. # Common: number sign; pound; pound sign; hash; sharp; crunch; hex; [mesh]. Rare: grid; crosshatch; octothorpe; flash; <square>, pig-pen; tictactoe; scratchmark; thud; thump; splat. $ Common: dollar; <dollar sign>. Rare: currency symbol; buck; cash; string (from BASIC); escape (when used as the echo of ASCII ESC); ding; cache; [big money]. % Common: percent; <percent sign>; mod; grapes. Rare: [double-oh-seven]. & Common: <ampersand>; amper; and, and sign. Rare: address (from C); reference (from C++); andpersand; bitand; background (from sh(1)); pretzel; amp. [INTERCAL called this `ampersand'; what could be sillier?] ' Common: single quote; quote; <apostrophe>. Rare: prime; glitch; tick; irk; pop; [spark]; <closing single quotation mark>; <acute accent>. ( ) Common: l/r paren; l/r parenthesis; left/right; open/close; paren/thesis; o/c paren; o/c parenthesis; l/r parenthesis; l/r banana. Rare: so/already; lparen/rparen; <opening/closing parenthesis>; o/c round bracket, l/r round bracket, [wax/wane]; parenthisey/unparenthisey; l/r ear. * Common: star; [splat]; <asterisk>. Rare: wildcard; gear; dingle; mult; spider; aster; times; twinkle; glob (see glob); Nathan Hale. + Common: <plus>; add. Rare: cross; [intersection]. , Common: <comma>. Rare: <cedilla>; [tail]. - Common: dash; <hyphen>; <minus>. Rare: [worm]; option; dak; bithorpe. . Common: dot; point; <period>; <decimal point>. Rare: radix point; full stop; [spot]. / Common: slash; stroke; <slant>; forward slash. Rare: diagonal; solidus; over; slak; virgule; [slat]. : Common: <colon>. Rare: dots; [two-spot]. ; Common: <semicolon>; semi. Rare: weenie; [hybrid], pit-thwong. < > Common: <less/greater than>; bra/ket; l/r angle; l/r angle bracket; l/r broket. Rare: from/{into, towards}; read from/write to; suck/blow; comes-from/gozinta; in/out; crunch/zap (all from UNIX); tic/tac; [angle/right angle]. = Common: <equals>; gets; takes. Rare: quadrathorpe; [half-mesh]. ? Common: query; <question mark>; ques. Rare: whatmark; [what]; wildchar; huh; hook; buttonhook; hunchback. @ Common: at sign; at; strudel. Rare: each; vortex; whorl; [whirlpool]; cyclone; snail; ape; cat; rose; cabbage; <commercial at>. V Rare: [book]. [ ] Common: l/r square bracket; l/r bracket; <opening/closing bracket>; bracket/unbracket. Rare: square/unsquare; [U turn/U turn back]. \ Common: backslash, hack, whack; escape (from C/UNIX); reverse slash; slosh; backslant; backwhack. Rare: bash; <reverse slant>; reversed virgule; [backslat]. ^ Common: hat; control; uparrow; caret; <circumflex>. Rare: xor sign, chevron; [shark (or shark-fin)]; to the (`to the power of'); fang; pointer (in Pascal). _ Common: <underline>; underscore; underbar; under. Rare: score; backarrow; skid; [flatworm]. ` Common: backquote; left quote; left single quote; open quote; <grave accent>; grave. Rare: backprime; [backspark]; unapostrophe; birk; blugle; back tick; back glitch; push; <opening single quotation mark>; quasiquote. { } Common: o/c brace; l/r brace; l/r squiggly; l/r squiggly bracket/brace; l/r curly bracket/brace; <opening/closing brace>. Rare: brace/unbrace; curly/uncurly; leftit/rytit; l/r squirrelly; [embrace/bracelet]. | Common: bar; or; or-bar; v-bar; pipe; vertical bar. Rare: <vertical line>; gozinta; thru; pipesinta (last three from UNIX); [spike]. ~ Common: <tilde>; squiggle; twiddle; not. Rare: approx; wiggle; swung dash; enyay; [sqiggle (sic)]. The pronunciation of # as `pound' is common in the U.S. but a bad idea; Commonwealth Hackish has its own, rather more apposite use of `pound sign' (confusingly, on British keyboards the pound graphic happens to replace #; thus Britishers sometimes call # on a U.S.-ASCII keyboard `pound', compounding the American error). The U.S. usage derives from an old-fashioned commercial practice of using a # suffix to tag pound weights on bills of lading. The character is usually pronounced `hash' outside the U.S. There are more culture wars over the correct pronunciation of this character than any other, which has led to the ha ha only serious suggestion that it be pronounced `shibboleth' (see Judges 12:6 in an Old Testament or Tanakh). The `uparrow' name for circumflex and `leftarrow' name for underline are historical relics from archaic ASCII (the 1963 version), which had these graphics in those character positions rather than the modern punctuation characters. The `swung dash' or `approximation' sign is not quite the same as tilde in typeset material but the ASCII tilde serves for both (compare angle brackets). Some other common usages cause odd overlaps. The #, $, >, and & characters, for example, are all pronounced "hex" in different communities because various assemblers use them as a prefix tag for hexadecimal constants (in particular, # in many assembler-programming cultures, $ in the 6502 world, > at Texas Instruments, and & on the BBC Micro, Sinclair, and some Z80 machines). See also splat. The inability of ASCII text to correctly represent any of the world's other major languages makes the designers' choice of 7 bits look more and more like a serious misfeature as the use of international networks continues to increase (see software rot). Hardware and software from the U.S. still tends to embody the assumption that ASCII is the universal character set and that characters have 7 bits; this is a major irritant to people who want to use a character set suited to their own languages. Perversely, though, efforts to solve this problem by proliferating `national' character sets produce an evolutionary pressure to use a smaller subset common to all those in use. ASCII art n. The fine art of drawing diagrams using the ASCII character set (mainly |, -, /, \, and +). Also known as `character graphics' or `ASCII graphics'; see also boxology. Here is a serious example: o----)||(--+--|<----+ +---------o + D O L )||( | | | C U A I )||( +-->|-+ | +-\/\/-+--o - T C N )||( | | | | P E )||( +-->|-+--)---+--|(--+-o U )||( | | | GND T o----)||(--+--|<----+----------+ A power supply consisting of a full wave rectifier circuit feeding a capacitor input filter circuit And here are some very silly examples: |\/\/\/| ____/| ___ |\_/| ___ | | \ o.O| ACK! / \_ |` '| _/ \ | | =(_)= THPHTH! / \/ \/ \ | (o)(o) U / \ C _) (__) \/\/\/\ _____ /\/\/\/ | ,___| (oo) \/ \/ | / \/-------\ U (__) /____\ || | \ /---V `v'- oo ) / \ ||---W|| * * |--| || |`. |_/\ //-o-\\ ____---=======---____ ====___\ /.. ..\ /___==== Klingons rule OK! // ---\__O__/--- \\ \_\ /_/ There is an important subgenre of ASCII art that puns on the standard character names in the fashion of a rebus. +--------------------------------------------------------+ | ^^^^^^^^^^^^ | | ^^^^^^^^^^^ ^^^^^^^^^ | | ^^^^^^^^^^^^^ ^^^^^^^^^^^^^ | | ^^^^^^^ B ^^^^^^^^^ | | ^^^^^^^^^ ^^^ ^^^^^^^^^^^^^^ | +--------------------------------------------------------+ " A Bee in the Carrot Patch " Within humorous ASCII art, there is for some reason an entire flourishing subgenre of pictures of silly cows. Four of these are reproduced in the examples above, here are three more: (__) (__) (__) (\/) ($$) (**) /-------\/ /-------\/ /-------\/ / | 666 || / |=====|| / | || * ||----|| * ||----|| * ||----|| ~~ ~~ ~~ ~~ ~~ ~~ Satanic cow This cow is a Yuppie Cow in love Finally, here's a magnificent example of ASCII art depicting an Edwardian train station in Dunedin, New Zealand: .-. /___\ |___| |]_[| / I \ JL/ | \JL .-. i () | () i .-. |_| .^. /_\ LJ=======LJ /_\ .^. |_| ._/___\._./___\_._._._._.L_J_/.-. .-.\_L_J._._._._._/___\._./___\._._._ ., |-,-| ., L_J |_| [I] |_| L_J ., |-,-| ., ., JL |-O-| JL L_J%%%%%%%%%%%%%%%L_J JL |-O-| JL JL IIIIII_HH_'-'-'_HH_IIIIII|_|=======H=======|_|IIIIII_HH_'-'-'_HH_IIIIII_HH_ -------[]-------[]-------[_]----\.=I=./----[_]-------[]-------[]--------[]- _/\_ ||\\_I_//|| _/\_ [_] []_/_L_J_\_[] [_] _/\_ ||\\_I_//|| _/\_ ||\ |__| ||=/_|_\=|| |__|_|_| _L_L_J_J_ |_|_|__| ||=/_|_\=|| |__| ||- |__| |||__|__||| |__[___]__--__===__--__[___]__| |||__|__||| |__| ||| IIIIIII[_]IIIII[_]IIIIIL___J__II__|_|__II__L___JIIIII[_]IIIII[_]IIIIIIII[_] \_I_/ [_]\_I_/[_] \_I_[_]\II/[]\_\I/_/[]\II/[_]\_I_/ [_]\_I_/[_] \_I_/ [_] ./ \.L_J/ \L_J./ L_JI I[]/ \[]I IL_J \.L_J/ \L_J./ \.L_J | |L_J| |L_J| L_J| |[]| |[]| |L_J |L_J| |L_J| |L_J |_____JL_JL___JL_JL____|-|| |[]| |[]| ||-|_____JL_JL___JL_JL_____JL_J There is a newsgroup, _alt.ascii-art_, devoted to this genre; however, see also warlording. ASCIIbetical order /as'kee-be'-t*-kl or'dr/ adj.,n. Used to indicate that data is sorted in ASCII collated order rather than alphabetical order. This lexicon is sorted in something close to ASCIIbetical order, but with case ignored and entries beginning with non-alphabetic characters moved to the end. "At my video store, they used their computer to sort the videos into ASCIIbetical order, so I couldn't find `"Crocodile" Dundee' until I thought to look before `2001' and `48 HRS.'!" astroturfing n. The use of paid shills to create the impression of a popular movement, through means like letters to newspapers from soi-disant `concerned citizens', paid opinion pieces, and the formation of grass-roots lobbying groups that are actually funded by a PR group (astroturf is fake grass; hence the term). This term became common among hackers after it came to light in early 1998 that Microsoft had attempted to use such tactics to forestall the U.S. Department of Justice's antitrust action against the company. This backfired horribly, angering a number of state attorneys-general enough to induce them to go public with plans to join the Federal suit. It also set anybody defending Microsoft on the net for the accusation "You're just astroturfing!". atomic adj. [from Gk. `atomos', indivisible] 1. Indivisible; cannot be split up. For example, an instruction may be said to do several things `atomically', i.e., all the things are done immediately, and there is no chance of the instruction being half-completed or of another being interspersed. Used esp. to convey that an operation cannot be screwed up by interrupts. "This routine locks the file and increments the file's semaphore atomically." 2. [primarily techspeak] Guaranteed to complete successfully or not at all, usu. refers to database transactions. If an error prevents a partially-performed transaction from proceeding to completion, it must be "backed out," as the database must not be left in an inconsistent state. Computer usage, in either of the above senses, has none of the connotations that `atomic' has in mainstream English (i.e. of particles of matter, nuclear explosions etc.). = attoparsec n. About an inch. `atto-' is the standard SI prefix for multiplication by 10^(-18). A parsec (parallax-second) is 3.26 light-years; an attoparsec is thus 3.26 * 10^(-18) light years, or about 3.1 cm (thus, 1 attoparsec/microfortnight equals about 1 inch/sec). This unit is reported to be in use (though probably not very seriously) among hackers in the U.K. See micro-. AUP /A-U-P/ Abbreviation, "Acceptable Use Policy". The policy of a given ISP which sets out what the ISP considers to be (un)acceptable uses of its Internet resources. autobogotiphobia /aw'toh-boh-got`*-foh'bee-*/ n. See bogotify. automagically /aw-toh-maj'i-klee/ adv. Automatically, but in a way that, for some reason (typically because it is too complicated, or too ugly, or perhaps even too trivial), the speaker doesn't feel like explaining to you. See magic. "The C-INTERCAL compiler generates C, then automagically invokes cc(1) to produce an executable." This term is quite old, going back at least to the mid-70s in jargon and probably much earlier. The word `automagic' occurred in advertising (for a shirt-ironing gadget) as far back as the late 1940s. avatar n. Syn. [in Hindu mythology, the incarnation of a god] 1. Among people working on virtual reality and cyberspace interfaces, an avatar is an icon or representation of a user in a shared virtual reality. The term is sometimes used on MUDs. 2. [CMU, Tektronix] root, superuser. There are quite a few Unix machines on which the name of the superuser account is `avatar' rather than `root'. This quirk was originated by a CMU hacker who found the terms `root' and `superuser' unimaginative, and thought `avatar' might better impress people with the responsibility they were accepting. awk /awk/ 1. n. [Unix techspeak] An interpreted language for massaging text data developed by Alfred Aho, Peter Weinberger, and Brian Kernighan (the name derives from their initials). It is characterized by C-like syntax, a declaration-free approach to variable typing and declarations, associative arrays, and field-oriented text processing. See also Perl. 2. n. Editing term for an expression awkward to manipulate through normal regexp facilities (for example, one containing a newline). 3. vt. To process data using awk(1). = B = B5: back door: backbone cabal: backbone site: backgammon: background: backreference: backronym: backspace and overstrike: backward combatability: BAD: Bad and Wrong: Bad Thing: bag on the side: bagbiter: bagbiting: baggy pantsing: balloonian variable: bamf: banana label: banana problem: banner ad: banner site: barn: batbelt: Befunge: BI: binary four: bandwidth: bang: bang on: bang path: banner: bar: bare metal: barf: barfmail: barfulation: barfulous: barney: baroque: BASIC: batch: bathtub curve: baud: baud barf: baz: bazaar: bboard: BBS: BCPL: beam: beanie key: beep: beige toaster: bells and whistles: bells whistles and gongs: benchmark: Berkeley Quality Software: berklix: Berzerkeley: beta: BFI: bible: BiCapitalization: B1FF: biff: Big Gray Wall: big iron: Big Red Switch: Big Room: big win: big-endian: bignum: bigot: bit: bit bang: bit bashing: bit bucket: bit decay: bit rot: bit twiddling: bit-paired keyboard: bitblt: BITNET: bits: bitty box: bixen: bixie: black art: black hole: black magic: Black Screen of Death: Black Thursday: blammo: blargh: blast: blat: bletch: bletcherous: blink: blinkenlights: blit: blitter: blivet: bloatware: BLOB: block: block transfer computations: Bloggs Family: blow an EPROM: blow away: blow out: blow past: blow up: BLT: Blue Book: blue box: Blue Glue: blue goo: Blue Screen of Death: blue wire: blurgle: BNF: boa: board: boat anchor: bob: bodysurf code: BOF: BOFH: bogo-sort: bogometer: BogoMIPS: bogon: bogon filter: bogon flux: bogosity: bogotify: bogue out: bogus: Bohr bug: boink: bomb: bondage-and-discipline language: bonk/oif: book titles: boot: Borg: borken: bot: bot spot: bottom feeder: bottom-up implementation: bounce: bounce message: boustrophedon: box: boxed comments: boxen: boxology: bozotic: BQS: brain dump: brain fart: brain-damaged: brain-dead: braino: branch to Fishkill: bread crumbs: break: break-even point: breath-of-life packet: breedle: Breidbart Index: bring X to its knees: brittle: broadcast storm: brochureware: broken: broken arrow: BrokenWindows: broket: Brooks's Law: brown-paper-bag bug: browser: BRS: brute force: brute force and ignorance: BSD: BSOD: BUAF: BUAG: bubble sort: bucky bits: buffer chuck: buffer overflow: bug: bug-compatible: bug-for-bug compatible: bug-of-the-month club: buglix: bulletproof: bullschildt: bum: bump: burble: buried treasure: burn-in period: burst page: busy-wait: buzz: BWQ: by hand: byte: byte sex: bytesexual: Bzzzt! Wrong.: B5 // [common] Abbreviation for "Babylon 5", a science-fiction TV series as revered among hackers as was the original Star Trek. back door n. [common] A hole in the security of a system deliberately left in place by designers or maintainers. The motivation for such holes is not always sinister; some operating systems, for example, come out of the box with privileged accounts intended for use by field service technicians or the vendor's maintenance programmers. Syn. trap door; may also be called a `wormhole'. See also iron box, cracker, worm, logic bomb. Historically, back doors have often lurked in systems longer than anyone expected or planned, and a few have become widely known. Ken Thompson's 1983 Turing Award lecture to the ACM admitted the existence of a back door in early Unix versions that may have qualified as the most fiendishly clever security hack of all time. In this scheme, the C compiler contained code that would recognize when the `login' command was being recompiled and insert some code recognizing a password chosen by Thompson, giving him entry to the system whether or not an account had been created for him. Normally such a back door could be removed by removing it from the source code for the compiler and recompiling the compiler. But to recompile the compiler, you have to use the compiler -- so Thompson also arranged that the compiler would recognize when it was compiling a version of itself, and insert into the recompiled compiler the code to insert into the recompiled `login' the code to allow Thompson entry -- and, of course, the code to recognize itself and do the whole thing again the next time around! And having done this once, he was then able to recompile the compiler from the original sources; the hack perpetuated itself invisibly, leaving the back door in place and active but with no trace in the sources. The talk that suggested this truly moby hack was published as "Reflections on Trusting Trust", "Communications of the ACM 27", 8 (August 1984), pp. 761-763 (text available at http://www.acm.org/classics). Ken Thompson has since confirmed that this hack was implemented and that the Trojan Horse code did appear in the login binary of a Unix Support group machine. Ken says the crocked compiler was never distributed. Your editor has heard two separate reports that suggest that the crocked login did make it out of Bell Labs, notably to BBN, and that it enabled at least one late-night login across the network by someone using the login name `kt'. backbone cabal n. A group of large-site administrators who pushed through the Great Renaming and reined in the chaos of Usenet during most of the 1980s. During most of its lifetime, the Cabal (as it was sometimes capitalized) steadfastly denied its own existence; it was almost obligatory for anyone privy to their secrets to respond "There is no Cabal" whenever the existence or activities of the group were speculated on in public. The result of this policy was an attractive aura of mystery. Even a decade after the cabal mailing list disbanded in late 1988 following a bitter internal catfight, many people believed (or claimed to believe) that it had not actually disbanded but only gone deeper underground with its power intact. This belief became a model for various paranoid theories about various Cabals with dark nefarious objectives beginning with taking over the Usenet or Internet. These paranoias were later satirized in ways that took on a life of their own. See Eric Conspiracy for one example. See NANA for the subsequent history of "the Cabal". backbone site n.,obs. Formerly, a key Usenet and email site, one that processes a large amount of third-party traffic, especially if it is the home site of any of the regional coordinators for the Usenet maps. Notable backbone sites as of early 1993, when this sense of the term was beginning to pass out of general use due to wide availability of cheap Internet connections, included _uunet_ and the mail machines at Rutgers University, UC Berkeley, DEC's Western Research Laboratories, Ohio State University, and the University of Texas. Compare rib site, leaf site. [1996 update: This term is seldom heard any more. The UUCP network world that gave it meaning has nearly disappeared; everyone is on the Internet now and network traffic is distributed in very different patterns. Today one might see references to a `backbone router' instead --ESR] backgammon See bignum (sense 3), moby (sense 4), and pseudoprime. background n.,adj.,vt. [common] To do a task `in background' is to do it whenever foreground matters are not claiming your undivided attention, and `to background' something means to relegate it to a lower priority. "For now, we'll just print a list of nodes and links; I'm working on the graph-printing problem in background." Note that this implies ongoing activity but at a reduced level or in spare time, in contrast to mainstream `back burner' (which connotes benign neglect until some future resumption of activity). Some people prefer to use the term for processing that they have queued up for their unconscious minds (a tack that one can often fruitfully take upon encountering an obstacle in creative work). Compare amp off, slopsucker. Technically, a task running in background is detached from the terminal where it was started (and often running at a lower priority); oppose foreground. Nowadays this term is primarily associated with Unix, but it appears to have been first used in this sense on OS/360. backreference n. 1. In a regular expression or pattern match, the text which was matched within grouping parentheses parentheses. 2. The part of the pattern which refers back to the matched text. 3. By extension, anything which refers back to something which has been seen or discussed before. "When you said `she' just now, who were you backreferencing?" backronym n. [portmanteau of back + acronym] A word interpreted as an acronym that was not originally so intended. This is a special case of what linguists call `back formation'. Examples are given under BASIC, recursive acronym (Cygnus), Acme, and mung. Discovering backronyms is a common form of wordplay among hackers. Compare retcon. backspace and overstrike interj. [rare] Whoa! Back up. Used to suggest that someone just said or did something wrong. Once common among APL programmers; may now be obsolete. backward combatability /bak'w*rd k*m-bat'*-bil'*-tee/ n. [CMU, Tektronix: from `backward compatibility'] A property of hardware or software revisions in which previous protocols, formats, layouts, etc. are irrevocably discarded in favor of `new and improved' protocols, formats, and layouts, leaving the previous ones not merely deprecated but actively defeated. (Too often, the old and new versions cannot definitively be distinguished, such that lingering instances of the previous ones yield crashes or other infelicitous effects, as opposed to a simple "version mismatch" message.) A backwards compatible change, on the other hand, allows old versions to coexist without crashes or error messages, but too many major changes incorporating elaborate backwards compatibility processing can lead to extreme software bloat. See also flag day. BAD /B-A-D/ adj. [IBM: acronym, `Broken As Designed'] Said of a program that is bogus because of bad design and misfeatures rather than because of bugginess. See working as designed. Bad and Wrong adj. [Durham, UK] Said of something that is both badly designed and wrongly executed. This common term is the prototype of, and is used by contrast with, three less common terms - Bad and Right (a kludge, something ugly but functional); Good and Wrong (an overblown GUI or other attractive nuisance); and (rare praise) Good and Right. These terms entered common use at Durham c.1994 and may have been imported from elsewhere; they are also in use at Oxford, and the emphatic form "Evil, Bad and Wrong" (abbreviated EBW) is reported fromm there. There are standard abbreviations: they start with B&R, a typo for "Bad and Wrong". Consequently, B&W is actually "Bad and Right", G&R = "Good and Wrong", and G&W = "Good and Right". Compare evil and rude, Good Thing, Bad Thing. Bad Thing n. [very common; from the 1930 Sellar & Yeatman parody "1066 And All That"] Something that can't possibly result in improvement of the subject. This term is always capitalized, as in "Replacing all of the 9600-baud modems with bicycle couriers would be a Bad Thing". Oppose Good Thing. British correspondents confirm that Bad Thing and Good Thing (and prob. therefore Right Thing and Wrong Thing) come from the book referenced in the etymology, which discusses rulers who were Good Kings but Bad Things. This has apparently created a mainstream idiom on the British side of the pond. It is very common among American hackers, but not in mainstream usage here. Compare Bad and Wrong. bag on the side n. [prob. originally related to a colostomy bag] An extension to an established hack that is supposed to add some functionality to the original. Usually derogatory, implying that the original was being overextended and should have been thrown away, and the new product is ugly, inelegant, or bloated. Also v. phrase, `to hang a bag on the side [of]'. "C++? That's just a bag on the side of C ...." "They want me to hang a bag on the side of the accounting system." bagbiter /bag'bi:t-*r/ n. 1. Something, such as a program or a computer, that fails to work, or works in a remarkably clumsy manner. "This text editor won't let me make a file with a line longer than 80 characters! What a bagbiter!" 2. A person who has caused you some trouble, inadvertently or otherwise, typically by failing to program the computer properly. Synonyms: loser, cretin, chomper. 3. `bite the bag' vi. To fail in some manner. "The computer keeps crashing every five minutes." "Yes, the disk controller is really biting the bag." The original loading of these terms was almost undoubtedly obscene, possibly referring to a douche bag or the scrotum (we have reports of "Bite the douche bag!" being used as a taunt at MIT 1970-1976, and we have another report that "Bite the bag!" was in common use at least as early as 1965), but in their current usage they have become almost completely sanitized. ITS's lexiphage program was the first and to date only known example of a program intended to be a bagbiter. bagbiting adj. Having the quality of a bagbiter. "This bagbiting system won't let me compute the factorial of a negative number." Compare losing, cretinous, bletcherous, `barfucious' (under barfulous) and `chomping' (under chomp). baggy pantsing v. [Georgia Tech] A "baggy pantsing" is used to reprimand hackers who incautiously leave their terminals unlocked. The affected user will come back to find a post from them on internal newsgroups discussing exactly how baggy their pants are, an accepted stand-in for "unattentive user who left their work unprotected in the clusters". A properly-done baggy pantsing is highly mocking and humorous (see examples below). It is considered bad form to post a baggy pantsing to off-campus newsgroups or the more technical, serious groups. A particularly nice baggy pantsing may be "claimed" by immediately quoting the message in full, followed by your sig; this has the added benefit of keeping the embarassed victim from being able to delete the post. Interesting baggy-pantsings have been done involving adding commands to login scripts to repost the message every time the unlucky user logs in; Unix boxes on the residential network, when cracked, oftentimes have their homepages replaced (after being politely backedup to another file) with a baggy-pants message; .plan files are also occasionally targeted. Usage: "Prof. Greenlee fell asleep in the Solaris cluster again; we baggy-pantsed him to git.cc.class.2430.flame." balloonian variable n. [Commodore users; perh. a deliberate phonetic mangling of `boolean variable'?] Any variable that doesn't actually hold or control state, but must nevertheless be declared, checked, or set. A typical balloonian variable started out as a flag attached to some environment feature that either became obsolete or was planned but never implemented. Compatibility concerns (or politics attached to same) may require that such a flag be treated as though it were live. bamf /bamf/ 1. [from X-Men comics; originally "bampf"] interj. Notional sound made by a person or object teleporting in or out of the hearer's vicinity. Often used in virtual reality (esp. MUD) electronic fora when a character wishes to make a dramatic entrance or exit. 2. The sound of magical transformation, used in virtual reality fora like MUDs. 3. In MUD circles, "bamf" is also used to refer to the act by which a MUD server sends a special notification to the MUD client to switch its connection to another server ("I'll set up the old site to just bamf people over to our new location."). 4. Used by MUDders on occasion in a more general sense related to sense 3, to refer to directing someone to another location or resource ("A user was asking about some technobabble so I bamfed them to http://www.tuxedo.org/jargon/".) banana label n. The labels often used on the sides of macrotape reels, so called because they are shaped roughly like blunt-ended bananas. This term, like macrotapes themselves, is still current but visibly headed for obsolescence. banana problem n. [from the story of the little girl who said "I know how to spell `banana', but I don't know when to stop"]. Not knowing where or when to bring a production to a close (compare fencepost error). One may say `there is a banana problem' of an algorithm with poorly defined or incorrect termination conditions, or in discussing the evolution of a design that may be succumbing to featuritis (see also creeping elegance, creeping featuritis). See item 176 under HAKMEM, which describes a banana problem in a Dissociated Press implementation. Also, see one-banana problem for a superficially similar but unrelated usage. binary four n. [Usenet] The finger, in the sense of `digitus impudicus'. This comes from an analogy between binary and the hand, i.e. 1=00001=thumb, 2=00010=index finger, 3=00011=index and thumb, 4=00100. Considered silly. Prob. from humorous derivative of finger, sense 4. bandwidth n. 1. [common] Used by hackers (in a generalization of its technical meaning) as the volume of information per unit time that a computer, person, or transmission medium can handle. "Those are amazing graphics, but I missed some of the detail -- not enough bandwidth, I guess." Compare low-bandwidth. This generalized usage began to go mainstream after the Internet population explosion of 1993-1994. 2. Attention span. 3. On Usenet, a measure of network capacity that is often wasted by people complaining about how items posted by others are a waste of bandwidth. bang 1. n. Common spoken name for ! (ASCII 0100001), especially when used in pronouncing a bang path in spoken hackish. In elder days this was considered a CMUish usage, with MIT and Stanford hackers preferring excl or shriek; but the spread of Unix has carried `bang' with it (esp. via the term bang path) and it is now certainly the most common spoken name for !. Note that it is used exclusively for non-emphatic written !; one would not say "Congratulations bang" (except possibly for humorous purposes), but if one wanted to specify the exact characters `foo!' one would speak "Eff oh oh bang". See shriek, ASCII. 2. interj. An exclamation signifying roughly "I have achieved enlightenment!", or "The dynamite has cleared out my brain!" Often used to acknowledge that one has perpetrated a thinko immediately after one has been called on it. bang on vt. To stress-test a piece of hardware or software: "I banged on the new version of the simulator all day yesterday and it didn't crash once. I guess it is ready for release." The term pound on is synonymous. B = bang path n. [now historical] An old-style UUCP electronic-mail address specifying hops to get from some assumed-reachable location to the addressee, so called because each hop is signified by a bang sign. Thus, for example, the path _...!bigsite!foovax!barbox!me_ directs people to route their mail to machine _bigsite_ (presumably a well-known location accessible to everybody) and from there through the machine _foovax_ to the account of user _me_ on _barbox_. In the bad old days of not so long ago, before autorouting mailers became commonplace, people often published compound bang addresses using the { } convention (see glob) to give paths from several big machines, in the hopes that one's correspondent might be able to get mail to one of them reliably (example: _...!{seismo, ut-sally, ihnp4}!rice!beta!gamma!me_). Bang paths of 8 to 10 hops were not uncommon in 1981. Late-night dial-up UUCP links would cause week-long transmission times. Bang paths were often selected by both transmission time and reliability, as messages would often get lost. See Internet address, the network, and sitename. banner n. 1. The title page added to printouts by most print spoolers (see spool). Typically includes user or account ID information in very large character-graphics capitals. Also called a `burst page', because it indicates where to burst (tear apart) fanfold paper to separate one user's printout from the next. 2. A similar printout generated (typically on multiple pages of fan-fold paper) from user-specified text, e.g., by a program such as Unix's banner({1,6}). 3. On interactive software, a first screen containing a logo and/or author credits and/or a copyright notice. This is probably now the commonest sense. B = banner ad n. Any of the annoying graphical advertisements that span the tops of way too many Web pages. banner site n. [warez d00dz] A FTP site storing pirated files where one must first click on several banners and/or subscribe to various `free' services, usually generating some form of revenues for the site owner, to be able to access the site. More often than not, the username/password painfully obtained by clicking on banners and subscribing to bogus services or mailing lists turns out to be non-working or gives access to a site that always responds busy. See ratio site, leech mode. bar /bar/ n. 1. [very common] The second metasyntactic variable, after foo and before baz. "Suppose we have two functions: FOO and BAR. FOO calls BAR...." 2. Often appended to foo to produce foobar. bare metal n. 1. [common] New computer hardware, unadorned with such snares and delusions as an operating system, an HLL, or even assembler. Commonly used in the phrase `programming on the bare metal', which refers to the arduous work of bit bashing needed to create these basic tools for a new machine. Real bare-metal programming involves things like building boot proms and BIOS chips, implementing basic monitors used to test device drivers, and writing the assemblers that will be used to write the compiler back ends that will give the new machine a real development environment. 2. `Programming on the bare metal' is also used to describe a style of hand-hacking that relies on bit-level peculiarities of a particular hardware design, esp. tricks for speed and space optimization that rely on crocks such as overlapping instructions (or, as in the famous case described in The Story of Mel (in Appendix A), interleaving of opcodes on a magnetic drum to minimize fetch delays due to the device's rotational latency). This sort of thing has become less common as the relative costs of programming time and machine resources have changed, but is still found in heavily constrained environments such as industrial embedded systems, and in the code of hackers who just can't let go of that low-level control. See Real Programmer. In the world of personal computing, bare metal programming (especially in sense 1 but sometimes also in sense 2) is often considered a Good Thing, or at least a necessary evil (because these machines have often been sufficiently slow and poorly designed to make it necessary; see ill-behaved). There, the term usually refers to bypassing the BIOS or OS interface and writing the application to directly access device registers and machine addresses. "To get 19.2 kilobaud on the serial port, you need to get down to the bare metal." People who can do this sort of thing well are held in high regard. barf /barf/ n.,v. [common; from mainstream slang meaning `vomit'] 1. interj. Term of disgust. This is the closest hackish equivalent of the Valspeak "gag me with a spoon". (Like, euwww!) See bletch. 2. vi. To say "Barf!" or emit some similar expression of disgust. "I showed him my latest hack and he barfed" means only that he complained about it, not that he literally vomited. 3. vi. To fail to work because of unacceptable input, perhaps with a suitable error message, perhaps not. Examples: "The division operation barfs if you try to divide by 0." (That is, the division operation checks for an attempt to divide by zero, and if one is encountered it causes the operation to fail in some unspecified, but generally obvious, manner.) "The text editor barfs if you try to read in a new file before writing out the old one." See choke, gag. In Commonwealth Hackish, `barf' is generally replaced by `puke' or `vom'. barf is sometimes also used as a metasyntactic variable, like foo or bar. barfmail n. Multiple bounce messages accumulating to the level of serious annoyance, or worse. The sort of thing that happens when an inter-network mail gateway goes down or wonky. B = barfulation /bar`fyoo-lay'sh*n/ interj. Variation of barf used around the Stanford area. An exclamation, expressing disgust. On seeing some particularly bad code one might exclaim, "Barfulation! Who wrote this, Quux?" barfulous /bar'fyoo-l*s/ adj. (alt. `barfucious', /bar-fyoo-sh*s/) Said of something that would make anyone barf, if only for esthetic reasons. barn n. [uncommon; prob. from the nuclear military] An unexpectedly large quantity of something: a unit of measurement. "Why is /var/adm taking up so much space?" "The logs have grown to several barns." The source of this is clear: when physicists were first studying nuclear interactions, the probability was thought to be proportional to the cross-sectional area of the nucleus (this probability is still called the cross-section). Upon experimenting, they discovered the interactions were far more probable than expected; the nuclei were `as big as a barn'. The units for cross-sections were christened Barns, (10^-24 cm^2) and the book containing cross-sections has a picture of a barn on the cover. barney n. In Commonwealth hackish, `barney' is to fred (sense #1) as bar is to foo. That is, people who commonly use `fred' as their first metasyntactic variable will often use `barney' second. The reference is, of course, to Fred Flintstone and Barney Rubble in the Flintstones cartoons. = baroque adj. [common] Feature-encrusted; complex; gaudy; verging on excessive. Said of hardware or (esp.) software designs, this has many of the connotations of elephantine or monstrosity but is less extreme and not pejorative in itself. "Metafont even has features to introduce random variations to its letterform output. Now that is baroque!" See also rococo. = BASIC /bay'-sic/ n. A programming language, originally designed for Dartmouth's experimental timesharing system in the early 1960s, which for many years was the leading cause of brain damage in proto-hackers. Edsger W. Dijkstra observed in "Selected Writings on Computing: A Personal Perspective" that "It is practically impossible to teach good programming style to students that have had prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration." This is another case (like Pascal) of the cascading lossage that happens when a language deliberately designed as an educational toy gets taken too seriously. A novice can write short BASIC programs (on the order of 10-20 lines) very easily; writing anything longer (a) is very painful, and (b) encourages bad habits that will make it harder to use more powerful languages well. This wouldn't be so bad if historical accidents hadn't made BASIC so common on low-end micros in the 1980s. As it is, it probably ruined tens of thousands of potential wizards. [1995: Some languages called `BASIC' aren't quite this nasty any more, having acquired Pascal- and C-like procedures and control structures and shed their line numbers. --ESR] Note: the name is commonly parsed as Beginner's All-purpose Symbolic Instruction Code, but this is a backronym. BASIC was originally named Basic, simply because it was a simple and basic programming language. Because most programming language names were in fact acronyms, BASIC was often capitalized just out of habit or to be silly. No acronym for BASIC originally existed or was intended (as one can verify by reading texts through the early 1970s). Later, around the mid-1970s, people began to make up backronyms for BASIC because they weren't sure. Beginner's All-purpose Symbolic Instruction Code is the one that caught on. = batbelt n. Many hackers routinely hang numerous devices such as pagers, cell-phones, personal organizers, leatherman multitools, pocket knives, flashlights, walkie-talkies, even miniature computers from their belts. When many of these devices are worn at once, the hacker's belt somewhat resembles Batman's utility belt; hence it is referred to as a batbelt. batch adj. 1. Non-interactive. Hackers use this somewhat more loosely than the traditional technical definitions justify; in particular, switches on a normally interactive program that prepare it to receive non-interactive command input are often referred to as `batch mode' switches. A `batch file' is a series of instructions written to be handed to an interactive program running in batch mode. 2. Performance of dreary tasks all at one sitting. "I finally sat down in batch mode and wrote out checks for all those bills; I guess they'll turn the electricity back on next week..." 3. `batching up': Accumulation of a number of small tasks that can be lumped together for greater efficiency. "I'm batching up those letters to send sometime" "I'm batching up bottles to take to the recycling center." = bathtub curve n. Common term for the curve (resembling an end-to-end section of one of those claw-footed antique bathtubs) that describes the expected failure rate of electronics with time: initially high, dropping to near 0 for most of the system's lifetime, then rising again as it `tires out'. See also burn-in period, infant mortality. baud /bawd/ n. [simplified from its technical meaning] n. Bits per second. Hence kilobaud or Kbaud, thousands of bits per second. The technical meaning is `level transitions per second'; this coincides with bps only for two-level modulation with no framing or stop bits. Most hackers are aware of these nuances but blithely ignore them. Historical note: `baud' was originally a unit of telegraph signalling speed, set at one pulse per second. It was proposed at the November, 1926 conference of the Comité Consultatif International Des Communications Télégraphiques as an improvement on the then standard practice of referring to line speeds in terms of words per minute, and named for Jean Maurice Emile Baudot (1845-1903), a French engineer who did a lot of pioneering work in early teleprinters. baud barf /bawd barf/ n. The garbage one gets a terminal (or terminal emulator) when using a modem connection with some protocol setting (esp. line speed) incorrect, or when someone picks up a voice extension on the same line, or when really bad line noise disrupts the connection. Baud barf is not completely random, by the way; hackers with a lot of serial-line experience can usually tell whether the device at the other end is expecting a higher or lower speed than the terminal is set to. Really experienced ones can identify particular speeds. baz /baz/ n. 1. [common] The third metasyntactic variable "Suppose we have three functions: FOO, BAR, and BAZ. FOO calls BAR, which calls BAZ...." (See also fum) 2. interj. A term of mild annoyance. In this usage the term is often drawn out for 2 or 3 seconds, producing an effect not unlike the bleating of a sheep; /baaaaaaz/. 3. Occasionally appended to foo to produce `foobaz'. Earlier versions of this lexicon derived `baz' as a Stanford corruption of bar. However, Pete Samson (compiler of the TMRC lexicon) reports it was already current when he joined TMRC in 1958. He says "It came from "Pogo". Albert the Alligator, when vexed or outraged, would shout `Bazz Fazz!' or `Rowrbazzle!' The club layout was said to model the (mythical) New England counties of Rowrfolk and Bassex (Rowrbazzle mingled with (Norfolk/Suffolk/Middlesex/Essex)." bazaar n.,adj. In 1997, after meditatating on the success of Linux for three years, the Jargon File's own editor ESR wrote an analytical paper on hacker culture and development models titled The Cathedral and the Bazaar. The main argument of the paper was that Brooks's Law is not the whole story; given the right social machinery, debugging can be efficiently parallelized across large numbers of programmers. The title metaphor caught on (see also cathedral), and the style of development typical in the Linux community is now often referred to as the bazaar mode. Its characteristics include releasing code early and often, and actively seeking the largest possible pool of peer reviewers. = bboard /bee'bord/ n. [contraction of `bulletin board'] 1. Any electronic bulletin board; esp. used of BBS systems running on personal micros, less frequently of a Usenet newsgroup (in fact, use of this term for a newsgroup generally marks one either as a newbie fresh in from the BBS world or as a real old-timer predating Usenet). 2. At CMU and other colleges with similar facilities, refers to campus-wide electronic bulletin boards. 3. The term `physical bboard' is sometimes used to refer to an old-fashioned, non-electronic cork-and-thumbtack memo board. At CMU, it refers to a particular one outside the CS Lounge. In either of senses 1 or 2, the term is usually prefixed by the name of the intended board (`the Moonlight Casino bboard' or `market bboard'); however, if the context is clear, the better-read bboards may be referred to by name alone, as in (at CMU) "Don't post for-sale ads on general". = BBS /B-B-S/ n. [common; abbreviation, `Bulletin Board System'] An electronic bulletin board system; that is, a message database where people can log in and leave broadcast messages for others grouped (typically) into topic groups. The term was especially applied to the thousands of local BBS systems that operated during the pre-Internet microcomputer era of roughly 1980 to 1995, typically run by amateurs for fun out of their homes on MS-DOS boxes with a single modem line each. Fans of Usenet and Internet or the big commercial timesharing bboards such as CompuServe and GEnie tended to consider local BBSes the low-rent district of the hacker culture, but they served a valuable function by knitting together lots of hackers and users in the personal-micro world who would otherwise have been unable to exchange code at all. Post-Internet, BBSs are likely to be local newsgroups on an ISP; efficiency has increased but a certain flavor has been lost. See also bboard. BCPL // n. [abbreviation, `Basic Combined Programming Language') A programming language developed by Martin Richards in Cambridge in 1967. It is remarkable for its rich syntax, small size of compiler (it can be run in 16k) and extreme portability. It reached break-even point at a very early stage, and was the language in which the original hello world program was written. It has been ported to so many different systems that its creator confesses to having lost count. It has only one data type (a machine word) which can be used as an integer, a character, a floating point number, a pointer, or almost anything else, depending on context. BCPL was a precursor of C, which inherited some of its features. beam vt. [from Star Trek Classic's "Beam me up, Scotty!"] 1. To transfer softcopy of a file electronically; most often in combining forms such as `beam me a copy' or `beam that over to his site'. 2. Palm Pilot users very commonly use this term for the act of exchanging bits via the infrared links on their machines (this term seems to have originated with the ill-fated Newton Message Pad). Compare blast, snarf, BLT. beanie key n. [Mac users] See command key. beep n.,v. Syn. feep. This term is techspeak under MS-DOS and OS/2, and seems to be generally preferred among micro hobbyists. = Befunge n. A worthy companion to INTERCAL; a computer language family which escapes the quotidian limitation of linear control flow and embraces program counters flying through multiple dimensions with exotic topologies. Sadly, the Befunge home page has vanished, but a Befunge version of the hello world program is at http://www.catseye.mb.ca/esoteric/befunge.html. beige toaster n. A Macintosh. See toaster; compare Macintrash, maggotbox. bells and whistles n. [common] Features added to a program or system to make it more flavorful from a hacker's point of view, without necessarily adding to its utility for its primary function. Distinguished from chrome, which is intended to attract users. "Now that we've got the basic program working, let's go back and add some bells and whistles." No one seems to know what distinguishes a bell from a whistle. The recognized emphatic form is "bells, whistles, and gongs". It used to be thought that this term derived from the toyboxes on theater organs. However, the "and gongs" strongly suggests a different origin, at sea. Before powered horns, ships routinely used bells, whistles, and gongs to signal each other over longer distances than voice can carry. bells whistles and gongs n. A standard elaborated form of bells and whistles; typically said with a pronounced and ironic accent on the `gongs'. benchmark n. [techspeak] An inaccurate measure of computer performance. "In the computer industry, there are three kinds of lies: lies, damn lies, and benchmarks." Well-known ones include Whetstone, Dhrystone, Rhealstone (see h), the Gabriel LISP benchmarks (see gabriel), the SPECmark suite, and LINPACK. See also machoflops, MIPS, smoke and mirrors. Berkeley Quality Software adj. (often abbreviated `BQS') Term used in a pejorative sense to refer to software that was apparently created by rather spaced-out hackers late at night to solve some unique problem. It usually has nonexistent, incomplete, or incorrect documentation, has been tested on at least two examples, and core dumps when anyone else attempts to use it. This term was frequently applied to early versions of the dbx(1) debugger. See also Berzerkeley. Note to British and Commonwealth readers: that's /berk'lee/, not /bark'lee/ as in British Received Pronunciation. berklix /berk'liks/ n.,adj. [contraction of `Berkeley Unix'] See BSD. Not used at Berkeley itself. May be more common among suits attempting to sound like cognoscenti than among hackers, who usually just say `BSD'. = Berzerkeley /b*r-zer'klee/ n. [from `berserk', via the name of a now-deceased record label; poss. originated by famed columnist Herb Caen] Humorous distortion of `Berkeley' used esp. to refer to the practices or products of the BSD Unix hackers. See software bloat, Missed'em-five, Berkeley Quality Software. Mainstream use of this term in reference to the cultural and political peculiarities of UC Berkeley as a whole has been reported from as far back as the 1960s. beta /bay't*/, /be't*/ or (Commonwealth) /bee't*/ n. 1. Mostly working, but still under test; usu. used with `in': `in beta'. In the Real World, systems (hardware or software) software often go through two stages of release testing: Alpha (in-house) and Beta (out-house?). Beta releases are generally made to a group of lucky (or unlucky) trusted customers. 2. Anything that is new and experimental. "His girlfriend is in beta" means that he is still testing for compatibility and reserving judgment. 3. Flaky; dubious; suspect (since beta software is notoriously buggy). Historical note: More formally, to beta-test is to test a pre-release (potentially unreliable) version of a piece of software by making it available to selected (or self-selected) customers and users. This term derives from early 1960s terminology for product cycle checkpoints, first used at IBM but later standard throughout the industry. `Alpha Test' was the unit, module, or component test phase; `Beta Test' was initial system test. These themselves came from earlier A- and B-tests for hardware. The A-test was a feasibility and manufacturability evaluation done before any commitment to design and development. The B-test was a demonstration that the engineering model functioned as specified. The C-test (corresponding to today's beta) was the B-test performed on early samples of the production design, and the D test was the C test repeated after the model had been in production a while. BFI /B-F-I/ n. See brute force and ignorance. Also encountered in the variants `BFMI', `brute force and massive ignorance' and `BFBI' `brute force and bloody ignorance'. In dome parts of the U.S. this abbreviation was probably reinforced by a company called Browning-Ferris Industries who used to be in the waste-management business; a large BFI logo in white-on-blue could be seen on the sides of garbage trucks. bible n. 1. One of a small number of fundamental source books such as Knuth, K&R, or the Camel Book. 2. The most detailed and authoritative reference for a particular language, operating system, or other complex software system. = BiCapitalization n. The act said to have been performed on trademarks (such as PostScript, NeXT, NeWS, VisiCalc, FrameMaker, TK!solver, EasyWriter) that have been raised above the ruck of common coinage by nonstandard capitalization. Too many marketroid types think this sort of thing is really cute, even the 2,317th time they do it. Compare studlycaps. B1FF /bif/ [Usenet] (alt. `BIFF') n. The most famous pseudo, and the prototypical newbie. Articles from B1FF feature all uppercase letters sprinkled liberally with bangs, typos, `cute' misspellings (EVRY BUDY LUVS GOOD OLD BIFF CUZ HE"S A K00L DOOD AN HE RITES REEL AWESUM THINGZ IN CAPITULL LETTRS LIKE THIS!!!), use (and often misuse) of fragments of talk mode abbreviations, a long sig block (sometimes even a doubled sig), and unbounded naivete. B1FF posts articles using his elder brother's VIC-20. B1FF's location is a mystery, as his articles appear to come from a variety of sites. However, BITNET seems to be the most frequent origin. The theory that B1FF is a denizen of BITNET is supported by B1FF's (unfortunately invalid) electronic mail address: B1FF@BIT.NET. [1993: Now It Can Be Told! My spies inform me that B1FF was originally created by Joe Talmadge <jat@cup.hp.com>, also the author of the infamous and much-plagiarized "Flamer's Bible". The BIFF filter he wrote was later passed to Richard Sexton, who posted BIFFisms much more widely. Versions have since been posted for the amusement of the net at large. See also Jeff K. --ESR] BI // Common written abbreviation for Breidbart Index. biff /bif/ vt. To notify someone of incoming mail. From the BSD utility biff(1), which was in turn named after a friendly dog who used to chase frisbees in the halls at UCB while 4.2BSD was in development. There was a legend that it had a habit of barking whenever the mailman came, but the author of biff says this is not true. No relation to B1FF. Big Gray Wall n. What faces a VMS user searching for documentation. A full VMS kit comes on a pallet, the documentation taking up around 15 feet of shelf space before the addition of layered products such as compilers, databases, multivendor networking, and programming tools. Recent (since VMS version 5) documentation comes with gray binders; under VMS version 4 the binders were orange (`big orange wall'), and under version 3 they were blue. See VMS. Often contracted to `Gray Wall'. big iron n. [common] Large, expensive, ultra-fast computers. Used generally of number-crunching supercomputers such as Crays, but can include more conventional big commercial IBMish mainframes. Term of approval; compare heavy metal, oppose dinosaur. Big Red Switch n. [IBM] The power switch on a computer, esp. the `Emergency Pull' switch on an IBM mainframe or the power switch on an IBM PC where it really is large and red. "This !@%$% bitty box is hung again; time to hit the Big Red Switch." Sources at IBM report that, in tune with the company's passion for TLAs, this is often abbreviated as `BRS' (this has also become established on FidoNet and in the PC clone world). It is alleged that the emergency pull switch on an IBM 360/91 actually fired a non-conducting bolt into the main power feed; the BRSes on more recent mainframes physically drop a block into place so that they can't be pushed back in. People get fired for pulling them, especially inappropriately (see also molly-guard). Compare power cycle, three-finger salute, 120 reset; see also scram switch. Big Room n. (Also `Big Blue Room') The extremely large room with the blue ceiling and intensely bright light (during the day) or black ceiling with lots of tiny night-lights (during the night) found outside all computer installations. "He can't come to the phone right now, he's somewhere out in the Big Room." big win n. 1. [common] Major success. 2. [MIT] Serendipity. "Yes, those two physicists discovered high-temperature superconductivity in a batch of ceramic that had been prepared incorrectly according to their experimental schedule. Small mistake; big win!" See win big. B = big-endian adj. [common; From Swift's "Gulliver's Travels" via the famous paper "On Holy Wars and a Plea for Peace" by Danny Cohen, USC/ISI IEN 137, dated April 1, 1980] 1. Describes a computer architecture in which, within a given multi-byte numeric representation, the most significant byte has the lowest address (the word is stored `big-end-first'). Most processors, including the IBM 370 family, the PDP-10, the Motorola microprocessor families, and most of the various RISC designs are big-endian. Big-endian byte order is also sometimes called `network order'. See little-endian, middle-endian, NUXI problem, swab. 2. An Internet address the wrong way round. Most of the world follows the Internet standard and writes email addresses starting with the name of the computer and ending up with the name of the country. In the U.K. the Joint Networking Team had decided to do it the other way round before the Internet domain standard was established. Most gateway sites have ad-hockery in their mailers to handle this, but can still be confused. In particular, the address _me@uk.ac.bris.pys.as_ could be interpreted in JANET's big-endian way as one in the U.K. (domain _uk_) or in the standard little-endian way as one in the domain _as_ (American Samoa) on the opposite side of the world. bignum /big'nuhm/ n. [common; orig. from MIT MacLISP] 1. [techspeak] A multiple-precision computer representation for very large integers. 2. More generally, any very large number. "Have you ever looked at the United States Budget? There's bignums for you!" 3. [Stanford] In backgammon, large numbers on the dice especially a roll of double fives or double sixes (compare moby, sense 4). See also El Camino Bignum. Sense 1 may require some explanation. Most computer languages provide a kind of data called `integer', but such computer integers are usually very limited in size; usually they must be smaller than 2^(31) (2,147,483,648) or (on a bitty box) 2^(15) (32,768). If you want to work with numbers larger than that, you have to use floating-point numbers, which are usually accurate to only six or seven decimal places. Computer languages that provide bignums can perform exact calculations on very large numbers, such as 1000! (the factorial of 1000, which is 1000 times 999 times 998 times ... times 2 times 1). For example, this value for 1000! was computed by the MacLISP system using bignums: 40238726007709377354370243392300398571937486421071 46325437999104299385123986290205920442084869694048 00479988610197196058631666872994808558901323829669 94459099742450408707375991882362772718873251977950 59509952761208749754624970436014182780946464962910 56393887437886487337119181045825783647849977012476 63288983595573543251318532395846307555740911426241 74743493475534286465766116677973966688202912073791 43853719588249808126867838374559731746136085379534 52422158659320192809087829730843139284440328123155 86110369768013573042161687476096758713483120254785 89320767169132448426236131412508780208000261683151 02734182797770478463586817016436502415369139828126 48102130927612448963599287051149649754199093422215 66832572080821333186116811553615836546984046708975 60290095053761647584772842188967964624494516076535 34081989013854424879849599533191017233555566021394 50399736280750137837615307127761926849034352625200 01588853514733161170210396817592151090778801939317 81141945452572238655414610628921879602238389714760 88506276862967146674697562911234082439208160153780 88989396451826324367161676217916890977991190375403 12746222899880051954444142820121873617459926429565 81746628302955570299024324153181617210465832036786 90611726015878352075151628422554026517048330422614 39742869330616908979684825901254583271682264580665 26769958652682272807075781391858178889652208164348 34482599326604336766017699961283186078838615027946 59551311565520360939881806121385586003014356945272 24206344631797460594682573103790084024432438465657 24501440282188525247093519062092902313649327349756 55139587205596542287497740114133469627154228458623 77387538230483865688976461927383814900140767310446 64025989949022222176590433990188601856652648506179 97023561938970178600408118897299183110211712298459 01641921068884387121855646124960798722908519296819 37238864261483965738229112312502418664935314397013 74285319266498753372189406942814341185201580141233 44828015051399694290153483077644569099073152433278 28826986460278986432113908350621709500259738986355 42771967428222487575867657523442202075736305694988 25087968928162753848863396909959826280956121450994 87170124451646126037902930912088908694202851064018 21543994571568059418727489980942547421735824010636 77404595741785160829230135358081840096996372524230 56085590370062427124341690900415369010593398383577 79394109700277534720000000000000000000000000000000 00000000000000000000000000000000000000000000000000 00000000000000000000000000000000000000000000000000 00000000000000000000000000000000000000000000000000 00000000000000000000000000000000000000000000000000 000000000000000000. = bigot n. [common] A person who is religiously attached to a particular computer, language, operating system, editor, or other tool (see religious issues). Usually found with a specifier; thus, `cray bigot', `ITS bigot', `APL bigot', `VMS bigot', `Berkeley bigot'. Real bigots can be distinguished from mere partisans or zealots by the fact that they refuse to learn alternatives even when the march of time and/or technology is threatening to obsolete the favored tool. It is truly said "You can tell a bigot, but you can't tell him much." Compare weenie, Amiga Persecution Complex. = bit n. [from the mainstream meaning and `Binary digIT'] 1. [techspeak] The unit of information; the amount of information obtained by asking a yes-or-no question for which the two outcomes are equally probable. 2. [techspeak] A computational quantity that can take on one of two values, such as true and false or 0 and 1. 3. A mental flag: a reminder that something should be done eventually. "I have a bit set for you." (I haven't seen you for a while, and I'm supposed to tell or ask you something.) 4. More generally, a (possibly incorrect) mental state of belief. "I have a bit set that says that you were the last guy to hack on EMACS." (Meaning "I think you were the last guy to hack on EMACS, and what I am about to say is predicated on this, so please stop me if this isn't true.") "I just need one bit from you" is a polite way of indicating that you intend only a short interruption for a question that can presumably be answered yes or no. A bit is said to be `set' if its value is true or 1, and `reset' or `clear' if its value is false or 0. One speaks of setting and clearing bits. To toggle or `invert' a bit is to change it, either from 0 to 1 or from 1 to 0. See also flag, trit, mode bit. The term `bit' first appeared in print in the computer-science sense in a 1948 paper by information theorist Claude Shannon, and was there credited to the early computer scientist John Tukey (who also seems to have coined the term `software'). Tukey records that `bit' evolved over a lunch table as a handier alternative to `bigit' or `binit', at a conference in the winter of 1943-44. = bit bang n. Transmission of data on a serial line, when accomplished by rapidly tweaking a single output bit, in software, at the appropriate times. The technique is a simple loop with eight OUT and SHIFT instruction pairs for each byte. Input is more interesting. And full duplex (doing input and output at the same time) is one way to separate the real hackers from the wannabees. Bit bang was used on certain early models of Prime computers, presumably when UARTs were too expensive, and on archaic Z80 micros with a Zilog PIO but no SIO. In an interesting instance of the cycle of reincarnation, this technique returned to use in the early 1990s on some RISC architectures because it consumes such an infinitesimal part of the processor that it actually makes sense not to have a UART. Compare cycle of reincarnation. bit bashing n. (alt. `bit diddling' or bit twiddling) Term used to describe any of several kinds of low-level programming characterized by manipulation of bit, flag, nybble, and other smaller-than-character-sized pieces of data; these include low-level device control, encryption algorithms, checksum and error-correcting codes, hash functions, some flavors of graphics programming (see bitblt), and assembler/compiler code generation. May connote either tedium or a real technical challenge (more usually the former). "The command decoding for the new tape driver looks pretty solid but the bit-bashing for the control registers still has bugs." See also bit bang, mode bit. bit bucket n. [very common] 1. The universal data sink (originally, the mythical receptacle used to catch bits when they fall off the end of a register during a shift instruction). Discarded, lost, or destroyed data is said to have `gone to the bit bucket'. On Unix, often used for /dev/null. Sometimes amplified as `the Great Bit Bucket in the Sky'. 2. The place where all lost mail and news messages eventually go. The selection is performed according to Finagle's Law; important mail is much more likely to end up in the bit bucket than junk mail, which has an almost 100% probability of getting delivered. Routing to the bit bucket is automatically performed by mail-transfer agents, news systems, and the lower layers of the network. 3. The ideal location for all unwanted mail responses: "Flames about this article to the bit bucket." Such a request is guaranteed to overflow one's mailbox with flames. 4. Excuse for all mail that has not been sent. "I mailed you those figures last week; they must have landed in the bit bucket." Compare black hole. This term is used purely in jest. It is based on the fanciful notion that bits are objects that are not destroyed but only misplaced. This appears to have been a mutation of an earlier term `bit box', about which the same legend was current; old-time hackers also report that trainees used to be told that when the CPU stored bits into memory it was actually pulling them `out of the bit box'. See also chad box. Another variant of this legend has it that, as a consequence of the `parity preservation law', the number of 1 bits that go to the bit bucket must equal the number of 0 bits. Any imbalance results in bits filling up the bit bucket. A qualified computer technician can empty a full bit bucket as part of scheduled maintenance. bit decay n. See bit rot. People with a physics background tend to prefer this variant for the analogy with particle decay. See also computron, quantum bogodynamics. bit rot n. [common] Also bit decay. Hypothetical disease the existence of which has been deduced from the observation that unused programs or features will often stop working after sufficient time has passed, even if `nothing has changed'. The theory explains that bits decay as if they were radioactive. As time passes, the contents of a file or the code in a program will become increasingly garbled. There actually are physical processes that produce such effects (alpha particles generated by trace radionuclides in ceramic chip packages, for example, can change the contents of a computer memory unpredictably, and various kinds of subtle media failures can corrupt files in mass storage), but they are quite rare (and computers are built with error-detecting circuitry to compensate for them). The notion long favored among hackers that cosmic rays are among the causes of such events turns out to be a myth; see the cosmic rays entry for details. The term software rot is almost synonymous. Software rot is the effect, bit rot the notional cause. bit twiddling n. [very common] 1. (pejorative) An exercise in tuning (see tune) in which incredible amounts of time and effort go to produce little noticeable improvement, often with the result that the code becomes incomprehensible. 2. Aimless small modification to a program, esp. for some pointless goal. 3. Approx. syn. for bit bashing; esp. used for the act of frobbing the device control register of a peripheral in an attempt to get it back to a known state. bit-paired keyboard n.,obs. (alt. `bit-shift keyboard') A non-standard keyboard layout that seems to have originated with the Teletype ASR-33 and remained common for several years on early computer equipment. The ASR-33 was a mechanical device (see EOU), so the only way to generate the character codes from keystrokes was by some physical linkage. The design of the ASR-33 assigned each character key a basic pattern that could be modified by flipping bits if the SHIFT or the CTRL key was pressed. In order to avoid making the thing even more of a kluge than it already was, the design had to group characters that shared the same basic bit pattern on one key. Looking at the ASCII chart, we find: high low bits bits 0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 010 ! " # $ % & ' ( ) 011 0 1 2 3 4 5 6 7 8 9 This is why the characters !"#$%&'() appear where they do on a Teletype (thankfully, they didn't use shift-0 for space). The Teletype Model 33 was actually designed before ASCII existed, and was originally intended to use a code that contained these two rows: low bits high 0000 0010 0100 0110 1000 1010 1100 1110 bits 0001 0011 0101 0111 1001 1011 1101 1111 10 ) ! bel # $ % wru & * ( " : ? _ , . 11 0 1 2 3 4 5 6 7 8 9 ' ; / - esc del The result would have been something closer to a normal keyboard. But as it happened, Teletype had to use a lot of persuasion just to keep ASCII, and the Model 33 keyboard, from looking like this instead: ! " ? $ ' & - ( ) ; : * / , . 0 1 2 3 4 5 6 7 8 9 + ~ < > × | Teletype's was not the weirdest variant of the QWERTY layout widely seen, by the way; that prize should probably go to one of several (differing) arrangements on IBM's even clunkier 026 and 029 card punches. When electronic terminals became popular, in the early 1970s, there was no agreement in the industry over how the keyboards should be laid out. Some vendors opted to emulate the Teletype keyboard, while others used the flexibility of electronic circuitry to make their product look like an office typewriter. Either choice was supported by the ANSI computer keyboard standard, X4.14-1971, which referred to the alternatives as `logical bit pairing' and `typewriter pairing'. These alternatives became known as `bit-paired' and `typewriter-paired' keyboards. To a hacker, the bit-paired keyboard seemed far more logical -- and because most hackers in those days had never learned to touch-type, there was little pressure from the pioneering users to adapt keyboards to the typewriter standard. The doom of the bit-paired keyboard was the large-scale introduction of the computer terminal into the normal office environment, where out-and-out technophobes were expected to use the equipment. The `typewriter-paired' standard became universal, X4.14 was superseded by X4.23-1982, `bit-paired' hardware was quickly junked or relegated to dusty corners, and both terms passed into disuse. However, in countries without a long history of touch typing, the argument against the bit-paired keyboard layout was weak or nonexistent. As a result, the standard Japanese keyboard, used on PCs, Unix boxen etc. still has all of the !"#$%&'() characters above the numbers in the ASR-33 layout. bitblt /bit'blit/ n. [from BLT, q.v.] 1. [common] Any of a family of closely related algorithms for moving and copying rectangles of bits between main and display memory on a bit-mapped device, or between two areas of either main or display memory (the requirement to do the Right Thing in the case of overlapping source and destination rectangles is what makes BitBlt tricky). 2. Synonym for blit or BLT. Both uses are borderline techspeak. = BITNET /bit'net/ n., obs. [acronym: Because It's Time NETwork] Everybody's least favorite piece of the network (see the network) - until AOL happened. The BITNET hosts were a collection of IBM dinosaurs and VAXen (the latter with lobotomized comm hardware) that communicate using 80-character EBCDIC card images (see eighty-column mind); thus, they tend to mangle the headers and text of third-party traffic from the rest of the ASCII/RFC-822 world with annoying regularity. BITNET was also notorious as the apparent home of B1FF. By 1995 it had, much to everyone's relief, been obsolesced and absorbed into the Internet. Unfortunately, around this time we also got AOL. = bits pl.n. 1. Information. Examples: "I need some bits about file formats." ("I need to know about file formats.") Compare core dump, sense 4. 2. Machine-readable representation of a document, specifically as contrasted with paper: "I have only a photocopy of the Jargon File; does anyone know where I can get the bits?". See softcopy, source of all good bits See also bit. bitty box /bit'ee boks/ n. 1. A computer sufficiently small, primitive, or incapable as to cause a hacker acute claustrophobia at the thought of developing software on or for it. Especially used of small, obsolescent, single-tasking-only personal machines such as the Atari 800, Osborne, Sinclair, VIC-20, TRS-80, or IBM PC. 2. [Pejorative] More generally, the opposite of `real computer' (see Get a real computer!). See also mess-dos, toaster, and toy. bixen pl.n. Users of BIX (the BIX Information eXchange, formerly the Byte Information eXchange). Parallels other plurals like boxen, VAXen, oxen. = bixie /bik'see/ n. Variant emoticons used on BIX (the BIX Information eXchange). The most common (smiley) bixie is <@_@>, representing two cartoon eyes and a mouth. These were originally invented in an SF fanzine called APA-L and imported to BIX by one of the earliest users. = black art n. [common] A collection of arcane, unpublished, and (by implication) mostly ad-hoc techniques developed for a particular application or systems area (compare black magic). VLSI design and compiler code optimization were (in their beginnings) considered classic examples of black art; as theory developed they became deep magic, and once standard textbooks had been written, became merely heavy wizardry. The huge proliferation of formal and informal channels for spreading around new computer-related technologies during the last twenty years has made both the term `black art' and what it describes less common than formerly. See also voodoo programming. black hole n.,vt. [common] What data (a piece of email or netnews, or a stream of TCP/IP packets) has fallen into if it disappears mysteriously between its origin and destination sites (that is, without returning a bounce message). "I think there's a black hole at _foovax_!" conveys suspicion that site _foovax_ has been dropping a lot of stuff on the floor lately (see drop on the floor). The implied metaphor of email as interstellar travel is interesting in itself. Readily verbed as `blackhole': "That router is blackholing IDP packets." Compare bit bucket and see RBL. black magic n. [common] A technique that works, though nobody really understands why. More obscure than voodoo programming, which may be done by cookbook. Compare also black art, deep magic, and magic number (sense 2). Black Screen of Death n. [prob. related to the Floating Head of Death in a famous "Far Side" cartoon.] A failure mode of Microsloth Windows. On an attempt to launch a DOS box, a networked Windows system not uncommonly blanks the screen and locks up the PC so hard that it requires a cold boot to recover. This unhappy phenomenon is known as The Black Screen of Death. See also Blue Screen of Death, which has become rather more common. Black Thursday n. February 8th, 1996 - the day of the signing into law of the CDA, so called by analogy with the catastrophic "Black Friday" in 1929 that began the Great Depression. blammo v. [Oxford Brookes University and alumni, UK] To forcibly remove someone from any interactive system, especially talker systems. The operators, who may remain hidden, may `blammo' a user who is misbehaving. Very similar to MIT gun; in fact, the `blammo-gun' is a notional device used to `blammo' someone. While in actual fact the only incarnation of the blammo-gun is the command used to forcibly eject a user, operators speak of different levels of blammo-gun fire; e.g., a blammo-gun to `stun' will temporarily remove someone, but a blammo-gun set to `maim' will stop someone coming back on for a while. = blargh /blarg/ n. [MIT; now common] The opposite of ping, sense 5; an exclamation indicating that one has absorbed or is emitting a quantum of unhappiness. Less common than ping. = blast 1. v.,n. Synonym for BLT, used esp. for large data sends over a network or comm line. Opposite of snarf. Usage: uncommon. The variant `blat' has been reported. 2. vt. [HP/Apollo] Synonymous with nuke (sense 3). Sometimes the message Unable to kill all processes. Blast them (y/n)? would appear in the command window upon logout. = blat n. 1. Syn. blast, sense 1. 2. See thud. bletch /blech/ interj. [very common; from Yiddish/German `brechen', to vomit, poss. via comic-strip exclamation `blech'] Term of disgust. Often used in "Ugh, bletch". Compare barf. = bletcherous /blech'*-r*s/ adj. Disgusting in design or function; esthetically unappealing. This word is seldom used of people. "This keyboard is bletcherous!" (Perhaps the keys don't work very well, or are misplaced.) See losing, cretinous, bagbiting, bogus, and random. The term bletcherous applies to the esthetics of the thing so described; similarly for cretinous. By contrast, something that is `losing' or `bagbiting' may be failing to meet objective criteria. See also bogus and random, which have richer and wider shades of meaning than any of the above. blink vi.,n. To use a navigator or off-line message reader to minimize time spent on-line to a commercial network service (a necessity in many places outside the U.S. where the telecoms monopolies charge per-minute for local calls). This term attained wide use in the UK, but is rare or unknown in the US. = blinkenlights /blink'*n-li:tz/ n. [common] Front-panel diagnostic lights on a computer, esp. a dinosaur. Now that dinosaurs are rare, this term usually refers to status lights on a modem, network hub, or the like. This term derives from the last word of the famous blackletter-Gothic sign in mangled pseudo-German that once graced about half the computer rooms in the English-speaking world. One version ran in its entirety as follows: ACHTUNG! ALLES LOOKENSPEEPERS! Das computermachine ist nicht fuer gefingerpoken und mittengrabben. Ist easy schnappen der springenwerk, blowenfusen und poppencorken mit spitzensparken. Ist nicht fuer gewerken bei das dumpkopfen. Das rubbernecken sichtseeren keepen das cotten-pickenen hans in das pockets muss; relaxen und watchen das blinkenlichten. This silliness dates back at least as far as 1959 at Stanford University and had already gone international by the early 1960s, when it was reported at London University's ATLAS computing site. There are several variants of it in circulation, some of which actually do end with the word `blinkenlights'. In an amusing example of turnabout-is-fair-play, German hackers have developed their own versions of the blinkenlights poster in fractured English, one of which is reproduced here: ATTENTION This room is fullfilled mit special electronische equippment. Fingergrabbing and pressing the cnoeppkes from the computers is allowed for die experts only! So all the "lefthanders" stay away and do not disturben the brainstorming von here working intelligencies. Otherwise you will be out thrown and kicked anderswhere! Also: please keep still and only watchen astaunished the blinkenlights. See also geef. Old-time hackers sometimes get nostalgic for blinkenlights because they were so much more fun to look at than a blank panel. Sadly, very few computers still have them (the three LEDs on a PC keyboard certainly don't count). The obvious reasons (cost of wiring, cost of front-panel cutouts, almost nobody needs or wants to interpret machine-register states on the fly anymore) are only part of the story. Another part of it is that radio-frequency leakage from the lamp wiring was beginning to be a problem as far back as transistor machines. But the most fundamental fact is that there are very few signals slow enough to blink an LED these days! With slow CPUs, you could watch the bus register or instruction counter tick, but at 33/66/150MHz it's all a blur. Finally, a version updated for the Internet has been seen on _news.admin.net-abuse.email_: ACHTUNG! ALLES LOOKENSPEEPERS! Das Internet is nicht fuer gefingerclicken und giffengrabben. Ist easy droppenpacket der routers und overloaden der backbone mit der spammen und der me-tooen. Ist nicht fuer gewerken bei das dumpkopfen. Das mausklicken sichtseeren keepen das bandwit-spewin hans in das pockets muss; relaxen und watchen das cursorblinken. This newest version partly reflects reports that the word `blinkenlights' is (in 1999) undergoing something of a revival in usage, but applied to networking equipment. The transmit and receive lights on routers, activity lights on switches and hubs, and other network equipment often blink in visually pleasing and seemingly coordinated ways. Although this is different in some ways from register readings, a tall stack of Cisco equipment or a 19-inch rack of ISDN terminals can provoke a similar feeling of hypnotic awe, especially in a darkened network operations center or server room. blit /blit/ vt. 1. [common] To copy a large array of bits from one part of a computer's memory to another part, particularly when the memory is being used to determine what is shown on a display screen. "The storage allocator picks through the table and copies the good parts up into high memory, and then blits it all back down again." See bitblt, BLT, dd, cat, blast, snarf. More generally, to perform some operation (such as toggling) on a large array of bits while moving them. 2. [historical, rare] Sometimes all-capitalized as `BLIT': an early experimental bit-mapped terminal designed by Rob Pike at Bell Labs, later commercialized as the AT&T 5620. (The folk etymology from `Bell Labs Intelligent Terminal' is incorrect. Its creators liked to claim that "Blit" stood for the Bacon, Lettuce, and Interactive Tomato.) blitter /blit'r/ n. [common] A special-purpose chip or hardware system built to perform blit operations, esp. used for fast implementation of bit-mapped graphics. The Commodore Amiga and a few other micros have these, but since 1990 the trend has been away from them (however, see cycle of reincarnation). Syn. raster blaster. = blivet /bliv'*t/ n. [allegedly from a World War II military term meaning "ten pounds of manure in a five-pound bag"] 1. An intractable problem. 2. A crucial piece of hardware that can't be fixed or replaced if it breaks. 3. A tool that has been hacked over by so many incompetent programmers that it has become an unmaintainable tissue of hacks. 4. An out-of-control but unkillable development effort. 5. An embarrassing bug that pops up during a customer demo. 6. In the subjargon of computer security specialists, a denial-of-service attack performed by hogging limited resources that have no access controls (for example, shared spool space on a multi-user system). This term has other meanings in other technical cultures; among experimental physicists and hardware engineers of various kinds it seems to mean any random object of unknown purpose (similar to hackish use of frob). It has also been used to describe an amusing trick-the-eye drawing resembling a three-pronged fork that appears to depict a three-dimensional object until one realizes that the parts fit together in an impossible way. = bloatware n. [common] Software that provides minimal functionality while requiring a disproportionate amount of diskspace and memory. Especially used for application and OS upgrades. This term is very common in the Windows/NT world. So is its cause. BLOB 1. n. [acronym: Binary Large OBject] Used by database people to refer to any random large block of bits that needs to be stored in a database, such as a picture or sound file. The essential point about a BLOB is that it's an object that cannot be interpreted within the database itself. 2. v. To mailbomb someone by sending a BLOB to him/her; esp. used as a mild threat. "If that program crashes again, I'm going to BLOB the core dump to you." block v. [common; from process scheduling terminology in OS theory] 1. vi. To delay or sit idle while waiting for something. "We're blocking until everyone gets here." Compare busy-wait. 2. `block on' vt. To block, waiting for (something). "Lunch is blocked on Phil's arrival." = block transfer computations n. [from the television series "Dr. Who"] Computations so fiendishly subtle and complex that they could not be performed by machines. Used to refer to any task that should be expressible as an algorithm in theory, but isn't. (The Z80's LDIR instruction, "Computed Block Transfer with increment", may also be relevant.) B = Bloggs Family n. An imaginary family consisting of Fred and Mary Bloggs and their children. Used as a standard example in knowledge representation to show the difference between extensional and intensional objects. For example, every occurrence of "Fred Bloggs" is the same unique person, whereas occurrences of "person" may refer to different people. Members of the Bloggs family have been known to pop up in bizarre places such as the old DEC Telephone Directory. Compare Dr. Fred Mbogo; J. Random Hacker; Fred Foobar. blow an EPROM /bloh *n ee'prom/ v. (alt. `blast an EPROM', `burn an EPROM') To program a read-only memory, e.g. for use with an embedded system. This term arose because the programming process for the Programmable Read-Only Memories (PROMs) that preceded present-day Erasable Programmable Read-Only Memories (EPROMs) involved intentionally blowing tiny electrical fuses on the chip. The usage lives on (it's too vivid and expressive to discard) even though the write process on EPROMs is nondestructive. blow away vt. To remove (files and directories) from permanent storage, generally by accident. "He reformatted the wrong partition and blew away last night's netnews." Oppose nuke. blow out vi. [prob. from mining and tunneling jargon] Of software, to fail spectacularly; almost as serious as crash and burn. See blow past, blow up, die horribly. blow past vt. To blow out despite a safeguard. "The server blew past the 5K reserve buffer." blow up vi. 1. [scientific computation] To become unstable. Suggests that the computation is diverging so rapidly that it will soon overflow or at least go nonlinear. 2. Syn. blow out. B = BLT /B-L-T/, /bl*t/ or (rarely) /belt/ n.,vt. Synonym for blit. This is the original form of blit and the ancestor of bitblt. It referred to any large bit-field copy or move operation (one resource-intensive memory-shuffling operation done on pre-paged versions of ITS, WAITS, and TOPS-10 was sardonically referred to as `The Big BLT'). The jargon usage has outlasted the PDP-10 BLock Transfer instruction from which BLT derives; nowadays, the assembler mnemonic BLT almost always means `Branch if Less Than zero'. Blue Book n. 1. Informal name for one of the four standard references on the page-layout and graphics-control language PostScript ("PostScript Language Tutorial and Cookbook", Adobe Systems, Addison-Wesley 1985, QA76.73.P67P68, ISBN 0-201-10179-3); the other three official guides are known as the Green Book, the Red Book, and the White Book (sense 2). 2. Informal name for one of the three standard references on Smalltalk: "Smalltalk-80: The Language and its Implementation", David Robson, Addison-Wesley 1983, QA76.8.S635G64, ISBN 0-201-11371-63 (this book also has green and red siblings). 3. Any of the 1988 standards issued by the CCITT's ninth plenary assembly. These include, among other things, the X.400 email spec and the Group 1 through 4 fax standards. See also book titles. blue box n. 1. obs. Once upon a time, before all-digital switches made it possible for the phone companies to move them out of band, one could actually hear the switching tones used to route long-distance calls. Early phreakers built devices called `blue boxes' that could reproduce these tones, which could be used to commandeer portions of the phone network. (This was not as hard as it may sound; one early phreak acquired the sobriquet `Captain Crunch' after he proved that he could generate switching tones with a plastic whistle pulled out of a box of Captain Crunch cereal!) There were other colors of box with more specialized phreaking uses; red boxes, black boxes, silver boxes, etc. 2. n. An IBM machine, especially a large (non-PC) one. Blue Glue n. [IBM] IBM's SNA (Systems Network Architecture), an incredibly losing and bletcherous communications protocol widely favored at commercial shops that don't know any better. The official IBM definition is "that which binds blue boxes together." See fear and loathing. It may not be irrelevant that Blue Glue is the trade name of a 3M product that is commonly used to hold down the carpet squares to the removable panel floors common in dinosaur pens. A correspondent at U. Minn. reports that the CS department there has about 80 bottles of the stuff hanging about, so they often refer to any messy work to be done as `using the blue glue'. blue goo n. Term for `police' nanobots intended to prevent gray goo, denature hazardous waste, destroy pollution, put ozone back into the stratosphere, prevent halitosis, and promote truth, justice, and the American way, etc. The term `Blue Goo' can be found in Dr. Seuss's "Fox In Socks" to refer to a substance much like bubblegum. `Would you like to chew blue goo, sir?'. See nanotechnology. Blue Screen of Death n. [common] This term is closely related to the older Black Screen of Death but much more common (many non-hackers have picked it up). Due to the extreme fragility and bugginess of Microsoft Windows misbehaving applications can readily crash the OS (and the OS sometimes crashes itself spontaneously). The Blue Screen of Death, sometimes decorated with hex error codes, is what you get when this happens. (Commonly abbreviated BSOD.) The following entry from the Salon Haiku Contest, seems to have predated popular use of the term: Windows NT crashed. I am the Blue Screen of Death No one hears your screams. blue wire n. [IBM] Patch wires (esp. 30 AWG gauge) added to circuit boards at the factory to correct design or fabrication problems. Blue wire is not necessarily blue, the term describes function rather than color. These may be necessary if there hasn't been time to design and qualify another board version. In Great Britain this can be `bodge wire', after mainstreanm slang `bodge' for a clumsy improvisation or sloppy job of work. Compare purple wire, red wire, yellow wire, pink wire. blurgle /bler'gl/ n. [UK] Spoken metasyntactic variable, to indicate some text that is obvious from context, or which is already known. If several words are to be replaced, blurgle may well be doubled or tripled. "To look for something in several files use `grep string blurgle blurgle'." In each case, "blurgle blurgle" would be understood to be replaced by the file you wished to search. Compare mumble, sense 7. = BNF /B-N-F/ n. 1. [techspeak] Acronym for `Backus Normal Form' (later retronymed to `Backus-Naur Form' because BNF was not in fact a normal form), a metasyntactic notation used to specify the syntax of programming languages, command sets, and the like. Widely used for language descriptions but seldom documented anywhere, so that it must usually be learned by osmosis from other hackers. Consider this BNF for a U.S. postal address: <postal-address> ::= <name-part> <street-address> <zip-part> <personal-part> ::= <name> | <initial> "." <name-part> ::= <personal-part> <last-name> [<jr-part>] <EOL> | <personal-part> <name-part> <street-address> ::= [<apt>] <house-num> <street-name> <EOL> <zip-part> ::= <town-name> "," <state-code> <ZIP-code> <EOL> This translates into English as: "A postal-address consists of a name-part, followed by a street-address part, followed by a zip-code part. A personal-part consists of either a first name or an initial followed by a dot. A name-part consists of either: a personal-part followed by a last name followed by an optional `jr-part' (Jr., Sr., or dynastic number) and end-of-line, or a personal part followed by a name part (this rule illustrates the use of recursion in BNFs, covering the case of people who use multiple first and middle names and/or initials). A street address consists of an optional apartment specifier, followed by a street number, followed by a street name. A zip-part consists of a town-name, followed by a comma, followed by a state code, followed by a ZIP-code followed by an end-of-line." Note that many things (such as the format of a personal-part, apartment specifier, or ZIP-code) are left unspecified. These are presumed to be obvious from context or detailed somewhere nearby. See also parse. 2. Any of a number of variants and extensions of BNF proper, possibly containing some or all of the regexp wildcards such as * or +. In fact the example above isn't the pure form invented for the Algol-60 report; it uses [], which was introduced a few years later in IBM's PL/I definition but is now universally recognized. 3. In science-fiction fandom, a `Big-Name Fan' (someone famous or notorious). Years ago a fan started handing out black-on-green BNF buttons at SF conventions; this confused the hacker contingent terribly. boa [IBM] n. Any one of the fat cables that lurk under the floor in a dinosaur pen. Possibly so called because they display a ferocious life of their own when you try to lay them straight and flat after they have been coiled for some time. It is rumored within IBM that channel cables for the 370 are limited to 200 feet because beyond that length the boas get dangerous -- and it is worth noting that one of the major cable makers uses the trademark `Anaconda'. = board n. 1. In-context synonym for bboard; sometimes used even for Usenet newsgroups (but see usage note under bboard, sense 1). 2. An electronic circuit board. = boat anchor n. [common; from ham radio] 1. Like doorstop but more severe; implies that the offending hardware is irreversibly dead or useless. "That was a working motherboard once. One lightning strike later, instant boat anchor!" 2. A person who just takes up space. 3. Obsolete but still working hardware, especially when used of an old S100-bus hobbyist system; originally a term of annoyance, but became more and more affectionate as the hardware became more and more obsolete. bob n. At Demon Internet, all tech support personnel are called "Bob". (Female support personnel have an option on "Bobette"). This has nothing to do with Bob the divine drilling-equipment salesman of the Church of the SubGenius. Nor is it acronymized from "Brother Of BOFH", though all parties agree it could have been. Rather, it was triggered by an unusually large draft of new tech-support people in 1995. It was observed that there would be much duplication of names. To ease the confusion, it was decided that all support techs would henceforth be known as "Bob", and identity badges were created labelled "Bob 1" and "Bob 2". ("No, we never got any further" reports a witness). The reason for "Bob" rather than anything else is due to a luser calling and asking to speak to "Bob", despite the fact that no "Bob" was currently working for Tech Support. Since we all know "the customer is always right", it was decided that there had to be at least one "Bob" on duty at all times, just in case. This sillyness inexorably snowballed. Shift leaders and managers began to refer to their groups of "bobs". Whole ranks of support machines were set up (and still exist in the DNS as of 1999) as bob1 through bobN. Then came _alt.tech-support.recovery_, and it was filled with Demon support personnel. They all referred to themselves, and to others, as `bob', and after a while it caught on. There is now a Bob Code describing the Bob nature. bodysurf code n. A program or segment of code written quickly in the heat of inspiration without the benefit of formal design or deep thought. Like its namesake sport, the result is too often a wipeout that leaves the programmer eating sand. BOF /B-O-F/ or /bof/ n. 1. [common] Abbreviation for the phrase "Birds Of a Feather" (flocking together), an informal discussion group and/or bull session scheduled on a conference program. It is not clear where or when this term originated, but it is now associated with the USENIX conferences for Unix techies and was already established there by 1984. It was used earlier than that at DECUS conferences and is reported to have been common at SHARE meetings as far back as the early 1960s. 2. Acronym, `Beginning of File'. BOFH // n. [common] Acronym, Bastard Operator From Hell. A system administrator with absolutely no tolerance for lusers. "You say you need more filespace? <massive-global-delete> Seems to me you have plenty left..." Many BOFHs (and others who would be BOFHs if they could get away with it) hang out in the newsgroup _alt.sysadmin.recovery_, although there has also been created a top-level newsgroup hierarchy (_bofh.*_) of their own. Several people have written stories about BOFHs. The set usually considered canonical is by Simon Travaglia and may be found at the Bastard Home Page. BOFHs and BOFH wannabes hang out on scary devil monastery and wield LARTs. bogo-sort /boh`goh-sort'/ n. (var. `stupid-sort') The archetypical perversely awful algorithm (as opposed to bubble sort, which is merely the generic bad algorithm). Bogo-sort is equivalent to repeatedly throwing a deck of cards in the air, picking them up at random, and then testing whether they are in order. It serves as a sort of canonical example of awfulness. Looking at a program and seeing a dumb algorithm, one might say "Oh, I see, this program uses bogo-sort." Esp. appropriate for algorithms with factorial or super-exponential running time in the average case and probabilistically infinite worst-case running time. Compare bogus, brute force, lasherism. A spectacular variant of bogo-sort has been proposed which has the interesting property that, if the Many Worlds interpretation of quantum mechanics is true, it can sort an arbitrarily large array in constant time. (In the Many-Worlds model, the result of any quantum action is to split the universe-before into a sheaf of universes-after, one for each possible way the state vector can collapse; in any one of the universes-after the result appears random.) The steps are: 1. Permute the array randomly using a quantum process, 2. If the array is not sorted, destroy the universe. Implementation of step 2 is left as an exercise for the reader. bogometer /boh-gom'-*t-er/ n. A notional instrument for measuring bogosity. Compare the Troll-O-Meter and the `wankometer' described in the wank entry; see also bogus. BogoMIPS /bo'go-mips/ n. The number of million times a second a processor can do absolutely nothing. The Linux OS measures BogoMIPS at startup in order to calibrate some soft timing loops that will be used later on; details at the BogoMIPS mini-HOWTO. The name Linus chose, of course, is an ironic comment on the uselessness of all other MIPS figures. bogon /boh'gon/ n. [very common; by analogy with proton/electron/neutron, but doubtless reinforced after 1980 by the similarity to Douglas Adams's `Vogons'; see the Bibliography in Appendix C and note that Arthur Dent actually mispronounces `Vogons' as `Bogons' at one point] 1. The elementary particle of bogosity (see quantum bogodynamics). For instance, "the Ethernet is emitting bogons again" means that it is broken or acting in an erratic or bogus fashion. 2. A query packet sent from a TCP/IP domain resolver to a root server, having the reply bit set instead of the query bit. 3. Any bogus or incorrectly formed packet sent on a network. 4. By synecdoche, used to refer to any bogus thing, as in "I'd like to go to lunch with you but I've got to go to the weekly staff bogon". 5. A person who is bogus or who says bogus things. This was historically the original usage, but has been overtaken by its derivative senses 1-4. See also bogosity, bogus; compare psyton, fat electrons, magic smoke. The bogon has become the type case for a whole bestiary of nonce particle names, including the `clutron' or `cluon' (indivisible particle of cluefulness, obviously the antiparticle of the bogon) and the futon (elementary particle of randomness, or sometimes of lameness). These are not so much live usages in themselves as examples of a live meta-usage: that is, it has become a standard joke or linguistic maneuver to "explain" otherwise mysterious circumstances by inventing nonce particle names. And these imply nonce particle theories, with all their dignity or lack thereof (we might note parenthetically that this is a generalization from "(bogus particle) theories" to "bogus (particle theories)"!). Perhaps such particles are the modern-day equivalents of trolls and wood-nymphs as standard starting-points around which to construct explanatory myths. Of course, playing on an existing word (as in the `futon') yields additional flavor. Compare magic smoke. bogon filter /boh'gon fil'tr/ n. Any device, software or hardware, that limits or suppresses the flow and/or emission of bogons. "Engineering hacked a bogon filter between the Cray and the VAXen, and now we're getting fewer dropped packets." See also bogosity, bogus. bogon flux /boh'gon fluhks/ n. A measure of a supposed field of bogosity emitted by a speaker, measured by a bogometer; as a speaker starts to wander into increasing bogosity a listener might say "Warning, warning, bogon flux is rising". See quantum bogodynamics. bogosity /boh-go's*-tee/ n. 1. [orig. CMU, now very common] The degree to which something is bogus. Bogosity is measured with a bogometer; in a seminar, when a speaker says something bogus, a listener might raise his hand and say "My bogometer just triggered". More extremely, "You just pinned my bogometer" means you just said or did something so outrageously bogus that it is off the scale, pinning the bogometer needle at the highest possible reading (one might also say "You just redlined my bogometer"). The agreed-upon unit of bogosity is the microLenat. 2. The potential field generated by a bogon flux; see quantum bogodynamics. See also bogon flux, bogon filter, bogus. B = bogotify /boh-go't*-fi:/ vt. To make or become bogus. A program that has been changed so many times as to become completely disorganized has become bogotified. If you tighten a nut too hard and strip the threads on the bolt, the bolt has become bogotified and you had better not use it any more. This coinage led to the notional `autobogotiphobia' defined as `the fear of becoming bogotified'; but is not clear that the latter has ever been `live' jargon rather than a self-conscious joke in jargon about jargon. See also bogosity, bogus. B = bogue out /bohg owt/ vi. To become bogus, suddenly and unexpectedly. "His talk was relatively sane until somebody asked him a trick question; then he bogued out and did nothing but flame afterwards." See also bogosity, bogus. bogus adj. 1. Non-functional. "Your patches are bogus." 2. Useless. "OPCON is a bogus program." 3. False. "Your arguments are bogus." 4. Incorrect. "That algorithm is bogus." 5. Unbelievable. "You claim to have solved the halting problem for Turing Machines? That's totally bogus." 6. Silly. "Stop writing those bogus sagas." Astrology is bogus. So is a bolt that is obviously about to break. So is someone who makes blatantly false claims to have solved a scientific problem. (This word seems to have some, but not all, of the connotations of random -- mostly the negative ones.) It is claimed that `bogus' was originally used in the hackish sense at Princeton in the late 1960s. It was spread to CMU and Yale by Michael Shamos, a migratory Princeton alumnus. A glossary of bogus words was compiled at Yale when the word was first popularized there about 1975-76. These coinages spread into hackerdom from CMU and MIT. Most of them remained wordplay objects rather than actual vocabulary items or live metaphors. Examples: `amboguous' (having multiple bogus interpretations); `bogotissimo' (in a gloriously bogus manner); `bogotophile' (one who is pathologically fascinated by the bogus); `paleobogology' (the study of primeval bogosity). Some bogowords, however, obtained sufficient live currency to be listed elsewhere in this lexicon; see bogometer, bogon, bogotify, and quantum bogodynamics and the related but unlisted Dr. Fred Mbogo. By the early 1980s `bogus' was also current in something like hacker usage sense in West Coast teen slang, and it had gone mainstream by 1985. A correspondent from Cambridge reports, by contrast, that these uses of `bogus' grate on British nerves; in Britain the word means, rather specifically, `counterfeit', as in "a bogus 10-pound note". = Bohr bug /bohr buhg/ n. [from quantum physics] A repeatable bug; one that manifests reliably under a possibly unknown but well-defined set of conditions. Antonym of heisenbug; see also mandelbug, schroedinbug. boink /boynk/ [Usenet: variously ascribed to the TV series "Cheers" "Moonlighting", and "Soap"] 1. v. To have sex with; compare bounce, sense 3. (This is mainstream slang.) In Commonwealth hackish the variant `bonk' is more common. 2. n. After the original Peter Korn `Boinkon' Usenet parties, used for almost any net social gathering, e.g., Miniboink, a small boink held by Nancy Gillett in 1988; Minniboink, a Boinkcon in Minnesota in 1989; Humpdayboinks, Wednesday get-togethers held in the San Francisco Bay Area. Compare @-party. 3. Var of `bonk'; see bonk/oif. bomb 1. v. General synonym for crash (sense 1) except that it is not used as a noun; esp. used of software or OS failures. "Don't run Empire with less than 32K stack, it'll bomb." 2. n.,v. Atari ST and Macintosh equivalents of a Unix `panic' or Amiga guru meditation, in which icons of little black-powder bombs or mushroom clouds are displayed, indicating that the system has died. On the Mac, this may be accompanied by a decimal (or occasionally hexadecimal) number indicating what went wrong, similar to the Amiga guru meditation number. MS-DOS machines tend to get locked up in this situation. bondage-and-discipline language n. A language (such as Pascal, Ada, APL, or Prolog) that, though ostensibly general-purpose, is designed so as to enforce an author's theory of `right programming' even though said theory is demonstrably inadequate for systems hacking or even vanilla general-purpose programming. Often abbreviated `B&D'; thus, one may speak of things "having the B&D nature". See Pascal; oppose languages of choice. bonk/oif /bonk/, /oyf/ interj. In the U.S. MUD community, it has become traditional to express pique or censure by `bonking' the offending person. Convention holds that one should acknowledge a bonk by saying `oif!' and there is a myth to the effect that failing to do so upsets the cosmic bonk/oif balance, causing much trouble in the universe. Some MUDs have implemented special commands for bonking and oifing. Note: in parts of the U.K. `bonk' is a sexually loaded slang term; care is advised in transatlantic conversations (see boink). Commonwealth hackers report a similar convention involving the `fish/bang' balance. See also talk mode. book titles There is a tradition in hackerdom of informally tagging important textbooks and standards documents with the dominant color of their covers or with some other conspicuous feature of the cover. Many of these are described in this lexicon under their own entries. See Aluminum Book, Blue Book, Camel Book, Cinderella Book, Devil Book, Dragon Book, Green Book, Orange Book, Purple Book, Red Book, Silver Book, White Book, Wizard Book, Yellow Book, and bible; see also rainbow series. Since about 1983 this tradition has gotten a boost from the popular O'Reilly and Associates line of technical books, which usually feature some kind of exotic animal on the cover. boot v.,n. [techspeak; from `by one's bootstraps'] To load and initialize the operating system on a machine. This usage is no longer jargon (having passed into techspeak) but has given rise to some derivatives that are still jargon. The derivative `reboot' implies that the machine hasn't been down for long, or that the boot is a bounce (sense 4) intended to clear some state of wedgitude. This is sometimes used of human thought processes, as in the following exchange: "You've lost me." "OK, reboot. Here's the theory...." This term is also found in the variants `cold boot' (from power-off condition) and `warm boot' (with the CPU and all devices already powered up, as after a hardware reset or software crash). Another variant: `soft boot', reinitialization of only part of a system, under control of other software still running: "If you're running the mess-dos emulator, control-alt-insert will cause a soft-boot of the emulator, while leaving the rest of the system running." Opposed to this there is `hard boot', which connotes hostility towards or frustration with the machine being booted: "I'll have to hard-boot this losing Sun." "I recommend booting it hard." One often hard-boots by performing a power cycle. Historical note: this term derives from `bootstrap loader', a short program that was read in from cards or paper tape, or toggled in from the front panel switches. This program was always very short (great efforts were expended on making it short in order to minimize the labor and chance of error involved in toggling it in), but was just smart enough to read in a slightly more complex program (usually from a card or paper tape reader), to which it handed control; this program in turn was smart enough to read the application or operating system from a magnetic tape drive or disk drive. Thus, in successive steps, the computer `pulled itself up by its bootstraps' to a useful operating state. Nowadays the bootstrap is usually found in ROM or EPROM, and reads the first stage in from a fixed location on the disk, called the `boot block'. When this program gains control, it is powerful enough to load the actual OS and hand control over to it. Borg n. In "Star Trek: The Next Generation" the Borg is a species of cyborg that ruthlessly seeks to incorporate all sentient life into itself; their slogan is "You will be assimilated. Resistance is futile." In hacker parlance, the Borg is usually Microsoft, which is thought to be trying just as ruthlessly to assimilate all computers and the entire Internet to itself (there is a widely circulated image of Bill Gates as a Borg). Being forced to use Windows or NT is often referred to as being "Borged". Interestingly, the Halloween Documents reveal that this jargon is live within Microsoft itself. (Other companies, notably Intel and UUNet, have also occasionally been equated to the Borg.) See also Evil Empire, Internet Exploiter. In IETF circles, where direct pressure from Microsoft is not a daily reality, the Borg is sometimes Cisco. This usage commemmorates their tendency to pay any price to hire talent away from their competitors. In fact, at the Spring 1997 IETF, a large number of ex-Cisco employees, all former members of Routing Geeks, showed up with t-shirts printed with "Recovering Borg". borken adj. (also `borked') Common deliberate typo for `broken'. = bot n [common on IRC, MUD and among gamers; from `robot'] 1. An IRC or MUD user who is actually a program. On IRC, typically the robot provides some useful service. Examples are NickServ, which tries to prevent random users from adopting nicks already claimed by others, and MsgServ, which allows one to send asynchronous messages to be delivered when the recipient signs on. Also common are `annoybots', such as KissServ, which perform no useful function except to send cute messages to other people. Service bots are less common on MUDs; but some others, such as the `Julia' bot active in 1990-91, have been remarkably impressive Turing-test experiments, able to pass as human for as long as ten or fifteen minutes of conversation. 2. An AI-controlled player in a computer game (especially a first-person shooter such as Quake) which, unlike ordinary monsters, operates like a human-controlled player, with access to a player's weapons and abilities. An example can be found at http://www.telefragged.com/thefatal/. 3. Term used, though less commonly, for a web spider. The file for controlling spider behavior on your site is officially the "Robots Exclusion File" and its URL is "http://<somehost>/robots.txt") Note that bots in all senses were `robots' when the terms first appeared in the early 1990s, but the shortened form is now habitual. = bot spot n. [MUD] The user on a MUD with the longest connect time. Derives from the fact that bots on MUDS often stay constantly connected and appear at the bottom of the list. bottom feeder n. 1. An Internet user that leeches off ISPs - the sort you can never provide good enough services for, always complains about the price, no matter how low it may be, and will bolt off to another service the moment there is even the slimmest price difference. While most bottom feeders infest free or almost free services such as AOL, MSN, and Hotmail, too many flock to whomever happens to be the cheapest regional ISP at the time. Bottom feeders are often the classic problem user, known for unleashing spam, flamage, and other breaches of netiquette. 2. Syn. for slopsucker, derived from the fishermen's and naturalists' term for finny creatures who subsist on the primordial ooze. (This sense is older.) bottom-up implementation n. Hackish opposite of the techspeak term `top-down design'. It has been received wisdom in most programming cultures that it is best to design from higher levels of abstraction down to lower, specifying sequences of action in increasing detail until you get to actual code. Hackers often find (especially in exploratory designs that cannot be closely specified in advance) that it works best to build things in the opposite order, by writing and testing a clean set of primitive operations and then knitting them together. Naively applied, this leads to hacked-together bottom-up implementations; a more sophisticated response is `middle-out implementation', in which scratch code within primitives at the mid-level of the system is gradually replaced with a more polished version of the lowest level at the same time the structure above the midlevel is being built. = bounce v. 1. [common; perhaps by analogy to a bouncing check] An electronic mail message that is undeliverable and returns an error notification to the sender is said to `bounce'. See also bounce message. 2. [Stanford] To play volleyball. The now-demolished D. C. Power Lab building used by the Stanford AI Lab in the 1970s had a volleyball court on the front lawn. From 5 P.M. to 7 P.M. was the scheduled maintenance time for the computer, so every afternoon at 5 would come over the intercom the cry: "Now hear this: bounce, bounce!", followed by Brian McCune loudly bouncing a volleyball on the floor outside the offices of known volleyballers. 3. To engage in sexual intercourse; prob. from the expression `bouncing the mattress', but influenced by Roo's psychosexually loaded "Try bouncing me, Tigger!" from the "Winnie-the-Pooh" books. Compare boink. 4. To casually reboot a system in order to clear up a transient problem. Reported primarily among VMS and Unix users. 5. [VM/CMS programmers] Automatic warm-start of a machine after an error. "I logged on this morning and found it had bounced 7 times during the night" 6. [IBM] To power cycle a peripheral in order to reset it. bounce message n. [common] Notification message returned to sender by a site unable to relay email to the intended Internet address recipient or the next link in a bang path (see bounce, sense 1). Reasons might include a nonexistent or misspelled username or a down relay site. Bounce messages can themselves fail, with occasionally ugly results; see sorcerer's apprentice mode and software laser. The terms `bounce mail' and `barfmail' are also common. boustrophedon n. [from a Greek word for turning like an ox while plowing] An ancient method of writing using alternate left-to-right and right-to-left lines. This term is actually philologists' techspeak and typesetters' jargon. Erudite hackers use it for an optimization performed by some computer typesetting software and moving-head printers. The adverbial form `boustrophedonically' is also found (hackers purely love constructions like this). box n. 1. A computer; esp. in the construction `foo box' where _foo_ is some functional qualifier, like `graphics', or the name of an OS (thus, `Unix box', `MS-DOS box', etc.) "We preprocess the data on Unix boxes before handing it up to the mainframe." 2. [IBM] Without qualification but within an SNA-using site, this refers specifically to an IBM front-end processor or FEP /F-E-P/. An FEP is a small computer necessary to enable an IBM mainframe to communicate beyond the limits of the dinosaur pen. Typically used in expressions like the cry that goes up when an SNA network goes down: "Looks like the box has fallen over." (See fall over.) See also IBM, fear and loathing, Blue Glue. boxed comments n. Comments (explanatory notes attached to program instructions) that occupy several lines by themselves; so called because in assembler and C code they are often surrounded by a box in a style something like this: /************************************************* * * This is a boxed comment in C style * *************************************************/ Common variants of this style omit the asterisks in column 2 or add a matching row of asterisks closing the right side of the box. The sparest variant omits all but the comment delimiters themselves; the `box' is implied. Oppose winged comments. boxen /bok'sn/ pl.n. [very common; by analogy with VAXen] Fanciful plural of box often encountered in the phrase `Unix boxen', used to describe commodity Unix hardware. The connotation is that any two Unix boxen are interchangeable. = boxology /bok-sol'*-jee/ n. Syn. ASCII art. This term implies a more restricted domain, that of box-and-arrow drawings. "His report has a lot of boxology in it." Compare macrology. B = bozotic /boh-zoh'tik/ or /boh-zo'tik/ adj. [from the name of a TV clown even more losing than Ronald McDonald] Resembling or having the quality of a bozo; that is, clownish, ludicrously wrong, unintentionally humorous. Compare wonky, demented. Note that the noun `bozo' occurs in slang, but the mainstream adjectival form would be `bozo-like' or (in New England) `bozoish'. = BQS /B-Q-S/ adj. Syn. Berkeley Quality Software. = brain dump n. [common] The act of telling someone everything one knows about a particular topic or project. Typically used when someone is going to let a new party maintain a piece of code. Conceptually analogous to an operating system core dump in that it saves a lot of useful state before an exit. "You'll have to give me a brain dump on FOOBAR before you start your new job at HackerCorp." See core dump (sense 4). At Sun, this is also known as `TOI' (transfer of information). brain fart n. The actual result of a braino, as opposed to the mental glitch that is the braino itself. E.g., typing dir on a Unix box after a session with DOS. brain-damaged adj. 1. [common; generalization of `Honeywell Brain Damage' (HBD), a theoretical disease invented to explain certain utter cretinisms in Honeywell Multics] adj. Obviously wrong; cretinous; demented. There is an implication that the person responsible must have suffered brain damage, because he should have known better. Calling something brain-damaged is really bad; it also implies it is unusable, and that its failure to work is due to poor design rather than some accident. "Only six monocase characters per file name? Now that's brain-damaged!" 2. [esp. in the Mac world] May refer to free demonstration software that has been deliberately crippled in some way so as not to compete with the product it is intended to sell. Syn. crippleware. brain-dead adj. [common] Brain-damaged in the extreme. It tends to imply terminal design failure rather than malfunction or simple stupidity. "This comm program doesn't know how to send a break -- how brain-dead!" braino /bray'no/ n. Syn. for thinko. See also brain fart. branch to Fishkill n. [IBM: from the location of one of the corporation's facilities] Any unexpected jump in a program that produces catastrophic or just plain weird results. See jump off into never-never land, hyperspace. bread crumbs n. 1. Debugging statements inserted into a program that emit output or log indicators of the program's state to a file so you can see where it dies or pin down the cause of surprising behavior. The term is probably a reference to the Hansel and Gretel story from the Brothers Grimm or the older French folktale of Thumbelina; in several variants of these, a character leaves a trail of bread crumbs so as not to get lost in the woods. 2. In user-interface design, any feature that allows some tracking of where you've been, like coloring visited links purple rather than blue in Netscape (also called `footrinting'). break 1. vt. To cause to be broken (in any sense). "Your latest patch to the editor broke the paragraph commands." 2. v. (of a program) To stop temporarily, so that it may debugged. The place where it stops is a `breakpoint'. 3. [techspeak] vi. To send an RS-232 break (two character widths of line high) over a serial comm line. 4. [Unix] vi. To strike whatever key currently causes the tty driver to send SIGINT to the current process. Normally, break (sense 3), delete or control-C does this. 5. `break break' may be said to interrupt a conversation (this is an example of verb doubling). This usage comes from radio communications, which in turn probably came from landline telegraph/teleprinter usage, as badly abused in the Citizen's Band craze a few years ago. break-even point n. In the process of implementing a new computer language, the point at which the language is sufficiently effective that one can implement the language in itself. That is, for a new language called, hypothetically, FOOGOL, one has reached break-even when one can write a demonstration compiler for FOOGOL in FOOGOL, discard the original implementation language, and thereafter use working versions of FOOGOL to develop newer ones. This is an important milestone; see MFTL. Since this entry was first written, several correspondents have reported that there actually was a compiler for a tiny Algol-like language called Foogol floating around on various VAXen in the early and mid-1980s. A FOOGOL implementation is available at the Retrocomputing Museum http://www.ccil.org/retro. breath-of-life packet n. [XEROX PARC] An Ethernet packet that contains bootstrap (see boot) code, periodically sent out from a working computer to infuse the `breath of life' into any computer on the network that has happened to crash. Machines depending on such packets have sufficient hardware or firmware code to wait for (or request) such a packet during the reboot process. See also dickless workstation. The notional `kiss-of-death packet', with a function complementary to that of a breath-of-life packet, is recommended for dealing with hosts that consume too many network resources. Though `kiss-of-death packet' is usually used in jest, there is at least one documented instance of an Internet subnet with limited address-table slots in a gateway machine in which such packets were routinely used to compete for slots, rather like Christmas shoppers competing for scarce parking spaces. breedle n. See feep. = Breidbart Index /bri:d'bart ind*ks/ A measurement of the severity of spam invented by long-time hacker Seth Breidbart, used for programming cancelbots. The Breidbart Index takes into account the fact that excessive multi-posting EMP is worse than excessive cross-posting ECP. The Breidbart Index is computed as follows: For each article in a spam, take the square-root of the number of newsgroups to which the article is posted. The Breidbart Index is the sum of the square roots of all of the posts in the spam. For example, one article posted to nine newsgroups and again to sixteen would have BI = sqrt(9) + sqrt(16) = 7. It is generally agreed that a spam is cancelable if the Breidbart Index exceeds 20. The Breidbart Index accumulates over a 45-day window. Ten articles yesterday and ten articles today and ten articles tomorrow add up to a 30-article spam. Spam fighters will often reset the count if you can convince them that the spam was accidental and/or you have seen the error of your ways and won't repeat it. Breidbart Index can accumulate over multiple authors. For example, the "Make Money Fast" pyramid scheme exceeded a BI of 20 a long time ago, and is now considered "cancel on sight". bring X to its knees v. [common] To present a machine, operating system, piece of software, or algorithm with a load so extreme or pathological that it grinds to a halt. "To bring a MicroVAX to its knees, try twenty users running vi -- or four running EMACS." Compare hog. brittle adj. Said of software that is functional but easily broken by changes in operating environment or configuration, or by any minor tweak to the software itself. Also, any system that responds inappropriately and disastrously to abnormal but expected external stimuli; e.g., a file system that is usually totally scrambled by a power failure is said to be brittle. This term is often used to describe the results of a research effort that were never intended to be robust, but it can be applied to commercial software, which (due to closed-source development) displays the quality far more often than it ought to. Oppose robust. broadcast storm n. [common] An incorrect packet broadcast on a network that causes most hosts to respond all at once, typically with wrong answers that start the process over again. See network meltdown; compare mail storm. brochureware n. Planned but non-existent product like vaporware, but with the added implication that marketing is actively selling and promoting it (they've printed brochures). Brochureware is often deployed as a strategic weapon; the idea is to con customers into not committing to an existing product of the competition's. It is a safe bet that when a brochureware product finally becomes real, it will be more expensive than and inferior to the alternatives that had been available for years. broken adj. 1. Not working properly (of programs). 2. Behaving strangely; especially (when used of people) exhibiting extreme depression. broken arrow n. [IBM] The error code displayed on line 25 of a 3270 terminal (or a PC emulating a 3270) for various kinds of protocol violations and "unexpected" error conditions (including connection to a down computer). On a PC, simulated with `->/_', with the two center characters overstruck. Note: to appreciate this term fully, it helps to know that `broken arrow' is also military jargon for an accident involving nuclear weapons.... BrokenWindows n. Abusive hackerism for the crufty and elephantine X environment on Sun machines; properly called `OpenWindows'. broket /broh'k*t/ or /broh'ket`/ n. [rare; by analogy with `bracket': a `broken bracket'] Either of the characters < and >, when used as paired enclosing delimiters. This word originated as a contraction of the phrase `broken bracket', that is, a bracket that is bent in the middle. (At MIT, and apparently in the Real World as well, these are usually called angle brackets.) Brooks's Law prov. "Adding manpower to a late software project makes it later" -- a result of the fact that the expected advantage from splitting development work among N programmers is O(N) (that is, proportional to N), but the complexity and communications cost associated with coordinating and then merging their work is O(N^2) (that is, proportional to the square of N). The quote is from Fred Brooks, a manager of IBM's OS/360 project and author of "The Mythical Man-Month" (Addison-Wesley, 1975, ISBN 0-201-00650-2), an excellent early book on software engineering. The myth in question has been most tersely expressed as "Programmer time is fungible" and Brooks established conclusively that it is not. Hackers have never forgotten his advice (though it's not the whole story; see bazaar); too often, management still does. See also creationism, second-system effect, optimism. brown-paper-bag bug n. A bug in a public software release that is so embarrassing that the author notionally wears a brown paper bag over his head for a while so he won't be recognized on the net. Entered popular usage after the early-1999 release of the first Linux 2.2, which had one. The phrase was used in Linus Torvalds's apology posting. browser n. A program specifically designed to help users view and navigate hypertext, on-line documentation, or a database. While this general sense has been present in jargon for a long time, the proliferation of browsers for the World Wide Web after 1992 has made it much more popular and provided a central or default techspeak meaning of the word previously lacking in hacker usage. Nowadays, if someone mentions using a `browser' without qualification, one may assume it is a Web browser. BRS /B-R-S/ n. Syn. Big Red Switch. This abbreviation is fairly common on-line. brute force adj. Describes a primitive programming style, one in which the programmer relies on the computer's processing power instead of using his or her own intelligence to simplify the problem, often ignoring problems of scale and applying naive methods suited to small problems directly to large ones. The term can also be used in reference to programming style: brute-force programs are written in a heavyhanded, tedious way, full of repetition and devoid of any elegance or useful abstraction (see also brute force and ignorance). The canonical example of a brute-force algorithm is associated with the `traveling salesman problem' (TSP), a classical NP-hard problem: Suppose a person is in, say, Boston, and wishes to drive to N other cities. In what order should the cities be visited in order to minimize the distance travelled? The brute-force method is to simply generate all possible routes and compare the distances; while guaranteed to work and simple to implement, this algorithm is clearly very stupid in that it considers even obviously absurd routes (like going from Boston to Houston via San Francisco and New York, in that order). For very small N it works well, but it rapidly becomes absurdly inefficient when N increases (for N = 15, there are already 1,307,674,368,000 possible routes to consider, and for N = 1000 -- well, see bignum). Sometimes, unfortunately, there is no better general solution than brute force. See also NP-. A more simple-minded example of brute-force programming is finding the smallest number in a large list by first using an existing program to sort the list in ascending order, and then picking the first number off the front. Whether brute-force programming should actually be considered stupid or not depends on the context; if the problem is not terribly big, the extra CPU time spent on a brute-force solution may cost less than the programmer time it would take to develop a more `intelligent' algorithm. Additionally, a more intelligent algorithm may imply more long-term complexity cost and bug-chasing than are justified by the speed improvement. Ken Thompson, co-inventor of Unix, is reported to have uttered the epigram "When in doubt, use brute force". He probably intended this as a ha ha only serious, but the original Unix kernel's preference for simple, robust, and portable algorithms over brittle `smart' ones does seem to have been a significant factor in the success of that OS. Like so many other tradeoffs in software design, the choice between brute force and complex, finely-tuned cleverness is often a difficult one that requires both engineering savvy and delicate esthetic judgment. brute force and ignorance n. A popular design technique at many software houses -- brute force coding unrelieved by any knowledge of how problems have been previously solved in elegant ways. Dogmatic adherence to design methodologies tends to encourage this sort of thing. Characteristic of early larval stage programming; unfortunately, many never outgrow it. Often abbreviated BFI: "Gak, they used a bubble sort! That's strictly from BFI." Compare bogosity. BSD /B-S-D/ n. [abbreviation for `Berkeley Software Distribution'] a family of Unix versions for the DEC VAX and PDP-11 developed by Bill Joy and others at Berzerkeley starting around 1977, incorporating paged virtual memory, TCP/IP networking enhancements, and many other features. The BSD versions (4.1, 4.2, and 4.3) and the commercial versions derived from them (SunOS, ULTRIX, and Mt. Xinu) held the technical lead in the Unix world until AT&T's successful standardization efforts after about 1986; descendants including Free/Open/NetBSD, BSD/OS and MacOS X are still widely popular. Note that BSD versions going back to 2.9 are often referred to by their version numbers alone, without the BSD prefix. See 4.2, Unix, USG Unix. BSOD /B-S-O-D/ Very commmon abbreviation for Blue Screen of Death. Both spoken and written. BUAF // n. [abbreviation, from _alt.fan.warlord_] Big Ugly ASCII Font -- a special form of ASCII art. Various programs exist for rendering text strings into block, bloob, and pseudo-script fonts in cells between four and six character cells on a side; this is smaller than the letters generated by older banner (sense 2) programs. These are sometimes used to render one's name in a sig block, and are critically referred to as `BUAF's. See warlording. = BUAG // n. [abbreviation, from _alt.fan.warlord_] Big Ugly ASCII Graphic. Pejorative term for ugly ASCII art, especially as found in sig blocks. For some reason, mutations of the head of Bart Simpson are particularly common in the least imaginative sig blocks. See warlording. = bubble sort n. Techspeak for a particular sorting technique in which pairs of adjacent values in the list to be sorted are compared and interchanged if they are out of order; thus, list entries `bubble upward' in the list until they bump into one with a lower sort value. Because it is not very good relative to other methods and is the one typically stumbled on by naive and untutored programmers, hackers consider it the canonical example of a naive algorithm. (However, it's been shown by repeated experiment that below about 5000 records bubble-sort is OK anyway.) The canonical example of a really bad algorithm is bogo-sort. A bubble sort might be used out of ignorance, but any use of bogo-sort could issue only from brain damage or willful perversity. bucky bits /buh'kee bits/ n. 1. obs. The bits produced by the CONTROL and META shift keys on a SAIL keyboard (octal 200 and 400 respectively), resulting in a 9-bit keyboard character set. The MIT AI TV (Knight) keyboards extended this with TOP and separate left and right CONTROL and META keys, resulting in a 12-bit character set; later, LISP Machines added such keys as SUPER, HYPER, and GREEK (see space-cadet keyboard). 2. By extension, bits associated with `extra' shift keys on any keyboard, e.g., the ALT on an IBM PC or command and option keys on a Macintosh. It has long been rumored that `bucky bits' were named for Buckminster Fuller during a period when he was consulting at Stanford. Actually, bucky bits were invented by Niklaus Wirth when he was at Stanford in 1964-65; he first suggested the idea of an EDIT key to set the 8th bit of an otherwise 7-bit ASCII character). It seems that, unknown to Wirth, certain Stanford hackers had privately nicknamed him `Bucky' after a prominent portion of his dental anatomy, and this nickname transferred to the bit. Bucky-bit commands were used in a number of editors written at Stanford, including most notably TV-EDIT and NLS. The term spread to MIT and CMU early and is now in general use. Ironically, Wirth himself remained unaware of its derivation for nearly 30 years, until GLS dug up this history in early 1993! See double bucky, quadruple bucky. buffer chuck n. Shorter and ruder syn. for buffer overflow. buffer overflow n. What happens when you try to stuff more data into a buffer (holding area) than it can handle. This problem is commonly exploited by crackers to get arbitrary commands executed by a program running with root permissions. This may be due to a mismatch in the processing rates of the producing and consuming processes (see overrun and firehose syndrome), or because the buffer is simply too small to hold all the data that must accumulate before a piece of it can be processed. For example, in a text-processing tool that crunches a line at a time, a short line buffer can result in lossage as input from a long line overflows the buffer and trashes data beyond it. Good defensive programming would check for overflow on each character and stop accepting data when the buffer is full up. The term is used of and by humans in a metaphorical sense. "What time did I agree to meet you? My buffer must have overflowed." Or "If I answer that phone my buffer is going to overflow." See also spam, overrun screw. bug n. An unwanted and unintended property of a program or piece of hardware, esp. one that causes it to malfunction. Antonym of feature. Examples: "There's a bug in the editor: it writes things out backwards." "The system crashed because of a hardware bug." "Fred is a winner, but he has a few bugs" (i.e., Fred is a good guy, but he has a few personality problems). Historical note: Admiral Grace Hopper (an early computing pioneer better known for inventing COBOL) liked to tell a story in which a technician solved a glitch in the Harvard Mark II machine by pulling an actual insect out from between the contacts of one of its relays, and she subsequently promulgated bug in its hackish sense as a joke about the incident (though, as she was careful to admit, she was not there when it happened). For many years the logbook associated with the incident and the actual bug in question (a moth) sat in a display case at the Naval Surface Warfare Center (NSWC). The entire story, with a picture of the logbook and the moth taped into it, is recorded in the "Annals of the History of Computing", Vol. 3, No. 3 (July 1981), pp. 285-286. The text of the log entry (from September 9, 1947), reads "1545 Relay #70 Panel F (moth) in relay. First actual case of bug being found". This wording establishes that the term was already in use at the time in its current specific sense -- and Hopper herself reports that the term `bug' was regularly applied to problems in radar electronics during WWII. Indeed, the use of `bug' to mean an industrial defect was already established in Thomas Edison's time, and a more specific and rather modern use can be found in an electrical handbook from 1896 ("Hawkin's New Catechism of Electricity", Theo. Audel & Co.) which says: "The term `bug' is used to a limited extent to designate any fault or trouble in the connections or working of electric apparatus." It further notes that the term is "said to have originated in quadruplex telegraphy and have been transferred to all electric apparatus." The latter observation may explain a common folk etymology of the term; that it came from telephone company usage, in which "bugs in a telephone cable" were blamed for noisy lines. Though this derivation seems to be mistaken, it may well be a distorted memory of a joke first current among telegraph operators more than a century ago! Or perhaps not a joke. Historians of the field inform us that the term "bug" was regularly used in the early days of telegraphy to refer to a variety of semi-automatic telegraphy keyers that would send a string of dots if you held them down. In fact, the Vibroplex keyers (which were among the most common of this type) even had a graphic of a beetle on them (and still do)! While the ability to send repeated dots automatically was very useful for professional morse code operators, these were also significantly trickier to use than the older manual keyers, and it could take some practice to ensure one didn't introduce extraneous dots into the code by holding the key down a fraction too long. In the hands of an inexperienced operator, a Vibroplex "bug" on the line could mean that a lot of garbled Morse would soon be coming your way. Further, the term "bug" has long been used among radio technicians to describe a device that converts electromagnetic field variations into acoustic signals. It is used to trace radio interference and look for dangerous radio emissions. Radio community usage derives from the roach-like shape of the first versions used by 19th century physicists. The first versions consisted of a coil of wire (roach body), with the two wire ends sticking out and bent back to nearly touch forming a spark gap (roach antennae). The bug is to the radio technician what the stethoscope is to the stereotype medical doctor. This sense is almost certainly ancestral to modern use of "bug" for a covert monitoring device, but may also have contributed to the use of "bug" for the effects of radio interference itself. Actually, use of `bug' in the general sense of a disruptive event goes back to Shakespeare! (Henry VI, part III - Act V, Scene II: King Edward: "So, lie thou there. Die thou; and die our fear; For Warwick was a bug that fear'd us all.") In the first edition of Samuel Johnson's dictionary one meaning of `bug' is "A frightful object; a walking spectre"; this is traced to `bugbear', a Welsh term for a variety of mythological monster which (to complete the circle) has recently been reintroduced into the popular lexicon through fantasy role-playing games. In any case, in jargon the word almost never refers to insects. Here is a plausible conversation that never actually happened: "There is a bug in this ant farm!" "What do you mean? I don't see any ants in it." "That's the bug." A careful discussion of the etymological issues can be found in a paper by Fred R. Shapiro, 1987, "Entomology of the Computer Bug: History and Folklore", American Speech 62(4):376-378. [There has been a widespread myth that the original bug was moved to the Smithsonian, and an earlier version of this entry so asserted. A correspondent who thought to check discovered that the bug was not there. While investigating this in late 1990, your editor discovered that the NSWC still had the bug, but had unsuccessfully tried to get the Smithsonian to accept it -- and that the present curator of their History of American Technology Museum didn't know this and agreed that it would make a worthwhile exhibit. It was moved to the Smithsonian in mid-1991, but due to space and money constraints was not actually exhibited years afterwards. Thus, the process of investigating the original-computer-bug bug fixed it in an entirely unexpected way, by making the myth true! --ESR] bug-compatible adj. [common] Said of a design or revision that has been badly compromised by a requirement to be compatible with fossils or misfeatures in other programs or (esp.) previous releases of itself. "MS-DOS 2.0 used \ as a path separator to be bug-compatible with some cretin's choice of / as an option character in 1.0." bug-for-bug compatible n. Same as bug-compatible, with the additional implication that much tedious effort went into ensuring that each (known) bug was replicated. bug-of-the-month club n. [from "book-of-the-month club", a time-honored mail-order-marketing technique in the U.S.] A mythical club which users of `sendmail(8)' (the UNIX mail daemon) belong to; this was coined on the Usenet newsgroup comp.security.unix at a time when sendmail security holes, which allowed outside crackers access to the system, were being uncovered at an alarming rate, forcing sysadmins to update very often. Also, more completely, `fatal security bug-of-the-month club'. See also kernel-of-the-week club. buglix /buhg'liks/ n. [uncommon] Pejorative term referring to DEC's ULTRIX operating system in its earlier severely buggy versions. Still used to describe ULTRIX, but without nearly so much venom. Compare AIDX, HP-SUX, Nominal Semidestructor, Telerat, sun-stools. B = bulletproof adj. Used of an algorithm or implementation considered extremely robust; lossage-resistant; capable of correctly recovering from any imaginable exception condition -- a rare and valued quality. Implies that the programmer has thought of all possible errors, and added code to protect against each one. Thus, in some cases, this can imply code that is too heavyweight, due to excessive paranoia on the part of the programmer. Syn. armor-plated. bullschildt /bul'shilt/ n. [comp.lang.c on USENET] A confident, but incorrect, statement about a programming language. This immortalizes a very bad book about C, Herbert Schildt's "C - The Complete Reference". One reviewer commented "The naive errors in this book would be embarassing even in a programming assignment turned in by a computer science college sophomore." bum 1. vt. To make highly efficient, either in time or space, often at the expense of clarity. "I managed to bum three more instructions out of that code." "I spent half the night bumming the interrupt code." In 1996, this term and the practice it describes are semi-obsolete. In elder days, John McCarthy (inventor of LISP) used to compare some efficiency-obsessed hackers among his students to "ski bums"; thus, optimization became "program bumming", and eventually just "bumming". 2. To squeeze out excess; to remove something in order to improve whatever it was removed from (without changing function; this distinguishes the process from a featurectomy). 3. n. A small change to an algorithm, program, or hardware device to make it more efficient. "This hardware bum makes the jump instruction faster." Usage: now uncommon, largely superseded by v. tune (and n. tweak, hack), though none of these exactly capture sense 2. All these uses are rare in Commonwealth hackish, because in the parent dialects of English the noun `bum' is a rude synonym for `buttocks' and the verb `bum' for buggery. bump vt. Synonym for increment. Has the same meaning as C's ++ operator. Used esp. of counter variables, pointers, and index dummies in for, while, and do-while loops. burble v. [from Lewis Carroll's "Jabberwocky"] Like flame, but connotes that the source is truly clueless and ineffectual (mere flamers can be competent). A term of deep contempt. "There's some guy on the phone burbling about how he got a DISK FULL error and it's all our comm software's fault." This is mainstream slang in some parts of England. buried treasure n. A surprising piece of code found in some program. While usually not wrong, it tends to vary from crufty to bletcherous, and has lain undiscovered only because it was functionally correct, however horrible it is. Used sarcastically, because what is found is anything but treasure. Buried treasure almost always needs to be dug up and removed. "I just found that the scheduler sorts its queue using bubble sort! Buried treasure!" burn-in period n. 1. A factory test designed to catch systems with marginal components before they get out the door; the theory is that burn-in will protect customers by outwaiting the steepest part of the bathtub curve (see infant mortality). 2. A period of indeterminate length in which a person using a computer is so intensely involved in his project that he forgets basic needs such as food, drink, sleep, etc. Warning: Excessive burn-in can lead to burn-out. See hack mode, larval stage. Historical note: the origin of "burn-in" (sense 1) is apparently the practice of setting a new-model airplane's brakes on fire, then extinguishing the fire, in order to make them hold better. This was done on the first version of the U.S. spy-plane, the U-2. burst page n. Syn. banner, sense 1. busy-wait vi. Used of human behavior, conveys that the subject is busy waiting for someone or something, intends to move instantly as soon as it shows up, and thus cannot do anything else at the moment. "Can't talk now, I'm busy-waiting till Bill gets off the phone." Technically, `busy-wait' means to wait on an event by spinning through a tight or timed-delay loop that polls for the event on each pass, as opposed to setting up an interrupt handler and continuing execution on another part of the task. In applications this is a wasteful technique, and best avoided on time-sharing systems where a busy-waiting program may hog the processor. However, it is often unavoidable in kernel programming. In the Linux world, kernel busy-waits are usually referred to as `spinlocks'. buzz vi. 1. Of a program, to run with no indication of progress and perhaps without guarantee of ever finishing; esp. said of programs thought to be executing tight loops of code. A program that is buzzing appears to be catatonic, but never gets out of catatonia, while a buzzing loop may eventually end of its own accord. "The program buzzes for about 10 seconds trying to sort all the names into order." See spin; see also grovel. 2. [ETA Systems] To test a wire or printed circuit trace for continuity, esp. by applying an AC rather than DC signal. Some wire faults will pass DC tests but fail an AC buzz test. 3. To process an array or list in sequence, doing the same thing to each element. "This loop buzzes through the tz array looking for a terminator type." BWQ /B-W-Q/ n. [IBM: abbreviation, `Buzz Word Quotient'] The percentage of buzzwords in a speech or documents. Usually roughly proportional to bogosity. See TLA. by hand adv. [common] 1. Said of an operation (especially a repetitive, trivial, and/or tedious one) that ought to be performed automatically by the computer, but which a hacker instead has to step tediously through. "My mailer doesn't have a command to include the text of the message I'm replying to, so I have to do it by hand." This does not necessarily mean the speaker has to retype a copy of the message; it might refer to, say, dropping into a subshell from the mailer, making a copy of one's mailbox file, reading that into an editor, locating the top and bottom of the message in question, deleting the rest of the file, inserting `>' characters on each line, writing the file, leaving the editor, returning to the mailer, reading the file in, and later remembering to delete the file. Compare eyeball search. 2. By extension, writing code which does something in an explicit or low-level way for which a presupplied library routine ought to have been available. "This cretinous B-tree library doesn't supply a decent iterator, so I'm having to walk the trees by hand." B = byte /bi:t/ n. [techspeak] A unit of memory or data equal to the amount used to represent one character; on modern architectures this is usually 8 bits, but may be 9 on 36-bit machines. Some older architectures used `byte' for quantities of 6 or 7 bits, and the PDP-10 supported `bytes' that were actually bitfields of 1 to 36 bits! These usages are now obsolete, and even 9-bit bytes have become rare in the general trend toward power-of-2 word sizes. Historical note: The term was coined by Werner Buchholz in 1956 during the early design phase for the IBM Stretch computer; originally it was described as 1 to 6 bits (typical I/O equipment of the period used 6-bit chunks of information). The move to an 8-bit byte happened in late 1956, and this size was later adopted and promulgated as a standard by the System/360. The word was coined by mutating the word `bite' so it would not be accidentally misspelled as bit. See also nybble. byte sex n. [common] The byte sex of hardware is big-endian or little-endian; see those entries. bytesexual /bi:t`sek'shu-*l/ adj. [rare] Said of hardware, denotes willingness to compute or pass data in either big-endian or little-endian format (depending, presumably, on a mode bit somewhere). See also NUXI problem. Bzzzt! Wrong. /bzt rong/ excl. [common; Usenet/Internet; punctuation varies] From a Robin Williams routine in the movie "Dead Poets Society" spoofing radio or TV quiz programs, such as Truth or Consequences, where an incorrect answer earns one a blast from the buzzer and condolences from the interlocutor. A way of expressing mock-rude disagreement, usually immediately following an included quote from another poster. The less abbreviated "*Bzzzzt*, wrong, but thank you for playing" is also common; capitalization and emphasis of the buzzer sound varies. = C = C: C Programmer's Disease: C&C: C++: calculator: Camel Book: can: can't happen: cancelbot: Cancelmoose[tm]: candygrammar: canonical: card walloper: careware: cargo cult programming: cascade: case and paste: casters-up mode: casting the runes: cat: catatonic: cathedral: cd tilde: CDA: cdr: chad: chad box: chain: channel: channel hopping: channel op: chanop: char: charityware: chase pointers: chawmp: check: cheerfully: chemist: Chernobyl chicken: Chernobyl packet: chicken head: chiclet keyboard: Chinese Army technique: choad: choke: chomp: chomper: CHOP: Christmas tree: Christmas tree packet: chrome: chug: Church of the SubGenius: Cinderella Book: CI$: Classic C: clean: CLM: clobber: clock: clocks: clone: clone-and-hack coding: clover key: clue-by-four: clustergeeking: co-lo: code: coaster: COBOL: COBOL fingers: cobweb site: code grinder: code monkey: Code of the Geeks: code police: codes: codewalker: coefficient of X: cokebottle: cold boot: COME FROM: comm mode: command key: comment out: Commonwealth Hackish: compact: compiler jock: compo: compress: Compu$erve: computer confetti: computer geek: computron: con: condition out: condom: confuser: connector conspiracy: cons: considered harmful: console: console jockey: content-free: control-C: control-O: control-Q: control-S: Conway's Law: cookbook: cooked mode: cookie: cookie bear: cookie file: cookie jar: cookie monster: copious free time: copper: copy protection: copybroke: copycenter: copyleft: copyparty: copywronged: core: core cancer: core dump: core leak: Core Wars: corge: cosmic rays: cough and die: courier: cow orker: cowboy: CP/M: CPU Wars: crack: crack root: cracker: cracking: crank: crapplet: CrApTeX: crash: crash and burn: crawling horror: cray: cray instability: crayola: crayola books: crayon: creationism: creep: creeping elegance: creeping featurism: creeping featuritis: cretin: cretinous: crippleware: critical mass: crlf: crock: cross-post: crossload: crudware: cruft: cruft together: cruftsmanship: crufty: crumb: crunch: cryppie: CTSS: cube: cubing: cup holder: cursor dipped in X: cuspy: cut a tape: cybercrud: cyberpunk: cyberspace: cycle: cycle crunch: cycle drought: cycle of reincarnation: cycle server: cypherpunk: C|N>K: C n. 1. The third letter of the English alphabet. 2. ASCII 1000011. 3. The name of a programming language designed by Dennis Ritchie during the early 1970s and immediately used to reimplement Unix; so called because many features derived from an earlier compiler named `B' in commemoration of its parent, BCPL. (BCPL was in turn descended from an earlier Algol-derived language, CPL.) Before Bjarne Stroustrup settled the question by designing C++, there was a humorous debate over whether C's successor should be named `D' or `P'. C became immensely popular outside Bell Labs after about 1980 and is now the dominant language in systems and microcomputer applications programming. See also languages of choice, indent style. C is often described, with a mixture of fondness and disdain varying according to the speaker, as "a language that combines all the elegance and power of assembly language with all the readability and maintainability of assembly language". C Programmer's Disease n. The tendency of the undisciplined C programmer to set arbitrary but supposedly generous static limits on table sizes (defined, if you're lucky, by constants in header files) rather than taking the trouble to do proper dynamic storage allocation. If an application user later needs to put 68 elements into a table of size 50, the afflicted programmer reasons that he or she can easily reset the table size to 68 (or even as much as 70, to allow for future expansion) and recompile. This gives the programmer the comfortable feeling of having made the effort to satisfy the user's (unreasonable) demands, and often affords the user multiple opportunities to explore the marvelous consequences of fandango on core. In severe cases of the disease, the programmer cannot comprehend why each fix of this kind seems only to further disgruntle the user. C&C // [common, esp. on _news.admin.net-abuse.email_] Contraction of "Coffee & Cats". This frequently occurs as a warning label on USENET posts that are likely to cause you to snarf coffee onto your keyboard and startle the cat off your lap. = C++ /C'-pluhs-pluhs/ n. Designed by Bjarne Stroustrup of AT&T Bell Labs as a successor to C. Now one of the languages of choice, although many hackers still grumble that it is the successor to either Algol 68 or Ada (depending on generation), and a prime example of second-system effect. Almost anything that can be done in any language can be done in C++, but it requires a language lawyer to know what is and what is not legal-- the design is almost too large to hold in even hackers' heads. Much of the cruft results from C++'s attempt to be backward compatible with C. Stroustrup himself has said in his retrospective book "The Design and Evolution of C++" (p. 207), "Within C++, there is a much smaller and cleaner language struggling to get out." [Many hackers would now add "Yes, and it's called Java" --ESR] = calculator [Cambridge] n. Syn. for bitty box. Camel Book n. Universally recognized nickname for the book "Programming Perl", by Larry Wall and Randal L. Schwartz, O'Reilly and Associates 1991, ISBN 0-937175-64-1 (second edition 1996, ISBN 1-56592-149-6). The definitive reference on Perl. can vt. To abort a job on a time-sharing system. Used esp. when the person doing the deed is an operator, as in "canned from the console". Frequently used in an imperative sense, as in "Can that print job, the LPT just popped a sprocket!" Synonymous with gun. It is said that the ASCII character with mnemonic CAN (0011000) was used as a kill-job character on some early OSes. Alternatively, this term may derive from mainstream slang `canned' for being laid off or fired. can't happen The traditional program comment for code executed under a condition that should never be true, for example a file size computed as negative. Often, such a condition being true indicates data corruption or a faulty algorithm; it is almost always handled by emitting a fatal error message and terminating or crashing, since there is little else that can be done. Some case variant of "can't happen" is also often the text emitted if the `impossible' error actually happens! Although "can't happen" events are genuinely infrequent in production code, programmers wise enough to check for them habitually are often surprised at how frequently they are triggered during development and how many headaches checking for them turns out to head off. See also firewall code (sense 2). cancelbot /kan'sel-bot/ [Usenet: compound, cancel + robot] 1. Mythically, a robocanceller 2. In reality, most cancelbots are manually operated by being fed lists of spam message IDs. Cancelmoose[tm] /kan'sel-moos/ [Usenet] The archetype and model of all good spam-fighters. Once upon a time, the 'Moose would send out spam-cancels and then post notice anonymously to _news.admin.policy_, _news.admin.misc_, and _alt.current-events.net-abuse_. The 'Moose stepped to the fore on its own initiative, at a time (mid-1994) when spam-cancels were irregular and disorganized, and behaved altogether admirably - fair, even-handed, and quick to respond to comments and criticism, all without self-aggrandizement or martyrdom. Cancelmoose[tm] quickly gained near-unanimous support from the readership of all three above-mentioned groups. Nobody knows who Cancelmoose[tm] really is, and there aren't even any good rumors. However, the 'Moose now has an e-mail address (moose@cm.org) and a web site (http://www.cm.org.) By early 1995, others had stepped into the spam-cancel business, and appeared to be comporting themselves well, after the 'Moose's manner. The 'Moose has now gotten out of the business, and is more interested in ending spam (and cancels) entirely. candygrammar n. A programming-language grammar that is mostly syntactic sugar; the term is also a play on `candygram'. COBOL, Apple's Hypertalk language, and a lot of the so-called `4GL' database languages share this property. The usual intent of such designs is that they be as English-like as possible, on the theory that they will then be easier for unskilled people to program. This intention comes to grief on the reality that syntax isn't what makes programming hard; it's the mental effort and organization required to specify an algorithm precisely that costs. Thus the invariable result is that `candygrammar' languages are just as difficult to program in as terser ones, and far more painful for the experienced hacker. [The overtones from the old Chevy Chase skit on Saturday Night Live should not be overlooked. This was a "Jaws" parody. Someone lurking outside an apartment door tries all kinds of bogus ways to get the occupant to open up, while ominous music plays in the background. The last attempt is a half-hearted "Candygram!" When the door is opened, a shark bursts in and chomps the poor occupant. [There is a similar gag in "Blazing Saddles" --ESR] There is a moral here for those attracted to candygrammars. Note that, in many circles, pretty much the same ones who remember Monty Python sketches, all it takes is the word "Candygram!", suitably timed, to get people rolling on the floor. -- GLS] canonical adj. [very common; historically, `according to religious law'] The usual or standard state or manner of something. This word has a somewhat more technical meaning in mathematics. Two formulas such as 9 + x and x + 9 are said to be equivalent because they mean the same thing, but the second one is in `canonical form' because it is written in the usual way, with the highest power of x first. Usually there are fixed rules you can use to decide whether something is in canonical form. The jargon meaning, a relaxation of the technical meaning, acquired its present loading in computer-science culture largely through its prominence in Alonzo Church's work in computation theory and mathematical logic (see Knights of the Lambda Calculus). Compare vanilla. Non-technical academics do not use the adjective `canonical' in any of the senses defined above with any regularity; they do however use the nouns `canon' and `canonicity' (not **canonicalness or **canonicality). The `canon' of a given author is the complete body of authentic works by that author (this usage is familiar to Sherlock Holmes fans as well as to literary scholars). `The canon' is the body of works in a given field (e.g., works of literature, or of art, or of music) deemed worthwhile for students to study and for scholars to investigate. The word `canon' has an interesting history. It derives ultimately from the Greek `kanon' (akin to the English `cane') referring to a reed. Reeds were used for measurement, and in Latin and later Greek the word `canon' meant a rule or a standard. The establishment of a canon of scriptures within Christianity was meant to define a standard or a rule for the religion. The above non-techspeak academic usages stem from this instance of a defined and accepted body of work. Alongside this usage was the promulgation of `canons' (`rules') for the government of the Catholic Church. The techspeak usages ("according to religious law") derive from this use of the Latin `canon'. Hackers invest this term with a playfulness that makes an ironic contrast with its historical meaning. A true story: One Bob Sjoberg, new at the MIT AI Lab, expressed some annoyance at the incessant use of jargon. Over his loud objections, GLS and RMS made a point of using as much of it as possible in his presence, and eventually it began to sink in. Finally, in one conversation, he used the word `canonical' in jargon-like fashion without thinking. Steele: "Aha! We've finally got you talking jargon too!" Stallman: "What did he say?" Steele: "Bob just used `canonical' in the canonical way." Of course, canonicality depends on context, but it is implicitly defined as the way hackers normally expect things to be. Thus, a hacker may claim with a straight face that `according to religious law' is not the canonical meaning of `canonical'. card walloper n. An EDP programmer who grinds out batch programs that do stupid things like print people's paychecks. Compare code grinder. See also punched card, eighty-column mind. careware /keir'weir/ n. A variety of shareware for which either the author suggests that some payment be made to a nominated charity or a levy directed to charity is included on top of the distribution charge. Syn. charityware; compare crippleware, sense 2. cargo cult programming n. A style of (incompetent) programming dominated by ritual inclusion of code or program structures that serve no real purpose. A cargo cult programmer will usually explain the extra code as a way of working around some bug encountered in the past, but usually neither the bug nor the reason the code apparently avoided the bug was ever fully understood (compare shotgun debugging, voodoo programming). The term `cargo cult' is a reference to aboriginal religions that grew up in the South Pacific after World War II. The practices of these cults center on building elaborate mockups of airplanes and military style landing strips in the hope of bringing the return of the god-like airplanes that brought such marvelous cargo during the war. Hackish usage probably derives from Richard Feynman's characterization of certain practices as "cargo cult science" in his book "Surely You're Joking, Mr. Feynman!" (W. W. Norton & Co, New York 1985, ISBN 0-393-01921-7). cascade n. 1. A huge volume of spurious error-message output produced by a compiler with poor error recovery. Too frequently, one trivial syntax error (such as a missing `)' or `}') throws the parser out of synch so that much of the remaining program text is interpreted as garbaged or ill-formed. 2. A chain of Usenet followups, each adding some trivial variation or riposte to the text of the previous one, all of which is reproduced in the new message; an include war in which the object is to create a sort of communal graffito. case and paste n. [from `cut and paste'] 1. The addition of a new feature to an existing system by selecting the code from an existing feature and pasting it in with minor changes. Common in telephony circles because most operations in a telephone switch are selected using case statements. Leads to software bloat. In some circles of EMACS users this is called `programming by Meta-W', because Meta-W is the EMACS command for copying a block of text to a kill buffer in preparation to pasting it in elsewhere. The term is condescending, implying that the programmer is acting mindlessly rather than thinking carefully about what is required to integrate the code for two similar cases. At DEC (now Compaq), this is sometimes called `clone-and-hack' coding. casters-up mode n. [IBM, prob. fr. slang _belly up_] Yet another synonym for `broken' or `down'. Usually connotes a major failure. A system (hardware or software) which is `down' may be already being restarted before the failure is noticed, whereas one which is `casters up' is usually a good excuse to take the rest of the day off (as long as you're not responsible for fixing it). casting the runes n. What a guru does when you ask him or her to run a particular program and type at it because it never works for anyone else; esp. used when nobody can ever see what the guru is doing different from what J. Random Luser does. Compare incantation, runes, examining the entrails; also see the AI koan about Tom Knight in "Some AI Koans" (Appendix A). A correspondent from England tells us that one of ICL's most talented systems designers used to be called out occasionally to service machines which the field circus had given up on. Since he knew the design inside out, he could often find faults simply by listening to a quick outline of the symptoms. He used to play on this by going to some site where the field circus had just spent the last two weeks solid trying to find a fault, and spreading a diagram of the system out on a table top. He'd then shake some chicken bones and cast them over the diagram, peer at the bones intently for a minute, and then tell them that a certain module needed replacing. The system would start working again immediately upon the replacement. cat [from `catenate' via Unix cat(1)] vt. 1. [techspeak] To spew an entire file to the screen or some other output sink without pause (syn. blast). 2. By extension, to dump large amounts of data at an unprepared target or with no intention of browsing it carefully. Usage: considered silly. Rare outside Unix sites. See also dd, BLT. Among Unix fans, cat(1) is considered an excellent example of user-interface design, because it delivers the file contents without such verbosity as spacing or headers between the files, and because it does not require the files to consist of lines of text, but works with any sort of data. Among Unix haters, cat(1) is considered the canonical example of bad user-interface design, because of its woefully unobvious name. It is far more often used to blast a file to standard output than to concatenate two files. The name cat for the former operation is just as unintuitive as, say, LISP's cdr. Of such oppositions are holy wars made.... catatonic adj. Describes a condition of suspended animation in which something is so wedged or hung that it makes no response. If you are typing on a terminal and suddenly the computer doesn't even echo the letters back to the screen as you type, let alone do what you're asking it to do, then the computer is suffering from catatonia (possibly because it has crashed). "There I was in the middle of a winning game of nethack and it went catatonic on me! Aaargh!" Compare buzz. cathedral n.,adj. [see bazaar for derivation] The `classical' mode of software engineering long thought to be necessarily implied by Brooks's Law. Features small teams, tight project control, and long release intervals. This term came into use after analysis of the Linux experience suggested there might be something wrong (or at least incomplete) in the classical assumptions. cd tilde /C-D til-d*/ vi. To go home. From the Unix C-shell and Korn-shell command cd ~, which takes one to one's $HOME (cd with no arguments happens to do the same thing). By extension, may be used with other arguments; thus, over an electronic chat link, cd ~coffee would mean "I'm going to the coffee machine." CDA /C-D-A/ The "Communications Decency Act" of 1996, passed on Black Thursday as section 502 of a major telecommunications reform bill. The CDA made it a federal crime in the USA to send a communication which is "obscene, lewd, lascivious, filthy, or indecent, with intent to annoy, abuse, threaten, or harass another person." It also threatened with imprisonment anyone who "knowingly" makes accessible to minors any message that "describes, in terms patently offensive as measured by contemporary community standards, sexual or excretory activities or organs". While the CDA was sold as a measure to protect minors from the putative evils of pornography, the repressive political aims of the bill were laid bare by the Hyde amendment, which intended to outlaw discussion of abortion on the Internet. To say that this direct attack on First Amendment free-speech rights was not well received on the Internet would be putting it mildly. A firestorm of protest followed, including a February 29th mass demonstration by thousands of netters who turned their home pages black for 48 hours. Several civil-rights groups and computing/telecommunications companies mounted a constitutional challenge. The CDA was demolished by a strongly-worded decision handed down on in 8th-circuit Federal court and subsequently affirmed by the U.S. Supreme Court on 26 June 1997 (`White Thursday'). See also Exon. cdr /ku'dr/ or /kuh'dr/ vt. [from LISP] To skip past the first item from a list of things (generalized from the LISP operation on binary tree structures, which returns a list consisting of all but the first element of its argument). In the form `cdr down', to trace down a list of elements: "Shall we cdr down the agenda?" Usage: silly. See also loop through. Historical note: The instruction format of the IBM 704 that hosted the original LISP implementation featured two 15-bit fields called the `address' and `decrement' parts. The term `cdr' was originally `Contents of Decrement part of Register'. Similarly, `car' stood for `Contents of Address part of Register'. The cdr and car operations have since become bases for formation of compound metaphors in non-LISP contexts. GLS recalls, for example, a programming project in which strings were represented as linked lists; the get-character and skip-character operations were of course called CHAR and CHDR. chad /chad/ n. 1. [common] The perforated edge strips on printer paper, after they have been separated from the printed portion. Also called selvage, perf, and ripoff. 2. obs. The confetti-like paper bits punched out of cards or paper tape; this has also been called `chaff', `computer confetti', and `keypunch droppings'. It's reported that this was very old Army slang, and it may now be mainstream; it has been reported seen (1993) in directions for a card-based voting machine in California. Historical note: One correspondent believes `chad' (sense 2) derives from the Chadless keypunch (named for its inventor), which cut little u-shaped tabs in the card to make a hole when the tab folded back, rather than punching out a circle/rectangle; it was clear that if the Chadless keypunch didn't make them, then the stuff that other keypunches made had to be `chad'. There is a legend that the word was originally acronymic, standing for "Card Hole Aggregate Debris", but this has all the earmarks of a backronym. chad box n. A metal box about the size of a lunchbox (or in some models a large wastebasket), for collecting the chad (sense 2) that accumulated in Iron Age card punches. You had to open the covers of the card punch periodically and empty the chad box. The bit bucket was notionally the equivalent device in the CPU enclosure, which was typically across the room in another great gray-and-blue box. chain 1. vi. [orig. from BASIC's CHAIN statement] To hand off execution to a child or successor without going through the OS command interpreter that invoked it. The state of the parent program is lost and there is no returning to it. Though this facility used to be common on memory-limited micros and is still widely supported for backward compatibility, the jargon usage is semi-obsolescent; in particular, most Unix programmers will think of this as an exec. Oppose the more modern `subshell'. 2. n. A series of linked data areas within an operating system or application. `Chain rattling' is the process of repeatedly running through the linked data areas searching for one which is of interest to the executing program. The implication is that there is a very large number of links on the chain. channel n. [IRC] The basic unit of discussion on IRC. Once one joins a channel, everything one types is read by others on that channel. Channels are named with strings that begin with a `#' sign and can have topic descriptions (which are generally irrelevant to the actual subject of discussion). Some notable channels are #initgame, #hottub, callahans, and #report. At times of international crisis, #report has hundreds of members, some of whom take turns listening to various news services and typing in summaries of the news, or in some cases, giving first-hand accounts of the action (e.g., Scud missile attacks in Tel Aviv during the Gulf War in 1991). channel hopping n. [common; IRC, GEnie] To rapidly switch channels on IRC, or a GEnie chat board, just as a social butterfly might hop from one group to another at a party. This term may derive from the TV watcher's idiom, `channel surfing'. channel op /chan'l op/ n. [IRC] Someone who is endowed with privileges on a particular IRC channel; commonly abbreviated `chanop' or `CHOP' or just `op' (as of 2000 these short forms have almost crowded out the parent usage). These privileges include the right to kick users, to change various status bits, and to make others into CHOPs. chanop /chan'-op/ n. [IRC] See channel op. = char /keir/ or /char/; rarely, /kar/ n. Shorthand for `character'. Esp. used by C programmers, as `char' is C's typename for character data. charityware /cha'rit-ee-weir`/ n. Syn. careware. chase pointers 1. vi. To go through multiple levels of indirection, as in traversing a linked list or graph structure. Used esp. by programmers in C, where explicit pointers are a very common data type. This is techspeak, but it remains jargon when used of human networks. "I'm chasing pointers. Bob said you could tell me who to talk to about...." See dangling pointer and snap. 2. [Cambridge] `pointer chase' or `pointer hunt': The process of going through a core dump (sense 1), interactively or on a large piece of paper printed with hex runes, following dynamic data-structures. Used only in a debugging context. chawmp n. [University of Florida] 16 or 18 bits (half of a machine word). This term was used by FORTH hackers during the late 1970s/early 1980s; it is said to have been archaic then, and may now be obsolete. It was coined in revolt against the promiscuous use of `word' for anything between 16 and 32 bits; `word' has an additional special meaning for FORTH hacks that made the overloading intolerable. For similar reasons, /gaw'bl/ (spelled `gawble' or possibly `gawbul') was in use as a term for 32 or 48 bits (presumably a full machine word, but our sources are unclear on this). These terms are more easily understood if one thinks of them as faithful phonetic spellings of `chomp' and `gobble' pronounced in a Florida or other Southern U.S. dialect. For general discussion of similar terms, see nybble. = check n. A hardware-detected error condition, most commonly used to refer to actual hardware failures rather than software-induced traps. E.g., a `parity check' is the result of a hardware-detected parity error. Recorded here because the word often humorously extended to non-technical problems. For example, the term `child check' has been used to refer to the problems caused by a small child who is curious to know what happens when s/he presses all the cute buttons on a computer's console (of course, this particular problem could have been prevented with molly-guards). = cheerfully adv. See happily. chemist n. [Cambridge] Someone who wastes computer time on number-crunching when you'd far rather the machine were doing something more productive, such as working out anagrams of your name or printing Snoopy calendars or running life patterns. May or may not refer to someone who actually studies chemistry. Chernobyl chicken n. See laser chicken. Chernobyl packet /cher-noh'b*l pak'*t/ n. A network packet that induces a broadcast storm and/or network meltdown, in memory of the April 1986 nuclear accident at Chernobyl in Ukraine. The typical scenario involves an IP Ethernet datagram that passes through a gateway with both source and destination Ether and IP address set as the respective broadcast addresses for the subnetworks being gated between. Compare Christmas tree packet. chicken head n. [Commodore] The Commodore Business Machines logo, which strongly resembles a poultry part (within Commodore itself the logo was always called `chicken lips'). Rendered in ASCII as `C='. With the arguable exception of the Amiga (see amoeba), Commodore's machines were notoriously crocky little bitty boxes (see also PETSCII), albeit people have written multitasking Unix-like operating systems with TCP/IP networking for them. Thus, this usage may owe something to Philip K. Dick's novel "Do Androids Dream of Electric Sheep?" (the basis for the movie "Blade Runner"; the novel is now sold under that title), in which a `chickenhead' is a mutant with below-average intelligence. chiclet keyboard n. A keyboard with a small, flat rectangular or lozenge-shaped rubber or plastic keys that look like pieces of chewing gum. (Chiclets is the brand name of a variety of chewing gum that does in fact resemble the keys of chiclet keyboards.) Used esp. to describe the original IBM PCjr keyboard. Vendors unanimously liked these because they were cheap, and a lot of early portable and laptop products got launched using them. Customers rejected the idea with almost equal unanimity, and chiclets are not often seen on anything larger than a digital watch any more. Chinese Army technique n. Syn. Mongolian Hordes technique. choad /chohd/ n. Synonym for `penis' used in _alt.tasteless_ and popularized by the denizens thereof. They say: "We think maybe it's from Middle English but we're all too damned lazy to check the OED." [I'm not. It isn't. --ESR] This term is alleged to have been inherited through 1960s underground comics, and to have been recently sighted in the Beavis and Butthead cartoons. Speakers of the Hindi, Bengali and Gujarati languages have confirmed that `choad' is in fact an Indian vernacular word equivalent to `fuck'; it is therefore likely to have entered English slang via the British Raj. = choke v. 1. [common] To reject input, often ungracefully. "NULs make System V's lpr(1) choke." "I tried building an EMACS binary to use X, but cpp(1) choked on all those #defines." See barf, gag, vi. 2. [MIT] More generally, to fail at any endeavor, but with some flair or bravado; the popular definition is "to snatch defeat from the jaws of victory." = chomp vi. 1. To lose; specifically, to chew on something of which more was bitten off than one can. Probably related to gnashing of teeth. 2. To bite the bag; See bagbiter. A hand gesture commonly accompanies this. To perform it, hold the four fingers together and place the thumb against their tips. Now open and close your hand rapidly to suggest a biting action (much like what Pac-Man does in the classic video game, though this pantomime seems to predate that). The gesture alone means `chomp chomp' (see "Verb Doubling" in the "Jargon Construction" section of the Prependices). The hand may be pointed at the object of complaint, and for real emphasis you can use both hands at once. Doing this to a person is equivalent to saying "You chomper!" If you point the gesture at yourself, it is a humble but humorous admission of some failure. You might do this if someone told you that a program you had written had failed in some surprising way and you felt dumb for not having anticipated it. = chomper n. Someone or something that is chomping; a loser. See loser, bagbiter, chomp. CHOP /chop/ n. [IRC] See channel op. Christmas tree n. A kind of RS-232 line tester or breakout box featuring rows of blinking red and green LEDs suggestive of Christmas lights. Christmas tree packet n. A packet with every single option set for whatever protocol is in use. See kamikaze packet, Chernobyl packet. (The term doubtless derives from a fanciful image of each little option bit being represented by a different-colored light bulb, all turned on.) Compare Godzillagram. chrome n. [from automotive slang via wargaming] Showy features added to attract users but contributing little or nothing to the power of a system. "The 3D icons in Motif are just chrome, but they certainly are pretty chrome!" Distinguished from bells and whistles by the fact that the latter are usually added to gratify developers' own desires for featurefulness. Often used as a term of contempt. chug vi. To run slowly; to grind or grovel. "The disk is chugging like crazy." Church of the SubGenius n. A mutant offshoot of Discordianism launched in 1981 as a spoof of fundamentalist Christianity by the `Reverend' Ivan Stang, a brilliant satirist with a gift for promotion. Popular among hackers as a rich source of bizarre imagery and references such as "Bob" the divine drilling-equipment salesman, the Benevolent Space Xists, and the Stark Fist of Removal. Much SubGenius theory is concerned with the acquisition of the mystical substance or quality of slack. There is a home page at http://www.subgenius.com/. Cinderella Book [CMU] n. "Introduction to Automata Theory, Languages, and Computation", by John Hopcroft and Jeffrey Ullman, (Addison-Wesley, 1979). So called because the cover depicts a girl (putatively Cinderella) sitting in front of a Rube Goldberg device and holding a rope coming out of it. On the back cover, the device is in shambles after she has (inevitably) pulled on the rope. See also book titles. CI$ // n. Hackerism for `CIS', CompuServe Information Service. The dollar sign refers to CompuServe's rather steep line charges. Often used in sig blocks just before a CompuServe address. Syn. Compu$erve. Classic C /klas'ik C/ n. [a play on `Coke Classic'] The C programming language as defined in the first edition of K&R, with some small additions. It is also known as `K&R C'. The name came into use while C was being standardized by the ANSI X3J11 committee. Also `C Classic'. An analogous construction is sometimes applied elsewhere: thus, `X Classic', where X = Star Trek (referring to the original TV series) or X = PC (referring to IBM's ISA-bus machines as opposed to the PS/2 series). This construction is especially used of product series in which the newer versions are considered serious losers relative to the older ones. clean 1. adj. Used of hardware or software designs, implies `elegance in the small', that is, a design or implementation that may not hold any surprises but does things in a way that is reasonably intuitive and relatively easy to comprehend from the outside. The antonym is `grungy' or crufty. 2. v. To remove unneeded or undesired files in a effort to reduce clutter: "I'm cleaning up my account." "I cleaned up the garbage and now have 100 Meg free on that partition." = CLM /C-L-M/ [Sun: `Career Limiting Move'] 1. n. An action endangering one's future prospects of getting plum projects and raises, and possibly one's job: "His Halloween costume was a parody of his manager. He won the prize for `best CLM'." 2. adj. Denotes extreme severity of a bug, discovered by a customer and obviously missed earlier because of poor testing: "That's a CLM bug!" clobber vt. To overwrite, usually unintentionally: "I walked off the end of the array and clobbered the stack." Compare mung, scribble, trash, and smash the stack. = clock 1. n 1. [techspeak] The master oscillator that steps a CPU or other digital circuit through its paces. This has nothing to do with the time of day, although the software counter that keeps track of the latter may be derived from the former. 2. vt. To run a CPU or other digital circuit at a particular rate. "If you clock it at 100MHz, it gets warm.". See overclock. 3. vt. To force a digital circuit from one state to the next by applying a single clock pulse. "The data must be stable 10ns before you clock the latch." = clocks n. Processor logic cycles, so called because each generally corresponds to one clock pulse in the processor's timing. The relative execution times of instructions on a machine are usually discussed in clocks rather than absolute fractions of a second; one good reason for this is that clock speeds for various models of the machine may increase as technology improves, and it is usually the relative times one is interested in when discussing the instruction set. Compare cycle, jiffy. clone n. 1. An exact duplicate: "Our product is a clone of their product." Implies a legal reimplementation from documentation or by reverse-engineering. Also connotes lower price. 2. A shoddy, spurious copy: "Their product is a clone of our product." 3. A blatant ripoff, most likely violating copyright, patent, or trade secret protections: "Your product is a clone of my product." This use implies legal action is pending. 4. `PC clone:' a PC-BUS/ISA or EISA-compatible 80x86-based microcomputer (this use is sometimes spelled `klone' or `PClone'). These invariably have much more bang for the buck than the IBM archetypes they resemble. 5. In the construction `Unix clone': An OS designed to deliver a Unix-lookalike environment without Unix license fees, or with additional `mission-critical' features such as support for real-time programming. 6. v. To make an exact copy of something. "Let me clone that" might mean "I want to borrow that paper so I can make a photocopy" or "Let me get a copy of that file before you mung it". clone-and-hack coding n. [DEC] Syn. case and paste. clover key n. [Mac users] See feature key. clue-by-four [Usenet: portmanteau, clue + two-by-four] The notional stick with which one whacks an aggressively clueless person. This term derives from a western American folk saying about training a mule "First, you got to hit him with a two-by-four. That's to get his attention." The clue-by-four is a close relative of the LART. Syn. `clue stick'. This metaphor is commonly elaborated; your editor once heard a hacker say "I strike you with the great sword Clue-Bringer!" clustergeeking /kluh'st*r-gee`king/ n. [CMU] Spending more time at a computer cluster doing CS homework than most people spend breathing. co-lo /koh'loh`/ n. [very common; first heard c.1995] Short for `co-location', used of a machine you own that is physically sited on the premises of an ISP in order to take advantage of the ISP's direct access to lots of network bandwidthm. Often in the phrases `co-lo box' or `co-lo machines'. Co-lo boxes are typically web and FTP servers remote-administered by their owners, who may seldom or never visit the actual site. = coaster n. 1. Unuseable CD produced during failed attempt at writing to writeable or re-writeable CD media. Certainly related to the coaster-like shape of a CD, and the relative value of these failures. "I made a lot of coasters before I got a good CD." 2. Useless CDs received in the mail from the likes of AOL, MSN, CI$, Prodigy, ad nauseam. In the U.K., `beermat' is often used in these senses. COBOL /koh'bol/ n. [COmmon Business-Oriented Language] (Synonymous with evil.) A weak, verbose, and flabby language used by card wallopers to do boring mindless things on dinosaur mainframes. Hackers believe that all COBOL programmers are suits or code grinders, and no self-respecting hacker will ever admit to having learned the language. Its very name is seldom uttered without ritual expressions of disgust or horror. One popular one is Edsger W. Dijkstra's famous observation that "The use of COBOL cripples the mind; its teaching should, therefore, be regarded as a criminal offense." (from "Selected Writings on Computing: A Personal Perspective") See also fear and loathing, software rot. COBOL fingers /koh'bol fing'grz/ n. Reported from Sweden, a (hypothetical) disease one might get from coding in COBOL. The language requires code verbose beyond all reason (see candygrammar); thus it is alleged that programming too much in COBOL causes one's fingers to wear down to stubs by the endless typing. "I refuse to type in all that source code again; it would give me COBOL fingers!" cobweb site n. A World Wide Web Site that hasn't been updated so long it has figuratively grown cobwebs. code n. The stuff that software writers write, either in source form or after translation by a compiler or assembler. Often used in opposition to "data", which is the stuff that code operates on. This is a mass noun, as in "How much code does it take to do a bubble sort?", or "The code is loaded at the high end of RAM." Anyone referring to software as "the software codes" is probably a newbie or a suit. code grinder n. 1. A suit-wearing minion of the sort hired in legion strength by banks and insurance companies to implement payroll packages in RPG and other such unspeakable horrors. In its native habitat, the code grinder often removes the suit jacket to reveal an underplumage consisting of button-down shirt (starch optional) and a tie. In times of dire stress, the sleeves (if long) may be rolled up and the tie loosened about half an inch. It seldom helps. The code grinder's milieu is about as far from hackerdom as one can get and still touch a computer; the term connotes pity. See Real World, suit. 2. Used of or to a hacker, a really serious slur on the person's creative ability; connotes a design style characterized by primitive technique, rule-boundedness, brute force, and utter lack of imagination. Compare card walloper; contrast hacker, Real Programmer. code monkey n 1. A person only capable of grinding out code, but unable to perform the higher-primate tasks of software architecture, analysis, and design. Mildly insulting. Often applied to the most junior people on a programming team. 2. Anyone who writes code for a living; a programmer. 3. A self-deprecating way of denying responsibility for a management decision, or of complaining about having to live with such decisions. As in "Don't ask me why we need to write a compiler in+COBOL, I'm just a code monkey." Code of the Geeks n. see geek code. code police n. [by analogy with George Orwell's `thought police'] A mythical team of Gestapo-like storm troopers that might burst into one's office and arrest one for violating programming style rules. May be used either seriously, to underline a claim that a particular style violation is dangerous, or ironically, to suggest that the practice under discussion is condemned mainly by anal-retentive weenies. "Dike out that goto or the code police will get you!" The ironic usage is perhaps more common. codes n. [scientific computing] Programs. This usage is common in people who hack supercomputers and heavy-duty number-crunching, rare to unknown elsewhere (if you say "codes" to hackers outside scientific computing, their first association is likely to be "and cyphers"). codewalker n. A program component that traverses other programs for a living. Compilers have codewalkers in their front ends; so do cross-reference generators and some database front ends. Other utility programs that try to do too much with source code may turn into codewalkers. As in "This new vgrind feature would require a codewalker to implement." coefficient of X n. Hackish speech makes heavy use of pseudo-mathematical metaphors. Four particularly important ones involve the terms `coefficient', `factor', `index of X', and `quotient'. They are often loosely applied to things you cannot really be quantitative about, but there are subtle distinctions among them that convey information about the way the speaker mentally models whatever he or she is describing. `Foo factor' and `foo quotient' tend to describe something for which the issue is one of presence or absence. The canonical example is fudge factor. It's not important how much you're fudging; the term simply acknowledges that some fudging is needed. You might talk of liking a movie for its silliness factor. Quotient tends to imply that the property is a ratio of two opposing factors: "I would have won except for my luck quotient." This could also be "I would have won except for the luck factor", but using quotient emphasizes that it was bad luck overpowering good luck (or someone else's good luck overpowering your own). `Foo index' and `coefficient of foo' both tend to imply that foo is, if not strictly measurable, at least something that can be larger or smaller. Thus, you might refer to a paper or person as having a `high bogosity index', whereas you would be less likely to speak of a `high bogosity factor'. `Foo index' suggests that foo is a condensation of many quantities, as in the mundane cost-of-living index; `coefficient of foo' suggests that foo is a fundamental quantity, as in a coefficient of friction. The choice between these terms is often one of personal preference; e.g., some people might feel that bogosity is a fundamental attribute and thus say `coefficient of bogosity', whereas others might feel it is a combination of factors and thus say `bogosity index'. cokebottle /kohk'bot-l/ n. Any very unusual character, particularly one you can't type because it isn't on your keyboard. MIT people used to complain about the `control-meta-cokebottle' commands at SAIL, and SAIL people complained right back about the `escape-escape-cokebottle' commands at MIT. After the demise of the space-cadet keyboard, `cokebottle' faded away as serious usage, but was often invoked humorously to describe an (unspecified) weird or non-intuitive keystroke command. It may be due for a second inning, however. The OSF/Motif window manager, mwm(1), has a reserved keystroke for switching to the default set of keybindings and behavior. This keystroke is (believe it or not) `control-meta-bang' (see bang). Since the exclamation point looks a lot like an upside down Coke bottle, Motif hackers have begun referring to this keystroke as `cokebottle'. See also quadruple bucky. cold boot n. See boot. COME FROM n. A semi-mythical language construct dual to the `go to'; COME FROM <label> would cause the referenced label to act as a sort of trapdoor, so that if the program ever reached it control would quietly and automagically be transferred to the statement following the COME FROM. COME FROM was first proposed in R. Lawrence Clark's "A Linguistic Contribution to GOTO-less programming", which appeared in a 1973 Datamation issue (and was reprinted in the April 1984 issue of "Communications of the ACM"). This parodied the then-raging `structured programming' holy wars (see considered harmful). Mythically, some variants are the `assigned COME FROM' and the `computed COME FROM' (parodying some nasty control constructs in FORTRAN and some extended BASICs). Of course, multi-tasking (or non-determinism) could be implemented by having more than one COME FROM statement coming from the same label. In some ways the FORTRAN DO looks like a COME FROM statement. After the terminating statement number/CONTINUE is reached, control continues at the statement following the DO. Some generous FORTRANs would allow arbitrary statements (other than CONTINUE) for the statement, leading to examples like: DO 10 I=1,LIMIT C imagine many lines of code here, leaving the C original DO statement lost in the spaghetti... WRITE(6,10) I,FROB(I) 10 FORMAT(1X,I5,G10.4) in which the trapdoor is just after the statement labeled 10. (This is particularly surprising because the label doesn't appear to have anything to do with the flow of control at all!) While sufficiently astonishing to the unsuspecting reader, this form of COME FROM statement isn't completely general. After all, control will eventually pass to the following statement. The implementation of the general form was left to Univac FORTRAN, ca. 1975 (though a roughly similar feature existed on the IBM 7040 ten years earlier). The statement AT 100 would perform a COME FROM 100. It was intended strictly as a debugging aid, with dire consequences promised to anyone so deranged as to use it in production code. More horrible things had already been perpetrated in production languages, however; doubters need only contemplate the ALTER verb in COBOL. COME FROM was supported under its own name for the first time 15 years later, in C-INTERCAL (see INTERCAL, retrocomputing); knowledgeable observers are still reeling from the shock. comm mode /kom mohd/ n. [ITS: from the feature supporting on-line chat; the term may spelled with one or two m's] Syn. for talk mode. command key n. [Mac users] Syn. feature key. comment out vt. To surround a section of code with comment delimiters or to prefix every line in the section with a comment marker; this prevents it from being compiled or interpreted. Often done when the code is redundant or obsolete, but is being left in the source to make the intent of the active code clearer; also when the code in that section is broken and you want to bypass it in order to debug some other part of the code. Compare condition out, usually the preferred technique in languages (such as C) that make it possible. Commonwealth Hackish n. Hacker jargon as spoken in English outside the U.S., esp. in the British Commonwealth. It is reported that Commonwealth speakers are more likely to pronounce truncations like `char' and `soc', etc., as spelled (/char/, /sok/), as opposed to American /keir/ and /sohsh/. Dots in newsgroup names (especially two-component names) tend to be pronounced more often (so soc.wibble is /sok dot wib'l/ rather than /sohsh wib'l/). Preferred metasyntactic variables include blurgle, eek, ook, frodo, and bilbo; wibble, wobble, and in emergencies wubble; flob, banana, tom, dick, harry, wombat, frog, fish, womble and so on and on (see foo, sense 4). Alternatives to verb doubling include suffixes `-o-rama', `frenzy' (as in feeding frenzy), and `city' (examples: "barf city!" "hack-o-rama!" "core dump frenzy!"). All the generic differences within the anglophone world inevitably show themselves in the associated hackish dialects. The Greek letters beta and zeta are usually pronounced /bee't*/ and /zee't*/; meta may also be pronounced /mee't*/. Various punctuators (and even letters - Z is called `zed', not `zee') are named differently: most crucially, for hackish, where Americans use `parens', `brackets' and `braces' for (), [] and {}, Commonwealth English uses `brackets', `square brackets' and `curly brackets', though `parentheses' may be used for the first; the exclamation mark, `!', is called pling rather than bang and the pound sign, `#', is called hash; furthermore, the term `the pound sign' is understood to mean the pound currency symbol (of course). See also attoparsec, calculator, chemist, console jockey, fish, go-faster stripes, grunge, hakspek, heavy metal, leaky heap, lord high fixer, loose bytes, muddie, nadger, noddy, psychedelicware, plingnet, raster blaster, RTBM, seggie, spod, sun lounge, terminal junkie, tick-list features, weeble, weasel, YABA, and notes or definitions under Bad Thing, barf, bogus, bum, chase pointers, cosmic rays, crippleware, crunch, dodgy, gonk, hamster, hardwarily, mess-dos, nybble, proglet, root, SEX, tweak, womble, and xyzzy. compact adj. Of a design, describes the valuable property that it can all be apprehended at once in one's head. This generally means the thing created from the design can be used with greater facility and fewer errors than an equivalent tool that is not compact. Compactness does not imply triviality or lack of power; for example, C is compact and FORTRAN is not, but C is more powerful than FORTRAN. Designs become non-compact through accreting features and cruft that don't merge cleanly into the overall design scheme (thus, some fans of Classic C maintain that ANSI C is no longer compact). = compiler jock n. See jock (sense 2). compo n. [demoscene] Finnish-originated slang for `competition'. Demo compos are held at a demoparty. The usual protocol is that several groups make demos for a compo, they are shown on a big screen, and then the party participants vote for the best one. Prizes (from sponsors and party entrance fees) are given. Standard compo formats include intro compos (4k or 64k demos), music compos, graphics compos, quick demo compos (build a demo within 4 hours for example), etc. = compress [Unix] vt. When used without a qualifier, generally refers to crunching of a file using a particular C implementation of compression by Joseph M. Orost et al. and widely circulated via Usenet; use of crunch itself in this sense is rare among Unix hackers. Specifically, compress is built around the Lempel-Ziv-Welch algorithm as described in "A Technique for High Performance Data Compression", Terry A. Welch, "IEEE Computer", vol. 17, no. 6 (June 1984), pp. 8-19. Compu$erve n. See CI$. Synonyms CompuSpend and Compu$pend are also reported. computer confetti n. Syn. chad. Though this term is common, this use of punched-card chad is not a good idea, as the pieces are stiff and have sharp corners that could injure the eyes. GLS reports that he once attended a wedding at MIT during which he and a few other guests enthusiastically threw chad instead of rice. The groom later grumbled that he and his bride had spent most of the evening trying to get the stuff out of their hair. computer geek n. 1. One who eats (computer) bugs for a living. One who fulfills all the dreariest negative stereotypes about hackers: an asocial, malodorous, pasty-faced monomaniac with all the personality of a cheese grater. Cannot be used by outsiders without implied insult to all hackers; compare black-on-black vs. white-on-black usage of `nigger'. A computer geek may be either a fundamentally clueless individual or a proto-hacker in larval stage. Also called `turbo nerd', `turbo geek'. See also propeller head, clustergeeking, geek out, wannabee, terminal junkie, spod, weenie. 2. Some self-described computer geeks use this term in a positive sense and protest sense 1 (this seems to have been a post-1990 development). For one such argument, see http://www.darkwater.com/omni/geek.html. See also geek code. computron /kom'pyoo-tron`/ n. 1. [common] A notional unit of computing power combining instruction speed and storage capacity, dimensioned roughly in instructions-per-second times megabytes-of-main-store times megabytes-of-mass-storage. "That machine can't run GNU Emacs, it doesn't have enough computrons!" This usage is usually found in metaphors that treat computing power as a fungible commodity good, like a crop yield or diesel horsepower. See bitty box, Get a real computer!, toy, crank. 2. A mythical subatomic particle that bears the unit quantity of computation or information, in much the same way that an electron bears one unit of electric charge (see also bogon). An elaborate pseudo-scientific theory of computrons has been developed based on the physical fact that the molecules in a solid object move more rapidly as it is heated. It is argued that an object melts because the molecules have lost their information about where they are supposed to be (that is, they have emitted computrons). This explains why computers get so hot and require air conditioning; they use up computrons. Conversely, it should be possible to cool down an object by placing it in the path of a computron beam. It is believed that this may also explain why machines that work at the factory fail in the computer room: the computrons there have been all used up by the other hardware. (The popularity of this theory probably owes something to the "Warlock" stories by Larry Niven, the best known being "What Good is a Glass Dagger?", in which magic is fueled by an exhaustible natural resource called `mana'.) con n. [from SF fandom] A science-fiction convention. Not used of other sorts of conventions, such as professional meetings. This term, unlike many others imported from SF-fan slang, is widely recognized even by hackers who aren't fans. "We'd been corresponding on the net for months, then we met face-to-face at a con." = condition out vt. To prevent a section of code from being compiled by surrounding it with a conditional-compilation directive whose condition is always false. The canonical examples of these directives are #if 0 (or #ifdef notdef, though some find the latter bletcherous) and #endif in C. Compare comment out. condom n. 1. The protective plastic bag that accompanies 3.5-inch microfloppy diskettes. Rarely, also used of (paper) disk envelopes. Unlike the write protect tab, the condom (when left on) not only impedes the practice of SEX but has also been shown to have a high failure rate as drive mechanisms attempt to access the disk -- and can even fatally frustrate insertion. 2. The protective cladding on a light pipe. 3. `keyboard condom': A flexible, transparent plastic cover for a keyboard, designed to provide some protection against dust and programming fluid without impeding typing. 4. `elephant condom': the plastic shipping bags used inside cardboard boxes to protect hardware in transit. 5. n. obs. A dummy directory /usr/tmp/sh, created to foil the Great Worm by exploiting a portability bug in one of its parts. So named in the title of a _comp.risks_ article by Gene Spafford during the Worm crisis, and again in the text of "The Internet Worm Program: An Analysis", Purdue Technical Report CSD-TR-823. confuser n. Common soundalike slang for `computer'. Usually encountered in compounds such as `confuser room', `personal confuser', `confuser guru'. Usage: silly. connector conspiracy n. [probably came into prominence with the appearance of the KL-10 (one model of the PDP-10), none of whose connectors matched anything else] The tendency of manufacturers (or, by extension, programmers or purveyors of anything) to come up with new products that don't fit together with the old stuff, thereby making you buy either all new stuff or expensive interface devices. The KL-10 Massbus connector was actually patented by DEC, which reputedly refused to license the design and thus effectively locked third parties out of competition for the lucrative Massbus peripherals market. This policy is a source of never-ending frustration for the diehards who maintain older PDP-10 or VAX systems. Their CPUs work fine, but they are stuck with dying, obsolescent disk and tape drives with low capacity and high power requirements. (A closely related phenomenon, with a slightly different intent, is the habit manufacturers have of inventing new screw heads so that only Designated Persons, possessing the magic screwdrivers, can remove covers and make repairs or install options. A good 1990s example is the use of Torx screws for cable-TV set-top boxes. Older Apple Macintoshes took this one step further, requiring not only a long Torx screwdriver but a specialized case-cracking tool to open the box.) In these latter days of open-systems computing this term has fallen somewhat into disuse, to be replaced by the observation that "Standards are great! There are so many of them to choose from!" Compare backward combatability. cons /konz/ or /kons/ [from LISP] 1. vt. To add a new element to a specified list, esp. at the top. "OK, cons picking a replacement for the console TTY onto the agenda." 2. `cons up': vt. To synthesize from smaller pieces: "to cons up an example". In LISP itself, cons is the most fundamental operation for building structures. It takes any two objects and returns a `dot-pair' or two-branched tree with one object hanging from each branch. Because the result of a cons is an object, it can be used to build binary trees of any shape and complexity. Hackers think of it as a sort of universal constructor, and that is where the jargon meanings spring from. considered harmful adj. [very common] Edsger W. Dijkstra's note in the March 1968 "Communications of the ACM", "Goto Statement Considered Harmful", fired the first salvo in the structured programming wars (text at http://www.acm.org/classics). Amusingly, the ACM considered the resulting acrimony sufficiently harmful that it will (by policy) no longer print an article taking so assertive a position against a coding practice. (Years afterwards, a contrary view was uttered in a CACM letter called, inevitably, "`Goto considered harmful' considered harmful'"'. In the ensuing decades, a large number of both serious papers and parodies have borne titles of the form "X considered Y". The structured-programming wars eventually blew over with the realization that both sides were wrong, but use of such titles has remained as a persistent minor in-joke (the `considered silly' found at various places in this lexicon is related). console n. 1. The operator's station of a mainframe. In times past, this was a privileged location that conveyed godlike powers to anyone with fingers on its keys. Under Unix and other modern timesharing OSes, such privileges are guarded by passwords instead, and the console is just the tty the system was booted from. Some of the mystique remains, however, and it is traditional for sysadmins to post urgent messages to all users from the console (on Unix, /dev/console). 2. On microcomputer Unix boxes, the main screen and keyboard (as opposed to character-only terminals talking to a serial port). Typically only the console can do real graphics or run X. console jockey n. See terminal junkie. content-free adj. [by analogy with techspeak `context-free'] Used of a message that adds nothing to the recipient's knowledge. Though this adjective is sometimes applied to flamage, it more usually connotes derision for communication styles that exalt form over substance or are centered on concerns irrelevant to the subject ostensibly at hand. Perhaps most used with reference to speeches by company presidents and other professional manipulators. "Content-free? Uh... that's anything printed on glossy paper." (See also four-color glossies.) "He gave a talk on the implications of electronic networks for postmodernism and the fin-de-siecle aesthetic. It was content-free." control-C vi. 1. "Stop whatever you are doing." From the interrupt character used on many operating systems to abort a running program. Considered silly. 2. interj. Among BSD Unix hackers, the canonical humorous response to "Give me a break!" control-O vi. "Stop talking." From the character used on some operating systems to abort output but allow the program to keep on running. Generally means that you are not interested in hearing anything more from that person, at least on that topic; a standard response to someone who is flaming. Considered silly. Compare control-S. control-Q vi. "Resume." From the ASCII DC1 or XON character (the pronunciation /X-on/ is therefore also used), used to undo a previous control-S. control-S vi. "Stop talking for a second." From the ASCII DC3 or XOFF character (the pronunciation /X-of/ is therefore also used). Control-S differs from control-O in that the person is asked to stop talking (perhaps because you are on the phone) but will be allowed to continue when you're ready to listen to him -- as opposed to control-O, which has more of the meaning of "Shut up." Considered silly. Conway's Law prov. The rule that the organization of the software and the organization of the software team will be congruent; commonly stated as "If you have four groups working on a compiler, you'll get a 4-pass compiler". The original statement was more general, "Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations." This first appeared in the April 1968 issue of Datamation. Compare SNAFU principle. The law was named after Melvin Conway, an early proto-hacker who wrote an assembler for the Burroughs 220 called SAVE. (The name `SAVE' didn't stand for anything; it was just that you lost fewer card decks and listings because they all had SAVE written on them.) There is also Tom Cheatham's amendment of Conway's Law: "If a group of N persons implements a COBOL compiler, there will be N-1 passes. Someone in the group has to be the manager." cookbook n. [from amateur electronics and radio] A book of small code segments that the reader can use to do various magic things in programs. One current example is the "PostScript Language Tutorial and Cookbook" by Adobe Systems, Inc (Addison-Wesley, ISBN 0-201-10179-3), also known as the Blue Book which has recipes for things like wrapping text around arbitrary curves and making 3D fonts. Cookbooks, slavishly followed, can lead one into voodoo programming, but are useful for hackers trying to monkey up small programs in unknown languages. This function is analogous to the role of phrasebooks in human languages. C = cooked mode n. [Unix, by opposition from raw mode] The normal character-input mode, with interrupts enabled and with erase, kill and other special-character interpretations performed directly by the tty driver. Oppose raw mode, rare mode. This term is techspeak under Unix but jargon elsewhere; other operating systems often have similar mode distinctions, and the raw/rare/cooked way of describing them has spread widely along with the C language and other Unix exports. Most generally, `cooked mode' may refer to any mode of a system that does extensive preprocessing before presenting data to a program. cookie n. A handle, transaction ID, or other token of agreement between cooperating programs. "I give him a packet, he gives me back a cookie." The claim check you get from a dry-cleaning shop is a perfect mundane example of a cookie; the only thing it's useful for is to relate a later transaction to this one (so you get the same clothes back). Compare magic cookie; see also fortune cookie. Now mainstream in the specific sense of web-browser cookies. C = cookie bear n. obs. Original term, pre-Sesame-Street, for what is now universally called a cookie monster. A correspondent observes "In those days, hackers were actually getting their yucks from...sit down now...Andy Williams. Yes, that Andy Williams. Seems he had a rather hip (by the standards of the day) TV variety show. One of the best parts of the show was the recurring `cookie bear' sketch. In these sketches, a guy in a bear suit tried all sorts of tricks to get a cookie out of Williams. The sketches would always end with Williams shrieking (and I don't mean figuratively), `No cookies! Not now, not ever...NEVER!!!' And the bear would fall down. Great stuff." cookie file n. A collection of fortune cookies in a format that facilitates retrieval by a fortune program. There are several different cookie files in public distribution, and site admins often assemble their own from various sources including this lexicon. cookie jar n. An area of memory set aside for storing cookies. Most commonly heard in the Atari ST community; many useful ST programs record their presence by storing a distinctive magic number in the jar. Programs can inquire after the presence or otherwise of other programs by searching the contents of the jar. cookie monster n. [from the children's TV program "Sesame Street"] Any of a family of early (1970s) hacks reported on TOPS-10, ITS, Multics, and elsewhere that would lock up either the victim's terminal (on a time-sharing machine) or the console (on a batch mainframe), repeatedly demanding "I WANT A COOKIE". The required responses ranged in complexity from "COOKIE" through "HAVE A COOKIE" and upward. Folklorist Jan Brunvand (see FOAF) has described these programs as urban legends (implying they probably never existed) but they existed, all right, in several different versions. See also wabbit. Interestingly, the term `cookie monster' appears to be a retcon; the original term was cookie bear. copious free time n. [Apple; orig. fr. the intro to Tom Lehrer's song "It Makes A Fellow Proud To Be A Soldier"] 1. [used ironically to indicate the speaker's lack of the quantity in question] A mythical schedule slot for accomplishing tasks held to be unlikely or impossible. Sometimes used to indicate that the speaker is interested in accomplishing the task, but believes that the opportunity will not arise. "I'll implement the automatic layout stuff in my copious free time." 2. [Archly] Time reserved for bogus or otherwise idiotic tasks, such as implementation of chrome, or the stroking of suits. "I'll get back to him on that feature in my copious free time." copper n. Conventional electron-carrying network cable with a core conductor of copper -- or aluminum! Opposed to light pipe or, say, a short-range microwave link. copy protection n. A class of methods for preventing incompetent pirates from stealing software and legitimate customers from using it. Considered silly. copybroke /kop'ee-brohk/ adj. 1. [play on `copyright'] Used to describe an instance of a copy-protected program that has been `broken'; that is, a copy with the copy-protection scheme disabled. Syn. copywronged. 2. Copy-protected software which is unusable because of some bit-rot or bug that has confused the anti-piracy check. See also copy protection. copycenter n. [play on `copyright' and `copyleft'] 1. The copyright notice carried by the various flavors of freeware BSD. According to Kirk McKusick at BSDCon 1999: "The way it was characterized politically, you had copyright, which is what the big companies use to lock everything up; you had copyleft, which is free software's way of making sure they can't lock it up; and then Berkeley had what we called "copycenter", which is "take it down to the copy center and make as many copies as you want". copyleft /kop'ee-left/ n. [play on `copyright'] 1. The copyright notice (`General Public License') carried by GNU EMACS and other Free Software Foundation software, granting reuse and reproduction rights to all comers (but see also General Public Virus). 2. By extension, any copyright notice intended to achieve similar aims. C = copyparty n. [C64/amiga demoscene ]A computer party organized so demosceners can meet other in real life, and to facilitate software copying (mostly pirated software). The copyparty has become less common as the Internet makes communication easier. The demoscene has gradually evolved the demoparty to replace it. copywronged /kop'ee-rongd/ adj. [play on `copyright'] Syn. for copybroke. core n. Main storage or RAM. Dates from the days of ferrite-core memory; now archaic as techspeak most places outside IBM, but also still used in the Unix community and by old-time hackers or those who would sound like them. Some derived idioms are quite current; `in core', for example, means `in memory' (as opposed to `on disk'), and both core dump and the `core image' or `core file' produced by one are terms in favor. Some varieties of Commonwealth hackish prefer store. = core cancer n. [rare] A process that exhibits a slow but inexorable resource leak -- like a cancer, it kills by crowding out productive `tissue'. core dump n. [common Iron Age jargon, preserved by Unix] 1. [techspeak] A copy of the contents of core, produced when a process is aborted by certain kinds of internal error. 2. By extension, used for humans passing out, vomiting, or registering extreme shock. "He dumped core. All over the floor. What a mess." "He heard about X and dumped core." 3. Occasionally used for a human rambling on pointlessly at great length; esp. in apology: "Sorry, I dumped core on you". 4. A recapitulation of knowledge (compare bits, sense 1). Hence, spewing all one knows about a topic (syn. brain dump), esp. in a lecture or answer to an exam question. "Short, concise answers are better than core dumps" (from the instructions to an exam at Columbia). See core. core leak n. Syn. memory leak. Core Wars n. A game between `assembler' programs in a machine or machine simulator, where the objective is to kill your opponent's program by overwriting it. Popularized in the 1980s by A. K. Dewdney's column in "Scientific American" magazine, but described in "Software Practice And Experience" a decade earlier. The game was actually devised and played by Victor Vyssotsky, Robert Morris Sr., and Doug McIlroy in the early 1960s (Dennis Ritchie is sometimes incorrectly cited as a co-author, but was not involved). Their original game was called `Darwin' and ran on a IBM 7090 at Bell Labs. See core. For information on the modern game, do a web search for the `rec.games.corewar FAQ' or surf to the King Of The Hill site. corge /korj/ n. [originally, the name of a cat] Yet another metasyntactic variable, invented by Mike Gallaher and propagated by the GOSMACS documentation. See grault. cosmic rays n. Notionally, the cause of bit rot. However, this is a semi-independent usage that may be invoked as a humorous way to handwave away any minor randomness that doesn't seem worth the bother of investigating. "Hey, Eric -- I just got a burst of garbage on my tube, where did that come from?" "Cosmic rays, I guess." Compare sunspots, phase of the moon. The British seem to prefer the usage `cosmic showers'; `alpha particles' is also heard, because stray alpha particles passing through a memory chip can cause single-bit errors (this becomes increasingly more likely as memory sizes and densities increase). Factual note: Alpha particles cause bit rot, cosmic rays do not (except occasionally in spaceborne computers). Intel could not explain random bit drops in their early chips, and one hypothesis was cosmic rays. So they created the World's Largest Lead Safe, using 25 tons of the stuff, and used two identical boards for testing. One was placed in the safe, one outside. The hypothesis was that if cosmic rays were causing the bit drops, they should see a statistically significant difference between the error rates on the two boards. They did not observe such a difference. Further investigation demonstrated conclusively that the bit drops were due to alpha particle emissions from thorium (and to a much lesser degree uranium) in the encapsulation material. Since it is impossible to eliminate these radioactives (they are uniformly distributed through the earth's crust, with the statistically insignificant exception of uranium lodes) it became obvious that one has to design memories to withstand these hits. cough and die v. Syn. barf. Connotes that the program is throwing its hands up by design rather than because of a bug or oversight. "The parser saw a control-A in its input where it was looking for a printable, so it coughed and died." Compare die, die horribly, scream and die. courier [BBS & cracker cultures] A person who distributes newly cracked warez, as opposed to a server who makes them available for download or a leech who merely downloads them. Hackers recognize this term but don't use it themselves, as the act is not part of their culture. See also warez d00dz, cracker, elite. = cow orker n. [Usenet] n. fortuitous typo for co-worker, widely used in Usenet, with perhaps a hint that orking cows is illegal. This term was popularized by Scott Adams (the creator of Dilbert) but already appears in the January 1996 version of the scary devil monastery FAQ. There are plausible reports that it was in use on _talk.bizarre_ as early as 1992. Compare hing, grilf, filk, newsfroup. cowboy n. [Sun, from William Gibson's cyberpunk SF] Synonym for hacker. It is reported that at Sun this word is often said with reverence. = CP/M /C-P-M/ n. [Control Program/Monitor; later retconned to Control Program for Microcomputers] An early microcomputer OS written by hacker Gary Kildall for 8080- and Z80-based machines, very popular in the late 1970s but virtually wiped out by MS-DOS after the release of the IBM PC in 1981. Legend has it that Kildall's company blew its chance to write the OS for the IBM PC because Kildall decided to spend a day IBM's reps wanted to meet with him enjoying the perfect flying weather in his private plane. Many of CP/M's features and conventions strongly resemble those of early DEC operating systems such as TOPS-10, OS/8, RSTS, and RSX-11. See MS-DOS, operating system. = CPU Wars /C-P-U worz/ n. A 1979 large-format comic by Chas Andres chronicling the attempts of the brainwashed androids of IPM (Impossible to Program Machines) to conquer and destroy the peaceful denizens of HEC (Human Engineered Computers). This rather transparent allegory featured many references to ADVENT and the immortal line "Eat flaming death, minicomputer mongrels!" (uttered, of course, by an IPM stormtrooper). The whole shebang is now available on the Web. It is alleged that the author subsequently received a letter of appreciation on IBM company stationery from the head of IBM's Thomas J. Watson Research Laboratories (then, as now, one of the few islands of true hackerdom in the IBM archipelago). The lower loop of the B in the IBM logo, it is said, had been carefully whited out. See eat flaming death. crack [warez d00dz] 1. v. To break into a system (compare cracker). 2. v. Action of removing the copy protection from a commercial program. People who write cracks consider themselves challenged by the copy protection measures. They will often do it as much to show that they are smarter than the developper who designed the copy protection scheme than to actually copy the program. 3. n. A program, instructions or patch used to remove the copy protection of a program or to uncripple features from a demo/time limited program. 4. An exploit. = crack root v. [very common] To defeat the security system of a Unix machine and gain root privileges thereby; see cracking. cracker n. One who breaks security on a system. Coined ca. 1985 by hackers in defense against journalistic misuse of hacker (q.v., sense 8). An earlier attempt to establish `worm' in this sense around 1981-82 on Usenet was largely a failure. Use of both these neologisms reflects a strong revulsion against the theft and vandalism perpetrated by cracking rings. While it is expected that any real hacker will have done some playful cracking and knows many of the basic techniques, anyone past larval stage is expected to have outgrown the desire to do so except for immediate, benign, practical reasons (for example, if it's necessary to get around some security in order to get some work done). Thus, there is far less overlap between hackerdom and crackerdom than the mundane reader misled by sensationalistic journalism might expect. Crackers tend to gather in small, tight-knit, very secretive groups that have little overlap with the huge, open poly-culture this lexicon describes; though crackers often like to describe themselves as hackers, most true hackers consider them a separate and lower form of life. Ethical considerations aside, hackers figure that anyone who can't imagine a more interesting way to play with their computers than breaking into someone else's has to be pretty losing. Some other reasons crackers are looked down on are discussed in the entries on cracking and phreaking. See also samurai, dark-side hacker, and hacker ethic. For a portrait of the typical teenage cracker, see warez d00dz. = cracking n. [very common] The act of breaking into a computer system; what a cracker does. Contrary to widespread myth, this does not usually involve some mysterious leap of hackerly brilliance, but rather persistence and the dogged repetition of a handful of fairly well-known tricks that exploit common weaknesses in the security of target systems. Accordingly, most crackers are only mediocre hackers. C = crank vt. [from automotive slang] Verb used to describe the performance of a machine, especially sustained performance. "This box cranks (or, cranks at) about 6 megaflops, with a burst mode of twice that on vectorized operations." = crapplet n. [portmanteau, crap + applet] A worthless applet, esp. a Java widget attached to a web page that doesn't work or even crashes your browser. Also spelled `craplet'. C = CrApTeX /krap'tekh/ n. [University of York, England] Term of abuse used to describe TeX and LaTeX when they don't work (when used by TeXhackers), or all the time (by everyone else). The non-TeX-enthusiasts generally dislike it because it is more verbose than other formatters (e.g. troff) and because (particularly if the standard Computer Modern fonts are used) it generates vast output files. See religious issues, TeX. crash 1. n. A sudden, usually drastic failure. Most often said of the system (q.v., sense 1), esp. of magnetic disk drives (the term originally described what happens when the air gap of a hard disk collapses). "Three lusers lost their files in last night's disk crash." A disk crash that involves the read/write heads dropping onto the surface of the disks and scraping off the oxide may also be referred to as a `head crash', whereas the term `system crash' usually, though not always, implies that the operating system or other software was at fault. 2. v. To fail suddenly. "Has the system just crashed?" "Something crashed the OS!" See down. Also used transitively to indicate the cause of the crash (usually a person or a program, or both). "Those idiots playing SPACEWAR crashed the system." 3. vi. Sometimes said of people hitting the sack after a long hacking run; see gronk out. crash and burn vi.,n. A spectacular crash, in the mode of the conclusion of the car-chase scene in the movie "Bullitt" and many subsequent imitators (compare die horribly). Sun-3 monitors losing the flyback transformer and lightning strikes on VAX-11/780 backplanes are notable crash and burn generators. The construction `crash-and-burn machine' is reported for a computer used exclusively for alpha or beta testing, or reproducing bugs (i.e., not for development). The implication is that it wouldn't be such a disaster if that machine crashed, since only the testers would be inconvenienced. crawling horror n. Ancient crufty hardware or software that is kept obstinately alive by forces beyond the control of the hackers at a site. Like dusty deck or gonkulator, but connotes that the thing described is not just an irritation but an active menace to health and sanity. "Mostly we code new stuff in C, but they pay us to maintain one big FORTRAN II application from nineteen-sixty-X that's a real crawling horror...." Compare WOMBAT. cray /kray/ n. 1. (properly, capitalized) One of the line of supercomputers designed by Cray Research. 2. Any supercomputer at all. 3. The canonical number-crunching machine. The term is actually the lowercased last name of Seymour Cray, a noted computer architect and co-founder of the company. Numerous vivid legends surround him, some true and some admittedly invented by Cray Research brass to shape their corporate culture and image. cray instability n. 1. A shortcoming of a program or algorithm that manifests itself only when a large problem is being run on a powerful machine (see cray). Generally more subtle than bugs that can be detected in smaller problems running on a workstation or mini. 2. More specifically, a shortcoming of algorithms which are well behaved when run on gentle floating point hardware (such as IEEE-standard or PDP-series machines) but which break down badly when exposed to a Cray's unique `rounding' rules. crayola /kray-oh'l*/ n. A super-mini or -micro computer that provides some reasonable percentage of supercomputer performance for an unreasonably low price. Might also be a killer micro. crayola books n. The rainbow series of National Computer Security Center (NCSC) computer security standards (see Orange Book). Usage: humorous and/or disparaging. crayon n. 1. Someone who works on Cray supercomputers. More specifically, it implies a programmer, probably of the CDC ilk, probably male, and almost certainly wearing a tie (irrespective of gender). Systems types who have a Unix background tend not to be described as crayons. 2. Formerly, anyone who worked for Cray Research; since the buyout by SGI, anyone they inherited from Cray. 3. A computron (sense 2) that participates only in number-crunching. 4. A unit of computational power equal to that of a single Cray-1. There is a standard joke about this usage that derives from an old Crayola crayon promotional gimmick: When you buy 64 crayons you get a free sharpener. = creationism n. The (false) belief that large, innovative software designs can be completely specified in advance and then painlessly magicked out of the void by the normal efforts of a team of normally talented programmers. In fact, experience has shown repeatedly that good designs arise only from evolutionary, exploratory interaction between one (or at most a small handful of) exceptionally able designer(s) and an active user population -- and that the first try at a big new idea is always wrong. Unfortunately, because these truths don't fit the planning models beloved of management, they are generally ignored. creep v. To advance, grow, or multiply inexorably. In hackish usage this verb has overtones of menace and silliness, evoking the creeping horrors of low-budget monster movies. creeping elegance n. Describes a tendency for parts of a design to become elegant past the point of diminishing return, something which often happens at the expense of the less interesting parts of the design, the schedule, and other things deemed important in the Real World. See also creeping featurism, second-system effect, tense. creeping featurism /kree'ping fee'chr-izm/ n. [common] 1. Describes a systematic tendency to load more chrome and features onto systems at the expense of whatever elegance they may have possessed when originally designed. See also feeping creaturism. "You know, the main problem with BSD Unix has always been creeping featurism." 2. More generally, the tendency for anything complicated to become even more complicated because people keep saying "Gee, it would be even better if it had this feature too". (See feature.) The result is usually a patchwork because it grew one ad-hoc step at a time, rather than being planned. Planning is a lot of work, but it's easy to add just one extra little feature to help someone ... and then another ... and another.... When creeping featurism gets out of hand, it's like a cancer. Usually this term is used to describe computer programs, but it could also be said of the federal government, the IRS 1040 form, and new cars. A similar phenomenon sometimes afflicts conscious redesigns; see second-system effect. See also creeping elegance. creeping featuritis /kree'ping fee'-chr-i:`t*s/ n. Variant of creeping featurism, with its own spoonerization: `feeping creaturitis'. Some people like to reserve this form for the disease as it actually manifests in software or hardware, as opposed to the lurking general tendency in designers' minds. (After all, -ism means `condition' or `pursuit of', whereas -itis usually means `inflammation of'.) cretin /kret'in/ or /kree'tn/ n. Congenital loser; an obnoxious person; someone who can't do anything right. It has been observed that many American hackers tend to favor the British pronunciation /kret'in/ over standard American /kree'tn/; it is thought this may be due to the insidious phonetic influence of Monty Python's Flying Circus. = cretinous /kret'n-*s/ or /kreet'n-*s/ adj. Wrong; stupid; non-functional; very poorly designed. Also used pejoratively of people. See dread high-bit disease for an example. Approximate synonyms: bletcherous, bagbiting losing, brain-damaged. crippleware n. 1. [common] Software that has some important functionality deliberately removed, so as to entice potential users to pay for a working version. 2. [Cambridge] Variety of guiltware that exhorts you to donate to some charity (compare careware, nagware). 3. Hardware deliberately crippled, which can be upgraded to a more expensive model by a trivial change (e.g., cutting a jumper). An excellent example of crippleware (sense 3) is Intel's 486SX chip, which is a standard 486DX chip with the co-processor diked out (in some early versions it was present but disabled). To upgrade, you buy a complete 486DX chip with working co-processor (its identity thinly veiled by a different pinout) and plug it into the board's expansion socket. It then disables the SX, which becomes a fancy power sink. Don't you love Intel? critical mass n. In physics, the minimum amount of fissionable material required to sustain a chain reaction. Of a software product, describes a condition of the software such that fixing one bug introduces one plus epsilon bugs. (This malady has many causes: creeping featurism, ports to too many disparate environments, poor initial design, etc.) When software achieves critical mass, it can never be fixed; it can only be discarded and rewritten. crlf /ker'l*f/, sometimes /kru'l*f/ or /C-R-L-F/ n. (often capitalized as `CRLF') A carriage return (CR, ASCII 0001101) followed by a line feed (LF, ASCII 0001010). More loosely, whatever it takes to get you from the end of one line of text to the beginning of the next line. See newline, terpri. Under Unix influence this usage has become less common (Unix uses a bare line feed as its `CRLF'). crock n. [from the American scatologism `crock of shit'] 1. An awkward feature or programming technique that ought to be made cleaner. For example, using small integers to represent error codes without the program interpreting them to the user (as in, for example, Unix make(1), which returns code 139 for a process that dies due to segfault). 2. A technique that works acceptably, but which is quite prone to failure if disturbed in the least. For example, a too-clever programmer might write an assembler which mapped instruction mnemonics to numeric opcodes algorithmically, a trick which depends far too intimately on the particular bit patterns of the opcodes. (For another example of programming with a dependence on actual opcode values, see The Story of Mel in Appendix A.) Many crocks have a tightly woven, almost completely unmodifiable structure. See kluge, brittle. The adjectives `crockish' and `crocky', and the nouns `crockishness' and `crockitude', are also used. = cross-post vi. [Usenet; very common] To post a single article simultaneously to several newsgroups. Distinguished from posting the article repeatedly, once to each newsgroup, which causes people to see it multiple times (which is very bad form). Gratuitous cross-posting without a Followup-To line directing responses to a single followup group is frowned upon, as it tends to cause followup articles to go to inappropriate newsgroups when people respond to only one part of the original posting. crossload v.,n. [proposed, by analogy with upload and download] To move files between machines on a peer-to-peer network of nodes that act as both servers and clients for a distributed file store. Esp. appropriate for ananonymized networks like Gnutella and Freenet. crudware /kruhd'weir/ n. Pejorative term for the hundreds of megabytes of low-quality freeware circulated by user's groups and BBS systems in the micro-hobbyist world. "Yet another set of disk catalog utilities for MS-DOS? What crudware!" cruft /kruhft/ [very common; back-formation from crufty] 1. n. An unpleasant substance. The dust that gathers under your bed is cruft; the TMRC Dictionary correctly noted that attacking it with a broom only produces more. 2. n. The results of shoddy construction. 3. vt. [from `hand cruft', pun on `hand craft'] To write assembler code for something normally (and better) done by a compiler (see hand-hacking). 4. n. Excess; superfluous junk; used esp. of redundant or superseded code. 5. [University of Wisconsin] n. Cruft is to hackers as gaggle is to geese; that is, at UW one properly says "a cruft of hackers". cruft together vt. (also `cruft up') To throw together something ugly but temporarily workable. Like vt. kluge up, but more pejorative. "There isn't any program now to reverse all the lines of a file, but I can probably cruft one together in about 10 minutes." See hack together, hack up, kluge up, crufty. cruftsmanship /kruhfts'm*n-ship / n. [from cruft] The antithesis of craftsmanship. crufty /kruhf'tee/ adj. [very common; origin unknown; poss. from `crusty' or `cruddy'] 1. Poorly built, possibly over-complex. The canonical example is "This is standard old crufty DEC software". In fact, one fanciful theory of the origin of `crufty' holds that was originally a mutation of `crusty' applied to DEC software so old that the `s' characters were tall and skinny, looking more like `f' characters. 2. Unpleasant, especially to the touch, often with encrusted junk. Like spilled coffee smeared with peanut butter and catsup. 3. Generally unpleasant. 4. (sometimes spelled `cruftie') n. A small crufty object (see frob); often one that doesn't fit well into the scheme of things. "A LISP property list is a good place to store crufties (or, collectively, random cruft)." This term is one of the oldest in the jargon and no one is sure of its etymology, but it is suggestive that there is a Cruft Hall at Harvard University which is part of the old physics building; it's said to have been the physics department's radar lab during WWII. To this day (early 1993) the windows appear to be full of random techno-junk. MIT or Lincoln Labs people may well have coined the term as a knock on the competition. = crumb n. Two binary digits; a quad. Larger than a bit, smaller than a nybble. Considered silly. Syn. tayste. General discussion of such terms is under nybble. = crunch 1. vi. To process, usually in a time-consuming or complicated way. Connotes an essentially trivial operation that is nonetheless painful to perform. The pain may be due to the triviality's being embedded in a loop from 1 to 1,000,000,000. "FORTRAN programs do mostly number-crunching." 2. vt. To reduce the size of a file by a complicated scheme that produces bit configurations completely unrelated to the original data, such as by a Huffman code. (The file ends up looking something like a paper document would if somebody crunched the paper into a wad.) Since such compression usually takes more computations than simpler methods such as run-length encoding, the term is doubly appropriate. (This meaning is usually used in the construction `file crunch(ing)' to distinguish it from number-crunching.) See compress. 3. n. The character #. Used at XEROX and CMU, among other places. See ASCII. 4. vt. To squeeze program source into a minimum-size representation that will still compile or execute. The term came into being specifically for a famous program on the BBC micro that crunched BASIC source in order to make it run more quickly (it was a wholly interpretive BASIC, so the number of characters mattered). Obfuscated C Contest entries are often crunched; see the first example under that entry. = cryppie /krip'ee/ n. A cryptographer. One who hacks or implements cryptographic software or hardware. = CTSS /C-T-S-S/ n. Compatible Time-Sharing System. An early (1963) experiment in the design of interactive time-sharing operating systems, ancestral to Multics, Unix, and ITS. The name ITS (Incompatible Time-sharing System) was a hack on CTSS, meant both as a joke and to express some basic differences in philosophy about the way I/O services should be presented to user programs. cube n. 1. [short for `cubicle'] A module in the open-plan offices used at many programming shops. "I've got the manuals in my cube." 2. A NeXT machine (which resembles a matte-black cube). cubing vi. [parallel with `tubing'] 1. Hacking on an IPSC (Intel Personal SuperComputer) hypercube. "Louella's gone cubing again!!" 2. Hacking Rubik's Cube or related puzzles, either physically or mathematically. 3. An indescribable form of self-torture (see sense 1 or 2). cup holder n. The tray of a CD-ROM drive, or by extension the CD drive itself. So called because of a common tech support legend about the idiot who called to complain that the cup holder on his computer broke. A joke program was once distributed around the net called "cupholder.exe", which when run simply extended the CD drive tray. The humor of this was of course lost on people whose drive had a slot or a caddy instead. cursor dipped in X n. There are a couple of metaphors in English of the form `pen dipped in X' (perhaps the most common values of X are `acid', `bile', and `vitriol'). These map over neatly to this hackish usage (the cursor being what moves, leaving letters behind, when one is composing on-line). "Talk about a nastygram! He must've had his cursor dipped in acid when he wrote that one!" cuspy /kuhs'pee/ adj. [WPI: from the DEC abbreviation CUSP, for `Commonly Used System Program', i.e., a utility program used by many people] 1. (of a program) Well-written. 2. Functionally excellent. A program that performs well and interfaces well to users is cuspy. See rude. 3. [NYU] Said of an attractive woman, especially one regarded as available. Implies a certain curvaceousness. = cut a tape vi. To write a software or document distribution on magnetic tape for shipment. Has nothing to do with physically cutting the medium! Early versions of this lexicon claimed that one never analogously speaks of `cutting a disk', but this has since been reported as live usage. Related slang usages are mainstream business's `cut a check', the recording industry's `cut a record', and the military's `cut an order'. All of these usages reflect physical processes in obsolete recording and duplication technologies. The first stage in manufacturing an old-style vinyl record involved cutting grooves in a stamping die with a precision lathe. More mundanely, the dominant technology for mass duplication of paper documents in pre-photocopying days involved "cutting a stencil", punching away portions of the wax overlay on a silk screen. More directly, paper tape with holes punched in it was an important early storage medium. cybercrud /si:'ber-kruhd/ n. 1. [coined by Ted Nelson] Obfuscatory tech-talk. Verbiage with a high MEGO factor. The computer equivalent of bureaucratese. 2. Incomprehensible stuff embedded in email. First there were the "Received" headers that show how mail flows through systems, then MIME (Multi-purpose Internet Mail Extensions) headers and part boundaries, and now huge blocks of radix-64 for PEM (Privacy Enhanced Mail) or PGP (Pretty Good Privacy) digital signatures and certificates of authenticity. This stuff all services a purpose and good user interfaces should hide it, but all too often users are forced to wade through it. cyberpunk /si:'ber-puhnk/ n.,adj. [orig. by SF writer Bruce Bethke and/or editor Gardner Dozois] A subgenre of SF launched in 1982 by William Gibson's epoch-making novel "Neuromancer" (though its roots go back through Vernor Vinge's "True Names" (see the Bibliography in Appendix C) to John Brunner's 1975 novel "The Shockwave Rider"). Gibson's near-total ignorance of computers and the present-day hacker culture enabled him to speculate about the role of computers and hackers in the future in ways hackers have since found both irritatingly naïve and tremendously stimulating. Gibson's work was widely imitated, in particular by the short-lived but innovative "Max Headroom" TV series. See cyberspace, ice, jack in, go flatline. Since 1990 or so, popular culture has included a movement or fashion trend that calls itself `cyberpunk', associated especially with the rave/techno subculture. Hackers have mixed feelings about this. On the one hand, self-described cyberpunks too often seem to be shallow trendoids in black leather who have substituted enthusiastic blathering about technology for actually learning and doing it. Attitude is no substitute for competence. On the other hand, at least cyberpunks are excited about the right things and properly respectful of hacking talent in those who have it. The general consensus is to tolerate them politely in hopes that they'll attract people who grow into being true hackers. cyberspace /si:'br-spays`/ n. 1. Notional `information-space' loaded with visual cues and navigable with brain-computer interfaces called `cyberspace decks'; a characteristic prop of cyberpunk SF. Serious efforts to construct virtual reality interfaces modeled explicitly on Gibsonian cyberspace are under way, using more conventional devices such as glove sensors and binocular TV headsets. Few hackers are prepared to deny outright the possibility of a cyberspace someday evolving out of the network (see the network). 2. The Internet or Matrix (sense #2) as a whole, considered as a crude cyberspace (sense 1). Although this usage became widely popular in the mainstream press during 1994 when the Internet exploded into public awareness, it is strongly deprecated among hackers because the Internet does not meet the high, SF-inspired standards they have for true cyberspace technology. Thus, this use of the term usually tags a wannabee or outsider. Oppose meatspace. 3. Occasionally, the metaphoric location of the mind of a person in hack mode. Some hackers report experiencing strong eidetic imagery when in hack mode; interestingly, independent reports from multiple sources suggest that there are common features to the experience. In particular, the dominant colors of this subjective `cyberspace' are often gray and silver, and the imagery often involves constellations of marching dots, elaborate shifting patterns of lines and angles, or moire patterns. cycle 1. n. The basic unit of computation. What every hacker wants more of (noted hacker Bill Gosper described himself as a "cycle junkie"). One can describe an instruction as taking so many `clock cycles'. Often the computer can access its memory once on every clock cycle, and so one speaks also of `memory cycles'. These are technical meanings of cycle. The jargon meaning comes from the observation that there are only so many cycles per second, and when you are sharing a computer the cycles get divided up among the users. The more cycles the computer spends working on your program rather than someone else's, the faster your program will run. That's why every hacker wants more cycles: so he can spend less time waiting for the computer to respond. 2. By extension, a notional unit of human thought power, emphasizing that lots of things compete for the typical hacker's think time. "I refused to get involved with the Rubik's Cube back when it was big. Knew I'd burn too many cycles on it if I let myself." 3. vt. Syn. bounce (sense 4), 120 reset; from the phrase `cycle power'. "Cycle the machine again, that serial port's still hung." cycle crunch n.,obs. A situation wherein the number of people trying to use a computer simultaneously has reached the point where no one can get enough cycles because they are spread too thin and the system has probably begun to thrash. This scenario is an inevitable result of Parkinson's Law applied to timesharing. Usually the only solution is to buy more computer. Happily, this has rapidly become easier since the mid-1980s, so much so that the very term `cycle crunch' now has a faintly archaic flavor; most hackers now use workstations or personal computers as opposed to traditional timesharing systems, and are far more likely to complain of `bandwidth crunch' on their shared networks rather than cycle crunch. cycle drought n. A scarcity of cycles. It may be due to a cycle crunch, but it could also occur because part of the computer is temporarily not working, leaving fewer cycles to go around. "The high moby is down, so we're running with only half the usual amount of memory. There will be a cycle drought until it's fixed." cycle of reincarnation n. See wheel of reincarnation. cycle server n. A powerful machine that exists primarily for running large compute-, disk-, or memory-intensive jobs (more formally called a `compute server'). Implies that interactive tasks such as editing are done on other machines on the network, such as workstations. cypherpunk n. [from cyberpunk] Someone interested in the uses of encryption via electronic ciphers for enhancing personal privacy and guarding against tyranny by centralized, authoritarian power structures, especially government. There is an active cypherpunks mailing list at cypherpunks-request@toad.com coordinating work on public-key encryption freeware, privacy, and digital cash. See also tentacle. C|N>K n. [Usenet] Coffee through Nose to Keyboard; that is, "I laughed so hard I snarfed my coffee onto my keyboard.". Common on _alt.fan.pratchett_ and scary devil monastery; recognized elsewhere. The Acronymphomania FAQ on _alt.fan.pratchett_ recognizes variants such as T|N>K = `Tea through Nose to Keyboard' and C|N>S = `Coffee through Nose to Screen'. = D = D. C. Power Lab: daemon: daemon book: dahmum: dancing frog: dangling pointer: dark-side hacker: Datamation: DAU: Dave the Resurrector: day mode: dd: DDT: de-rezz: dead: dead beef attack: dead code: dead link: DEADBEEF: deadlock: deadly embrace: death code: Death Square: Death Star: DEC: DEC: DEC Wars: decay: deckle: DED: deep hack mode: deep magic: deep space: defenestration: defined as: dehose: deletia: deliminator: delint: delta: demented: demigod: demo: demo mode: demoeffect: demogroup: demon: demon dialer: demoparty: demoscene: dentro: depeditate: deprecated: derf: deserves to lose: desk check: despew: Devil Book: /dev/null: dickless workstation: dictionary flame: diddle: die: die horribly: diff: digit: dike: Dilbert: ding: dink: dinosaur: dinosaur pen: dinosaurs mating: dirtball: dirty power: disclaimer: Discordianism: disk farm: display hack: dispress: Dissociated Press: distribution: distro: disusered: do protocol: doc: documentation: dodgy: dogcow: dogfood: dogpile: dogwash: domainist: Don't do that then!: dongle: dongle-disk: donuts: doorstop: DoS attack: dot file: double bucky: doubled sig: down: download: DP: DPB: DPer: Dr. Fred Mbogo: dragon: Dragon Book: drain: dread high-bit disease: Dread Questionmark Disease: DRECNET: driver: droid: drone: drool-proof paper: drop on the floor: drop-ins: drop-outs: drugged: drum: drunk mouse syndrome: dub dub dub: Duff's device: dumb terminal: dumbass attack: dumbed down: dump: dumpster diving: dup killer: dup loop: dusty deck: DWIM: dynner: D. C. Power Lab n. The former site of SAIL. Hackers thought this was very funny because the obvious connection to electrical engineering was nonexistent -- the lab was named for a Donald C. Power. Compare Marginal Hacks. daemon /day'mn/ or /dee'mn/ n. [from the mythological meaning, later rationalized as the acronym `Disk And Execution MONitor'] A program that is not invoked explicitly, but lies dormant waiting for some condition(s) to occur. The idea is that the perpetrator of the condition need not be aware that a daemon is lurking (though often a program will commit an action only because it knows that it will implicitly invoke a daemon). For example, under ITS writing a file on the LPT spooler's directory would invoke the spooling daemon, which would then print the file. The advantage is that programs wanting (in this example) files printed need neither compete for access to nor understand any idiosyncrasies of the LPT. They simply enter their implicit requests and let the daemon decide what to do with them. Daemons are usually spawned automatically by the system, and may either live forever or be regenerated at intervals. Daemon and demon are often used interchangeably, but seem to have distinct connotations. The term `daemon' was introduced to computing by CTSS people (who pronounced it /dee'mon/) and used it to refer to what ITS called a dragon; the prototype was a program called DAEMON that automatically made tape backups of the file system. Although the meaning and the pronunciation have drifted, we think this glossary reflects current (2000) usage. = daemon book n. "The Design and Implementation of the 4.3BSD UNIX Operating System", by Samuel J. Leffler, Marshall Kirk McKusick, Michael J. Karels, and John S. Quarterman (Addison-Wesley Publishers, 1989, ISBN 0-201-06196-1); or "The Design and Implementation of the 4.4 BSD Operating System" by Marshall Kirk McKusick, Keith Bostic, Michael J. Karels and John S. Quarterman (Addison-Wesley Longman, 1996, SBN 0-201-54979-4) Either of the standard reference books on the internals of BSD Unix. So called because the covers have a picture depicting a little devil (a visual play on daemon) in sneakers, holding a pitchfork (referring to one of the characteristic features of Unix, the fork(2) system call). Also known as the Devil Book. dahmum /dah'mum/ n. [Usenet] The material of which protracted flame wars, especially those about operating systems, is composed. Homeomorphic to spam. The term `dahmum' is derived from the name of a militant OS/2 advocate, and originated when an extensively crossposted OS/2-versus-Linux debate was fed through Dissociated Press. dancing frog n. [Vancouver area] A problem that occurs on a computer that will not reappear while anyone else is watching. From the classic Warner Brothers cartoon "One Froggy Evening", featuring a dancing and singing Michigan J. Frog that just croaks when anyone else is around (now the WB network mascot). dangling pointer n. [common] A reference that doesn't actually lead anywhere (in C and some other languages, a pointer that doesn't actually point at anything valid). Usually this happens because it formerly pointed to something that has moved or disappeared. Used as jargon in a generalization of its techspeak meaning; for example, a local phone number for a person who has since moved to the other coast is a dangling pointer. Compare dead link. dark-side hacker n. A criminal or malicious hacker; a cracker. From George Lucas's Darth Vader, "seduced by the dark side of the Force". The implication that hackers form a sort of elite of technological Jedi Knights is intended. Oppose samurai. Datamation /day`t*-may'sh*n/ n. A magazine that many hackers assume all suits read. Used to question an unbelieved quote, as in "Did you read that in `Datamation?'" (But see below; this slur may be dated by the time you read this.) It used to publish something hackishly funny every once in a while, like the original paper on COME FROM in 1973, and Ed Post's "Real Programmers Don't Use Pascal" ten years later, but for a long time after that it was much more exclusively suit-oriented and boring. Following a change of editorship in 1994, Datamation is trying for more of the technical content and irreverent humor that marked its early days. Datamation now has a WWW page at http://www.datamation.com worth visiting for its selection of computer humor, including "Real Programmers Don't Use Pascal" and the `Bastard Operator From Hell' stories by Simon Travaglia (see BOFH). DAU /dow/ n. [German FidoNet] German acronym for Dümmster Anzunehmender User (stupidest imaginable user). From the engineering-slang GAU for Grösster Anzunehmender Unfall, worst assumable accident, esp. of a LNG tank farm plant or something with similarly disastrous consequences. In popular German, GAU is used only to refer to worst-case nuclear acidents such as a core meltdown. See cretin, fool, loser and weasel. Dave the Resurrector n. [Usenet; also abbreviated DtR] A cancelbot that cancels cancels. Dave the Resurrector originated when some spam-spewers decided to try to impede spam-fighting by wholesale cancellation of anti-spam coordination messages in the _news.admin.net-abuse.usenet_ newsgroup. day mode n. See phase (sense 1). Used of people only. dd /dee-dee/ vt. [Unix: from IBM JCL] Equivalent to cat or BLT. Originally the name of a Unix copy command with special options suitable for block-oriented devices; it was often used in heavy-handed system maintenance, as in "Let's dd the root partition onto a tape, then use the boot PROM to load it back on to a new disk". The Unix dd(1) was designed with a weird, distinctly non-Unixy keyword option syntax reminiscent of IBM System/360 JCL (which had an elaborate DD `Dataset Definition' specification for I/O devices); though the command filled a need, the interface design was clearly a prank. The jargon usage is now very rare outside Unix sites and now nearly obsolete even there, as dd(1) has been deprecated for a long time (though it has no exact replacement). The term has been displaced by BLT or simple English `copy'. DDT /D-D-T/ n. [from the insecticide para-dichloro-diphenyl-trichloroethene] 1. Generic term for a program that assists in debugging other programs by showing individual machine instructions in a readable symbolic form and letting the user change them. In this sense the term DDT is now archaic, having been widely displaced by `debugger' or names of individual programs like adb, sdb, dbx, or gdb. 2. [ITS] Under MIT's fabled ITS operating system, DDT (running under the alias HACTRN, a six-letterism for `Hack Translator') was also used as the shell or top level command language used to execute other programs. 3. Any one of several specific DDTs (sense 1) supported on early DEC hardware and CP/M. The PDP-10 Reference Handbook (1969) contained a footnote on the first page of the documentation for DDT that illuminates the origin of the term: Historical footnote: DDT was developed at MIT for the PDP-1 computer in 1961. At that time DDT stood for "DEC Debugging Tape". Since then, the idea of an on-line debugging program has propagated throughout the computer industry. DDT programs are now available for all DEC computers. Since media other than tape are now frequently used, the more descriptive name "Dynamic Debugging Technique" has been adopted, retaining the DDT abbreviation. Confusion between DDT-10 and another well known pesticide, dichloro-diphenyl-trichloroethane (C14-H9-Cl5) should be minimal since each attacks a different, and apparently mutually exclusive, class of bugs. (The `tape' referred to was, incidentally, not magnetic but paper.) Sadly, this quotation was removed from later editions of the handbook after the suits took over and DEC became much more `businesslike'. The history above is known to many old-time hackers. But there's more: Peter Samson, compiler of the original TMRC lexicon, reports that he named `DDT' after a similar tool on the TX-0 computer, the direct ancestor of the PDP-1 built at MIT's Lincoln Lab in 1957. The debugger on that ground-breaking machine (the first transistorized computer) rejoiced in the name FLIT (FLexowriter Interrogation Tape). de-rezz /dee-rez'/ [from `de-resolve' via the movie "Tron"] (also `derez') 1. vi. To disappear or dissolve; the image that goes with it is of an object breaking up into raster lines and static and then dissolving. Occasionally used of a person who seems to have suddenly `fuzzed out' mentally rather than physically. Usage: extremely silly, also rare. This verb was actually invented as fictional hacker jargon, and adopted in a spirit of irony by real hackers years after the fact. 2. vt. The Macintosh resource decompiler. On a Macintosh, many program structures (including the code itself) are managed in small segments of the program file known as `resources'; `Rez' and `DeRez' are a pair of utilities for compiling and decompiling resource files. Thus, decompiling a resource is `derezzing'. Usage: very common. dead adj. 1. Non-functional; down; crashed. Especially used of hardware. 2. At XEROX PARC, software that is working but not undergoing continued development and support. 3. Useless; inaccessible. Antonym: `live'. Compare dead code. dead beef attack n. [cypherpunks list, 1996] An attack on a public-key cryptosystem consisting of publishing a key having the same ID as another key (thus making it possible to spoof a user's identity if recipients aren't careful about verifying keys). In PGP and GPG the key ID is the last eight hex digits of (for RSA keys) the product of two primes. The attack was demonstrated by creating a key whose ID was 0xdeadbeef (see DEADBEEF). dead code n. Routines that can never be accessed because all calls to them have been removed, or code that cannot be reached because it is guarded by a control structure that provably must always transfer control somewhere else. The presence of dead code may reveal either logical errors due to alterations in the program or significant changes in the assumptions and environment of the program (see also software rot); a good compiler should report dead code so a maintainer can think about what it means. (Sometimes it simply means that an extremely defensive programmer has inserted can't happen tests which really can't happen -- yet.) Syn. grunge. See also dead, and The Story of Mel. dead link n. [very common] A World-Wide-Web URL that no longer points to the information it was written to reach. Usually this happens because the document has been moved or deleted. Lots of dead links make a WWW page frustrating and useless and are the #1 sign of poor page maintainance. Compare dangling pointer, link rot. DEADBEEF /ded-beef/ n. The hexadecimal word-fill pattern for freshly allocated memory (decimal -21524111) under a number of IBM environments, including the RS/6000. Some modern debugging tools deliberately fill freed memory with this value as a way of converting heisenbugs into Bohr bugs. As in "Your program is DEADBEEF" (meaning gone, aborted, flushed from memory); if you start from an odd half-word boundary, of course, you have BEEFDEAD. See also the anecdote under fool and dead beef attack. deadlock n. 1. [techspeak] A situation wherein two or more processes are unable to proceed because each is waiting for one of the others to do something. A common example is a program communicating to a server, which may find itself waiting for output from the server before sending anything more to it, while the server is similarly waiting for more input from the controlling program before outputting anything. (It is reported that this particular flavor of deadlock is sometimes called a `starvation deadlock', though the term `starvation' is more properly used for situations where a program can never run simply because it never gets high enough priority. Another common flavor is `constipation', in which each process is trying to send stuff to the other but all buffers are full because nobody is reading anything.) See deadly embrace. 2. Also used of deadlock-like interactions between humans, as when two people meet in a narrow corridor, and each tries to be polite by moving aside to let the other pass, but they end up swaying from side to side without making any progress because they always move the same way at the same time. deadly embrace n. Same as deadlock, though usually used only when exactly two processes are involved. This is the more popular term in Europe, while deadlock predominates in the United States. death code n. A routine whose job is to set everything in the computer -- registers, memory, flags, everything -- to zero, including that portion of memory where it is running; its last act is to stomp on its own "store zero" instruction. Death code isn't very useful, but writing it is an interesting hacking challenge on architectures where the instruction set makes it possible, such as the PDP-8 (it has also been done on the DG Nova). Perhaps the ultimate death code is on the TI 990 series, where all registers are actually in RAM, and the instruction "store immediate 0" has the opcode "0". The PC will immediately wrap around core as many times as it can until a user hits HALT. Any empty memory location is death code. Worse, the manufacturer recommended use of this instruction in startup code (which would be in ROM and therefore survive). Death Square n. The corporate logo of Novell, the people who acquired USL after AT&T let go of it (Novell eventually sold the Unix group to SCO). Coined by analogy with Death Star, because many people believed Novell was bungling the lead in Unix systems exactly as AT&T did for many years. Death Star n. [from the movie "Star Wars"] 1. The AT&T corporate logo, which appears on computers sold by AT&T and bears an uncanny resemblance to the Death Star in the movie. This usage is particularly common among partisans of BSD Unix, who tend to regard the AT&T versions as inferior and AT&T as a bad guy. Copies still circulate of a poster printed by Mt. Xinu showing a starscape with a space fighter labeled 4.2 BSD streaking away from a broken AT&T logo wreathed in flames. 2. AT&T's internal magazine, "Focus", uses `death star' to describe an incorrectly done AT&T logo in which the inner circle in the top left is dark instead of light -- a frequent result of dark-on-light logo images. DEC /dek/ n. 1. v. Verbal (and only rarely written) shorthand for _decrement_, i.e. `decrease by one'. Especially used by assembly programmers, as many assembly languages have a dec mnemonic. Antonym: inc. 2. n. Commonly used abbreviation for Digital Equipment Corporation, later deprecated by DEC itself in favor of "Digital" and now entirely obsolete following the buyout by Compaq. Before the killer micro revolution of the late 1980s, hackerdom was closely symbiotic with DEC's pioneering timesharing machines. The first of the group of cultures described by this lexicon nucleated around the PDP-1 (see TMRC). Subsequently, the PDP-6, PDP-10, PDP-20, PDP-11 and VAX were all foci of large and important hackerdoms, and DEC machines long dominated the ARPANET and Internet machine population. DEC was the technological leader of the minicomputer era (roughly 1967 to 1987), but its failure to embrace microcomputers and Unix early cost it heavily in profits and prestige after silicon got cheap. Nevertheless, the microprocessor design tradition owes a major debt to the PDP-11 instruction set, and every one of the major general-purpose microcomputer OSs so far (CP/M, MS-DOS, Unix, OS/2, Windows NT) was either genetically descended from a DEC OS, or incubated on DEC hardware, or both. Accordingly, DEC was for many years still regarded with a certain wry affection even among many hackers too young to have grown up on DEC machines. DEC reclaimed some of its old reputation among techies in the first half of the 1990s. The success of the Alpha, an innovatively-designed and very high-performance killer micro, helped a lot. So did DEC's newfound receptiveness to Unix and open systems in general. When Compaq acquired DEC at the end of 1998 there was some concern that these gains would be lost along with the DEC nameplate, but the merged company has so far turned out to be culturally dominated by the ex-DEC side. DEC Wars n. A 1983 Usenet posting by Alan Hastings and Steve Tarr spoofing the "Star Wars" movies in hackish terms. Some years later, ESR (disappointed by Hastings and Tarr's failure to exploit a great premise more thoroughly) posted a 3-times-longer complete rewrite called Unix WARS; the two are often confused. decay n.,vi [from nuclear physics] An automatic conversion which is applied to most array-valued expressions in C; they `decay into' pointer-valued expressions pointing to the array's first element. This term is borderline techspeak, but is not used in the official standard for the language. = deckle /dek'l/ n. [from dec- and nybble; the original spelling seems to have been `decle'] Two nickles; 10 bits. Reported among developers for Mattel's GI 1600 (the Intellivision games processor), a chip with 16-bit-wide RAM but 10-bit-wide ROM. See nybble for other such terms. DED /D-E-D/ n. Dark-Emitting Diode (that is, a burned-out LED). Compare SED, LER, write-only memory. In the early 1970s both Signetics and Texas instruments released DED spec sheets as AFJs (suggested uses included "as a power-off indicator"). deep hack mode n. See hack mode. deep magic n. [poss. from C. S. Lewis's "Narnia" books] An awesomely arcane technique central to a program or system, esp. one neither generally published nor available to hackers at large (compare black art); one that could only have been composed by a true wizard. Compiler optimization techniques and many aspects of OS design used to be deep magic; many techniques in cryptography, signal processing, graphics, and AI still are. Compare heavy wizardry. Esp. found in comments of the form "Deep magic begins here...". Compare voodoo programming. deep space n. 1. Describes the notional location of any program that has gone off the trolley. Esp. used of programs that just sit there silently grinding long after either failure or some output is expected. "Uh oh. I should have gotten a prompt ten seconds ago. The program's in deep space somewhere." Compare buzz, catatonic, hyperspace. 2. The metaphorical location of a human so dazed and/or confused or caught up in some esoteric form of bogosity that he or she no longer responds coherently to normal communication. Compare page out. defenestration n. [mythically from a traditional Czech assasination method, via SF fandom] 1. Proper karmic retribution for an incorrigible punster. "Oh, ghod, that was awful!" "Quick! Defenestrate him!" 2. The act of exiting a window system in order to get better response time from a full-screen program. This comes from the dictionary meaning of `defenestrate', which is to throw something out a window. 3. The act of discarding something under the assumption that it will improve matters. "I don't have any disk space left." "Well, why don't you defenestrate that 100 megs worth of old core dumps?" 4. Under a GUI, the act of dragging something out of a window (onto the screen). "Next, defenestrate the MugWump icon." 5. The act of completely removing Micro$oft Windows from a PC in favor of a better OS (typically Linux). defined as adj. In the role of, usually in an organization-chart sense. "Pete is currently defined as bug prioritizer." Compare logical. dehose /dee-hohz/ vt. To clear a hosed condition. = deletia n. /d*-lee'sha/ [USENET; common] In an email reply, material omitted from the quote of the original. Usually written rather than spoken; often appears as a pseudo-tag or ellipsis in the body of the reply, as "[deletia]" or "<deletia>". = deliminator /de-lim'-in-ay-t*r/ n. [portmanteau, delimiter + eliminate] A string or pattern used to delimit text into fields, but which is itself eliminated from the resulting list of fields. This jargon seems to have originated among Perl hackers in connection with the Perl split() function; however, it has been sighted in live use among Java and even Visual Basic programmers. delint /dee-lint/ v. obs. To modify code to remove problems detected when linting. Confusingly, this process is also referred to as `linting' code. This term is no longer in general use because ANSI C compilers typically issue compile-time warnings almost as detailed as lint warnings. = delta n. 1. [techspeak] A quantitative change, especially a small or incremental one (this use is general in physics and engineering). "I just doubled the speed of my program!" "What was the delta on program size?" "About 30 percent." (He doubled the speed of his program, but increased its size by only 30 percent.) 2. [Unix] A diff, especially a diff stored under the set of version-control tools called SCCS (Source Code Control System) or RCS (Revision Control System). 3. n. A small quantity, but not as small as epsilon. The jargon usage of delta and epsilon stems from the traditional use of these letters in mathematics for very small numerical quantities, particularly in `epsilon-delta' proofs in limit theory (as in the differential calculus). The term delta is often used, once epsilon has been mentioned, to mean a quantity that is slightly bigger than epsilon but still very small. "The cost isn't epsilon, but it's delta" means that the cost isn't totally negligible, but it is nevertheless very small. Common constructions include `within delta of --', `within epsilon of --': that is, `close to' and `even closer to'. = demented adj. Yet another term of disgust used to describe a malfunctioning program. The connotation in this case is that the program works as designed, but the design is bad. Said, for example, of a program that generates large numbers of meaningless error messages, implying that it is on the brink of imminent collapse. Compare wonky, brain-damaged, bozotic. D = demigod n. A hacker with years of experience, a world-wide reputation, and a major role in the development of at least one design, tool, or game used by or known to more than half of the hacker community. To qualify as a genuine demigod, the person must recognizably identify with the hacker community and have helped shape it. Major demigods include Ken Thompson and Dennis Ritchie (co-inventors of Unix and C), Richard M. Stallman (inventor of EMACS), Larry Wall (inventor of Perl), Linus Torvalds (inventor of Linux), and most recently James Gosling (inventor of Java, NeWS, and GOSMACS) and Guido van Rossum (inventor of Python). In their hearts of hearts, most hackers dream of someday becoming demigods themselves, and more than one major software project has been driven to completion by the author's veiled hopes of apotheosis. See also net.god, true-hacker. = demo /de'moh/ [short for `demonstration'] 1. v. To demonstrate a product or prototype. A far more effective way of inducing bugs to manifest than any number of test runs, especially when important people are watching. 2. n. The act of demoing. "I've gotta give a demo of the drool-proof interface; how does it work again?" 3. n. Esp. as `demo version', can refer either to an early, barely-functional version of a program which can be used for demonstration purposes as long as the operator uses exactly the right commands and skirts its numerous bugs, deficiencies, and unimplemented portions, or to a special version of a program (frequently with some features crippled) which is distributed at little or no cost to the user for enticement purposes. 4. [demoscene] A sequence of demoeffects (usually) combined with self-composed music and hand-drawn ("pixelated") graphics. These days (1997) usually built to attend a compo. Often called `eurodemos' outside Europe, as most of the demoscene activity seems to have gathered in northern Europe and especially Scandinavia. See also intro, dentro. = demo mode n. 1. [Sun] The state of being heads down in order to finish code in time for a demo, usually due yesterday. 2. A mode in which video games sit by themselves running through a portion of the game, also known as `attract mode'. Some serious apps have a demo mode they use as a screen saver, or may go through a demo mode on startup (for example, the Microsoft Windows opening screen -- which lets you impress your neighbors without actually having to put up with Microsloth Windows). demoeffect n. [demoscene] What among hackers is called a display hack. Classical effects include "plasma" (colorful mess), "keftales" (x*x+y*y and other similar patterns, usually combined with color-cycling), realtime fractals, realtime 3d graphics, etc. Historically, demo effects have cheated as much as possible to gain more speed and more complexity, using low-precision math and masses of assembler code and building animation realtime are three common tricks, but use of special hardware to fake effects is a Good Thing on the demoscene (though this is becoming less common as platforms like the Amiga fade away). demogroup n. [demoscene] A group of demo (sense 4) composers. Job titles within a group include coders (the ones who write programs), graphicians (the ones who painstakingly pixelate the fine art), musicians (the music composers), sysops, traders/swappers (the ones who do the trading and other PR), and organizers (in larger groups). It is not uncommon for one person to do multiple jobs, but it has been observed that good coders are rarely good composers and vice versa. [How odd. Musical talent seems common among Internet/Unix hackers --ESR] demon n. 1. [MIT] A portion of a program that is not invoked explicitly, but that lies dormant waiting for some condition(s) to occur. See daemon. The distinction is that demons are usually processes within a program, while daemons are usually programs running on an operating system. 2. [outside MIT] Often used equivalently to daemon -- especially in the Unix world, where the latter spelling and pronunciation is considered mildly archaic. Demons in sense 1 are particularly common in AI programs. For example, a knowledge-manipulation program might implement inference rules as demons. Whenever a new piece of knowledge was added, various demons would activate (which demons depends on the particular piece of data) and would create additional pieces of knowledge by applying their respective inference rules to the original piece. These new pieces could in turn activate more demons as the inferences filtered down through chains of logic. Meanwhile, the main program could continue with whatever its primary task was. demon dialer n. A program which repeatedly calls the same telephone number. Demon dialing may be benign (as when a number of communications programs contend for legitimate access to a BBS line) or malign (that is, used as a prank or denial-of-service attack). This term dates from the blue box days of the 1970s and early 1980s and is now semi-obsolescent among phreakers; see war dialer for its contemporary progeny. demoparty n. [demoscene] Aboveground descendant of the copyparty, with emphasis shifted away from software piracy and towards compos. Smaller demoparties, for 100 persons or less, are held quite often, sometimes even once a month, and usually last for one to two days. On the other end of the scale, huge demo parties are held once a year (and four of these have grown very large and occur annually - Assembly in Finland, The Party in Denmark, The Gathering in Norway, and NAID somewhere in north America). These parties usually last for three to five days, have room for 3000-5000 people, and have a party network with connection to the internet. demoscene /dem'oh-seen/ [also `demo scene'] A culture of multimedia hackers located primarily in Scandinavia and northern Europe. Demoscene folklore recounts that when old-time warez d00dz cracked some piece of software they often added an advertisement of in the beginning, usually containing colorful display hacks with greetings to other cracking groups. The demoscene was born among people who decided building these display hacks is more interesting than hacking and began to build self-contained display hacks of considerable elaboration and beauty (within the culture such a hack is called a demo). The split seems to have happened at the end of the 1980s. As more of these demogroups emerged, they started to have compos at copying parties (see copyparty), which later evolved to standalone events (see demoparty). The demoscene has retained some traits from the warez d00dz, including their style of handles and group names and some of their jargon. Traditionally demos were written in assembly language, with lots of smart tricks, self-modifying code, undocumented op-codes and the like. Some time around 1995, people started coding demos in C, and a couple of years after that, they also started using Java. Ten years on (in 1998-1999), the demoscene is changing as its original platforms (C64, Amiga, Spectrum, Atari ST, IBM PC under DOS) die out and activity shifts towards Windows, Linux, and the Internet. While deeply underground in the past, demoscene is trying to get into the mainstream as accepted art form, and one symptom of this is the commercialization of bigger demoparties. Older demosceneers frown at this, but the majority think it's a good direction. Many demosceneers end up working in the computer game industry. Demoscene resource pages are available at http://www.oldskool.org/demos/explained/ and http://www.scene.org/. dentro /den'troh/ [demoscene] Combination of demo (sense 4) and intro. Other name mixings include intmo, dentmo etc. and are used usually when the authors are not quite sure whether the program is a demo or an intro. Special-purpose coinages like wedtro (some member of a group got married), invtro (invitation intro) etc. have also been sighted. D = depeditate /dee-ped'*-tayt/ n. [by (faulty) analogy with `decapitate'] Humorously, to cut off the feet of. When one is using some computer-aided typesetting tools, careless placement of text blocks within a page or above a rule can result in chopped-off letter descenders. Such letters are said to have been depeditated. deprecated adj. Said of a program or feature that is considered obsolescent and in the process of being phased out, usually in favor of a specified replacement. Deprecated features can, unfortunately, linger on for many years. This term appears with distressing frequency in standards documents when the committees writing the documents realize that large amounts of extant (and presumably happily working) code depend on the feature(s) that have passed out of favor. See also dusty deck. [Usage note: don't confuse this word with `depreciate', or the verb form `deprecate' with `depreciated`. They are different words; see any dictionary for discussion.] derf /derf/ v.,n. [PLATO] The act of exploiting a terminal which someone else has absentmindedly left logged on, to use that person's account, especially to post articles intended to make an ass of the victim you're impersonating. It has been alleged that the term originated as a reversal of the name of the gentleman who most usually left himself vulnerable to it, who also happened to be the head of the department that handled PLATO at the University of Delaware. deserves to lose adj. [common] Said of someone who willfully does the Wrong Thing; humorously, if one uses a feature known to be marginal. What is meant is that one deserves the consequences of one's losing actions. "Boy, anyone who tries to use mess-dos deserves to lose!" (ITS fans used to say the same thing of Unix; many still do.) See also screw, chomp, bagbiter. desk check n.,v. To grovel over hardcopy of source code, mentally simulating the control flow; a method of catching bugs. No longer common practice in this age of on-screen editing, fast compiles, and sophisticated debuggers -- though some maintain stoutly that it ought to be. Compare eyeball search, vdiff, vgrep. despew /d*-spyoo'/ v. [Usenet] To automatically generate a large amount of garbage to the net, esp. from an automated posting program gone wild. See ARMM. D = Devil Book n. See daemon book, the term preferred by its authors. /dev/null /dev-nuhl/ n. [from the Unix null device, used as a data sink] A notional `black hole' in any information space being discussed, used, or referred to. A controversial posting, for example, might end "Kudos to rasputin@kremlin.org, flames to /dev/null". See bit bucket. dickless workstation n. Extremely pejorative hackerism for `diskless workstation', a class of botches including the Sun 3/50 and other machines designed exclusively to network with an expensive central disk server. These combine all the disadvantages of time-sharing with all the disadvantages of distributed personal computers; typically, they cannot even boot themselves without help (in the form of some kind of breath-of-life packet) from the server. dictionary flame n. [Usenet] An attempt to sidetrack a debate away from issues by insisting on meanings for key terms that presuppose a desired conclusion or smuggle in an implicit premise. A common tactic of people who prefer argument over definitions to disputes about reality. Compare spelling flame. diddle 1. vt. To work with or modify in a not particularly serious manner. "I diddled a copy of ADVENT so it didn't double-space all the time." "Let's diddle this piece of code and see if the problem goes away." See tweak and twiddle. 2. n. The action or result of diddling. See also tweak, twiddle, frob. D = die v. Syn. crash. Unlike crash, which is used primarily of hardware, this verb is used of both hardware and software. See also go flatline, casters-up mode. die horribly v. The software equivalent of crash and burn, and the preferred emphatic form of die. "The converter choked on an FF in its input and died horribly". diff /dif/ n. 1. A change listing, especially giving differences between (and additions to) source code or documents (the term is often used in the plural `diffs'). "Send me your diffs for the Jargon File!" Compare vdiff. 2. Specifically, such a listing produced by the diff(1) command, esp. when used as specification input to the patch(1) utility (which can actually perform the modifications; see patch). This is a common method of distributing patches and source updates in the Unix/C world. 3. v. To compare (whether or not by use of automated tools on machine-readable files); see also vdiff, mod. digit n.,obs. An employee of Digital Equipment Corporation. See also VAX, VMS, PDP-10, TOPS-10, field circus. = dike vt. To remove or disable a portion of something, as a wire from a computer or a subroutine from a program. A standard slogan is "When in doubt, dike it out". (The implication is that it is usually more effective to attack software problems by reducing complexity than by increasing it.) The word `dikes' is widely used among mechanics and engineers to mean `diagonal cutters', esp. the heavy-duty metal-cutting version, but may also refer to a kind of wire-cutters used by electronics techs. To `dike something out' means to use such cutters to remove something. Indeed, the TMRC Dictionary defined dike as "to attack with dikes". Among hackers this term has been metaphorically extended to informational objects such as sections of code. Dilbert n. Name and title character of a comic strip nationally syndicated in the U.S. and enormously popular among hackers. Dilbert is an archetypical engineer-nerd who works at an anonymous high-technology company; the strips present a lacerating satire of insane working conditions and idiotic management practices all too readily recognized by hackers. Adams, who spent nine years in cube 4S700R at Pacific Bell (not DEC as often reported), often remarks that he has never been able to come up with a fictional management blunder that his correspondents didn't quickly either report to have actually happened or top with a similar but even more bizarre incident. In 1996 Adams distilled his insights into the collective psychology of businesses into an even funnier book, "The Dilbert Principle" (HarperCollins, ISBN 0-887-30787-6). See also pointy-haired, rat dance. = ding n.,vi. 1. Synonym for feep. Usage: rare among hackers, but more common in the Real World. 2. `dinged': What happens when someone in authority gives you a minor bitching about something, esp. something trivial. "I was dinged for having a messy desk." dink /dink/ adj. Said of a machine that has the bitty box nature; a machine too small to be worth bothering with -- sometimes the system you're currently forced to work on. First heard from an MIT hacker working on a CP/M system with 64K, in reference to any 6502 system, then from fans of 32-bit architectures about 16-bit machines. "GNUMACS will never work on that dink machine." Probably derived from mainstream `dinky', which isn't sufficiently pejorative. See macdink. = dinosaur n. 1. Any hardware requiring raised flooring and special power. Used especially of old minis and mainframes, in contrast with newer microprocessor-based machines. In a famous quote from the 1988 Unix EXPO, Bill Joy compared the liquid-cooled mainframe in the massive IBM display with a grazing dinosaur "with a truck outside pumping its bodily fluids through it". IBM was not amused. Compare big iron; see also mainframe. 2. [IBM] A very conservative user; a zipperhead. dinosaur pen n. A traditional mainframe computer room complete with raised flooring, special power, its own ultra-heavy-duty air conditioning, and a side order of Halon fire extinguishers. See boa. dinosaurs mating n. Said to occur when yet another big iron merger or buyout occurs; reflects a perception by hackers that these signal another stage in the long, slow dying of the mainframe industry. In its glory days of the 1960s, it was `IBM and the Seven Dwarves': Burroughs, Control Data, General Electric, Honeywell, NCR, RCA, and Univac. RCA and GE sold out early, and it was `IBM and the Bunch' (Burroughs, Univac, NCR, Control Data, and Honeywell) for a while. Honeywell was bought out by Bull; Burroughs merged with Univac to form Unisys (in 1984 -- this was when the phrase `dinosaurs mating' was coined); and in 1991 AT&T absorbed NCR (but spat it back out a few years later). Control Data still exists but is no longer in the mainframe business. More such earth-shaking unions of doomed giants seem inevitable. dirtball n. [XEROX PARC] A small, perhaps struggling outsider; not in the major or even the minor leagues. For example, "Xerox is not a dirtball company". [Outsiders often observe in the PARC culture an institutional arrogance which usage of this term exemplifies. The brilliance and scope of PARC's contributions to computer science have been such that this superior attitude is not much resented. --ESR] dirty power n. Electrical mains voltage that is unfriendly to the delicate innards of computers. Spikes, drop-outs, average voltage significantly higher or lower than nominal, or just plain noise can all cause problems of varying subtlety and severity (these are collectively known as power hits). disclaimer n. [Usenet] Statement ritually appended to many Usenet postings (sometimes automatically, by the posting software) reiterating the fact (which should be obvious, but is easily forgotten) that the article reflects its author's opinions and not necessarily those of the organization running the machine through which the article entered the network. Discordianism /dis-kor'di-*n-ism/ n. The veneration of Eris, a.k.a. Discordia; widely popular among hackers. Discordianism was popularized by Robert Shea and Robert Anton Wilson's novel "Illuminatus!" as a sort of self-subverting Dada-Zen for Westerners -- it should on no account be taken seriously but is far more serious than most jokes. Consider, for example, the Fifth Commandment of the Pentabarf, from "Principia Discordia": "A Discordian is Prohibited of Believing What he Reads." Discordianism is usually connected with an elaborate conspiracy theory/joke involving millennia-long warfare between the anarcho-surrealist partisans of Eris and a malevolent, authoritarian secret society called the Illuminati. See Religion in Appendix B, Church of the SubGenius, and ha ha only serious. disk farm n. (also laundromat) A large room or rooms filled with disk drives (esp. washing machines). display hack n. A program with the same approximate purpose as a kaleidoscope: to make pretty pictures. Famous display hacks include munching squares, smoking clover, the BSD Unix rain(6) program, worms(6) on miscellaneous Unixes, and the X kaleid(1) program. Display hacks can also be implemented by creating text files containing numerous escape sequences for interpretation by a video terminal; one notable example displayed, on any VT100, a Christmas tree with twinkling lights and a toy train circling its base. The hack value of a display hack is proportional to the esthetic value of the images times the cleverness of the algorithm divided by the size of the code. Syn. psychedelicware. dispress vt. [contraction of `Dissociated Press' due to eight-character MS-DOS filenames] To apply the Dissociated Press algorithm to a block of text. The resultant output is also referred to as a 'dispression'. Dissociated Press n. [play on `Associated Press'; perhaps inspired by a reference in the 1950 Bugs Bunny cartoon "What's Up, Doc?"] An algorithm for transforming any text into potentially humorous garbage even more efficiently than by passing it through a marketroid. The algorithm starts by printing any N consecutive words (or letters) in the text. Then at every step it searches for any random occurrence in the original text of the last N words (or letters) already printed and then prints the next word or letter. EMACS has a handy command for this. Here is a short example of word-based Dissociated Press applied to an earlier version of this Jargon File: wart: n. A small, crocky feature that sticks out of an array (C has no checks for this). This is relatively benign and easy to spot if the phrase is bent so as to be not worth paying attention to the medium in question. Here is a short example of letter-based Dissociated Press applied to the same source: window sysIWYG: n. A bit was named aften /bee't*/ prefer to use the other guy's re, especially in every cast a chuckle on neithout getting into useful informash speech makes removing a featuring a move or usage actual abstractionsidered interj. Indeed spectace logic or problem! A hackish idle pastime is to apply letter-based Dissociated Press to a random body of text and vgrep the output in hopes of finding an interesting new word. (In the preceding example, `window sysIWYG' and `informash' show some promise.) Iterated applications of Dissociated Press usually yield better results. Similar techniques called `travesty generators' have been employed with considerable satirical effect to the utterances of Usenet flamers; see pseudo. distribution n. 1. A software source tree packaged for distribution; but see kit. Since about 1996 unqualified use of this term often implies `Linux distribution'. The short for distro is often used for this sense. 2. A vague term encompassing mailing lists and Usenet newsgroups (but not BBS fora); any topic-oriented message channel with multiple recipients. 3. An information-space domain (usually loosely correlated with geography) to which propagation of a Usenet message is restricted; a much-underutilized feature. distro n. Synonym for distribution, sense 1. D = disusered adj. [Usenet] Said of a person whose account on a computer has been removed, esp. for cause rather than through normal attrition. "He got disusered when they found out he'd been cracking through the school's Internet access." The verbal form `disuser' is live but less common. Both usages probably derive from the DISUSER account status flag on VMS; setting it disables the account. Compare star out. do protocol vi. [from network protocol programming] To perform an interaction with somebody or something that follows a clearly defined procedure. For example, "Let's do protocol with the check" at a restaurant means to ask for the check, calculate the tip and everybody's share, collect money from everybody, generate change as necessary, and pay the bill. See protocol. doc /dok/ n. Common spoken and written shorthand for `documentation'. Often used in the plural `docs' and in the construction `doc file' (i.e., documentation available on-line). documentation n. The multiple kilograms of macerated, pounded, steamed, bleached, and pressed trees that accompany most modern software or hardware products (see also tree-killer). Hackers seldom read paper documentation and (too) often resist writing it; they prefer theirs to be terse and on-line. A common comment on this predilection is "You can't grep dead trees". See drool-proof paper, verbiage, treeware. dodgy adj. Syn. with flaky. Preferred outside the U.S. = dogcow /dog'kow/ n. See Moof. The dogcow is a semi-legendary creature that lurks in the depths of the Macintosh Technical Notes Hypercard stack V3.1. The full story of the dogcow is told in technical note #31 (the particular dogcow illustrated is properly named `Clarus'). Option-shift-click will cause it to emit a characteristic `Moof!' or `!fooM' sound. Getting to tech note 31 is the hard part; to discover how to do that, one must needs examine the stack script with a hackerly eye. Clue: rot13 is involved. A dogcow also appears if you choose `Page Setup...' with a LaserWriter selected and click on the `Options' button. It also lurks in other Mac printer drivers, notably those for the now-discontinued Style Writers. Sadly, Apple has removed the pages that used to describe the dogcow. = dogfood n. [Microsoft, Netscape] Interim software used internally for testing. "To eat one's own dogfood" (from which the slang noun derives) means to use the software one is developing, as part of one's everyday development environment (the phrase is used outside Microsoft and Netscape). The practice is normal in the Linux community and elsewhere, but the term `dogfood' is seldom used as open-source betas tend to be quite tasty and nourishing. The idea is that developers who are using their own software will quickly learn what's missing or broken. Dogfood is typically not even of beta quality. = dogpile v. [Usenet: prob. fr. mainstream "puppy pile"] When many people post unfriendly responses in short order to a single posting, they are sometimes said to "dogpile" or "dogpile on" the person to whom they're responding. For example, when a religious missionary posts a simplistic appeal to _alt.atheism_, he can expect to be dogpiled. It has been suggested that this derives from U.S, football slang for a tackle involving three or more people; among hackers, it seems at least as likely do derive from an `autobiographical' Bugs Bunny cartoon in which a gang of attacking canines actually yells "Dogpile on the rabbit!". = dogwash /dog'wosh/ [From a quip in the `urgency' field of a very optional software change request, ca. 1982. It was something like "Urgency: Wash your dog first".] 1. n. A project of minimal priority, undertaken as an escape from more serious work. 2. v. To engage in such a project. Many games and much freeware get written this way. domainist /doh-mayn'ist/ adj. 1. [Usenet, by pointed analogy with "sexist", "racist", etc.] Someone who judges people by the domain of their email addresses; esp. someone who dismisses anyone who posts from a public internet provider. "What do you expect from an article posted from _aol.com_?" 2. Said of an Internet address (as opposed to a bang path) because the part to the right of the @ specifies a nested series of `domains'; for example, esr@snark.thyrsus.com specifies the machine called _snark_ in the subdomain called _thyrsus_ within the top-level domain called _com_. See also big-endian, sense 2. The meaning of this term has drifted. At one time sense 2 was primary. In elder days it was also used of a site, mailer, or routing program which knew how to handle domainist addresses; or of a person (esp. a site admin) who preferred domain addressing, supported a domainist mailer, or proselytized for domainist addressing and disdained bang paths. These senses are now (1996) obsolete, as effectively all sites have converted. Don't do that then! imp. [from an old doctor's office joke about a patient with a trivial complaint] Stock response to a user complaint. "When I type control-S, the whole system comes to a halt for thirty seconds." "Don't do that, then!" (or "So don't do that!"). Compare RTFM. Here's a classic example of "Don't do that then!" from Neil Stephenson's "In The Beginning Was The Command Line". A friend of his built a network with a load of Macs and a few high-powered database servers. He found that from time to time the whole network would lock up for no apparent reason. The problem was eventually tracked down to MacOS's cooperative multitasking: when a user held down the mouse button for too long, the network stack wouldn't get a chance to run... dongle /dong'gl/ n. 1. [now obs.] A security or copy protection device for proprietary software consisting of a serialized EPROM and some drivers in a D-25 connector shell, which must be connected to an I/O port of the computer while the program is run. Programs that use a dongle query the port at startup and at programmed intervals thereafter, and terminate if it does not respond with the dongle's programmed validation code. Thus, users can make as many copies of the program as they want but must pay for each dongle. The idea was clever, but it was initially a failure, as users disliked tying up a serial port this way. By 1993, dongles would typically pass data through the port and monitor for magic codes (and combinations of status lines) with minimal if any interference with devices further down the line -- this innovation was necessary to allow daisy-chained dongles for multiple pieces of software. These devices have become rare as the industry has moved away from copy-protection schemes in general. 2. By extension, any physical electronic key or transferable ID required for a program to function. Common variations on this theme have used parallel or even joystick ports. See dongle-disk. 3. An adaptor cable mating a special edge-type connector on a PCMCIA or on-board Ethernet card to a standard RJ45 Ethernet jack. This usage seems to have surfaced in 1999 and is now dominant. Laptop owners curse these things because they're notoriously easy to lose and the vendors commonly charge extortionate prices for replacements. [Note: in early 1992, advertising copy from Rainbow Technologies (a manufacturer of dongles) included a claim that the word derived from "Don Gall", allegedly the inventor of the device. The company's receptionist will cheerfully tell you that the story is a myth invented for the ad copy. Nevertheless, I expect it to haunt my life as a lexicographer for at least the next ten years. :-( --ESR] = dongle-disk /don'gl disk/ n. A special floppy disk that is required in order to perform some task. Some contain special coding that allows an application to identify it uniquely, others are special code that does something that normally-resident programs don't or can't. (For example, AT&T's "Unix PC" would only come up in root mode with a special boot disk.) Also called a `key disk'. See dongle. donuts n. obs. A collective noun for any set of memory bits. This usage is extremely archaic and may no longer be live jargon; it dates from the days of ferrite-core memories in which each bit was implemented by a doughnut-shaped magnetic flip-flop. = doorstop n. Used to describe equipment that is non-functional and halfway expected to remain so, especially obsolete equipment kept around for political reasons or ostensibly as a backup. "When we get another Wyse-50 in here, that ADM 3 will turn into a doorstop." Compare boat anchor. D = DoS attack // [Usenet,common; note that it's unrelated to `DOS' as name of an operating system] Abbreviation for Denial-Of-Service attack. This abbreviation is most often used of attempts to shut down newsgroups with floods of spam, or to flood network links with large amounts of traffic, or to flood network links with large amounts of traffic, often by abusing network broadcast addresses Compare slashdot effect. dot file [Unix] n. A file that is not visible by default to normal directory-browsing tools (on Unix, files named with a leading dot are, by convention, not normally presented in directory listings). Many programs define one or more dot files in which startup or configuration information may be optionally recorded; a user can customize the program's behavior by creating the appropriate file in the current or home directory. (Therefore, dot files tend to creep -- with every nontrivial application program defining at least one, a user's home directory can be filled with scores of dot files, of course without the user's really being aware of it.) See also profile (sense 1), rc file. double bucky adj. Using both the CTRL and META keys. "The command to burn all LEDs is double bucky F." This term originated on the Stanford extended-ASCII keyboard, and was later taken up by users of the space-cadet keyboard at MIT. A typical MIT comment was that the Stanford bucky bits (control and meta shifting keys) were nice, but there weren't enough of them; you could type only 512 different characters on a Stanford keyboard. An obvious way to address this was simply to add more shifting keys, and this was eventually done; but a keyboard with that many shifting keys is hard on touch-typists, who don't like to move their hands away from the home position on the keyboard. It was half-seriously suggested that the extra shifting keys be implemented as pedals; typing on such a keyboard would be very much like playing a full pipe organ. This idea is mentioned in a parody of a very fine song by Jeffrey Moss called "Rubber Duckie", which was published in "The Sesame Street Songbook" (Simon and Schuster 1971, ISBN 0-671-21036-X). These lyrics were written on May 27, 1978, in celebration of the Stanford keyboard: Double Bucky Double bucky, you're the one! You make my keyboard lots of fun. Double bucky, an additional bit or two: (Vo-vo-de-o!) Control and meta, side by side, Augmented ASCII, nine bits wide! Double bucky! Half a thousand glyphs, plus a few! Oh, I sure wish that I Had a couple of Bits more! Perhaps a Set of pedals to Make the number of Bits four: Double double bucky! Double bucky, left and right OR'd together, outta sight! Double bucky, I'd like a whole word of Double bucky, I'm happy I heard of Double bucky, I'd like a whole word of you! --- The Great Quux (with apologies to Jeffrey Moss) [This, by the way, is an excellent example of computer filk --ESR] See also meta bit, cokebottle, and quadruple bucky. doubled sig [Usenet] n. A sig block that has been included twice in a Usenet article or, less commonly, in an electronic mail message. An article or message with a doubled sig can be caused by improperly configured software. More often, however, it reveals the author's lack of experience in electronic communication. See B1FF, pseudo. down 1. adj. Not operating. "The up escalator is down" is considered a humorous thing to say (unless of course you were expecting to use it), and "The elevator is down" always means "The elevator isn't working" and never refers to what floor the elevator is on. With respect to computers, this term has passed into the mainstream; the extension to other kinds of machine is still confined to techies (e.g. boiler mechanics may speak of a boiler being down). 2. `go down' vi. To stop functioning; usually said of the system. The message from the console that every hacker hates to hear from the operator is "System going down in 5 minutes". 3. `take down', `bring down' vt. To deactivate purposely, usually for repair work or PM. "I'm taking the system down to work on that bug in the tape drive." Occasionally one hears the word `down' by itself used as a verb in this vt. sense. See crash; oppose up. download vt. To transfer data or (esp.) code from a far-away system (especially a larger `host' system) over a digital communications link to a nearby system (especially a smaller `client' system. Oppose upload. Historical use of these terms was at one time associated with transfers from large timesharing machines to PCs or peripherals (download) and vice-versa (upload). The modern usage relative to the speaker (rather than as an indicator of the size and role of the machines) evolved as machine categories lost most of their former functional importance. DP /D-P/ n. 1. Data Processing. Listed here because, according to hackers, use of the term marks one immediately as a suit. See DPer. 2. Common abbrev for Dissociated Press. DPB /d*-pib'/ vt. [from the PDP-10 instruction set] To plop something down in the middle. Usage: silly. "DPB yourself into that couch there." The connotation would be that the couch is full except for one slot just big enough for one last person to sit in. DPB means `DePosit Byte', and was the name of a PDP-10 instruction that inserts some bits into the middle of some other bits. Hackish usage has been kept alive by the Common LISP function of the same name. DPer /dee-pee-er/ n. Data Processor. Hackers are absolutely amazed that suits use this term self-referentially. Computers process data, not people! See DP. = Dr. Fred Mbogo /*m-boh'goh, dok'tr fred/ n. [Stanford] The archetypal man you don't want to see about a problem, esp. an incompetent professional; a shyster. "Do you know a good eye doctor?" "Sure, try Mbogo Eye Care and Professional Dry Cleaning." The name comes from synergy between bogus and the original Dr. Mbogo, a witch doctor who was Gomez Addams' physician on the old "Addams Family" TV show. Interestingly enough, it turns out that under the rules for Swahili noun classes, `m-' is the characteristic prefix of "nouns referring to human beings". As such, "mbogo" is quite plausible as a Swahili coinage for a person having the nature of a bogon. Compare Bloggs Family and J. Random Hacker; see also Fred Foobar and fred. dragon n. [MIT] A program similar to a daemon, except that it is not invoked at all, but is instead used by the system to perform various secondary tasks. A typical example would be an accounting program, which keeps track of who is logged in, accumulates load-average statistics, etc. Under ITS, many terminals displayed a list of people logged in, where they were, what they were running, etc., along with some random picture (such as a unicorn, Snoopy, or the Enterprise), which was generated by the `name dragon'. Usage: rare outside MIT -- under Unix and most other OSes this would be called a `background demon' or daemon. The best-known Unix example of a dragon is cron(1). At SAIL, they called this sort of thing a `phantom'. = Dragon Book n. The classic text "Compilers: Principles, Techniques and Tools", by Alfred V. Aho, Ravi Sethi, and Jeffrey D. Ullman (Addison-Wesley 1986; ISBN 0-201-10088-6), so called because of the cover design featuring a dragon labeled `complexity of compiler design' and a knight bearing the lance `LALR parser generator' among his other trappings. This one is more specifically known as the `Red Dragon Book' (1986); an earlier edition, sans Sethi and titled "Principles Of Compiler Design" (Alfred V. Aho and Jeffrey D. Ullman; Addison-Wesley, 1977; ISBN 0-201-00022-9), was the `Green Dragon Book' (1977). (Also `New Dragon Book', `Old Dragon Book'.) The horsed knight and the Green Dragon were warily eying each other at a distance; now the knight is typing (wearing gauntlets!) at a terminal showing a video-game representation of the Red Dragon's head while the rest of the beast extends back in normal space. See also book titles. drain v. [IBM] Syn. for flush (sense 2). Has a connotation of finality about it; one speaks of draining a device before taking it offline. dread high-bit disease n. A condition endemic to some now-obsolete computers and peripherals (including ASR-33 teletypes and PRIME minicomputers) that results in all characters having their high (0x80) bit forced on. This of course makes transporting files to other systems much more difficult, not to mention the problems these machines have talking with true 8-bit devices. This term was originally used specifically of PRIME (a.k.a. PR1ME) minicomputers. Folklore has it that PRIME adopted the reversed-8-bit convention in order to save 25 cents per serial line per machine; PRIME old-timers, on the other hand, claim they inherited the disease from Honeywell via customer NASA's compatibility requirements and struggled heroically to cure it. Whoever was responsible, this probably qualifies as one of the most cretinous design tradeoffs ever made. See meta bit. Dread Questionmark Disease n. The result of saving HTML from Microsoft Word or some other program that uses the nonstandard Microsoft variant of Latin-1; the symptom is that various of those nonstandard characters in positions 128-160 show up as questionmarks. The usual culprit is the misnamed `smart quotes' feature in Microsoft Word. For more details (and a program called `demoroniser' that cleans up the mess) see http://www.fourmilab.ch/webtools/demoroniser/. DRECNET /drek'net/ n. [from Yiddish/German `dreck', meaning filth] Deliberate distortion of DECNET, a networking protocol used in the VMS community. So called because DEC helped write the Ethernet specification and then (either stupidly or as a malignant customer-control tactic) violated that spec in the design of DRECNET in a way that made it incompatible. See also connector conspiracy. = driver n. 1. The main loop of an event-processing program; the code that gets commands and dispatches them for execution. 2. [techspeak] In `device driver', code designed to handle a particular peripheral device such as a magnetic disk or tape unit. 3. In the TeX world and the computerized typesetting world in general, a program that translates some device-independent or other common format to something a real device can actually understand. = droid n. [from `android', SF terminology for a humanoid robot of essentially biological (as opposed to mechanical/electronic) construction] A person (esp. a low-level bureaucrat or service-business employee) exhibiting most of the following characteristics: (a) naive trust in the wisdom of the parent organization or `the system'; (b) a blind-faith propensity to believe obvious nonsense emitted by authority figures (or computers!); (c) a rule-governed mentality, one unwilling or unable to look beyond the `letter of the law' in exceptional situations; (d) a paralyzing fear of official reprimand or worse if Procedures are not followed No Matter What; and (e) no interest in doing anything above or beyond the call of a very narrowly-interpreted duty, or in particular in fixing that which is broken; an "It's not my job, man" attitude. Typical droid positions include supermarket checkout assistant and bank clerk; the syndrome is also endemic in low-level government employees. The implication is that the rules and official procedures constitute software that the droid is executing; problems arise when the software has not been properly debugged. The term `droid mentality' is also used to describe the mindset behind this behavior. Compare suit, marketroid; see -oid. In England there is equivalent mainstream slang; a `jobsworth' is an obstructive, rule-following bureaucrat, often of the uniformed or suited variety. Named for the habit of denying a reasonable request by sucking his teeth and saying "Oh no, guv, sorry I can't help you: that's more than my job's worth". drone n. Ignorant sales or customer service personnel in computer or electronics superstores. Characterized by a lack of even superficial knowledge about the products they sell, yet possessed of the conviction that they are more competent than their hacker customers. Usage: "That video board probably sucks, it was recommended by a drone at Fry's" In the year 2000, their natural habitats include Fry's Electronics, Best Buy, and CompUSA. drool-proof paper n. Documentation that has been obsessively dumbed down, to the point where only a cretin could bear to read it, is said to have succumbed to the `drool-proof paper syndrome' or to have been `written on drool-proof paper'. For example, this is an actual quote from Apple's LaserWriter manual: "Do not expose your LaserWriter to open fire or flame." The SGI Indy manual is said to include the line "Do not dangle the mouse by the cord or throw it at coworkers.", but this sounds like parody. drop on the floor vt. To react to an error condition by silently discarding messages or other valuable data. "The gateway ran out of memory, so it just started dropping packets on the floor." Also frequently used of faulty mail and netnews relay sites that lose messages. See also black hole, bit bucket. drop-ins n. [prob. by analogy with drop-outs] Spurious characters appearing on a terminal or console as a result of line noise or a system malfunction of some sort. Esp. used when these are interspersed with one's own typed input. Compare drop-outs, sense 2. D = drop-outs n. 1. A variety of `power glitch' (see glitch); momentary 0 voltage on the electrical mains. 2. Missing characters in typed input due to software malfunction or system saturation (one cause of such behavior under Unix when a bad connection to a modem swamps the processor with spurious character interrupts; see screaming tty). 3. Mental glitches; used as a way of describing those occasions when the mind just seems to shut down for a couple of beats. See glitch, fried. drugged adj. (also `on drugs') 1. Conspicuously stupid, heading toward brain-damaged. Often accompanied by a pantomime of toking a joint. 2. Of hardware, very slow relative to normal performance. drum adj, n. Ancient techspeak term referring to slow, cylindrical magnetic media that were once state-of-the-art storage devices. Under BSD Unix the disk partition used for swapping is still called /dev/drum; this has led to considerable humor and not a few straight-faced but utterly bogus `explanations' getting foisted on newbies. See also "The Story of Mel" in Appendix A. drunk mouse syndrome n. (also `mouse on drugs') A malady exhibited by the mouse pointing device of some computers. The typical symptom is for the mouse cursor on the screen to move in random directions and not in sync with the motion of the actual mouse. Can usually be corrected by unplugging the mouse and plugging it back again. Another recommended fix for optical mice is to rotate your mouse pad 90 degrees. At Xerox PARC in the 1970s, most people kept a can of copier cleaner (isopropyl alcohol) at their desks. When the steel ball on the mouse had picked up enough cruft to be unreliable, the mouse was doused in cleaner, which restored it for a while. However, this operation left a fine residue that accelerated the accumulation of cruft, so the dousings became more and more frequent. Finally, the mouse was declared `alcoholic' and sent to the clinic to be dried out in a CFC ultrasonic bath. dub dub dub [common] Spoken-only shorthand for the "www" (double-u double-u double-u) in many web host names. Nothing to do with the style of reggae music called `dub'. Duff's device n. The most dramatic use yet seen of fall through in C, invented by Tom Duff when he was at Lucasfilm. Trying to bum all the instructions he could out of an inner loop that copied data serially onto an output port, he decided to unroll it. He then realized that the unrolled version could be implemented by interlacing the structures of a switch and a loop: register n = (count + 7) / 8; /* count > 0 assumed */ switch (count % 8) { case 0: do { *to = *from++; case 7: *to = *from++; case 6: *to = *from++; case 5: *to = *from++; case 4: *to = *from++; case 3: *to = *from++; case 2: *to = *from++; case 1: *to = *from++; } while (--n > 0); } Shocking though it appears to all who encounter it for the first time, the device is actually perfectly valid, legal C. C's default fall through in case statements has long been its most controversial single feature; Duff observed that "This code forms some sort of argument in that debate, but I'm not sure whether it's for or against." Duff has discussed the device in detail at http://www.lysator.liu.se/c/duffs-device.html. Note that the omission of postfix ++ from *to was intentional (though confusing). Duff's device can be used to implement memory copy, but the original aim was to copy values serially into a magic IO register. [For maximal obscurity, the outermost pair of braces above could actually be removed -- GLS] dumb terminal n. A terminal that is one step above a glass tty, having a minimally addressable cursor but no on-screen editing or other features normally supported by a smart terminal. Once upon a time, when glass ttys were common and addressable cursors were something special, what is now called a dumb terminal could pass for a smart terminal. dumbass attack /duhm'as *-tak'/ n. [Purdue] Notional cause of a novice's mistake made by the experienced, especially one made while running as root under Unix, e.g., typing rm -r * or mkfs on a mounted file system. Compare adger. dumbed down adj. Simplified, with a strong connotation of oversimplified. Often, a marketroid will insist that the interfaces and documentation of software be dumbed down after the designer has burned untold gallons of midnight oil making it smart. This creates friction. See user-friendly. dump n. 1. An undigested and voluminous mass of information about a problem or the state of a system, especially one routed to the slowest available output device (compare core dump), and most especially one consisting of hex or octal runes describing the byte-by-byte state of memory, mass storage, or some file. In elder days, debugging was generally done by `groveling over' a dump (see grovel); increasing use of high-level languages and interactive debuggers has made such tedium uncommon, and the term `dump' now has a faintly archaic flavor. 2. A backup. This usage is typical only at large timesharing installations. dumpster diving /dump'-ster di:'-ving/ n. 1. The practice of sifting refuse from an office or technical installation to extract confidential data, especially security-compromising information (`dumpster' is an Americanism for what is elsewhere called a `skip'). Back in AT&T's monopoly days, before paper shredders became common office equipment, phone phreaks (see phreaking) used to organize regular dumpster runs against phone company plants and offices. Discarded and damaged copies of AT&T internal manuals taught them much. The technique is still rumored to be a favorite of crackers operating against careless targets. 2. The practice of raiding the dumpsters behind buildings where producers and/or consumers of high-tech equipment are located, with the expectation (usually justified) of finding discarded but still-valuable equipment to be nursed back to health in some hacker's den. Experienced dumpster-divers not infrequently accumulate basements full of moldering (but still potentially useful) cruft. dup killer /d[y]oop kill'r/ n. [FidoNet] Software that is supposed to detect and delete duplicates of a message that may have reached the FidoNet system via different routes. dup loop /d[y]oop loop/ (also `dupe loop') n. [FidoNet] An infinite stream of duplicated, near-identical messages on a FidoNet echo, the only difference being unique or mangled identification information applied by a faulty or incorrectly configured system or network gateway, thus rendering dup killers ineffective. If such a duplicate message eventually reaches a system through which it has already passed (with the original identification information), all systems passed on the way back to that system are said to be involved in a dup loop. dusty deck n. Old software (especially applications) which one is obliged to remain compatible with, or to maintain (DP types call this `legacy code', a term hackers consider smarmy and excessively reverent). The term implies that the software in question is a holdover from card-punch days. Used esp. when referring to old scientific and number-crunching software, much of which was written in FORTRAN and very poorly documented but is believed to be too expensive to replace. See fossil; compare crawling horror. DWIM /dwim/ [acronym, `Do What I Mean'] 1. adj. Able to guess, sometimes even correctly, the result intended when bogus input was provided. 2. n. obs. The BBNLISP/INTERLISP function that attempted to accomplish this feat by correcting many of the more common errors. See hairy. 3. Occasionally, an interjection hurled at a balky computer, esp. when one senses one might be tripping over legalisms (see legalese). 4. Of a person, someone whose directions are incomprehensible and vague, but who nevertheless has the expectation that you will solve the problem using the specific method he/she has in mind. Warren Teitelman originally wrote DWIM to fix his typos and spelling errors, so it was somewhat idiosyncratic to his style, and would often make hash of anyone else's typos if they were stylistically different. Some victims of DWIM thus claimed that the acronym stood for `Damn Warren's Infernal Machine!'. In one notorious incident, Warren added a DWIM feature to the command interpreter used at Xerox PARC. One day another hacker there typed delete *$ to free up some disk space. (The editor there named backup files by appending $ to the original file name, so he was trying to delete any backup files left over from old editing sessions.) It happened that there weren't any editor backup files, so DWIM helpfully reported *$ not found, assuming you meant 'delete *'. It then started to delete all the files on the disk! The hacker managed to stop it with a Vulcan nerve pinch after only a half dozen or so files were lost. The disgruntled victim later said he had been sorely tempted to go to Warren's office, tie Warren down in his chair in front of his workstation, and then type delete *$ twice. DWIM is often suggested in jest as a desired feature for a complex program; it is also occasionally described as the single instruction the ideal computer would have. Back when proofs of program correctness were in vogue, there were also jokes about `DWIMC' (Do What I Mean, Correctly). A related term, more often seen as a verb, is DTRT (Do The Right Thing); see Right Thing. dynner /din'r/ n. 32 bits, by analogy with nybble and byte. Usage: rare and extremely silly. See also playte, tayste, crumb. General discussion of such terms is under nybble. = E = earthquake: Easter egg: Easter egging: eat flaming death: EBCDIC: echo: ECP: ed: egosurf: eighty-column mind: El Camino Bignum: elder days: elegant: elephantine: elevator controller: elite: ELIZA effect: elvish: EMACS: email: emoticon: EMP: empire: engine: English: enhancement: ENQ: EOF: EOL: EOU: epoch: epsilon: epsilon squared: era the: Eric Conspiracy: Eris: erotics: error 33: eurodemo: evil: evil and rude: Evil Empire: exa-: examining the entrails: EXCH: excl: EXE: exec: exercise left as an: Exon: Exploder: exploit: external memory: eye candy: eyeball search: E = earthquake n. [IBM] The ultimate real-world shock test for computer hardware. Hackish sources at IBM deny the rumor that the Bay Area quake of 1989 was initiated by the company to test quality-assurance procedures at its California plants. Easter egg n. [from the custom of the Easter Egg hunt observed in the U.S. and many parts of Europe] 1. A message hidden in the object code of a program as a joke, intended to be found by persons disassembling or browsing the code. 2. A message, graphic, or sound effect emitted by a program (or, on a PC, the BIOS ROM) in response to some undocumented set of commands or keystrokes, intended as a joke or to display program credits. One well-known early Easter egg found in a couple of OSes caused them to respond to the command make love with not war?. Many personal computers have much more elaborate eggs hidden in ROM, including lists of the developers' names, political exhortations, snatches of music, and (in one case) graphics images of the entire development team. Easter egging n. [IBM] The act of replacing unrelated components more or less at random in hopes that a malfunction will go away. Hackers consider this the normal operating mode of field circus techs and do not love them for it. See also the jokes under field circus. Compare shotgun debugging. eat flaming death imp. A construction popularized among hackers by the infamous CPU Wars comic; supposedly derive from a famously turgid line in a WWII-era anti-Nazi propaganda comic that ran "Eat flaming death, non-Aryan mongrels!" or something of the sort (however, it is also reported that the Firesign Theatre's 1975 album "In The Next World, You're On Your Own" a character won the right to scream "Eat flaming death, fascist media pigs" in the middle of Oscar night on a game show; this may have been an influence). Used in humorously overblown expressions of hostility. "Eat flaming death, EBCDIC users!" EBCDIC /eb's*-dik/, /eb'see`dik/, or /eb'k*-dik/ n. [abbreviation, Extended Binary Coded Decimal Interchange Code] An alleged character set used on IBM dinosaurs. It exists in at least six mutually incompatible versions, all featuring such delights as non-contiguous letter sequences and the absence of several ASCII punctuation characters fairly important for modern computer languages (exactly which characters are absent varies according to which version of EBCDIC you're looking at). IBM adapted EBCDIC from punched card code in the early 1960s and promulgated it as a customer-control tactic (see connector conspiracy), spurning the already established ASCII standard. Today, IBM claims to be an open-systems company, but IBM's own description of the EBCDIC variants and how to convert between them is still internally classified top-secret, burn-before-reading. Hackers blanch at the very name of EBCDIC and consider it a manifestation of purest evil. See also fear and loathing. = echo [FidoNet] n. A topic group on FidoNet's echomail system. Compare newsgroup. ECP /E-C-P/ n. See spam and velveeta. ed n. "ed is the standard text editor." Line taken from original the Unix manual page on ed, an ancient line-oriented editor that is by now used only by a few Real Programmers, and even then only for batch operations. The original line is sometimes uttered near the beginning of an emacs vs. vi holy war on Usenet, with the (vain) hope to quench the discussion before it really takes off. Often followed by a standard text describing the many virtues of ed (such as the small memory footprint on a Timex Sinclair, and the consistent (because nearly non-existent) user interface). egosurf vi. To search the net for your name or links to your web pages. Perhaps connected to long-established SF-fan slang `egoscan', to search for one's name in a fanzine. = eighty-column mind n. [IBM] The sort said to be possessed by persons for whom the transition from punched card to tape was traumatic (nobody has dared tell them about disks yet). It is said that these people, including (according to an old joke) the founder of IBM, will be buried `face down, 9-edge first' (the 9-edge being the bottom of the card). This directive is inscribed on IBM's 1402 and 1622 card readers and is referenced in a famous bit of doggerel called "The Last Bug", the climactic lines of which are as follows: He died at the console Of hunger and thirst. Next day he was buried, Face down, 9-edge first. The eighty-column mind was thought by most hackers to dominate IBM's customer base and its thinking. This only began to change in the mid-1990s when IBM began to reinvent itself after the triumph of the killer micro. See IBM, fear and loathing, card walloper. A copy of "The Last Bug" lives on the the GNU site at http://www.gnu.org/fun/jokes/last.bug.html. El Camino Bignum /el' k*-mee'noh big'nuhm/ n. The road mundanely called El Camino Real, running along San Francisco peninsula. It originally extended all the way down to Mexico City; many portions of the old road are still intact. Navigation on the San Francisco peninsula is usually done relative to El Camino Real, which defines logical north and south even though it isn't really north-south in many places. El Camino Real runs right past Stanford University and so is familiar to hackers. The Spanish word `real' (which has two syllables: /ray-ahl'/) means `royal'; El Camino Real is `the royal road'. In the FORTRAN language, a `real' quantity is a number typically precise to seven significant digits, and a `double precision' quantity is a larger floating-point number, precise to perhaps fourteen significant digits (other languages have similar `real' types). When a hacker from MIT visited Stanford in 1976, he remarked what a long road El Camino Real was. Making a pun on `real', he started calling it `El Camino Double Precision' -- but when the hacker was told that the road was hundreds of miles long, he renamed it `El Camino Bignum', and that name has stuck. (See bignum.) [GLS has since let slip that the unnamed hacker in this story was in fact himself --ESR] In recent years, the synonym `El Camino Virtual' has been reported as an alternate at IBM and Amdahl sites in the Valley. Mathematically literate hackers in the Valley have also been heard to refer to some major cross-street intersecting El Camino Real as "El Camino Imaginary". One popular theory is that the intersection is located near Moffett Field - where they keep all those complex planes. elder days n. The heroic age of hackerdom (roughly, pre-1980); the era of the PDP-10, TECO, ITS, and the ARPANET. This term has been rather consciously adopted from J. R. R. Tolkien's fantasy epic "The Lord of the Rings". Compare Iron Age; see also elvish and Great Worm. elegant adj. [common; from mathematical usage] Combining simplicity, power, and a certain ineffable grace of design. Higher praise than `clever', `winning', or even cuspy. The French aviator, adventurer, and author Antoine de Saint-Exupéry, probably best known for his classic children's book "The Little Prince", was also an aircraft designer. He gave us perhaps the best definition of engineering elegance when he said "A designer knows he has achieved perfection not when there is nothing left to add, but when there is nothing left to take away." elephantine adj. Used of programs or systems that are both conspicuous hogs (owing perhaps to poor design founded on brute force and ignorance) and exceedingly hairy in source form. An elephantine program may be functional and even friendly, but (as in the old joke about being in bed with an elephant) it's tough to have around all the same (and, like a pachyderm, difficult to maintain). In extreme cases, hackers have been known to make trumpeting sounds or perform expressive proboscatory mime at the mention of the offending program. Usage: semi-humorous. Compare `has the elephant nature' and the somewhat more pejorative monstrosity. See also second-system effect and baroque. elevator controller n. An archetypal dumb embedded-systems application, like toaster (which superseded it). During one period (1983-84) in the deliberations of ANSI X3J11 (the C standardization committee) this was the canonical example of a really stupid, memory-limited computation environment. "You can't require printf(3) to be part of the default runtime library -- what if you're targeting an elevator controller?" Elevator controllers became important rhetorical weapons on both sides of several holy wars. elite adj. Clueful. Plugged-in. One of the cognoscenti. Also used as a general positive adjective. This term is not actually native hacker slang; it is used primarily by crackers and warez d00dz, for which reason hackers use it only with heavy irony. The term used to refer to the folks allowed in to the "hidden" or "privileged" sections of BBSes in the early 1980s (which, typically, contained pirated software). Frequently, early boards would only let you post, or even see, a certain subset of the sections (or `boards') on a BBS. Those who got to the frequently legendary `triple super secret' boards were elite. Misspellings of this term in warez d00dz style abound; the forms `eleet', and `31337' (among others) have been sighted. A true hacker would be more likely to use `wizardly'. Oppose lamer. = ELIZA effect /*-li:'z* *-fekt'/ n. [AI community] The tendency of humans to attach associations to terms from prior experience. For example, there is nothing magic about the symbol + that makes it well-suited to indicate addition; it's just that people associate it with addition. Using + or `plus' to mean addition in a computer language is taking advantage of the ELIZA effect. This term comes from the famous ELIZA program by Joseph Weizenbaum, which simulated a Rogerian psychotherapist by rephrasing many of the patient's statements as questions and posing them to the patient. It worked by simple pattern recognition and substitution of key words into canned phrases. It was so convincing, however, that there are many anecdotes about people becoming very emotionally caught up in dealing with ELIZA. All this was due to people's tendency to attach to words meanings which the computer never put there. The ELIZA effect is a Good Thing when writing a programming language, but it can blind you to serious shortcomings when analyzing an Artificial Intelligence system. Compare ad-hockery; see also AI-complete. Sources for a clone of the original Eliza are available at ftp://ftp.cc.utexas.edu/pub/AI_ATTIC/Programs/Classic/Eliza/Eliza.c. elvish n. 1. The Tengwar of Feanor, a table of letterforms resembling the beautiful Celtic half-uncial hand of the "Book of Kells". Invented and described by J. R. R. Tolkien in "The Lord of The Rings" as an orthography for his fictional `elvish' languages, this system (which is both visually and phonetically elegant) has long fascinated hackers (who tend to be intrigued by artificial languages in general). It is traditional for graphics printers, plotters, window systems, and the like to support a Feanorian typeface as one of their demo items. See also elder days. 2. By extension, any odd or unreadable typeface produced by a graphics device. 3. The typeface mundanely called `Böcklin', an art-Noveau display font. = EMACS /ee'maks/ n. [from Editing MACroS] The ne plus ultra of hacker editors, a programmable text editor with an entire LISP system inside it. It was originally written by Richard Stallman in TECO under ITS at the MIT AI lab; AI Memo 554 described it as "an advanced, self-documenting, customizable, extensible real-time display editor". It has since been reimplemented any number of times, by various hackers, and versions exist that run under most major operating systems. Perhaps the most widely used version, also written by Stallman and now called "GNU EMACS" or GNUMACS, runs principally under Unix. (Its close relative XEmacs is the second most popular version.) It includes facilities to run compilation subprocesses and send and receive mail or news; many hackers spend up to 80% of their tube time inside it. Other variants include GOSMACS, CCA EMACS, UniPress EMACS, Montgomery EMACS, jove, epsilon, and MicroEMACS. (Though we use the original all-caps spelling here, it is nowadays very commonly `Emacs'.) Some EMACS versions running under window managers iconify as an overflowing kitchen sink, perhaps to suggest the one feature the editor does not (yet) include. Indeed, some hackers find EMACS too heavyweight and baroque for their taste, and expand the name as `Escape Meta Alt Control Shift' to spoof its heavy reliance on keystrokes decorated with bucky bits. Other spoof expansions include `Eight Megabytes And Constantly Swapping' (from when that was a lot of core), `Eventually malloc()s All Computer Storage', and `EMACS Makes A Computer Slow' (see recursive acronym). See also vi. = email /ee'mayl/ (also written `e-mail' and `E-mail') 1. n. Electronic mail automatically passed through computer networks and/or via modems over common-carrier lines. Contrast snail-mail, paper-net, voice-net. See network address. 2. vt. To send electronic mail. Oddly enough, the word `emailed' is actually listed in the OED; it means "embossed (with a raised pattern) or perh. arranged in a net or open work". A use from 1480 is given. The word is probably derived from French `émaillé' (enameled) and related to Old French `emmailleüre' (network). A French correspondent tells us that in modern French, `email' is a hard enamel obtained by heating special paints in a furnace; an `emailleur' (no final e) is a craftsman who makes email (he generally paints some objects (like, say, jewelry) and cooks them in a furnace). There are numerous spelling variants of this word. In Internet traffic up to 1995, `email' predominates, `e-mail' runs a not-too-distant second, and `E-mail' and `Email' are a distant third and fourth. = emoticon /ee-moh'ti-kon/ n. [common] An ASCII glyph used to indicate an emotional state in email or news. Although originally intended mostly as jokes, emoticons (or some other explicit humor indication) are virtually required under certain circumstances in high-volume text-only communication forums such as Usenet; the lack of verbal and visual cues can otherwise cause what were intended to be humorous, sarcastic, ironic, or otherwise non-100%-serious comments to be badly misinterpreted (not always even by newbies), resulting in arguments and flame wars. Hundreds of emoticons have been proposed, but only a few are in common use. These include: :-) `smiley face' (for humor, laughter, friendliness, occasionally sarcasm) :-( `frowney face' (for sadness, anger, or upset) ;-) `half-smiley' (ha ha only serious); also known as `semi-smiley' or `winkey face'. :-/ `wry face' (These may become more comprehensible if you tilt your head sideways, to the left.) The first two listed are by far the most frequently encountered. Hyphenless forms of them are common on CompuServe, GEnie, and BIX; see also bixie. On Usenet, `smiley' is often used as a generic term synonymous with emoticon, as well as specifically for the happy-face emoticon. It appears that the emoticon was invented by one Scott Fahlman on the CMU bboard systems sometime between early 1981 and mid-1982. He later wrote: "I wish I had saved the original post, or at least recorded the date for posterity, but I had no idea that I was starting something that would soon pollute all the world's communication channels." [GLS confirms that he remembers this original posting]. Note for the newbie: Overuse of the smiley is a mark of loserhood! More than one per paragraph is a fairly sure sign that you've gone over the line. E = EMP /E-M-P/ See spam. empire n. Any of a family of military simulations derived from a game written by Peter Langston many years ago. A number of multi-player variants of varying degrees of sophistication exist, and one single-player version implemented for both Unix and VMS; the latter is even available as MS-DOS freeware. All are notoriously addictive. Of various commercial derivatives the best known is probably "Empire Deluxe" on PCs and Amigas. Modern empire is a real-time wargame played over the internet by up to 120 players. Typical games last from 24 hours (blitz) to a couple of months (long term). The amount of sleep you can get while playing is a function of the rate at which updates occur and the number of co-rulers of your country. Empire server software is available for unix-like machines, and clients for Unix and other platforms. A comprehensive history of the game is available at http://www.empire.cx/infopages/History.html. The Empire resource site is at http://www.empire.cx/. = engine n. 1. A piece of hardware that encapsulates some function but can't be used without some kind of front end. Today we have, especially, `print engine': the guts of a laser printer. 2. An analogous piece of software; notionally, one that does a lot of noisy crunching, such as a `database engine'. The hacker senses of `engine' are actually close to its original, pre-Industrial-Revolution sense of a skill, clever device, or instrument (the word is cognate to `ingenuity'). This sense had not been completely eclipsed by the modern connotation of power-transducing machinery in Charles Babbage's time, which explains why he named the stored-program computer that he designed in 1844 the `Analytical Engine'. = English 1. n. obs. The source code for a program, which may be in any language, as opposed to the linkable or executable binary produced from it by a compiler. The idea behind the term is that to a real hacker, a program written in his favorite programming language is at least as readable as English. Usage: mostly by old-time hackers, though recognizable in context. Today the prefereed shorthand is sinply source. 2. The official name of the database language used by the old Pick Operating System, actually a sort of crufty, brain-damaged SQL with delusions of grandeur. The name permitted marketroids to say "Yes, and you can program our computers in English!" to ignorant suits without quite running afoul of the truth-in-advertising laws. = enhancement n. Common marketroid-speak for a bug fix. This abuse of language is a popular and time-tested way to turn incompetence into increased revenue. A hacker being ironic would instead call the fix a feature -- or perhaps save some effort by declaring the bug itself to be a feature. ENQ /enkw/ or /enk/ [from the ASCII mnemonic ENQuire for 0000101] An on-line convention for querying someone's availability. After opening a talk mode connection to someone apparently in heavy hack mode, one might type SYN SYN ENQ? (the SYNs representing notional synchronization bytes), and expect a return of ACK or NAK depending on whether or not the person felt interruptible. Compare ping, finger, and the usage of FOO? listed under talk mode. EOF /E-O-F/ n. [abbreviation, `End Of File'] 1. [techspeak] The out-of-band value returned by C's sequential character-input functions (and their equivalents in other environments) when end of file has been reached. This value is usually -1 under C libraries postdating V6 Unix, but was originally 0. DOS hackers think EOF is ^Z, and a few Amiga hackers think it's ^\. 2. [Unix] The keyboard character (usually control-D, the ASCII EOT (End Of Transmission) character) that is mapped by the terminal driver into an end-of-file condition. 3. Used by extension in non-computer contexts when a human is doing something that can be modeled as a sequential read and can't go further. "Yeah, I looked for a list of 360 mnemonics to post as a joke, but I hit EOF pretty fast; all the library had was a JCL manual." See also EOL. EOL /E-O-L/ n. [End Of Line] Syn. for newline, derived perhaps from the original CDC6600 Pascal. Now rare, but widely recognized and occasionally used for brevity. Used in the example entry under BNF. See also EOF. EOU /E-O-U/ n. The mnemonic of a mythical ASCII control character (End Of User) that would make an ASR-33 Teletype explode on receipt. This construction parodies the numerous obscure delimiter and control characters left in ASCII from the days when it was associated more with wire-service teletypes than computers (e.g., FS, GS, RS, US, EM, SUB, ETX, and esp. EOT). It is worth remembering that ASR-33s were big, noisy mechanical beasts with a lot of clattering parts; the notion that one might explode was nowhere near as ridiculous as it might seem to someone sitting in front of a tube or flatscreen today. epoch n. [Unix: prob. from astronomical timekeeping] The time and date corresponding to 0 in an operating system's clock and timestamp values. Under most Unix versions the epoch is 00:00:00 GMT, January 1, 1970; under VMS, it's 00:00:00 of November 17, 1858 (base date of the U.S. Naval Observatory's ephemerides); on a Macintosh, it's the midnight beginning January 1 1904. System time is measured in seconds or ticks past the epoch. Weird problems may ensue when the clock wraps around (see wrap around), which is not necessarily a rare event; on systems counting 10 ticks per second, a signed 32-bit count of ticks is good only for 6.8 years. The 1-tick-per-second clock of Unix is good only until January 18, 2038, assuming at least some software continues to consider it signed and that word lengths don't increase by then. See also wall time. Microsoft Windows, on the other hand, has an epoch problem every 49.7 days - but this is seldom noticed as Windows is almost incapable of staying up continuously for that long. epsilon [see delta] 1. n. A small quantity of anything. "The cost is epsilon." 2. adj. Very small, negligible; less than marginal. "We can get this feature for epsilon cost." 3. `within epsilon of': close enough to be indistinguishable for all practical purposes, even closer than being `within delta of'. "That's not what I asked for, but it's within epsilon of what I wanted." Alternatively, it may mean not close enough, but very little is required to get it there: "My program is within epsilon of working." epsilon squared n. A quantity even smaller than epsilon, as small in comparison to epsilon as epsilon is to something normal; completely negligible. If you buy a supercomputer for a million dollars, the cost of the thousand-dollar terminal to go with it is epsilon, and the cost of the ten-dollar cable to connect them is epsilon squared. Compare lost in the underflow, lost in the noise. era n. Syn. epoch. Webster's Unabridged makes these words almost synonymous, but `era' more often connotes a span of time rather than a point in time, whereas the reverse is true for epoch. The epoch usage is recommended. Eric Conspiracy n. A shadowy group of mustachioed hackers named Eric first pinpointed as a sinister conspiracy by an infamous _talk.bizarre_ posting ca. 1987; this was doubtless influenced by the numerous `Eric' jokes in the Monty Python oeuvre. There do indeed seem to be considerably more mustachioed Erics in hackerdom than the frequency of these three traits can account for unless they are correlated in some arcane way. Well-known examples include Eric Allman (he of the `Allman style' described under indent style) and Erik Fair (co-author of NNTP); your editor has heard from more than sixty others by email, and the organization line `Eric Conspiracy Secret Laboratories' now emanates regularly from more than one site. See the Eric Conspiracy Web Page at http://www.ccil.org/~esr/ecsl/ for full details. Eris /e'ris/ n. The Greek goddess of Chaos, Discord, Confusion, and Things You Know Not Of; her name was latinized to Discordia and she was worshiped by that name in Rome. Not a very friendly deity in the Classical original, she was reinvented as a more benign personification of creative anarchy starting in 1959 by the adherents of Discordianism and has since been a semi-serious subject of veneration in several `fringe' cultures, including hackerdom. See Discordianism, Church of the SubGenius. erotics /ee-ro'tiks/ n. [Helsinki University of Technology, Finland] n. English-language university slang for electronics. Often used by hackers in Helsinki, maybe because good electronics excites them and makes them warm. = error 33 [XEROX PARC] n. 1. Predicating one research effort upon the success of another. 2. Allowing your own research effort to be placed on the critical path of some other project (be it a research effort or not). eurodemo /yoor'o-dem`-o/ a demo, sense 4 evil adj. As used by hackers, implies that some system, program, person, or institution is sufficiently maldesigned as to be not worth the bother of dealing with. Unlike the adjectives in the cretinous/losing/brain-damaged series, `evil' does not imply incompetence or bad design, but rather a set of goals or design criteria fatally incompatible with the speaker's. This usage is more an esthetic and engineering judgment than a moral one in the mainstream sense. "We thought about adding a Blue Glue interface but decided it was too evil to deal with." "TECO is neat, but it can be pretty evil if you're prone to typos." Often pronounced with the first syllable lengthened, as /eeee'vil/. Compare evil and rude. evil and rude adj. Both evil and rude, but with the additional connotation that the rudeness was due to malice rather than incompetence. Thus, for example: Microsoft's Windows NT is _evil_ because it's a competent implementation of a bad design; it's _rude_ because it's gratuitously incompatible with Unix in places where compatibility would have been as easy and effective to do; but it's _evil and rude_ because the incompatibilities are apparently there not to fix design bugs in Unix but rather to lock hapless customers and developers into the Microsoft way. Hackish _evil and rude_ is close to the mainstream sense of `evil'. Evil Empire n. [from Ronald Reagan's famous characterization of the communist Soviet Union] Formerly IBM, now Microsoft. Functionally, the company most hackers love to hate at any given time. Hackers like to see themselves as romantic rebels against the Evil Empire, and frequently adopt this role to the point of ascribing rather more power and malice to the Empire than it actually has. See also Borg and search for Evil Empire pages on the Web. exa- /ek's*/ pref. [SI] See quantifiers. examining the entrails n. The process of grovelling through a core dump or hex image in an attempt to discover the bug that brought a program or system down. The reference is to divination from the entrails of a sacrified animal. Compare runes, incantation, black art, desk check. EXCH /eks'ch*/ or /eksch/ vt. To exchange two things, each for the other; to swap places. If you point to two people sitting down and say "Exch!", you are asking them to trade places. EXCH, meaning EXCHange, was originally the name of a PDP-10 instruction that exchanged the contents of a register and a memory location. Many newer hackers are probably thinking instead of the PostScript exchange operator (which is usually written in lowercase). excl /eks'kl/ n. Abbreviation for `exclamation point'. See bang, shriek, ASCII. EXE /eks'ee/ or /eek'see/ or /E-X-E/ n. An executable binary file. Some operating systems (notably MS-DOS, VMS, and TWENEX) use the extension .EXE to mark such files. This usage is also occasionally found among Unix programmers even though Unix executables don't have any required suffix. exec /eg-zek'/ or /eks'ek/ vt., n. 1. [Unix: from `execute'] Synonym for chain, derives from the exec(2) call. 2. [from `executive'] obs. The command interpreter for an OS (see shell); term esp. used around mainframes, and prob. derived from UNIVAC's archaic EXEC 2 and EXEC 8 operating systems. 3. At IBM and VM/CMS shops, the equivalent of a shell command file (among VM/CMS users). The mainstream `exec' as an abbreviation for (human) executive is not used. To a hacker, an `exec' is a always a program, never a person. exercise, left as an adj. [from technical books] Used to complete a proof when one doesn't mind a handwave, or to avoid one entirely. The complete phrase is: "The proof [or `the rest'] is left as an exercise for the reader." This comment has occasionally been attached to unsolved research problems by authors possessed of either an evil sense of humor or a vast faith in the capabilities of their audiences. Exon /eks'on/ excl. A generic obscenity that quickly entered wide use on the Internet and Usenet after Black Thursday. From the last name of Senator James Exon (Democrat-Nebraska), primary author of the CDA. Exploder n. Used within Microsoft to refer to the Windows Explorer, the interface component of Windows 95 and WinNT 4. Our spies report that most of the heavy guns at MS came from a Unix background and use command line utilities; even they are scornful of the over-gingerbreaded WIMP environments that they have been called upon to create. exploit n. [originally cracker slang] 1. A vulnerability in software that can be used for breaking security or otherwise attacking an Internet host over the network. The Ping O' Death is a famous exploit. 2. More grammatically, a program that exploits an exploit in sense 1, external memory n. A memo pad, palmtop computer, or written notes. "Hold on while I write that to external memory". The analogy is with store or DRAM versus nonvolatile disk storage on computers. eye candy /i:' kand`ee/ n. [from mainstream slang "ear candy"] A display of some sort that's presented to lusers to keep them distracted while the program performs necessary background tasks. "Give 'em some eye candy while the back-end slurps that BLOB into core." Reported as mainstream usage among players of graphics-heavy computer games. We're also told this term is mainstream slang for soft pornography, but that sense does not appear to be live among hackers. eyeball search n.,v. To look for something in a mass of code or data with one's own native optical sensors, as opposed to using some sort of pattern matching software like grep or any other automated search tool. Also called a vgrep; compare vdiff, desk check. = F = face time: factor: fairings: fall over: fall through: fan: fandango on core: FAQ: FAQ list: FAQL: faradize: farkled: farming: fascist: fat electrons: fat-finger: faulty: fd leak: fear and loathing: feature: feature creature: feature creep: feature key: feature shock: featurectomy: feep: feeper: feeping creature: feeping creaturism: feetch feetch: fence: fencepost error: fiber-seeking backhoe: FidoNet: field circus: field servoid: Fight-o-net: File Attach: File Request: file signature: filk: film at 11: filter: Finagle's Law: fine: finger: finger trouble: finger-pointing syndrome: finn: firebottle: firefighting: firehose syndrome: firewall code: firewall machine: fireworks mode: firmware: firmy: fish: FISH queue: FITNR: fix: FIXME: flag: flag day: flaky: flamage: flame: flame bait: flame on: flame war: flamer: flap: flarp: flash crowd: flat: flat-ASCII: flat-file: flatten: flavor: flavorful: flippy: flood: flowchart: flower key: flush: flypage: Flyspeck 3: flytrap: FM: fnord: FOAF: FOD: fold case: followup: fontology: foo: foobar: fool: fool file: Foonly: footprint: for free: for the rest of us: for values of: fora: foreground: fork: fork bomb: forked: Fortrash: fortune cookie: forum: fossil: four-color glossies: frag: fragile: fred: Fred Foobar: frednet: free software: freeware: freeze: fried: frink: friode: fritterware: frob: frobnicate: frobnitz: frog: frogging: front end: frotz: frotzed: frowney: FRS: fry: fscking: FSF: FTP: -fu: FUBAR: fuck me harder: FUD: FUD wars: fudge: fudge factor: fuel up: Full Monty: fum: functino: funky: funny money: furrfu: fuzzball: face time n. [common] Time spent interacting with somebody face-to-face (as opposed to via electronic links). "Oh, yeah, I spent some face time with him at the last Usenix." factor n. See coefficient of X. = fairings n. /fer'ingz/ [FreeBSD; orig. a typo for `fairness'] A term thrown out in discussion whenever a completely and transparently nonsensical argument in one's favor(?) seems called for, e,g. at the end of a really long thread for which the outcome is no longer even cared about since everyone is now so sick of it; or in rebuttal to another nonsensical argument ("Change the loader to look for /kernel.pl? What about fairings?") fall over vi. [IBM] Yet another synonym for crash or lose. `Fall over hard' equates to crash and burn. fall through v. (n. `fallthrough', var. `fall-through') 1. To exit a loop by exhaustion, i.e., by having fulfilled its exit condition rather than via a break or exception condition that exits from the middle of it. This usage appears to be really old, dating from the 1940s and 1950s. 2. To fail a test that would have passed control to a subroutine or some other distant portion of code. 3. In C, `fall-through' occurs when the flow of execution in a switch statement reaches a case label other than by jumping there from the switch header, passing a point where one would normally expect to find a break. A trivial example: switch (color) { case GREEN: do_green(); break; case PINK: do_pink(); /* FALL THROUGH */ case RED: do_red(); break; default: do_blue(); break; } The variant spelling /* FALL THRU */ is also common. The effect of the above code is to do_green() when color is GREEN, do_red() when color is RED, do_blue() on any other color other than PINK, and (and this is the important part) do_pink() and then do_red() when color is PINK. Fall-through is considered harmful by some, though there are contexts (such as the coding of state machines) in which it is natural; it is generally considered good practice to include a comment highlighting the fall-through where one would normally expect a break. See also Duff's device. fan n. Without qualification, indicates a fan of science fiction, especially one who goes to cons and tends to hang out with other fans. Many hackers are fans, so this term has been imported from fannish slang; however, unlike much fannish slang it is recognized by most non-fannish hackers. Among SF fans the plural is correctly `fen', but this usage is not automatic to hackers. "Laura reads the stuff occasionally but isn't really a fan." fandango on core n. [Unix/C hackers, from the Iberian dance] In C, a wild pointer that runs out of bounds, causing a core dump, or corrupts the malloc(3) arena in such a way as to cause mysterious failures later on, is sometimes said to have `done a fandango on core'. On low-end personal machines without an MMU (or Windows boxes, which have an MMU but use it incompetently), this can corrupt the OS itself, causing massive lossage. Other frenetic dances such as the cha-cha or the watusi, may be substituted. See aliasing bug, precedence lossage, smash the stack, memory leak, memory smash, overrun screw, core. FAQ /F-A-Q/ or /fak/ n. [Usenet] 1. A Frequently Asked Question. 2. A compendium of accumulated lore, posted periodically to high-volume newsgroups in an attempt to forestall such questions. Some people prefer the term `FAQ list' or `FAQL' /fa'kl/, reserving `FAQ' for sense 1. This lexicon itself serves as a good example of a collection of one kind of lore, although it is far too big for a regular FAQ posting. Examples: "What is the proper type of NULL?" and "What's that funny name for the # character?" are both Frequently Asked Questions. Several FAQs refer readers to this file. FAQ list /F-A-Q list/ or /fak list/ n. [common; Usenet] Syn FAQ, sense 2. FAQL /fa'kl/ n. Syn. FAQ list. faradize /far'*-di:z/ v. [US Geological Survey] To start any hyper-addictive process or trend, or to continue adding current to such a trend. Telling one user about a new octo-tetris game you compiled would be a faradizing act -- in two weeks you might find your entire department playing the faradic game. F = farkled /far'kld/ adj. [DeVry Institute of Technology, Atlanta] Syn. hosed. Poss. owes something to Yiddish `farblondjet' and/or the `Farkle Family' skits on "Rowan and Martin's Laugh-In", a popular comedy show of the late 1960s. = farming n. [Adelaide University, Australia] What the heads of a disk drive are said to do when they plow little furrows in the magnetic media. Associated with a crash. Typically used as follows: "Oh no, the machine has just crashed; I hope the hard drive hasn't gone farming again." No longer common; modern drives automatically park their heads in a safe zone on power-down, so it takes a real mechanical problem to induce this. fascist adj. 1. [common] Said of a computer system with excessive or annoying security barriers, usage limits, or access policies. The implication is that said policies are preventing hackers from getting interesting work done. The variant `fascistic' seems to have been preferred at MIT, poss. by analogy with `touristic' (see tourist or under the influence of German/Yiddish `faschistisch'). 2. In the design of languages and other software tools, `the fascist alternative' is the most restrictive and structured way of capturing a particular function; the implication is that this may be desirable in order to simplify the implementation or provide tighter error checking. Compare bondage-and-discipline language, although that term is global rather than local. fat electrons n. Old-time hacker David Cargill's theory on the causation of computer glitches. Your typical electric utility draws its line current out of the big generators with a pair of coil taps located near the top of the dynamo. When the normal tap brushes get dirty, they take them off line to clean them up, and use special auxiliary taps on the bottom of the coil. Now, this is a problem, because when they do that they get not ordinary or `thin' electrons, but the fat'n'sloppy electrons that are heavier and so settle to the bottom of the generator. These flow down ordinary wires just fine, but when they have to turn a sharp corner (as in an integrated-circuit via), they're apt to get stuck. This is what causes computer glitches. [Fascinating. Obviously, fat electrons must gain mass by bogon absorption --ESR] Compare bogon, magic smoke. fat-finger vt. 1. To introduce a typo while editing in such a way that the resulting manglification of a configuration file does something useless, damaging, or wildly unexpected. "NSI fat-fingered their DNS zone file and took half the net down again." 2. More generally, any typo that produces dramatically bad results. faulty adj. Non-functional; buggy. Same denotation as bletcherous, losing, q.v., but the connotation is much milder. fd leak /F-D leek/ n. A kind of programming bug analogous to a core leak, in which a program fails to close file descriptors (`fd's) after file operations are completed, and thus eventually runs out of them. See leak. fear and loathing n. [from Hunter S. Thompson] A state inspired by the prospect of dealing with certain real-world systems and standards that are totally brain-damaged but ubiquitous -- Intel 8086s, or COBOL, or EBCDIC, or any IBM machine bigger than a workstation. "Ack! They want PCs to be able to talk to the AI machine. Fear and loathing time!" feature n. 1. [common] A good property or behavior (as of a program). Whether it was intended or not is immaterial. 2. [common] An intended property or behavior (as of a program). Whether it is good or not is immaterial (but if bad, it is also a misfeature). 3. A surprising property or behavior; in particular, one that is purposely inconsistent because it works better that way -- such an inconsistency is therefore a feature and not a bug. This kind of feature is sometimes called a miswart; see that entry for a classic example. 4. A property or behavior that is gratuitous or unnecessary, though perhaps also impressive or cute. For example, one feature of Common LISP's format function is the ability to print numbers in two different Roman-numeral formats (see bells whistles and gongs). 5. A property or behavior that was put in to help someone else but that happens to be in your way. 6. [common] A bug that has been documented. To call something a feature sometimes means the author of the program did not consider the particular case, and that the program responded in a way that was unexpected but not strictly incorrect. A standard joke is that a bug can be turned into a feature simply by documenting it (then theoretically no one can complain about it because it's in the manual), or even by simply declaring it to be good. "That's not a bug, that's a feature!" is a common catchphrase. See also feetch feetch, creeping featurism, wart, green lightning. The relationship among bugs, features, misfeatures, warts, and miswarts might be clarified by the following hypothetical exchange between two hackers on an airliner: A: "This seat doesn't recline." B: "That's not a bug, that's a feature. There is an emergency exit door built around the window behind you, and the route has to be kept clear." A: "Oh. Then it's a misfeature; they should have increased the spacing between rows here." B: "Yes. But if they'd increased spacing in only one section it would have been a wart -- they would've had to make nonstandard-length ceiling panels to fit over the displaced seats." A: "A miswart, actually. If they increased spacing throughout they'd lose several rows and a chunk out of the profit margin. So unequal spacing would actually be the Right Thing." B: "Indeed." `Undocumented feature' is a common, allegedly humorous euphemism for a bug. There's a related joke that is sometimes referred to as the "one-question geek test". You say to someone "I saw a Volkswagen Beetle today with a vanity license plate that read FEATURE". If he/she laughs, he/she is a geek (see computer geek, sense 2). feature creature n. [poss. fr. slang `creature feature' for a horror movie] 1. One who loves to add features to designs or programs, perhaps at the expense of coherence, concision, or taste. 2. Alternately, a mythical being that induces otherwise rational programmers to perpetrate such crocks. See also feeping creaturism, creeping featurism. feature creep n. [common] The result of creeping featurism, as in "Emacs has a bad case of feature creep". feature key n. [common] The Macintosh key with the cloverleaf graphic on its keytop; sometimes referred to as `flower', `pretzel', `clover', `propeller', `beanie' (an apparent reference to the major feature of a propeller beanie), splat, `open-apple' or (officially, in Mac documentation) the `command key'. In French, the term `papillon' (butterfly) has been reported. The proliferation of terms for this creature may illustrate one subtle peril of iconic interfaces. Many people have been mystified by the cloverleaf-like symbol that appears on the feature key. Its oldest name is `cross of St. Hannes', but it occurs in pre-Christian Viking art as a decorative motif. Throughout Scandinavia today the road agencies use it to mark sites of historical interest. Apple picked up the symbol from an early Mac developer who happened to be Swedish. Apple documentation gives the translation "interesting feature"! There is some dispute as to the proper (Swedish) name of this symbol. It technically stands for the word `sevärdhet' (thing worth seeing); many of these are old churches. Some Swedes report as an idiom for the sign the word `kyrka', cognate to English `church' and pronounced (roughly) /chur'ka/ in modern Swedish. Others say this is nonsense. Other idioms reported for the sign are `runa' (rune) or `runsten' /roon'stn/ (runestone), derived from the fact that many of the interesting features are Viking rune-stones. The term `fornminne' /foorn'min'*/ (relic of antiquity, ancient monument) is also reported, especially among those who think that the Mac itself is a relic of antiquity. feature shock n. [from Alvin Toffler's book title "Future Shock"] A user's (or programmer's!) confusion when confronted with a package that has too many features and poor introductory material. featurectomy /fee`ch*r-ek't*-mee/ n. The act of removing a feature from a program. Featurectomies come in two flavors, the `righteous' and the `reluctant'. Righteous featurectomies are performed because the remover believes the program would be more elegant without the feature, or there is already an equivalent and better way to achieve the same end. (Doing so is not quite the same thing as removing a misfeature.) Reluctant featurectomies are performed to satisfy some external constraint such as code size or execution speed. feep /feep/ 1. n. The soft electronic `bell' sound of a display terminal (except for a VT-52); a beep (in fact, the microcomputer world seems to prefer beep). 2. vi. To cause the display to make a feep sound. ASR-33s (the original TTYs) do not feep; they have mechanical bells that ring. Alternate forms: beep, `bleep', or just about anything suitably onomatopoeic. (Jeff MacNelly, in his comic strip "Shoe", uses the word `eep' for sounds made by computer terminals and video games; this is perhaps the closest written approximation yet.) The term `breedle' was sometimes heard at SAIL, where the terminal bleepers are not particularly soft (they sound more like the musical equivalent of a raspberry or Bronx cheer; for a close approximation, imagine the sound of a Star Trek communicator's beep lasting for five seconds). The `feeper' on a VT-52 has been compared to the sound of a '52 Chevy stripping its gears. See also ding. feeper /fee'pr/ n. The device in a terminal or workstation (usually a loudspeaker of some kind) that makes the feep sound. feeping creature n. [from feeping creaturism] An unnecessary feature; a bit of chrome that, in the speaker's judgment, is the camel's nose for a whole horde of new features. feeping creaturism /fee'ping kree`ch*r-izm/ n. A deliberate spoonerism for creeping featurism, meant to imply that the system or program in question has become a misshapen creature of hacks. This term isn't really well defined, but it sounds so neat that most hackers have said or heard it. It is probably reinforced by an image of terminals prowling about in the dark making their customary noises. feetch feetch /feech feech/ interj. If someone tells you about some new improvement to a program, you might respond: "Feetch, feetch!" The meaning of this depends critically on vocal inflection. With enthusiasm, it means something like "Boy, that's great! What a great hack!" Grudgingly or with obvious doubt, it means "I don't know; it sounds like just one more unnecessary and complicated thing". With a tone of resignation, it means, "Well, I'd rather keep it simple, but I suppose it has to be done". fence n. 1. A sequence of one or more distinguished (out-of-band) characters (or other data items), used to delimit a piece of data intended to be treated as a unit (the computer-science literature calls this a `sentinel'). The NUL (ASCII 0000000) character that terminates strings in C is a fence. Hex FF is also (though slightly less frequently) used this way. See zigamorph. 2. An extra data value inserted in an array or other data structure in order to allow some normal test on the array's contents also to function as a termination test. For example, a highly optimized routine for finding a value in an array might artificially place a copy of the value to be searched for after the last slot of the array, thus allowing the main search loop to search for the value without having to check at each pass whether the end of the array had been reached. 3. [among users of optimizing compilers] Any technique, usually exploiting knowledge about the compiler, that blocks certain optimizations. Used when explicit mechanisms are not available or are overkill. Typically a hack: "I call a dummy procedure there to force a flush of the optimizer's register-coloring info" can be expressed by the shorter "That's a fence procedure". fencepost error n. 1. [common] A problem with the discrete equivalent of a boundary condition, often exhibited in programs by iterative loops. From the following problem: "If you build a fence 100 feet long with posts 10 feet apart, how many posts do you need?" (Either 9 or 11 is a better answer than the obvious 10.) For example, suppose you have a long list or array of items, and want to process items m through n; how many items are there? The obvious answer is n - m, but that is off by one; the right answer is n - m + 1. A program that used the `obvious' formula would have a fencepost error in it. See also zeroth and off-by-one error, and note that not all off-by-one errors are fencepost errors. The game of Musical Chairs involves a catastrophic off-by-one error where N people try to sit in N - 1 chairs, but it's not a fencepost error. Fencepost errors come from counting things rather than the spaces between them, or vice versa, or by neglecting to consider whether one should count one or both ends of a row. 2. [rare] An error induced by unexpected regularities in input values, which can (for instance) completely thwart a theoretically efficient binary tree or hash table implementation. (The error here involves the difference between expected and worst case behaviors of an algorithm.) fiber-seeking backhoe [common among backbone ISP personnel] Any of a genus of large, disruptive machines which routinely cut critical backbone links, creating Internet outages and packet over air problems. FidoNet n. A worldwide hobbyist network of personal computers which exchanges mail, discussion groups, and files. Founded in 1984 and originally consisting only of IBM PCs and compatibles, FidoNet now includes such diverse machines as Apple ][s, Ataris, Amigas, and Unix systems. For years FidoNet actually grew faster than Usenet, but the advent of cheap Internet access probably means its days are numbered. In early 1999 Fidonet has approximately 30,000 nodes, down from 38K in 1996. field circus n. [a derogatory pun on `field service'] The field service organization of any hardware manufacturer, but originally DEC. There is an entire genre of jokes about field circus engineers: Q: How can you recognize a field circus engineer with a flat tire? A: He's changing one tire at a time to see which one is flat. Q: How can you recognize a field circus engineer who is out of gas? A: He's changing one tire at a time to see which one is flat. Q: How can you tell it's your field circus engineer? A: The spare is flat, too. [See Easter egging for additional insight on these jokes.] There is also the `Field Circus Cheer' (from the old plan file for DEC on MIT-AI): Maynard! Maynard! Don't mess with us! We're mean and we're tough! If you get us confused We'll screw up your stuff. (DEC's service HQ, still extant under the Compaq regime, is located in Maynard, Massachusetts.) field servoid [play on `android'] /fee'ld ser'voyd/ n. Representative of a field service organization (see field circus). This has many of the implications of droid. Fight-o-net n. [FidoNet] Deliberate distortion of FidoNet, often applied after a flurry of flamage in a particular echo, especially the SYSOP echo or Fidonews (see 'Snooze). File Attach [FidoNet] 1. n. A file sent along with a mail message from one FidoNet to another. 2. vt. Sending someone a file by using the File Attach option in a FidoNet mailer. File Request [FidoNet] 1. n. The FidoNet equivalent of FTP, in which one FidoNet system automatically dials another and snarfs one or more files. Often abbreviated `FReq'; files are often announced as being "available for FReq" in the same way that files are announced as being "available for/by anonymous FTP" on the Internet. 2. vt. The act of getting a copy of a file by using the File Request option of the FidoNet mailer. file signature n. A magic number, sense 3. filk /filk/ n.,v. [from SF fandom, where a typo for `folk' was adopted as a new word] A popular or folk song with lyrics revised or completely new lyrics and/or music, intended for humorous effect when read, and/or to be sung late at night at SF conventions. There is a flourishing subgenre of these called `computer filks', written by hackers and often containing rather sophisticated technical humor. See double bucky for an example. Compare grilf, hing, pr0n, and newsfroup. film at 11 [MIT: in parody of TV newscasters] 1. Used in conversation to announce ordinary events, with a sarcastic implication that these events are earth-shattering. "ITS crashes; film at 11." "Bug found in scheduler; film at 11." 2. Also widely used outside MIT to indicate that additional information will be available at some future time, without the implication of anything particularly ordinary about the referenced event. For example, "The mail file server died this morning; we found garbage all over the root directory. Film at 11." would indicate that a major failure had occurred but that the people working on it have no additional information about it as yet; use of the phrase in this way suggests gently that the problem is liable to be fixed more quickly if the people doing the fixing can spend time doing the fixing rather than responding to questions, the answers to which will appear on the normal "11:00 news", if people will just be patient. The variant "MPEGs at 11" has recently been cited (MPEG is a digital-video format.) filter n. [very common; orig. Unix, now also in MS-DOS] A program that processes an input data stream into an output data stream in some well-defined way, and does no I/O to anywhere else except possibly on error conditions; one designed to be used as a stage in a `pipeline' (see plumbing). Compare sponge. = Finagle's Law n. The generalized or `folk' version of Murphy's Law, fully named "Finagle's Law of Dynamic Negatives" and usually rendered "Anything that can go wrong, will". One variant favored among hackers is "The perversity of the Universe tends towards a maximum" (but see also Hanlon's Razor). The label `Finagle's Law' was popularized by SF author Larry Niven in several stories depicting a frontier culture of asteroid miners; this `Belter' culture professed a religion and/or running joke involving the worship of the dread god Finagle and his mad prophet Murphy. Some technical and scientific cultures (e.g., paleontologists) know it under the name `Sod's Law'; this usage may be more common in Great Britain. fine adj. [WPI] Good, but not good enough to be cuspy. The word `fine' is used elsewhere, of course, but without the implicit comparison to the higher level implied by cuspy. finger [WAITS, via BSD Unix] 1. n. A program that displays information about a particular user or all users logged on the system, or a remote system. Typically shows full name, last login time, idle time, terminal line, and terminal location (where applicable). May also display a plan file left by the user (see also Hacking X for Y). 2. vt. To apply finger to a username. 3. vt. By extension, to check a human's current state by any means. "Foodp?" "T!" "OK, finger Lisa and see if she's idle." 4. Any picture (composed of ASCII characters) depicting `the finger'. Originally a humorous component of one's plan file to deter the curious fingerer (sense 2), it has entered the arsenal of some flamers. = finger trouble n. Mistyping, typos, or generalized keyboard incompetence (this is surprisingly common among hackers, given the amount of time they spend at keyboards). "I keep putting colons at the end of statements instead of semicolons", "Finger trouble again, eh?". finger-pointing syndrome n. All-too-frequent result of bugs, esp. in new or experimental configurations. The hardware vendor points a finger at the software. The software vendor points a finger at the hardware. All the poor users get is the finger. finn v. [IRC] To pull rank on somebody based on the amount of time one has spent on IRC. The term derives from the fact that IRC was originally written in Finland in 1987. There may be some influence from the `Finn' character in William Gibson's seminal cyberpunk novel "Count Zero", who at one point says to another (much younger) character "I have a pair of shoes older than you are, so shut up!" = firebottle n.obs. A large, primitive, power-hungry active electrical device, similar in function to a FET but constructed out of glass, metal, and vacuum. Characterized by high cost, low density, low reliability, high-temperature operation, and high power dissipation. Sometimes mistakenly called a `tube' in the U.S. or a `valve' in England; another hackish term is glassfet. firefighting n. 1. What sysadmins have to do to correct sudden operational problems. An opposite of hacking. "Been hacking your new newsreader?" "No, a power glitch hosed the network and I spent the whole afternoon fighting fires." 2. The act of throwing lots of manpower and late nights at a project, esp. to get it out before deadline. See also gang bang, Mongolian Hordes technique; however, the term `firefighting' connotes that the effort is going into chasing bugs rather than adding features. firehose syndrome n. In mainstream folklore it is observed that trying to drink from a firehose can be a good way to rip your lips off. On computer networks, the absence or failure of flow control mechanisms can lead to situations in which the sending system sprays a massive flood of packets at an unfortunate receiving system, more than it can handle. Compare overrun, buffer overflow. firewall code n. 1. The code you put in a system (say, a telephone switch) to make sure that the users can't do any damage. Since users always want to be able to do everything but never want to suffer for any mistakes, the construction of a firewall is a question not only of defensive coding but also of interface presentation, so that users don't even get curious about those corners of a system where they can burn themselves. 2. Any sanity check inserted to catch a can't happen error. Wise programmers often change code to fix a bug twice: once to fix the bug, and once to insert a firewall which would have arrested the bug before it did quite as much damage. firewall machine n. A dedicated gateway machine with special security precautions on it, used to service outside network connections and dial-in lines. The idea is to protect a cluster of more loosely administered machines hidden behind it from crackers. The typical firewall is an inexpensive micro-based Unix box kept clean of critical data, with a bunch of modems and public network ports on it but just one carefully watched connection back to the rest of the cluster. The special precautions may include threat monitoring, callback, and even a complete iron box keyable to particular incoming IDs or activity patterns. Syn. flytrap, Venus flytrap. [When first coined in the mid-1980s this term was pure jargon. Now (1999) it is techspeak, and has been retained only as an example of uptake --ESR] fireworks mode n. 1. The mode a machine is sometimes said to be in when it is performing a crash and burn operation. 2. There is (or was) a more specific meaning of this term in the Amiga community. The word fireworks described the effects of a particularly serious crash which prevented the video pointer(s) from getting reset at the start of the vertical blank. This caused the DAC to scroll through the entire contents of CHIP (video or video+CPU) memory. Since each bit plane would scroll separately this was quite a spectacular effect. firmware /ferm'weir/ n. Embedded software contained in EPROM or flash memory. It isn't quite hardware, but at least doesn't have to be loaded from a disk like regular software. Hacker usage differs from straight techspeak in that hackers don't normally apply it to stuff that you can't possibly get at, such as the program that runs a pocket calculator. Instead, it implies that the firmware could be changed, even if doing so would mean opening a box and plugging in a new chip. A computer's BIOS is the classic example, although nowadays there is firmware in disk controllers, modems, video cards and even CD-ROM drives. F = firmy /fer'mee/ n. Syn. stiffy (a 3.5-inch floppy disk). = fish n. [Adelaide University, Australia] 1. Another metasyntactic variable. See foo. Derived originally from the Monty Python skit in the middle of "The Meaning of Life" entitled "Find the Fish". 2. A pun for `microfiche'. A microfiche file cabinet may be referred to as a `fish tank'. FISH queue n. [acronym, by analogy with FIFO (First In, First Out)] `First In, Still Here'. A joking way of pointing out that processing of a particular sequence of events or requests has stopped dead. Also `FISH mode' and `FISHnet'; the latter may be applied to any network that is running really slowly or exhibiting extreme flakiness. FITNR // adj. [Thinking Machines, Inc.] Fixed In The Next Release. A written-only notation attached to bug reports. Often wishful thinking. = fix n.,v. What one does when a problem has been reported too many times to be ignored. FIXME imp. [common] A standard tag often put in C comments near a piece of code that needs work. The point of doing so is that a grep or a similar pattern-matching tool can find all such places quickly. /* FIXME: note this is common in GNU code. */ Compare XXX. = flag n. [very common] A variable or quantity that can take on one of two values; a bit, particularly one that is used to indicate one of two outcomes or is used to control which of two things is to be done. "This flag controls whether to clear the screen before printing the message." "The program status word contains several flag bits." Used of humans analogously to bit. See also hidden flag, mode bit. flag day n. A software change that is neither forward- nor backward-compatible, and which is costly to make and costly to reverse. "Can we install that without causing a flag day for all users?" This term has nothing to do with the use of the word flag to mean a variable that has two values. It came into use when a massive change was made to the Multics timesharing system to convert from the short-lived 1965 version of the ASCII code to the 1967 version (in draft at the time); this was scheduled for Flag Day (a U.S. holiday), June 14, 1966. The actual change moved the code point for the ASCII newline character; this required that all of the Multics source code, documentation, and device drivers be changed simultaneously. See also backward combatability. flaky adj. (var sp. `flakey') Subject to frequent lossage. This use is of course related to the common slang use of the word to describe a person as eccentric, crazy, or just unreliable. A system that is flaky is working, sort of -- enough that you are tempted to try to use it -- but fails frequently enough that the odds in favor of finishing what you start are low. Commonwealth hackish prefers dodgy or wonky. = flamage /flay'm*j/ n. [very common] Flaming verbiage, esp. high-noise, low-signal postings to Usenet or other electronic fora. Often in the phrase `the usual flamage'. `Flaming' is the act itself; `flamage' the content; a `flame' is a single flaming message. See flame, also dahmum. = flame [at MIT, orig. from the phrase `flaming asshole'] 1. vi. To post an email message intended to insult and provoke. 2. vi. To speak incessantly and/or rabidly on some relatively uninteresting subject or with a patently ridiculous attitude. 3. vt. Either of senses 1 or 2, directed with hostility at a particular person or people. 4. n. An instance of flaming. When a discussion degenerates into useless controversy, one might tell the participants "Now you're just flaming" or "Stop all that flamage!" to try to get them to cool down (so to speak). The term may have been independently invented at several different places. It has been reported from MIT, Carleton College and RPI (among many other places) from as far back as 1969, and from the University of Virginia in the early 1960s. It is possible that the hackish sense of `flame' is much older than that. The poet Chaucer was also what passed for a wizard hacker in his time; he wrote a treatise on the astrolabe, the most advanced computing device of the day. In Chaucer's "Troilus and Cressida", Cressida laments her inability to grasp the proof of a particular mathematical theorem; her uncle Pandarus then observes that it's called "the fleminge of wrecches." This phrase seems to have been intended in context as "that which puts the wretches to flight" but was probably just as ambiguous in Middle English as "the flaming of wretches" would be today. One suspects that Chaucer would feel right at home on Usenet. = flame bait n. [common] A posting intended to trigger a flame war, or one that invites flames in reply. See also troll. flame on vi.,interj. 1. To begin to flame. The punning reference to Marvel Comics's Human Torch is no longer widely recognized. 2. To continue to flame. See rave, burble. flame war n. [common] (var. `flamewar') An acrimonious dispute, especially when conducted on a public electronic forum such as Usenet. flamer n. [common] One who habitually flames. Said esp. of obnoxious Usenet personalities. = flap vt. 1. [obs.] To unload a DECtape (so it goes flap, flap, flap...). Old-time hackers at MIT tell of the days when the disk was device 0 and DEC microtapes were 1, 2,... and attempting to flap device 0 would instead start a motor banging inside a cabinet near the disk. 2. By extension, to unload any magnetic tape. See also macrotape. Modern cartridge tapes no longer actually flap, but the usage has remained. (The term could well be re-applied to DEC's TK50 cartridge tape drive, a spectacularly misengineered contraption which makes a loud flapping sound, almost like an old reel-type lawnmower, in one of its many tape-eating failure modes.) = flarp /flarp/ n. [Rutgers University] Yet another metasyntactic variable (see foo). Among those who use it, it is associated with a legend that any program not containing the word `flarp' somewhere will not work. The legend is discreetly silent on the reliability of programs which do contain the magic word. = flash crowd Larry Niven's 1973 SF short story "Flash Crowd" predicted that one consequence of cheap teleportation would be huge crowds materializing almost instantly at the sites of interesting news stories. Twenty years later the term passed into common use on the Internet to describe exponential spikes in website or server usage when one passes a certain threshold of popular interest (this may also be called slashdot effect). flat adj. 1. [common] Lacking any complex internal structure. "That bitty box has only a flat filesystem, not a hierarchical one." The verb form is flatten. 2. Said of a memory architecture (like that of the VAX or 680x0) that is one big linear address space (typically with each possible value of a processor register corresponding to a unique core address), as opposed to a `segmented' architecture (like that of the 80x86) in which addresses are composed from a base-register/offset pair (segmented designs are generally considered cretinous). Note that sense 1 (at least with respect to filesystems) is usually used pejoratively, while sense 2 is a Good Thing. flat-ASCII adj. [common] Said of a text file that contains only 7-bit ASCII characters and uses only ASCII-standard control characters (that is, has no embedded codes specific to a particular text formatter markup language, or output device, and no meta-characters). Syn. plain-ASCII. Compare flat-file. flat-file adj. A flattened representation of some database or tree or network structure as a single file from which the structure could implicitly be rebuilt, esp. one in flat-ASCII form. See also sharchive. flatten vt. [common] To remove structural information, esp. to filter something with an implicit tree structure into a simple sequence of leaves; also tends to imply mapping to flat-ASCII. "This code flattens an expression with parentheses into an equivalent canonical form." = flavor n. 1. [common] Variety, type, kind. "DDT commands come in two flavors." "These lights come in two flavors, big red ones and small green ones." "Linux is a flavor of Unix" See vanilla. 2. The attribute that causes something to be flavorful. Usually used in the phrase "yields additional flavor". "This convention yields additional flavor by allowing one to print text either right-side-up or upside-down." See vanilla. This usage was certainly reinforced by the terminology of quantum chromodynamics, in which quarks (the constituents of, e.g., protons) come in six flavors (up, down, strange, charm, top, bottom) and three colors (red, blue, green) -- however, hackish use of `flavor' at MIT predated QCD. 3. The term for `class' (in the object-oriented sense) in the LISP Machine Flavors system. Though the Flavors design has been superseded (notably by the Common LISP CLOS facility), the term `flavor' is still used as a general synonym for `class' by some LISP hackers. = flavorful adj. Full of flavor (sense 2); esthetically pleasing. See random and losing for antonyms. See also the entries for taste and elegant. flippy /flip'ee/ n. A single-sided floppy disk altered for double-sided use by addition of a second write-notch, so called because it must be flipped over for the second side to be accessible. No longer common. = flood v. [common] 1. To overwhelm a network channel with mechanically-generated traffic; especially used of IP, TCP/IP, UDP, or ICMP denial-of-service attacks. 2. To dump large amounts of text onto an IRC channel. This is especially rude when the text is uninteresting and the other users are trying to carry on a serious conversation. Also used in a similar sense on Usenet. 3. [Usenet] To post an unusually large number or volume of files on a related topic. = flowchart n. [techspeak] An archaic form of visual control-flow specification employing arrows and `speech balloons' of various shapes. Hackers never use flowcharts, consider them extremely silly, and associate them with COBOL programmers, card wallopers, and other lower forms of life. This attitude follows from the observations that flowcharts (at least from a hacker's point of view) are no easier to read than code, are less precise, and tend to fall out of sync with the code (so that they either obfuscate it rather than explaining it, or require extra maintenance effort that doesn't improve the code). See also PDL, sense 1. flower key n. [Mac users] See feature key. flush v. 1. [common] To delete something, usually superfluous, or to abort an operation. "All that nonsense has been flushed." 2. [Unix/C] To force buffered I/O to disk, as with an fflush(3) call. This is not an abort or deletion as in sense 1, but a demand for early completion! 3. To leave at the end of a day's work (as opposed to leaving for a meal). "I'm going to flush now." "Time to flush." 4. To exclude someone from an activity, or to ignore a person. `Flush' was standard ITS terminology for aborting an output operation; one spoke of the text that would have been printed, but was not, as having been flushed. It is speculated that this term arose from a vivid image of flushing unwanted characters by hosing down the internal output buffer, washing the characters away before they could be printed. The Unix/C usage, on the other hand, was propagated by the fflush(3) call in C's standard I/O library (though it is reported to have been in use among BLISS programmers at DEC and on Honeywell and IBM machines as far back as 1965). Unix/C hackers found the ITS usage confusing, and vice versa. = flypage /fli:'payj/ n. (alt. `fly page') A banner, sense 1. = Flyspeck 3 n. Standard name for any font that is so tiny as to be unreadable (by analogy with names like `Helvetica 10' for 10-point Helvetica). Legal boilerplate is usually printed in Flyspeck 3. flytrap n. [rare] See firewall machine. = FM /F-M/ n. 1. [common] Not `Frequency Modulation' but rather an abbreviation for `Fucking Manual', the back-formation from RTFM. Used to refer to the manual itself in the RTFM. "Have you seen the Networking FM lately?" 2. Abbreviation for "Fucking Magic", used in the sense of black magic. fnord n. [from the "Illuminatus Trilogy"] 1. A word used in email and news postings to tag utterances as surrealist mind-play or humor, esp. in connection with Discordianism and elaborate conspiracy theories. "I heard that David Koresh is sharing an apartment in Argentina with Hitler. (Fnord.)" "Where can I fnord get the Principia Discordia from?" 2. A metasyntactic variable, commonly used by hackers with ties to Discordianism or the Church of the SubGenius. = FOAF // n. [Usenet; common] Acronym for `Friend Of A Friend'. The source of an unverified, possibly untrue story. This term was not originated by hackers (it is used in Jan Brunvand's books on urban folklore), but is much better recognized on Usenet and elsewhere than in mainstream English. FOD /fod/ v. [Abbreviation for `Finger of Death', originally a spell-name from fantasy gaming] To terminate with extreme prejudice and with no regard for other people. From MUDs where the wizard command `FOD <player>' results in the immediate and total death of <player>, usually as punishment for obnoxious behavior. This usage migrated to other circumstances, such as "I'm going to fod the process that is burning all the cycles." Compare gun. In aviation, FOD means Foreign Object Damage, e.g., what happens when a jet engine sucks up a rock on the runway or a bird in flight. Finger of Death is a distressingly apt description of what this generally does to the engine. fold case v. See smash case. This term tends to be used more by people who don't mind that their tools smash case. It also connotes that case is ignored but case distinctions in data processed by the tool in question aren't destroyed. followup n. [common] On Usenet, a posting generated in response to another posting (as opposed to a reply, which goes by email rather than being broadcast). Followups include the ID of the parent message in their headers; smart news-readers can use this information to present Usenet news in `conversation' sequence rather than order-of-arrival. See thread. F = fontology n. [XEROX PARC] The body of knowledge dealing with the construction and use of new fonts (e.g., for window systems and typesetting software). It has been said that fontology recapitulates file-ogeny. [Unfortunately, this reference to the embryological dictum that "Ontogeny recapitulates phylogeny" is not merely a joke. On the Macintosh, for example, System 7 has to go through contortions to compensate for an earlier design error that created a whole different set of abstractions for fonts parallel to `files' and `folders' --ESR] foo /foo/ 1. interj. Term of disgust. 2. [very common] Used very generally as a sample name for absolutely anything, esp. programs and files (esp. scratch files). 3. First on the standard list of metasyntactic variables used in syntax examples. See also bar, baz, qux, quux, corge, grault, garply, waldo, fred, plugh, xyzzy, thud. When `foo' is used in connection with `bar' it has generally traced to the WWII-era Army slang acronym FUBAR (`Fucked Up Beyond All Repair'), later modified to foobar. Early versions of the Jargon File interpreted this change as a post-war bowdlerization, but it it now seems more likely that FUBAR was itself a derivative of `foo' perhaps influenced by German `furchtbar' (terrible) - `foobar' may actually have been the original form. For, it seems, the word `foo' itself had an immediate prewar history in comic strips and cartoons. The earliest documented uses were in the "Smokey Stover" comic strip popular in the 1930s, which frequently included the word "foo". Bill Holman, the author of the strip, filled it with odd jokes and personal contrivances, including other nonsense phrases such as "Notary Sojac" and "1506 nix nix". According to the Warner Brothers Cartoon Companion Holman claimed to have found the word "foo" on the bottom of a Chinese figurine. This is plausible; Chinese statuettes often have apotropaic inscriptions, and this may have been the Chinese word `fu' (sometimes transliterated `foo'), which can mean "happiness" when spoken with the proper tone (the lion-dog guardians flanking the steps of many Chinese restaurants are properly called "fu dogs"). English speakers' reception of Holman's `foo' nonsense word was undoubtedly influenced by Yiddish `feh' and English `fooey' and `fool'. Holman's strip featured a firetruck called the Foomobile that rode on two wheels. The comic strip was tremendously popular in the late 1930s, and legend has it that a manufacturer in Indiana even produced an operable version of Holman's Foomobile. According to the Encyclopedia of American Comics, `Foo' fever swept the U.S., finding its way into popular songs and generating over 500 `Foo Clubs.' The fad left `foo' references embedded in popular culture (including a couple of appearances in Warner Brothers cartoons of 1938-39) but with their origins rapidly forgotten. One place they are known to have remained live is in the U.S. military during the WWII years. In 1944-45, the term `foo fighters' was in use by radar operators for the kind of mysterious or spurious trace that would later be called a UFO (the older term resurfaced in popular American usage in 1995 via the name of one of the better grunge-rock bands). Informants connected the term to the Smokey Stover strip. The U.S. and British militaries frequently swapped slang terms during the war (see kluge and kludge for another important example) Period sources reported that `FOO' became a semi-legendary subject of WWII British-army graffiti more or less equivalent to the American Kilroy. Where British troops went, the graffito "FOO was here" or something similar showed up. Several slang dictionaries aver that FOO probably came from Forward Observation Officer, but this (like the contemporaneous "FUBAR") was probably a backronym . Forty years later, Paul Dickson's excellent book "Words" (Dell, 1982, ISBN 0-440-52260-7) traced "Foo" to an unspecified British naval magazine in 1946, quoting as follows: "Mr. Foo is a mysterious Second World War product, gifted with bitter omniscience and sarcasm." Earlier versions of this entry suggested the possibility that hacker usage actually sprang from "FOO, Lampoons and Parody", the title of a comic book first issued in September 1958, a joint project of Charles and Robert Crumb. Though Robert Crumb (then in his mid-teens) later became one of the most important and influential artists in underground comics, this venture was hardly a success; indeed, the brothers later burned most of the existing copies in disgust. The title FOO was featured in large letters on the front cover. However, very few copies of this comic actually circulated, and students of Crumb's `oeuvre' have established that this title was a reference to the earlier Smokey Stover comics. The Crumbs may also have been influenced by a short-lived Canadian parody magazine named `Foo' published in 1951-52. An old-time member reports that in the 1959 "Dictionary of the TMRC Language", compiled at TMRC, there was an entry that went something like this: FOO: The first syllable of the sacred chant phrase "FOO MANE PADME HUM." Our first obligation is to keep the foo counters turning. (For more about the legendary foo counters, see TMRC.) This definition used Bill Holman's nonsense word, only then two decades old and demonstrably still live in popular culture and slang, to a ha ha only serious analogy with esoteric Tibetan Buddhism. Today's hackers would find it difficult to resist elaborating a joke like that, and it is not likely 1959's were any less susceptible. Almost the entire staff of what later became the MIT AI Lab was involved with TMRC, and the word spread from there. foobar n. [very common] Another widely used metasyntactic variable; see foo for etymology. Probably originally propagated through DECsystem manuals by Digital Equipment Corporation (DEC) in 1960s and early 1970s; confirmed sightings there go back to 1972. Hackers do not generally use this to mean FUBAR in either the slang or jargon sense. See also Fred Foobar. In RFC1639, "FOOBAR" was made an abbreviation for "FTP Operation Over Big Address Records", but this was an obvious backronym. = fool n. As used by hackers, specifically describes a person who habitually reasons from obviously or demonstrably incorrect premises and cannot be persuaded by evidence to do otherwise; it is not generally used in its other senses, i.e., to describe a person with a native incapacity to reason correctly, or a clown. Indeed, in hackish experience many fools are capable of reasoning all too effectively in executing their errors. See also cretin, loser, fool file. The Algol 68-R compiler used to initialize its storage to the character string "F00LF00LF00LF00L..." because as a pointer or as a floating point number it caused a crash, and as an integer or a character string it was very recognizable in a dump. Sadly, one day a very senior professor at Nottingham University wrote a program that called him a fool. He proceeded to demonstrate the correctness of this assertion by lobbying the university (not quite successfully) to forbid the use of Algol on its computers. See also DEADBEEF. fool file n. [Usenet] A notional repository of all the most dramatically and abysmally stupid utterances ever. An entire subgenre of sig blocks consists of the header "From the fool file:" followed by some quote the poster wishes to represent as an immortal gem of dimwittery; for this usage to be really effective, the quote has to be so obviously wrong as to be laughable. More than one Usenetter has achieved an unwanted notoriety by being quoted in this way. Foonly n. 1. The PDP-10 successor that was to have been built by the Super Foonly project at the Stanford Artificial Intelligence Laboratory along with a new operating system. (The name itself came from FOO NLI, an error message emitted by a PDP-10 assembler at SAIL meaning "FOO is Not a Legal Identifier". The intention was to leapfrog from the old DEC timesharing system SAIL was then running to a new generation, bypassing TENEX which at that time was the ARPANET standard. ARPA funding for both the Super Foonly and the new operating system was cut in 1974. Most of the design team went to DEC and contributed greatly to the design of the PDP-10 model KL10. 2. The name of the company formed by Dave Poole, one of the principal Super Foonly designers, and one of hackerdom's more colorful personalities. Many people remember the parrot which sat on Poole's shoulder and was a regular companion. 3. Any of the machines built by Poole's company. The first was the F-1 (a.k.a. Super Foonly), which was the computational engine used to create the graphics in the movie "TRON". The F-1 was the fastest PDP-10 ever built, but only one was ever made. The effort drained Foonly of its financial resources, and the company turned towards building smaller, slower, and much less expensive machines. Unfortunately, these ran not the popular TOPS-20 but a TENEX variant called Foonex; this seriously limited their market. Also, the machines shipped were actually wire-wrapped engineering prototypes requiring individual attention from more than usually competent site personnel, and thus had significant reliability problems. Poole's legendary temper and unwillingness to suffer fools gladly did not help matters. By the time of the Jupiter project cancellation in 1983, Foonly's proposal to build another F-1 was eclipsed by the Mars, and the company never quite recovered. See the Mars entry for the continuation and moral of this story. = footprint n. 1. The floor or desk area taken up by a piece of hardware. 2. [IBM] The audit trail (if any) left by a crashed program (often in plural, `footprints'). See also toeprint. 3. RAM footprint: The minimum amount of RAM which an OS or other program takes; this figure gives one an idea of how much will be left for other applications. How actively this RAM is used is another matter entirely. Recent tendencies to featuritis and software bloat can expand the RAM footprint of an OS to the point of making it nearly unusable in practice. [This problem is, thankfully, limited to operating systems so stupid that they don't do virtual memory - ESR] for free adj. [common] Said of a capability of a programming language or hardware that is available by its design without needing cleverness to implement: "In APL, we get the matrix operations for free." "And owing to the way revisions are stored in this system, you get revision trees for free." The term usually refers to a serendipitous feature of doing things a certain way (compare big win), but it may refer to an intentional but secondary feature. for the rest of us adj. [from the Mac slogan "The computer for the rest of us"] 1. Used to describe a spiffy product whose affordability shames other comparable products, or (more often) used sarcastically to describe spiffy but very overpriced products. 2. Describes a program with a limited interface, deliberately limited capabilities, non-orthogonality, inability to compose primitives, or any other limitation designed to not `confuse' a naive user. This places an upper bound on how far that user can go before the program begins to get in the way of the task instead of helping accomplish it. Used in reference to Macintosh software which doesn't provide obvious capabilities because it is thought that the poor lusers might not be able to handle them. Becomes `the rest of them' when used in third-party reference; thus, "Yes, it is an attractive program, but it's designed for The Rest Of Them" means a program that superficially looks neat but has no depth beyond the surface flash. See also WIMP environment, Macintrash, point-and-drool interface, user-friendly. for values of [MIT] A common rhetorical maneuver at MIT is to use any of the canonical random numbers as placeholders for variables. "The max function takes 42 arguments, for arbitrary values of 42." "There are 69 ways to leave your lover, for 69 = 50." This is especially likely when the speaker has uttered a random number and realizes that it was not recognized as such, but even `non-random' numbers are occasionally used in this fashion. A related joke is that pi equals 3 -- for small values of pi and large values of 3. Historical note: at MIT this usage has traditionally been traced to the programming language MAD (Michigan Algorithm Decoder), an Algol-58-like language that was the most common choice among mainstream (non-hacker) users at MIT in the mid-60s. It inherited from Algol-58 a control structure FOR VALUES OF X = 3, 7, 99 DO ... that would repeat the indicated instructions for each value in the list (unlike the usual FOR that only works for arithmetic sequences of values). MAD is long extinct, but similar for-constructs still flourish (e.g., in Unix's shell languages). fora pl.n. Plural of forum. foreground vt. [Unix; common] To bring a task to the top of one's stack for immediate processing, and hackers often use it in this sense for non-computer tasks. "If your presentation is due next week, I guess I'd better foreground writing up the design document." Technically, on a time-sharing system, a task executing in foreground is one able to accept input from and return output to the user; oppose background. Nowadays this term is primarily associated with Unix, but it appears first to have been used in this sense on OS/360. Normally, there is only one foreground task per terminal (or terminal window); having multiple processes simultaneously reading the keyboard is a good way to lose. fork In the open-source community, a fork is what occurs when two (or more) versions of a software package's source code are being developed in parallel which once shared a common code base, and these multiple versions of the source code have irreconcilable differences between them. This should not be confused with a development branch, which may later be folded back into the original source code base. Nor should it be confused with what happens when a new distribution of Linux or some other distribution is created, because that largely assembles pieces than can and will be used in other distributions without conflict. Forking is uncommon; in fact, it is so uncommon that individual instances loom large in hacker folklore. Notable in this class were the GCC/EGCS fork (later healed by a merger) and the forks among the FreeBSD, NetBSD, and OpenBSD operating systems. fork bomb n. [Unix] A particular species of wabbit that can be written in one line of C (main() {for(;;)fork();}) or shell ($0 & $0 &) on any Unix system, or occasionally created by an egregious coding bug. A fork bomb process `explodes' by recursively spawning copies of itself (using the Unix system call fork(2)). Eventually it eats all the process table entries and effectively wedges the system. Fortunately, fork bombs are relatively easy to spot and kill, so creating one deliberately seldom accomplishes more than to bring the just wrath of the gods down upon the perpetrator. See also logic bomb. forked adj.,vi. 1. [common after 1997, esp. in the Linux community] An open-source software project is said to have forked or be forked when the project group fissions into two or more parts pursuing separate lines of development (or, less commonly, when a third party unconnected to the project group ). Forking is considered a Bad Thing - not merely because it implies a lot of wasted effort in the future, but because forks tend to be accompanied by a great deal of strife and acrimony between the successor groups over issues of legitimacy, succession, and design direction. There is serious social pressure against forking. As a result, major forks (such as the Gnu-Emacs/XEmacs split, the fissionings of the 386BSD group into three daughter project, and the short-lived GCC/EGCS split) are rare enough that they are remembered individually in hacker folklore. 2. [Unix; uncommon; prob. influenced by a mainstream expletive] Terminally slow, or dead. Originated when one system was slowed to a snail's pace by an inadvertent fork bomb. Fortrash /for'trash/ n. Hackerism for the FORTRAN (FORmula TRANslator) language, referring to its primitive design, gross and irregular syntax, limited control constructs, and slippery, exception-filled semantics. F = fortune cookie n. [WAITS, via Unix; common] A random quote, item of trivia, joke, or maxim printed to the user's tty at login time or (less commonly) at logout time. Items from this lexicon have often been used as fortune cookies. See cookie file. forum n. [Usenet, GEnie, CI$; pl. `fora' or `forums'] Any discussion group accessible through a dial-in BBS, a mailing list, or a newsgroup (see the network). A forum functions much like a bulletin board; users submit postings for all to read and discussion ensues. Contrast real-time chat via talk mode or point-to-point personal email. fossil n. 1. In software, a misfeature that becomes understandable only in historical context, as a remnant of times past retained so as not to break compatibility. Example: the retention of octal as default base for string escapes in C, in spite of the better match of hexadecimal to ASCII and modern byte-addressable architectures. See dusty deck. 2. More restrictively, a feature with past but no present utility. Example: the force-all-caps (LCASE) bits in the V7 and BSD Unix tty driver, designed for use with monocase terminals. (In a perversion of the usual backward-compatibility goal, this functionality has actually been expanded and renamed in some later USG Unix releases as the IUCLC and OLCUC bits.) 3. The FOSSIL (Fido/Opus/Seadog Standard Interface Level) driver specification for serial-port access to replace the brain-dead routines in the IBM PC ROMs. Fossils are used by most MS-DOS BBS software in preference to the `supported' ROM routines, which do not support interrupt-driven operation or setting speeds above 9600; the use of a semistandard FOSSIL library is preferable to the bare metal serial port programming otherwise required. Since the FOSSIL specification allows additional functionality to be hooked in, drivers that use the hook but do not provide serial-port access themselves are named with a modifier, as in `video fossil'. four-color glossies n. 1. Literature created by marketroids that allegedly contains technical specs but which is in fact as superficial as possible without being totally content-free. "Forget the four-color glossies, give me the tech ref manuals." Often applied as an indication of superficiality even when the material is printed on ordinary paper in black and white. Four-color-glossy manuals are never useful for solving a problem. 2. [rare] Applied by extension to manual pages that don't contain enough information to diagnose why the program doesn't produce the expected or desired output. frag n.,v. [from Vietnam-era U.S. military slang via the games Doom and Quake] 1. To kill another player's avatar in a multiuser game. "I hold the office Quake record with 40 frags." 2. To completely ruin something. "Forget that power supply, the lightning strike fragged it. See also gib. fragile adj. Syn brittle. fred n. 1. The personal name most frequently used as a metasyntactic variable (see foo). Allegedly popular because it's easy for a non-touch-typist to type on a standard QWERTY keyboard. In Great Britain, `fred', `jim' and `sheila' are common metasyntactic variables because their uppercase versions were official names given to the 3 memory areas that held I/O status registers on the lovingly-remembered BBC Microcomputer! (It is reported that SHEILA was poked the most often.) Unlike J. Random Hacker or `J. Random Loser', the name `fred' has no positive or negative loading (but see Dr. Fred Mbogo). See also barney. 2. An acronym for `Flipping Ridiculous Electronic Device'; other F-verbs may be substituted for `flipping'. Fred Foobar n. J. Random Hacker's cousin. Any typical human being, more or less synomous with `someone' except that Fred Foobar can be backreferenced by name later on. "So Fred Foobar will enter his phone number into the database, and it'll be archived with the others. Months later, when Fred searches..." See also Bloggs Family and Dr. Fred Mbogo frednet /fred'net/ n. Used to refer to some random and uncommon protocol encountered on a network. "We're implementing bridging in our router to solve the frednet problem." free software n. As defined by Richard M. Stallman and used by the Free Software movement, this means software that gives users enough freedom to be used by the free software community. Specifically, users must be free to modify the software for their private use, and free to redistribute it either with or without modifications, either commercially or noncommercially, either gratis or charging a distribution fee. Free software has existed since the dawn of computing; Free Software as a movement began in 1984 with the GNU Project. See also open source. freeware n. [common] Free software, often written by enthusiasts and distributed by users' groups, or via electronic mail, local bulletin boards, Usenet, or other electronic media. At one time, `freeware' was a trademark of Andrew Fluegelman, the author of the well-known MS-DOS comm program PC-TALK III. It wasn't enforced after his mysterious disappearance and presumed death in 1984. See shareware, FRS. F = freeze v. To lock an evolving software distribution or document against changes so it can be released with some hope of stability. Carries the strong implication that the item in question will `unfreeze' at some future date. "OK, fix that bug and we'll freeze for release." There are more specific constructions on this term. A `feature freeze', for example, locks out modifications intended to introduce new features but still allows bugfixes and completion of existing features; a `code freeze' connotes no more changes at all. At Sun Microsystems and elsewhere, one may also hear references to `code slush' -- that is, an almost-but-not-quite frozen state. = fried adj. 1. [common] Non-working due to hardware failure; burnt out. Especially used of hardware brought down by a `power glitch' (see glitch), drop-outs, a short, or some other electrical event. (Sometimes this literally happens to electronic circuits! In particular, resistors can burn out and transformers can melt down, emitting noxious smoke -- see friode, SED and LER. However, this term is also used metaphorically.) Compare frotzed. 2. [common] Of people, exhausted. Said particularly of those who continue to work in such a state. Often used as an explanation or excuse. "Yeah, I know that fix destroyed the file system, but I was fried when I put it in." Esp. common in conjunction with `brain': "My brain is fried today, I'm very short on sleep." = frink /frink/ v. The unknown ur-verb, fill in your own meaning. Found esp. on the Usenet newsgroup _alt.fan.lemurs_, where it is said that the lemurs know what `frink' means, but they aren't telling. Compare gorets. = friode /fri:'ohd/ n. [TMRC] A reversible (that is, fused or blown) diode. Compare fried; see also SED, LER. = fritterware n. An excess of capability that serves no productive end. The canonical example is font-diddling software on the Mac (see macdink); the term describes anything that eats huge amounts of time for quite marginal gains in function but seduces people into using it anyway. See also window shopping. frob /frob/ 1. n. [MIT; very common] The TMRC definition was "FROB = a protruding arm or trunnion"; by metaphoric extension, a `frob' is any random small thing; an object that you can comfortably hold in one hand; something you can frob (sense 2). See frobnitz. 2. vt. Abbreviated form of frobnicate. 3. [from the MUD world] A command on some MUDs that changes a player's experience level (this can be used to make wizards); also, to request wizard privileges on the `professional courtesy' grounds that one is a wizard elsewhere. The command is actually `frobnicate' but is universally abbreviated to the shorter form. frobnicate /frob'ni-kayt/ vt. [Poss. derived from frobnitz, and usually abbreviated to frob, but `frobnicate' is recognized as the official full form.] To manipulate or adjust, to tweak. One frequently frobs bits or other 2-state devices. Thus: "Please frob the light switch" (that is, flip it), but also "Stop frobbing that clasp; you'll break it". One also sees the construction `to frob a frob'. See tweak and twiddle. Usage: frob, twiddle, and tweak sometimes connote points along a continuum. `Frob' connotes aimless manipulation; `twiddle' connotes gross manipulation, often a coarse search for a proper setting; `tweak' connotes fine-tuning. If someone is turning a knob on an oscilloscope, then if he's carefully adjusting it, he is probably tweaking it; if he is just turning it but looking at the screen, he is probably twiddling it; but if he's just doing it because turning a knob is fun, he's frobbing it. The variant `frobnosticate' has been recently reported. frobnitz /frob'nits/, pl. `frobnitzem' /frob'nit-zm/ or `frobni' /frob'ni:/ n. [TMRC] An unspecified physical object, a widget. Also refers to electronic black boxes. This rare form is usually abbreviated to `frotz', or more commonly to frob. Also used are `frobnule' (/frob'n[y]ool/) and `frobule' (/frob'yool/). Starting perhaps in 1979, `frobozz' /fr*-boz'/ (plural: `frobbotzim' /fr*-bot'zm/) has also become very popular, largely through its exposure as a name via Zork. These variants can also be applied to nonphysical objects, such as data structures. Pete Samson, compiler of the original TMRC lexicon, adds, "Under the TMRC [railroad] layout were many storage boxes, managed (in 1958) by David R. Sawyer. Several had fanciful designations written on them, such as `Frobnitz Coil Oil'. Perhaps DRS intended Frobnitz to be a proper name, but the name was quickly taken for the thing". This was almost certainly the origin of the term. F = frog alt. `phrog' 1. interj. Term of disgust (we seem to have a lot of them). 2. Used as a name for just about anything. See foo. 3. n. Of things, a crock. 4. n. Of people, somewhere in between a turkey and a toad. 5. `froggy': adj. Similar to bagbiting, but milder. "This froggy program is taking forever to run!" frogging [University of Waterloo] v. 1. Partial corruption of a text file or input stream by some bug or consistent glitch, as opposed to random events like line noise or media failures. Might occur, for example, if one bit of each incoming character on a tty were stuck, so that some characters were correct and others were not. See terminak for a historical example and compare dread high-bit disease. 2. By extension, accidental display of text in a mode where the output device emits special symbols or mnemonics rather than conventional ASCII. This often happens, for example, when using a terminal or comm program on a device like an IBM PC with a special `high-half' character set and with the bit-parity assumption wrong. A hacker sufficiently familiar with ASCII bit patterns might be able to read the display anyway. F = front end n. 1. An intermediary computer that does set-up and filtering for another (usually more powerful but less friendly) machine (a `back end'). 2. What you're talking to when you have a conversation with someone who is making replies without paying attention. "Look at the dancing elephants!" "Uh-huh." "Do you know what I just said?" "Sorry, you were talking to the front end." 3. Software that provides an interface to another program `behind' it, which may not be as user-friendly. Probably from analogy with hardware front-ends (see sense 1) that interfaced with mainframes. frotz /frots/ 1. n. See frobnitz. 2. `mumble frotz': An interjection of mildest disgust. = frotzed /frotst/ adj. down because of hardware problems. Compare fried. A machine that is merely frotzed may be fixable without replacing parts, but a fried machine is more seriously damaged. = frowney n. (alt. `frowney face') See emoticon. = FRS // n.,obs. Abbreviation for "Freely Redistributable Software" which entered general use on the Internet in 1995 after years of low-level confusion over what exactly to call software written to be passed around and shared (contending terms including freeware, shareware, and `sourceware' were never universally felt to be satisfactory for various subtle reasons). The first formal conference on freely redistributable software was held in Cambridge, Massachussetts, in February 1996 (sponsored by the Free Software Foundation). The conference organizers used the FRS abbreviation heavily in its calls for papers and other literature during 1995. The term was in steady though not common use until 1998 and the invention of open source. fry 1. vi. To fail. Said especially of smoke-producing hardware failures. More generally, to become non-working. Usage: never said of software, only of hardware and humans. See fried, magic smoke. 2. vt. To cause to fail; to roach, toast, or hose a piece of hardware. Never used of software or humans, but compare fried. fscking /fus'-king/ or /eff'-seek-ing/ adj. [Usenet; common] Fucking, in the expletive sense (it refers to the Unix filesystem-repair command fsck(1), of which it can be said that if you have to use it at all you are having a bad day). Originated on scary devil monastery and the _bofh.net_ newsgroups, but became much more widespread following the passage of CDA. Also occasionally seen in the variant "What the fsck?" = FSF /F-S-F/ abbrev. Common abbreviation (both spoken and written) for the name of the Free Software Foundation, a nonprofit educational association formed to support the GNU project. FTP /F-T-P/, not /fit'ip/ 1. [techspeak] n. The File Transfer Protocol for transmitting files between systems on the Internet. 2. vt. To beam a file using the File Transfer Protocol. 3. Sometimes used as a generic even for file transfers not using FTP. "Lemme get a copy of "Wuthering Heights" ftp'd from uunet." -fu [common; generalized from `kung-fu'] Combining form denoting expert practice of a skill. "That's going to take some serious code-fu." First sighted in connection with the GIMP's remote-scripting facility, script-fu, in 1998. FUBAR n. The Failed UniBus Address Register in a VAX. A good example of how jargon can occasionally be snuck past the suits; see foobar, and foo for a fuller etymology. = fuck me harder excl. Sometimes uttered in response to egregious misbehavior, esp. in software, and esp. of misbehaviors which seem unfairly persistent (as though designed in by the imp of the perverse). Often theatrically elaborated: "Aiighhh! Fuck me with a piledriver and 16 feet of curare-tipped wrought-iron fence and no lubricants!" The phrase is sometimes heard abbreviated `FMH' in polite company. [This entry is an extreme example of the hackish habit of coining elaborate and evocative terms for lossage. Here we see a quite self-conscious parody of mainstream expletives that has become a running gag in part of the hacker culture; it illustrates the hackish tendency to turn any situation, even one of extreme frustration, into an intellectual game (the point being, in this case, to creatively produce a long-winded description of the most anatomically absurd mental image possible -- the short forms implicitly allude to all the ridiculous long forms ever spoken). Scatological language is actually relatively uncommon among hackers, and there was some controversy over whether this entry ought to be included at all. As it reflects a live usage recognizably peculiar to the hacker culture, we feel it is in the hackish spirit of truthfulness and opposition to all forms of censorship to record it here. --ESR & GLS] FUD /fuhd/ n. Defined by Gene Amdahl after he left IBM to found his own company: "FUD is the fear, uncertainty, and doubt that IBM sales people instill in the minds of potential customers who might be considering [Amdahl] products." The idea, of course, was to persuade them to go with safe IBM gear rather than with competitors' equipment. This implicit coercion was traditionally accomplished by promising that Good Things would happen to people who stuck with IBM, but Dark Shadows loomed over the future of competitors' equipment or software. See IBM. After 1990 the term FUD was associated increasingly frequently with Microsoft, and has become generalized to refer to any kind of disinformation used as a competitive weapon. FUD wars /fuhd worz/ n. [from FUD] Political posturing engaged in by hardware and software vendors ostensibly committed to standardization but actually willing to fragment the market to protect their own shares. The Unix International vs. OSF conflict about Unix standards was one outstanding example; Microsoft vs. Netscape vs. W3C about HTML standards is another. fudge 1. vt. To perform in an incomplete but marginally acceptable way, particularly with respect to the writing of a program. "I didn't feel like going through that pain and suffering, so I fudged it -- I'll fix it later." 2. n. The resulting code. = fudge factor n. [common] A value or parameter that is varied in an ad hoc way to produce the desired result. The terms `tolerance' and slop are also used, though these usually indicate a one-sided leeway, such as a buffer that is made larger than necessary because one isn't sure exactly how large it needs to be, and it is better to waste a little space than to lose completely for not having enough. A fudge factor, on the other hand, can often be tweaked in more than one direction. A good example is the `fuzz' typically allowed in floating-point calculations: two numbers being compared for equality must be allowed to differ by a small amount; if that amount is too small, a computation may never terminate, while if it is too large, results will be needlessly inaccurate. Fudge factors are frequently adjusted incorrectly by programmers who don't fully understand their import. See also coefficient of X. fuel up vi. To eat or drink hurriedly in order to get back to hacking. "Food-p?" "Yeah, let's fuel up." "Time for a great-wall!" See also oriental food. F = Full Monty n. See monty, sense 2. fum n. [XEROX PARC] At PARC, often the third of the standard metasyntactic variables (after foo and bar). Competes with baz, which is more common outside PARC. functino n. [uncommon, U.K.; originally a serendipitous typo in 1994] A pointer to a function in C and C++. By association with sub-atomic particles such as the neutrino, it accurately conveys an impression of smallness (one pointer is four bytes on most systems) and speed (hackers can and do use arrays of functinos to replace a switch() statement). funky adj. Said of something that functions, but in a slightly strange, klugey way. It does the job and would be difficult to change, so its obvious non-optimality is left alone. Often used to describe interfaces. The more bugs something has that nobody has bothered to fix because workarounds are easier, the funkier it is. TECO and UUCP are funky. The Intel i860's exception handling is extraordinarily funky. Most standards acquire funkiness as they age. "The new mailer is installed, but is still somewhat funky; if it bounces your mail for no reason, try resubmitting it." "This UART is pretty funky. The data ready line is active-high in interrupt mode and active-low in DMA mode." = funny money n. 1. Notional `dollar' units of computing time and/or storage handed to students at the beginning of a computer course; also called `play money' or `purple money' (in implicit opposition to real or `green' money). In New Zealand and Germany the odd usage `paper money' has been recorded; in Germany, the particularly amusing synonym `transfer ruble' commemmorates the funny money used for trade between COMECON countries back when the Soviet Bloc still existed. When your funny money ran out, your account froze and you needed to go to a professor to get more. Fortunately, the plunging cost of timesharing cycles has made this less common. The amounts allocated were almost invariably too small, even for the non-hackers who wanted to slide by with minimum work. In extreme cases, the practice led to small-scale black markets in bootlegged computer accounts. 2. By extension, phantom money or quantity tickets of any kind used as a resource-allocation hack within a system. Antonym: `real money'. furrfu excl. [Usenet; written, only rarely spoken] Written-only equivalent of "Sheesh!"; it is, in fact, "sheesh" modified by rot13. Evolved in mid-1992 as a response to notably silly postings repeating urban myths on the Usenet newsgroup _alt.folklore.urban_, after some posters complained that "Sheesh!" as a response to newbies was being overused. See also FOAF. fuzzball n. [TCP/IP hackers] A DEC LSI-11 running a particular suite of homebrewed software written by Dave Mills and assorted co-conspirators, used in the early 1980s for Internet protocol testbedding and experimentation. These were used as NSFnet backbone sites in its early 56kb-line days; a few were still active on the Internet as late as mid-1993, doing odd jobs such as network time service. = G = G: g-file: gabriel: gag: gang bang: garbage collect: garply: gas: gaseous: Gates's Law: gawble: GC: GCOS: GECOS: gedanken: geef: geek code: geek out: gen: gender mender: General Public Virus: generate: Genius From Mars Technique: gensym: Get a life!: Get a real computer!: GFR: gib: GIFs at 11: gig: giga-: GIGO: gilley: gillion: ginger: GIPS: glark: glass: glass tty: glassfet: glitch: glob: glork: glue: gnarly: GNU: gnubie: GNUMACS: go flatline: go root: go-faster stripes: GoAT: gobble: Godwin's Law: Godzillagram: golden: golf-ball printer: gonk: gonkulator: gonzo: Good Thing: gopher: gopher hole: gorets: gorilla arm: gorp: GOSMACS: Gosperism: gotcha: GPL: GPV: grault: gray goo: Great Renaming: Great Runes: Great Worm: great-wall: Green Book: green bytes: green card: green lightning: green machine: Green's Theorem: greenbar: grep: gribble: grilf: grind: grind crank: gripenet: gritch: grok: gronk: gronk out: gronked: grovel: grue: grunge: gubbish: Guido: guiltware: gumby: gun: gunch: gunpowder chicken: gurfle: guru: guru meditation: gweep: G = G pref.,suff. [SI] See quantifiers. g-file n. [Commodore BBS culture] Any file that is written with the intention of being read by a human rather than a machine, such as the Jargon File, documentation, humor files, hacker lore, and technical materials. This term survives from the nearly forgotten Commodore 64 underground and BBS community. In the early 80s, C-Net had emerged as the most popular C64 BBS software for systems which encouraged messaging (as opposed to file transfer). There were three main options for files: Program files (p-files), which served the same function as `doors' in today's systems, UD files (the user upload/download section), and g-files. Anything that was meant to be read was included in g-files. = gabriel /gay'bree-*l/ n. [for Dick Gabriel, SAIL LISP hacker and volleyball fanatic] An unnecessary (in the opinion of the opponent) stalling tactic, e.g., tying one's shoelaces or combing one's hair repeatedly, asking the time, etc. Also used to refer to the perpetrator of such tactics. Also, `pulling a Gabriel', `Gabriel mode'. = gag vi. Equivalent to choke, but connotes more disgust. "Hey, this is FORTRAN code. No wonder the C compiler gagged." See also barf. gang bang n. The use of large numbers of loosely coupled programmers in an attempt to wedge a great many features into a product in a short time. Though there have been memorable gang bangs (e.g., that over-the-weekend assembler port mentioned in Steven Levy's "Hackers"), most are perpetrated by large companies trying to meet deadlines; the inevitable result is enormous buggy masses of code entirely lacking in orthogonality. When market-driven managers make a list of all the features the competition has and assign one programmer to implement each, the probability of maintaining a coherent (or even functional) design goes infinitesimal. See also firefighting, Mongolian Hordes technique, Conway's Law. garbage collect vi. (also `garbage collection', n.) See GC. garply /gar'plee/ n. [Stanford] Another metasyntactic variable (see foo); once popular among SAIL hackers. = gas [as in `gas chamber'] 1. interj. A term of disgust and hatred, implying that gas should be dispensed in generous quantities, thereby exterminating the source of irritation. "Some loser just reloaded the system for no reason! Gas!" 2. interj. A suggestion that someone or something ought to be flushed out of mercy. "The system's getting wedged every few minutes. Gas!" 3. vt. To flush (sense 1). "You should gas that old crufty software." 4. [IBM] n. Dead space in nonsequentially organized files that was occupied by data that has since been deleted; the compression operation that removes it is called `degassing' (by analogy, perhaps, with the use of the same term in vacuum technology). 5. [IBM] n. Empty space on a disk that has been clandestinely allocated against future need. = gaseous adj. Deserving of being gassed. Disseminated by Geoff Goodfellow while at SRI; became particularly popular after the Moscone-Milk killings in San Francisco, when it was learned that the defendant Dan White (a politician who had supported Proposition 7) would get the gas chamber under Proposition 7 if convicted of first-degree murder (he was eventually convicted of manslaughter). = Gates's Law "The speed of software halves every 18 months." This oft-cited law is an ironic comment on the tendency of software bloat to outpace the every-18-month doubling in hardware caopacity per dollar predicted by Moore's Law. The reference is to Bill Gates; Microsoft is widely considered among the worst if not the worst of the perpetrators of bloat. gawble /gaw'bl/ n. See chawmp. = GC /G-C/ [from LISP terminology; `Garbage Collect'] 1. vt. To clean up and throw away useless things. "I think I'll GC the top of my desk today." When said of files, this is equivalent to GFR. 2. vt. To recycle, reclaim, or put to another use. 3. n. An instantiation of the garbage collector process. `Garbage collection' is computer-science techspeak for a particular class of strategies for dynamically but transparently reallocating computer memory (i.e., without requiring explicit allocation and deallocation by higher-level software). One such strategy involves periodically scanning all the data in memory and determining what is no longer accessible; useless data items are then discarded so that the memory they occupy can be recycled and used for another purpose. Implementations of the LISP language usually use garbage collection. In jargon, the full phrase is sometimes heard but the abbrev GC is more frequently used because it is shorter. Note that there is an ambiguity in usage that has to be resolved by context: "I'm going to garbage-collect my desk" usually means to clean out the drawers, but it could also mean to throw away or recycle the desk itself. GCOS /jee'kohs/ n. A quick-and-dirty clone of System/360 DOS that emerged from GE around 1970; originally called GECOS (the General Electric Comprehensive Operating System). Later kluged to support primitive timesharing and transaction processing. After the buyout of GE's computer division by Honeywell, the name was changed to General Comprehensive Operating System (GCOS). Other OS groups at Honeywell began referring to it as `God's Chosen Operating System', allegedly in reaction to the GCOS crowd's uninformed and snotty attitude about the superiority of their product. All this might be of zero interest, except for two facts: (1) The GCOS people won the political war, and this led in the orphaning and eventual death of Honeywell Multics, and (2) GECOS/GCOS left one permanent mark on Unix. Some early Unix systems at Bell Labs used GCOS machines for print spooling and various other services; the field added to /etc/passwd to carry GCOS ID information was called the `GECOS field' and survives today as the pw_gecos member used for the user's full name and other human-ID information. GCOS later played a major role in keeping Honeywell a dismal also-ran in the mainframe market, and was itself mostly ditched for Unix in the late 1980s when Honeywell began to retire its aging big iron designs. GECOS /jee'kohs/ n. See GCOS. = gedanken /g*-dahn'kn/ adj. Ungrounded; impractical; not well-thought-out; untried; untested. `Gedanken' is a German word for `thought'. A thought experiment is one you carry out in your head. In physics, the term `gedanken experiment' is used to refer to an experiment that is impractical to carry out, but useful to consider because it can be reasoned about theoretically. (A classic gedanken experiment of relativity theory involves thinking about a man in an elevator accelerating through space.) Gedanken experiments are very useful in physics, but must be used with care. It's too easy to idealize away some important aspect of the real world in constructing the `apparatus'. Among hackers, accordingly, the word has a pejorative connotation. It is typically used of a project, especially one in artificial intelligence research, that is written up in grand detail (typically as a Ph.D. thesis) without ever being implemented to any great extent. Such a project is usually perpetrated by people who aren't very good hackers or find programming distasteful or are just in a hurry. A `gedanken thesis' is usually marked by an obvious lack of intuition about what is programmable and what is not, and about what does and does not constitute a clear specification of an algorithm. See also AI-complete, DWIM. G = geef v. [ostensibly from `gefingerpoken'] vt. Syn. mung. See also blinkenlights. geek code n. (also "Code of the Geeks"). A set of codes commonly used in sig blocks to broadcast the interests, skills, and aspirations of the poster. Features a G at the left margin followed by numerous letter codes, often suffixed with plusses or minuses. Because many net users are involved in computer science, the most common prefix is `GCS'. To see a copy of the current code, browse http://www.geekcode.com. Here is a sample geek code (that of Robert Hayden, the code's inventor) from that page: -----BEGIN GEEK CODE BLOCK----- Version: 3.1 GED/J d-- s:++>: a- C++(++++)$ ULUO++ P+>+++ L++ !E---- W+(---) N+++ o+ K+++ w+(---) O- M+$>++ V-- PS++(+++)>$ PE++(+)>$ Y++ PGP++ t- 5+++ X++ R+++>$ tv+ b+ DI+++ D+++ G+++++>$ e++$>++++ h r-- y+** ------END GEEK CODE BLOCK------ The geek code originated in 1993; it was inspired (according to the inventor) by previous "bear", "smurf" and "twink" style-and-sexual-preference codes from lesbian and gay newsgroups. It has in turn spawned imitators; there is now even a "Saturn geek code" for owners of the Saturn car. See also computer geek. geek out vi. To temporarily enter techno-nerd mode while in a non-hackish context, for example at parties held near computer equipment. Especially used when you need to do or say something highly technical and don't have time to explain: "Pardon me while I geek out for a moment." See computer geek; see also propeller head. gen /jen/ n.,v. Short for generate, used frequently in both spoken and written contexts. gender mender n. [common] A cable connector shell with either two male or two female connectors on it, used to correct the mismatches that result when some loser didn't understand the RS232C specification and the distinction between DTE and DCE. Used esp. for RS-232C parts in either the original D-25 or the IBM PC's bogus D-9 format. Also called `gender bender', `gender blender', `sex changer', and even `homosexual adapter;' however, there appears to be some confusion as to whether a `male homosexual adapter' has pins on both sides (is doubly male) or sockets on both sides (connects two males). General Public Virus n. Pejorative name for some versions of the GNU project copyleft or General Public License (GPL), which requires that any tools or apps incorporating copylefted code must be source-distributed on the same anti-proprietary terms as GNU stuff. Thus it is alleged that the copyleft `infects' software generated with GNU tools, which may in turn infect other software that reuses any of its code. The Free Software Foundation's official position as of January 1991 is that copyright law limits the scope of the GPL to "programs textually incorporating significant amounts of GNU code", and that the `infection' is not passed on to third parties unless actual GNU source is transmitted. Nevertheless, widespread suspicion that the copyleft language is `boobytrapped' has caused many developers to avoid using GNU tools and the GPL. Changes in the language of the version 2.0 GPL did not eliminate this problem. generate vt. To produce something according to an algorithm or program or set of rules, or as a (possibly unintended) side effect of the execution of an algorithm or program. The opposite of parse. This term retains its mechanistic connotations (though often humorously) when used of human behavior. "The guy is rational most of the time, but mention nuclear energy around him and he'll generate infinite flamage." Genius From Mars Technique n. [TMRC] A visionary quality which enables one to ignore the standard approach and come up with a totally unexpected new algorithm. An attack on a problem from an offbeat angle that no one has ever thought of before, but that in retrospect makes total sense. Compare grok, zen. gensym /jen'sim/ [from MacLISP for `generated symbol'] 1. v. To invent a new name for something temporary, in such a way that the name is almost certainly not in conflict with one already in use. 2. n. The resulting name. The canonical form of a gensym is `Gnnnn' where nnnn represents a number; any LISP hacker would recognize G0093 (for example) as a gensym. 3. A freshly generated data structure with a gensymmed name. Gensymmed names are useful for storing or uniquely identifying crufties (see cruft). = Get a life! imp. Hacker-standard way of suggesting that the person to whom it is directed has succumbed to terminal geekdom (see computer geek). Often heard on Usenet, esp. as a way of suggesting that the target is taking some obscure issue of theology too seriously. This exhortation was popularized by William Shatner on a 1987 "Saturday Night Live" episode in a speech that ended "Get a life!", but some respondents believe it to have been in use before then. It was certainly in wide use among hackers for years before achieving mainstream currency via the sitcom "Get A Life" in 1990. Get a real computer! imp. Typical hacker response to news that somebody is having trouble getting work done on a system that (a) is single-tasking, (b) has no hard disk, or (c) has an address space smaller than 16 megabytes. This is as of early 1996; note that the threshold for `real computer' rises with time. See bitty box and toy. GFR /G-F-R/ vt. [ITS: from `Grim File Reaper', an ITS and LISP Machine utility] To remove a file or files according to some program-automated or semi-automatic manual procedure, especially one designed to reclaim mass storage space or reduce name-space clutter (the original GFR actually moved files to tape). Often generalized to pieces of data below file level. "I used to have his phone number, but I guess I GFRed it." See also prowler, reaper. Compare GC, which discards only provably worthless stuff. = gib /jib/ 1. vi. To destroy utterly. Like frag, but much more violent and final. "There's no trace left. You definitely gibbed that bug". 2. n. Remnants after total obliteration. Originated first by id software in the game Quake. It's short for giblets (thus pronounced "jib"), and referred to the bloody remains of slain opponents. Eventually the word was verbed, and leaked into general usage afterward. GIFs at 11 [Fidonet] Fidonet alternative to film at 11, especially in echoes (Fidonet topic areas) where uuencoded GIFs are permitted. Other formats, especially JPEG and MPEG, may be referenced instead. gig /jig/ or /gig/ n. [SI] See quantifiers. giga- /ji'ga/ or /gi'ga/ pref. [SI] See quantifiers. = GIGO /gi:'goh/ [acronym] 1. `Garbage In, Garbage Out' -- usually said in response to lusers who complain that a program didn't "do the right thing" when given imperfect input or otherwise mistreated in some way. Also commonly used to describe failures in human decision making due to faulty, incomplete, or imprecise data. 2. `Garbage In, Gospel Out': this more recent expansion is a sardonic comment on the tendency human beings have to put excessive trust in `computerized' data. gilley n. [Usenet] The unit of analogical bogosity. According to its originator, the standard for one gilley was "the act of bogotoficiously comparing the shutting down of 1000 machines for a day with the killing of one person". The milligilley has been found to suffice for most normal conversational exchanges. = gillion /gil'y*n/ or /jil'y*n/ n. [formed from giga- by analogy with mega/million and tera/trillion] 10^9. Same as an American billion or a British `milliard'. How one pronounces this depends on whether one speaks giga- with a hard or soft `g'. = ginger n. See saga. = GIPS /gips/ or /jips/ n. [analogy with MIPS] Giga-Instructions per Second (also possibly `Gillions of Instructions per Second'; see gillion). In 1991, this is used of only a handful of highly parallel machines, but this is expected to change. Compare KIPS. glark /glark/ vt. To figure something out from context. "The System III manuals are pretty poor, but you can generally glark the meaning from context." Interestingly, the word was originally `glork'; the context was "This gubblick contains many nonsklarkish English flutzpahs, but the overall pluggandisp can be glorked [sic] from context" (David Moser, quoted by Douglas Hofstadter in his "Metamagical Themas" column in the January 1981 "Scientific American"). It is conjectured that hacker usage mutated the verb to `glark' because glork was already an established jargon term (some hackers do report using the original term). Compare grok, zen. = glass n. [IBM] Synonym for silicon. = glass tty /glas T-T-Y/ or /glas ti'tee/ n. A terminal that has a display screen but which, because of hardware or software limitations, behaves like a teletype or some other printing terminal, thereby combining the disadvantages of both: like a printing terminal, it can't do fancy display hacks, and like a display terminal, it doesn't produce hard copy. An example is the early `dumb' version of Lear-Siegler ADM 3 (without cursor control). See tube, tty; compare dumb terminal, smart terminal. See "TV Typewriters" (Appendix A) for an interesting true story about a glass tty. glassfet /glas'fet/ n. [by analogy with MOSFET, the acronym for `Metal-Oxide-Semiconductor Field-Effect Transistor'] Syn. firebottle, a humorous way to refer to a vacuum tube. G = glitch /glich/ [very common; from German `glitschig' to slip, via Yiddish `glitshen', to slide or skid] 1. n. A sudden interruption in electric service, sanity, continuity, or program function. Sometimes recoverable. An interruption in electric service is specifically called a `power glitch' (also power hit), of grave concern because it usually crashes all the computers. In jargon, though, a hacker who got to the middle of a sentence and then forgot how he or she intended to complete it might say, "Sorry, I just glitched". 2. vi. To commit a glitch. See gritch. 3. vt. [Stanford] To scroll a display screen, esp. several lines at a time. WAITS terminals used to do this in order to avoid continuous scrolling, which is distracting to the eye. 4. obs. Same as magic cookie, sense 2. All these uses of `glitch' derive from the specific technical meaning the term has in the electronic hardware world, where it is now techspeak. A glitch can occur when the inputs of a circuit change, and the outputs change to some random value for some very brief time before they settle down to the correct value. If another circuit inspects the output at just the wrong time, reading the random value, the results can be very wrong and very hard to debug (a glitch is one of many causes of electronic heisenbugs). = glob /glob/, not /glohb/ v.,n. [Unix; common] To expand special characters in a wildcarded name, or the act of so doing (the action is also called `globbing'). The Unix conventions for filename wildcarding have become sufficiently pervasive that many hackers use some of them in written English, especially in email or news on technical topics. Those commonly encountered include the following: * wildcard for any string (see also UN*X) ? wildcard for any single character (generally read this way only at the beginning or in the middle of a word) [] delimits a wildcard matching any of the enclosed characters {} alternation of comma-separated alternatives; thus, `foo{baz,qux}' would be read as `foobaz' or `fooqux' Some examples: "He said his name was [KC]arl" (expresses ambiguity). "I don't read talk.politics.*" (any of the talk.politics subgroups on Usenet). Other examples are given under the entry for X. Note that glob patterns are similar, but not identical, to those used in regexps. Historical note: The jargon usage derives from glob, the name of a subprogram that expanded wildcards in archaic pre-Bourne versions of the Unix shell. glork /glork/ 1. interj. Term of mild surprise, usually tinged with outrage, as when one attempts to save the results of two hours of editing and finds that the system has just crashed. 2. Used as a name for just about anything. See foo. 3. vt. Similar to glitch, but usually used reflexively. "My program just glorked itself." 4. Syn. for glark, which see. = glue n. Generic term for any interface logic or protocol that connects two component blocks. For example, Blue Glue is IBM's SNA protocol, and hardware designers call anything used to connect large VLSI's or circuit blocks `glue logic'. gnarly /nar'lee/ adj. Both obscure and hairy (sense 1). "Yow! -- the tuned assembler implementation of BitBlt is really gnarly!" From a similar but less specific usage in surfer slang. = GNU /gnoo/, not /noo/ 1. [acronym: `GNU's Not Unix!', see recursive acronym] A Unix-workalike development effort of the Free Software Foundation headed by Richard Stallman. GNU EMACS and the GNU C compiler, two tools designed for this project, have become very popular in hackerdom and elsewhere. The GNU project was designed partly to proselytize for RMS's position that information is community property and all software source should be shared. One of its slogans is "Help stamp out software hoarding!" Though this remains controversial (because it implicitly denies any right of designers to own, assign, and sell the results of their labors), many hackers who disagree with RMS have nevertheless cooperated to produce large amounts of high-quality software for free redistribution under the Free Software Foundation's imprimatur. The GNU project has a web page at http://www.gnu.org. See EMACS, copyleft, General Public Virus, Linux. 2. Noted Unix hacker John Gilmore, founder of Usenet's anarchic alt.* hierarchy. gnubie /noo'bee/ n. Written-only variant of newbie in common use on IRC channels, which implies specifically someone who is new to the Linux/open source/free software world. G = GNUMACS /gnoo'maks/ n. [contraction of `GNU EMACS'] Often-heard abbreviated name for the GNU project's flagship tool, EMACS. Used esp. in contrast with GOSMACS. = go flatline v. [from cyberpunk SF, refers to flattening of EEG traces upon brain-death] (also adjectival `flatlined'). 1. To die, terminate, or fail, esp. irreversibly. In hacker parlance, this is used of machines only, human death being considered somewhat too serious a matter to employ jargon-jokes about. 2. To go completely quiescent; said of machines undergoing controlled shutdown. "You can suffer file damage if you shut down Unix but power off before the system has gone flatline." 3. Of a video tube, to fail by losing vertical scan, so all one sees is a bright horizontal line bisecting the screen. go root vi. [Unix; common] To temporarily enter root mode in order to perform a privileged operation. This use is deprecated in Australia, where v. `root' is a synonym for "fuck". go-faster stripes n. [UK] Syn. chrome. Mainstream in some parts of UK. GoAT // [Usenet] Abbreviation: "Go Away, Troll". See troll. = gobble vt. 1. To consume, usu. used with `up'. "The output spy gobbles characters out of a tty output buffer." 2. To obtain, usu. used with `down'. "I guess I'll gobble down a copy of the documentation tomorrow." See also snarf. Godwin's Law prov. [Usenet] "As a Usenet discussion grows longer, the probability of a comparison involving Nazis or Hitler approaches one." There is a tradition in many groups that, once this occurs, that thread is over, and whoever mentioned the Nazis has automatically lost whatever argument was in progress. Godwin's Law thus practically guarantees the existence of an upper bound on thread length in those groups. However there is also a widely- recognized codicil that any intentional triggering of Godwin's Law in order to invoke its thread-ending effects will be unsuccessful. Godzillagram /god-zil'*-gram/ n. [from Japan's national hero] 1. A network packet that in theory is a broadcast to every machine in the universe. The typical case is an IP datagram whose destination IP address is [255.255.255.255]. Fortunately, few gateways are foolish enough to attempt to implement this case! 2. A network packet of maximum size. An IP Godzillagram has 65,536 octets. Compare super source quench, Christmas tree packet, martian. golden adj. [prob. from folklore's `golden egg'] When used to describe a magnetic medium (e.g., `golden disk', `golden tape'), describes one containing a tested, up-to-spec, ready-to-ship software version. Compare platinum-iridium. G = golf-ball printer n. obs. The IBM 2741, a slow but letter-quality printing device and terminal based on the IBM Selectric typewriter. The `golf ball' was a little spherical frob bearing reversed embossed images of 88 different characters arranged on four parallels of latitude; one could change the font by swapping in a different golf ball. The print element spun and jerked alarmingly in action and when in motion was sometimes described as an `infuriated golf ball'. This was the technology that enabled APL to use a non-EBCDIC, non-ASCII, and in fact completely non-standard character set. This put it 10 years ahead of its time -- where it stayed, firmly rooted, for the next 20, until character displays gave way to programmable bit-mapped devices with the flexibility to support other character sets. gonk /gonk/ vi.,n. 1. To prevaricate or to embellish the truth beyond any reasonable recognition. In German the term is (mythically) `gonken'; in Spanish the verb becomes `gonkar'. "You're gonking me. That story you just told me is a bunch of gonk." In German, for example, "Du gonkst mich" (You're pulling my leg). See also gonkulator. 2. [British] To grab some sleep at an odd time; compare gronk out. gonkulator /gon'kyoo-lay-tr/ n. [common; from the 1960s "Hogan's Heroes" TV series] A pretentious piece of equipment that actually serves no useful purpose. Usually used to describe one's least favorite piece of computer hardware. See gonk. gonzo /gon'zoh/ adj. [from Hunter S. Thompson] 1. With total commitment, total concentration, and a mad sort of panache. (Thompson's original sense.) 2. More loosely: Overwhelming; outrageous; over the top; very large, esp. used of collections of source code, source files, or individual functions. Has some of the connotations of moby and hairy, but without the implication of obscurity or complexity. = Good Thing n.,adj. [very common; often capitalized; always pronounced as if capitalized.] 1. Self-evidently wonderful to anyone in a position to notice: "A language that manages dynamic memory automatically for you is a Good Thing." 2. Something that can't possibly have any ill side-effects and may save considerable grief later: "Removing the self-modifying code from that shared library would be a Good Thing." 3. When said of software tools or libraries, as in "YACC is a Good Thing", specifically connotes that the thing has drastically reduced a programmer's work load. Oppose Bad Thing. gopher n. A type of Internet service first floated around 1991 and obsolesced around 1995 by the World Wide Web. Gopher presents a menuing interface to a tree or graph of links; the links can be to documents, runnable programs, or other gopher menus arbitrarily far across the net. Some claim that the gopher software, which was originally developed at the University of Minnesota, was named after the Minnesota Gophers (a sports team). Others claim the word derives from American slang `gofer' (from "go for", dialectal "go fer"), one whose job is to run and fetch things. Finally, observe that gophers dig long tunnels, and the idea of tunneling through the net to find information was a defining metaphor for the developers. Probably all three things were true, but with the first two coming first and the gopher-tunnel metaphor serendipitously adding flavor and impetus to the project as it developed out of its concept stage. = gopher hole n. 1. Any access to a gopher. 2. [Amateur Packet Radio] The terrestrial analog of a wormhole (sense 2), from which this term was coined. A gopher hole links two amateur packet relays through some non-ham radio medium. gorets /gor'ets/ n. The unknown ur-noun, fill in your own meaning. Found esp. on the Usenet newsgroup _alt.gorets_, which seems to be a running contest to redefine the word by implication in the funniest and most peculiar way, with the understanding that no definition is ever final. [A correspondent from the Former Soviet Union informs me that `gorets' is Russian for `mountain dweller'. Another from France informs me that `goret' is archaic French for a young pig --ESR] Compare frink. = gorilla arm n. The side-effect that destroyed touch-screens as a mainstream input technology despite a promising start in the early 1980s. It seems the designers of all those spiffy touch-menu systems failed to notice that humans aren't designed to hold their arms in front of their faces making small motions. After more than a very few selections, the arm begins to feel sore, cramped, and oversized -- the operator looks like a gorilla while using the touch screen and feels like one afterwards. This is now considered a classic cautionary tale to human-factors designers; "Remember the gorilla arm!" is shorthand for "How is this going to fly in real use?". gorp /gorp/ n. [CMU: perhaps from the canonical hiker's food, Good Old Raisins and Peanuts] Another metasyntactic variable, like foo and bar. GOSMACS /goz'maks/ n. [contraction of `Gosling EMACS'] The first EMACS-in-C implementation, predating but now largely eclipsed by GNUMACS. Originally freeware; a commercial version was modestly popular as `UniPress EMACS' during the 1980s. The author, James Gosling, went on to invent NeWS and the programming language Java; the latter earned him demigod status. = Gosperism /gos'p*r-izm/ n. A hack, invention, or saying due to elder days arch-hacker R. William (Bill) Gosper. This notion merits its own term because there are so many of them. Many of the entries in HAKMEM are Gosperisms; see also life. gotcha n. A misfeature of a system, especially a programming language or environment, that tends to breed bugs or mistakes because it both enticingly easy to invoke and completely unexpected and/or unreasonable in its outcome. For example, a classic gotcha in C is the fact that if (a=b) {code;} is syntactically valid and sometimes even correct. It puts the value of b into a and then executes code if a is non-zero. What the programmer probably meant was if (a==b) {code;}, which executes code if a and b are equal. = GPL /G-P-L/ n. Abbreviation for `General Public License' in widespread use; see copyleft, General Public Virus. Often mis-expanded as `GNU Public License'. GPV /G-P-V/ n. Abbrev. for General Public Virus in widespread use. grault /grawlt/ n. Yet another metasyntactic variable, invented by Mike Gallaher and propagated by the GOSMACS documentation. See corge. gray goo n. A hypothetical substance composed of sagans of sub-micron-sized self-replicating robots programmed to make copies of themselves out of whatever is available. The image that goes with the term is one of the entire biosphere of Earth being eventually converted to robot goo. This is the simplest of the nanotechnology disaster scenarios, easily refuted by arguments from energy requirements and elemental abundances. Compare blue goo. Great Renaming n. The flag day in 1987 on which all of the non-local groups on the Usenet had their names changed from the net.- format to the current multiple-hierarchies scheme. Used esp. in discussing the history of newsgroup names. "The oldest sources group is _comp.sources.misc_; before the Great Renaming, it was _net.sources_." There is a Great Renaming FAQ on the Web. Great Runes n. Uppercase-only text or display messages. Some archaic operating systems still emit these. See also runes, smash case, fold case. There is a widespread legend (repeated by earlier versions of this entry, though tagged as folklore) that the uppercase-only support of various old character codes and I/O equipment was chosen by a religious person in a position of power at the Teletype Company because supporting both upper and lower cases was too expensive and supporting lower case only would have made it impossible to spell `God' correctly. Not true; the upper-case interpretation of teleprinter codes was well established by 1870, long before Teletype was even founded. Great Worm n. The 1988 Internet worm perpetrated by RTM. This is a play on Tolkien (compare elvish, elder days). In the fantasy history of his Middle Earth books, there were dragons powerful enough to lay waste to entire regions; two of these (Scatha and Glaurung) were known as "the Great Worms". This usage expresses the connotation that the RTM crack was a sort of devastating watershed event in hacker history; certainly it did more to make non-hackers nervous about the Internet than anything before or since. great-wall vi.,n. [from SF fandom] A mass expedition to an oriental restaurant, esp. one where food is served family-style and shared. There is a common heuristic about the amount of food to order, expressed as "Get N - 1 entrees"; the value of N, which is the number of people in the group, can be inferred from context (see N). See oriental food, ravs, stir-fried random. Green Book n. 1. One of the three standard PostScript references: "PostScript Language Program Design", bylined `Adobe Systems' (Addison-Wesley, 1988; QA76.73.P67P66 ISBN 0-201-14396-8); see also Red Book, Blue Book, and the White Book (sense 2). 2. Informal name for one of the three standard references on SmallTalk: "Smalltalk-80: Bits of History, Words of Advice", by Glenn Krasner (Addison-Wesley, 1983; QA76.8.S635S58; ISBN 0-201-11669-3) (this, too, is associated with blue and red books). 3. The "X/Open Compatibility Guide", which defines an international standard Unix environment that is a proper superset of POSIX/SVID; also includes descriptions of a standard utility toolkit, systems administrations features, and the like. This grimoire is taken with particular seriousness in Europe. See Purple Book. 4. The IEEE 1003.1 POSIX Operating Systems Interface standard has been dubbed "The Ugly Green Book". 5. Any of the 1992 standards issued by the CCITT's tenth plenary assembly. These include, among other things, the X.400 email standard and the Group 1 through 4 fax standards. See also book titles. green bytes n. (also `green words') 1. Meta-information embedded in a file, such as the length of the file or its name; as opposed to keeping such information in a separate description file or record. The term comes from an IBM user's group meeting (ca. 1962) at which these two approaches were being debated and the diagram of the file on the blackboard had the `green bytes' drawn in green. 2. By extension, the non-data bits in any self-describing format. "A GIF file contains, among other things, green bytes describing the packing method for the image." Compare out-of-band, zigamorph, fence (sense 1). green card n. [after the "IBM System/360 Reference Data" card] A summary of an assembly language, even if the color is not green and not a card. Less frequently used now because of the decrease in the use of assembly language. "I'll go get my green card so I can check the addressing mode for that instruction." The original green card became a yellow card when the System/370 was introduced, and later a yellow booklet. An anecdote from IBM refers to a scene that took place in a programmers' terminal room at Yorktown in 1978. A luser overheard one of the programmers ask another "Do you have a green card?" The other grunted and passed the first a thick yellow booklet. At this point the luser turned a delicate shade of olive and rapidly left the room, never to return. In fall 2000 it was reported from Electronic Data Systems that the green card for 370 machines has been a blue-green booklet since 1989. green lightning n. [IBM] 1. Apparently random flashing streaks on the face of 3278-9 terminals while a new symbol set is being downloaded. This hardware bug was left deliberately unfixed, as some genius within IBM suggested it would let the user know that `something is happening'. That, it certainly does. Later microprocessor-driven IBM color graphics displays were actually programmed to produce green lightning! 2. [proposed] Any bug perverted into an alleged feature by adroit rationalization or marketing. "Motorola calls the CISC cruft in the 88000 architecture `compatibility logic', but I call it green lightning". See also feature (sense 6). green machine n. A computer or peripheral device that has been designed and built to military specifications for field equipment (that is, to withstand mechanical shock, extremes of temperature and humidity, and so forth). Comes from the olive-drab `uniform' paint used for military equipment. Green's Theorem prov. [TMRC] For any story, in any group of people there will be at least one person who has not heard the story. A refinement of the theorem states that there will be exactly one person (if there were more than one, it wouldn't be as bad to re-tell the story). [The name of this theorem is a play on a fundamental theorem in calculus. --ESR] greenbar n. A style of fanfolded continuous-feed paper with alternating green and white bars on it, especially used in old-style line printers. This slang almost certainly dates way back to mainframe days. G = grep /grep/ vi. [from the qed/ed editor idiom g/_re_/p, where _re_ stands for a regular expression, to Globally search for the Regular Expression and Print the lines containing matches to it, via Unix grep(1)] To rapidly scan a file or set of files looking for a particular string or pattern (when browsing through a large set of files, one may speak of `grepping around'). By extension, to look for something by pattern. "Grep the bulletin board for the system backup schedule, would you?" See also vgrep. [It has also been alleged that the source is from the title of a paper "A General Regular Expression Parser" -ESR] gribble n. Random binary data rendered as unreadable text. Noise characters in a data stream are displayed as gribble. Modems with mismatched bitrates usually generate gribble (more specifically, baud barf). Dumping a binary file to the screen is an excellent source of gribble, and (if the bell/speaker is active) headaches. = grilf // n. Girlfriend. Like newsfroup and filk, a typo reincarnated as a new word. Seems to have originated sometime in 1992 on Usenet. [A friend tells me there was a Lloyd Biggle SF novel "Watchers Of The Dark", in which alien species after species goes insane and begins to chant "Grilf! Grilf!". A human detective eventually determines that the word means "Liar!" I hope this has nothing to do with the popularity of the Usenet term. --ESR] = grind vt. 1. [MIT and Berkeley; now rare] To prettify hardcopy of code, especially LISP code, by reindenting lines, printing keywords and comments in distinct fonts (if available), etc. This usage was associated with the MacLISP community and is now rare; prettyprint was and is the generic term for such operations. 2. [Unix] To generate the formatted version of a document from the nroff, troff, TeX, or Scribe source. 3. [common] To run seemingly interminably, esp. (but not necessarily) if performing some tedious and inherently useless task. Similar to crunch or grovel. Grinding has a connotation of using a lot of CPU time, but it is possible to grind a disk, network, etc. See also hog. 4. To make the whole system slow. "Troff really grinds a PDP-11." 5. `grind grind' excl. Roughly, "Isn't the machine slow today!" = grind crank n. // A mythical accessory to a terminal. A crank on the side of a monitor, which when operated makes a zizzing noise and causes the computer to run faster. Usually one does not refer to a grind crank out loud, but merely makes the appropriate gesture and noise. See grind. Historical note: At least one real machine actually had a grind crank -- the R1, a research machine built toward the end of the days of the great vacuum tube computers, in 1959. R1 (also known as `The Rice Institute Computer' (TRIC) and later as `The Rice University Computer' (TRUC)) had a single-step/free-run switch for use when debugging programs. Since single-stepping through a large program was rather tedious, there was also a crank with a cam and gear arrangement that repeatedly pushed the single-step button. This allowed one to `crank' through a lot of code, then slow down to single-step for a bit when you got near the code of interest, poke at some registers using the console typewriter, and then keep on cranking. gripenet n. [IBM] A wry (and thoroughly unofficial) name for IBM's internal VNET system, deriving from its common use by IBMers to voice pointed criticism of IBM management that would be taboo in more formal channels. G = gritch /grich/ [MIT] 1. n. A complaint (often caused by a glitch). 2. vi. To complain. Often verb-doubled: "Gritch gritch". 3. A synonym for glitch (as verb or noun). Interestingly, this word seems to have a separate history from glitch, with which it is often confused. Back in the early 1960s, when `glitch' was strictly a hardware-tech's term of art, the Burton House dorm at M.I.T. maintained a "Gritch Book", a blank volume, into which the residents hand-wrote complaints, suggestions, and witticisms. Previous years' volumes of this tradition were maintained, dating back to antiquity. The word "gritch" was described as a portmanteau of "gripe" and "bitch". Thus, sense 3 above is at least historically incorrect. = grok /grok/, var. /grohk/ vt. [from the novel "Stranger in a Strange Land", by Robert A. Heinlein, where it is a Martian word meaning literally `to drink' and metaphorically `to be one with'] The emphatic form is `grok in fullness'. 1. To understand, usually in a global sense. Connotes intimate and exhaustive knowledge. Contrast zen, which is similar supernal understanding experienced as a single brief flash. See also glark. 2. Used of programs, may connote merely sufficient understanding. "Almost all C compilers grok the void type these days." gronk /gronk/ vt. [popularized by Johnny Hart's comic strip "B.C." but the word apparently predates that] 1. To clear the state of a wedged device and restart it. More severe than `to frob' (sense 2). 2. [TMRC] To cut, sever, smash, or similarly disable. 3. The sound made by many 3.5-inch diskette drives. In particular, the microfloppies on a Commodore Amiga go "grink, gronk". = gronk out vi. To cease functioning. Of people, to go home and go to sleep. "I guess I'll gronk out now; see you all tomorrow." gronked adj. 1. Broken. "The teletype scanner was gronked, so we took the system down." 2. Of people, the condition of feeling very tired or (less commonly) sick. "I've been chasing that bug for 17 hours now and I am thoroughly gronked!" Compare broken, which means about the same as gronk used of hardware, but connotes depression or mental/emotional problems in people. = grovel vi. 1. To work interminably and without apparent progress. Often used transitively with `over' or `through'. "The file scavenger has been groveling through the /usr directories for 10 minutes now." Compare grind and crunch. Emphatic form: `grovel obscenely'. 2. To examine minutely or in complete detail. "The compiler grovels over the entire source program before beginning to translate it." "I grovelled through all the documentation, but I still couldn't find the command I wanted." = grue n. [from archaic English verb for `shudder', as with fear] The grue was originated in the game Zork (Dave Lebling took the name from Jack Vance's "Dying Earth" fantasies) and used in several other Infocom games as a hint that you should perhaps look for a lamp, torch or some type of light source. Wandering into a dark area would cause the game to prompt you, "It is very dark. If you continue you are likely to be eaten by a grue." If you failed to locate a light source within the next couple of moves this would indeed be the case. The grue, according to scholars of the Great Underground Empire, is a sinister, lurking presence in the dark places of the earth. Its favorite diet is either adventurers or enchanters, but its insatiable appetite is tempered by its extreme fear of light. No grues have ever been seen by the light of day, and only a few have been observed in their underground lairs. Of those who have seen grues, few have survived their fearsome jaws to tell the tale. Grues have sharp claws and fangs, and an uncontrollable tendency to slaver and gurgle. They are certainly the most evil-tempered of all creatures; to say they are touchy is a dangerous understatement. "Sour as a grue" is a common expression, even among themselves. All this folklore is widely known among hackers. grunge /gruhnj/ n. 1. That which is grungy, or that which makes it so. 2. [Cambridge] Code which is inaccessible due to changes in other parts of the program. The preferred term in North America is dead code. = gubbish /guhb'*sh/ n. [a portmanteau of `garbage' and `rubbish'; may have originated with SF author Philip K. Dick] Garbage; crap; nonsense. "What is all this gubbish?" The opposite portmanteau `rubbage' is also reported; in fact, it was British slang during the 19th century and appears in Dickens. = Guido /gwee'do/ or /khwee'do/ Without qualification, Guido van Rossum (author of Python). Note that Guido answers to English /gwee'do/ but in Dutch it's /khwee'do/. = guiltware /gilt'weir/ n. 1. A piece of freeware decorated with a message telling one how long and hard the author worked on it and intimating that one is a no-good freeloader if one does not immediately send the poor suffering martyr gobs of money. 2. A piece of shareware that works. gumby /guhm'bee/ n. [from a class of Monty Python characters, poss. with some influence from the 1960s claymation character] 1. An act of minor but conspicuous stupidity, often in `gumby maneuver' or `pull a gumby'. 2. [NRL] n. A bureaucrat, or other technical incompetent who impedes the progress of real work. 3. adj. Relating to things typically associated with people in sense 2. (e.g. "Ran would be writing code, but Richard gave him gumby work that's due on Friday", or, "Dammit! Travel screwed up my plane tickets. I have to go out on gumby patrol.") = gun vt. [ITS, now rare: from the :GUN command] To forcibly terminate a program or job (computer, not career). "Some idiot left a background process running soaking up half the cycles, so I gunned it." Usage: now rare. Compare can, blammo. gunch /guhnch/ vt. [TMRC] To push, prod, or poke at a device that has almost (but not quite) produced the desired result. Implies a threat to mung. = gunpowder chicken n. Same as laser chicken. gurfle /ger'fl/ interj. An expression of shocked disbelief. "He said we have to recode this thing in FORTRAN by next week. Gurfle!" Compare weeble. guru n. [Unix] An expert. Implies not only wizard skill but also a history of being a knowledge resource for others. Less often, used (with a qualifier) for other experts on other systems, as in `VMS guru'. See source of all good bits. = guru meditation n. Amiga equivalent of `panic' in Unix (sometimes just called a `guru' or `guru event'). When the system crashes, a cryptic message of the form "GURU MEDITATION #XXXXXXXX.YYYYYYYY" may appear, indicating what the problem was. An Amiga guru can figure things out from the numbers. Sometimes a guru event must be followed by a Vulcan nerve pinch. This term is (no surprise) an in-joke from the earliest days of the Amiga. An earlier product of the Amiga corporation was a device called a `Joyboard' which was basically a plastic board built onto a joystick-like device; it was sold with a skiing game cartridge for the Atari game machine. It is said that whenever the prototype OS crashed, the system programmer responsible would calm down by concentrating on a solution while sitting cross-legged on a Joyboard trying to keep the board in balance. This position resembled that of a meditating guru. Sadly, the joke was removed fairly early on (but there's a well-known patch to restore it in more recent versions). gweep /gweep/ [WPI] 1. v. To hack, usually at night. At WPI, from 1975 onwards, one who gweeped could often be found at the College Computing Center punching cards or crashing the PDP-10 or, later, the DEC-20. A correspondent who was there at the time opines that the term was originally onomatopoetic, describing the keyclick sound of the Datapoint terminals long connected to the PDP-10. The term has survived the demise of those technologies, however, and was still alive in early 1999. "I'm going to go gweep for a while. See you in the morning." "I gweep from 8 PM till 3 AM during the week." 2. n. One who habitually gweeps in sense 1; a hacker. "He's a hard-core gweep, mumbles code in his sleep." = H = h: ha ha only serious: hack: hack attack: hack mode: hack on: hack together: hack up: hack value: hacked off: hacked up: hacker: hacker ethic: hacker humor: Hackers (the movie): hacking run: Hacking X for Y: Hackintosh: hackish: hackishness: hackitude: hair: hairball: hairy: HAKMEM: hakspek: Halloween Documents: hammer: hamster: HAND: hand cruft: hand-hacking: handle: handle: hand-roll: handshaking: handwave: hang: Hanlon's Razor: happily: haque: hard boot: hardcoded: hardwarily: hardwired: has the X nature: hash bucket: hash collision: hat: HCF: heads down: heartbeat: heatseeker: heavy metal: heavy wizardry: heavyweight: heisenbug: Helen Keller mode: hello sailor!: hello wall!: hello world: hex: hexadecimal: hexit: HHOK: HHOS: hidden flag: high bit: high moby: highly: hing: hired gun: hirsute: HLL: hoarding: hobbit: hog: hole: hollised: holy wars: home box: home machine: home page: honey pot: hook: hop: hose: hosed: hot chat: hot spot: hotlink: house wizard: HP-SUX: HTH: huff: humma: hung: hungry puppy: hungus: hyperspace: hysterical reasons: h [from SF fandom] A method of `marking' common words, i.e., calling attention to the fact that they are being used in a nonstandard, ironic, or humorous way. Originated in the fannish catchphrase "Bheer is the One True Ghod!" from decades ago. H-infix marking of `Ghod' and other words spread into the 1960s counterculture via underground comix, and into early hackerdom either from the counterculture or from SF fandom (the three overlapped heavily at the time). More recently, the h infix has become an expected feature of benchmark names (Dhrystone, Rhealstone, etc.); this is probably patterning on the original Whetstone (the name of a laboratory) but influenced by the fannish/counterculture h infix. ha ha only serious [from SF fandom, orig. as mutation of HHOK, `Ha Ha Only Kidding'] A phrase (often seen abbreviated as HHOS) that aptly captures the flavor of much hacker discourse. Applied especially to parodies, absurdities, and ironic jokes that are both intended and perceived to contain a possibly disquieting amount of truth, or truths that are constructed on in-joke and self-parody. This lexicon contains many examples of ha-ha-only-serious in both form and content. Indeed, the entirety of hacker culture is often perceived as ha-ha-only-serious by hackers themselves; to take it either too lightly or too seriously marks a person as an outsider, a wannabee, or in larval stage. For further enlightenment on this subject, consult any Zen master. See also hacker humor, and AI koans. hack [very common] 1. n. Originally, a quick job that produces what is needed, but not well. 2. n. An incredibly good, and perhaps very time-consuming, piece of work that produces exactly what is needed. 3. vt. To bear emotionally or physically. "I can't hack this heat!" 4. vt. To work on something (typically a program). In an immediate sense: "What are you doing?" "I'm hacking TECO." In a general (time-extended) sense: "What do you do around here?" "I hack TECO." More generally, "I hack `foo'" is roughly equivalent to "`foo' is my major interest (or project)". "I hack solid-state physics." See Hacking X for Y. 5. vt. To pull a prank on. See sense 2 and hacker (sense 5). 6. vi. To interact with a computer in a playful and exploratory rather than goal-directed way. "Whatcha up to?" "Oh, just hacking." 7. n. Short for hacker. 8. See nethack. 9. [MIT] v. To explore the basements, roof ledges, and steam tunnels of a large, institutional building, to the dismay of Physical Plant workers and (since this is usually performed at educational institutions) the Campus Police. This activity has been found to be eerily similar to playing adventure games such as Dungeons and Dragons and Zork. See also vadding. Constructions on this term abound. They include `happy hacking' (a farewell), `how's hacking?' (a friendly greeting among hackers) and `hack, hack' (a fairly content-free but friendly comment, often used as a temporary farewell). For more on this totipotent term see "The Meaning of Hack". See also neat hack, real hack. = hack attack n. [poss. by analogy with `Big Mac Attack' from ads for the McDonald's fast-food chain; the variant `big hack attack' is reported] Nearly synonymous with hacking run, though the latter more strongly implies an all-nighter. hack mode n. 1. What one is in when hacking, of course. 2. More specifically, a Zen-like state of total focus on The Problem that may be achieved when one is hacking (this is why every good hacker is part mystic). Ability to enter such concentration at will correlates strongly with wizardliness; it is one of the most important skills learned during larval stage. Sometimes amplified as `deep hack mode'. Being yanked out of hack mode (see priority interrupt) may be experienced as a physical shock, and the sensation of being in hack mode is more than a little habituating. The intensity of this experience is probably by itself sufficient explanation for the existence of hackers, and explains why many resist being promoted out of positions where they can code. See also cyberspace (sense 2). Some aspects of hacker etiquette will appear quite odd to an observer unaware of the high value placed on hack mode. For example, if someone appears at your door, it is perfectly okay to hold up a hand (without turning one's eyes away from the screen) to avoid being interrupted. One may read, type, and interact with the computer for quite some time before further acknowledging the other's presence (of course, he or she is reciprocally free to leave without a word). The understanding is that you might be in hack mode with a lot of delicate state (sense 2) in your head, and you dare not swap that context out until you have reached a good point to pause. See also juggling eggs. hack on vt. [very common] To hack; implies that the subject is some pre-existing hunk of code that one is evolving, as opposed to something one might hack up. hack together vt. [common] To throw something together so it will work. Unlike `kluge together' or cruft together, this does not necessarily have negative connotations. hack up vt. To hack, but generally implies that the result is a hack in sense 1 (a quick hack). Contrast this with hack on. To `hack up on' implies a quick-and-dirty modification to an existing system. Contrast hacked up; compare kluge up, monkey up, cruft together. hack value n. Often adduced as the reason or motivation for expending effort toward a seemingly useless goal, the point being that the accomplished goal is a hack. For example, MacLISP had features for reading and printing Roman numerals, which were installed purely for hack value. See display hack for one method of computing hack value, but this cannot really be explained, only experienced. As Louis Armstrong once said when asked to explain jazz: "Man, if you gotta ask you'll never know." (Feminists please note Fats Waller's explanation of rhythm: "Lady, if you got to ask, you ain't got it.") hacked off adj. [analogous to `pissed off'] Said of system administrators who have become annoyed, upset, or touchy owing to suspicions that their sites have been or are going to be victimized by crackers, or used for inappropriate, technically illegal, or even overtly criminal activities. For example, having unreadable files in your home directory called `worm', `lockpick', or `goroot' would probably be an effective (as well as impressively obvious and stupid) way to get your sysadmin hacked off at you. It has been pointed out that there is precedent for this usage in U.S. Navy slang, in which officers under discipline are sometimes said to be "in hack" and one may speak of "hacking off the C.O.". hacked up adj. Sufficiently patched, kluged, and tweaked that the surgical scars are beginning to crowd out normal tissue (compare critical mass). Not all programs that are hacked become `hacked up'; if modifications are done with some eye to coherence and continued maintainability, the software may emerge better for the experience. Contrast hack up. hacker n. [originally, someone who makes furniture with an axe] 1. A person who enjoys exploring the details of programmable systems and how to stretch their capabilities, as opposed to most users, who prefer to learn only the minimum necessary. 2. One who programs enthusiastically (even obsessively) or who enjoys programming rather than just theorizing about programming. 3. A person capable of appreciating hack value. 4. A person who is good at programming quickly. 5. An expert at a particular program, or one who frequently does work using it or on it; as in `a Unix hacker'. (Definitions 1 through 5 are correlated, and people who fit them congregate.) 6. An expert or enthusiast of any kind. One might be an astronomy hacker, for example. 7. One who enjoys the intellectual challenge of creatively overcoming or circumventing limitations. 8. [deprecated] A malicious meddler who tries to discover sensitive information by poking around. Hence `password hacker', `network hacker'. The correct term for this sense is cracker. The term `hacker' also tends to connote membership in the global community defined by the net (see the network and Internet address). For discussion of some of the basics of this culture, see the How To Become A Hacker FAQ. It also implies that the person described is seen to subscribe to some version of the hacker ethic (see hacker ethic). It is better to be described as a hacker by others than to describe oneself that way. Hackers consider themselves something of an elite (a meritocracy based on ability), though one to which new members are gladly welcome. There is thus a certain ego satisfaction to be had in identifying yourself as a hacker (but if you claim to be one and are not, you'll quickly be labeled bogus). See also wannabee. This term seems to have been first adopted as a badge in the 1960s by the hacker culture surrounding TMRC and the MIT AI Lab. We have a report that it was used in a sense close to this entry's by teenage radio hams and electronics tinkerers in the mid-1950s. hacker ethic n. 1. The belief that information-sharing is a powerful positive good, and that it is an ethical duty of hackers to share their expertise by writing open-source and facilitating access to information and to computing resources wherever possible. 2. The belief that system-cracking for fun and exploration is ethically OK as long as the cracker commits no theft, vandalism, or breach of confidentiality. Both of these normative ethical principles are widely, but by no means universally, accepted among hackers. Most hackers subscribe to the hacker ethic in sense 1, and many act on it by writing and giving away open-source software. A few go further and assert that all information should be free and any proprietary control of it is bad; this is the philosophy behind the GNU project. Sense 2 is more controversial: some people consider the act of cracking itself to be unethical, like breaking and entering. But the belief that `ethical' cracking excludes destruction at least moderates the behavior of people who see themselves as `benign' crackers (see also samurai). On this view, it may be one of the highest forms of hackerly courtesy to (a) break into a system, and then (b) explain to the sysop, preferably by email from a superuser account, exactly how it was done and how the hole can be plugged -- acting as an unpaid (and unsolicited) tiger team. The most reliable manifestation of either version of the hacker ethic is that almost all hackers are actively willing to share technical tricks, software, and (where possible) computing resources with other hackers. Huge cooperative networks such as Usenet, FidoNet and Internet (see Internet address) can function without central control because of this trait; they both rely on and reinforce a sense of community that may be hackerdom's most valuable intangible asset. hacker humor A distinctive style of shared intellectual humor found among hackers, having the following marked characteristics: 1. Fascination with form-vs.-content jokes, paradoxes, and humor having to do with confusion of metalevels (see meta). One way to make a hacker laugh: hold a red index card in front of him/her with "GREEN" written on it, or vice-versa (note, however, that this is funny only the first time). 2. Elaborate deadpan parodies of large intellectual constructs, such as specifications (see write-only memory), standards documents, language descriptions (see INTERCAL), and even entire scientific theories (see quantum bogodynamics, computron). 3. Jokes that involve screwily precise reasoning from bizarre, ludicrous, or just grossly counter-intuitive premises. 4. Fascination with puns and wordplay. 5. A fondness for apparently mindless humor with subversive currents of intelligence in it -- for example, old Warner Brothers and Rocky & Bullwinkle cartoons, the Marx brothers, the early B-52s, and Monty Python's Flying Circus. Humor that combines this trait with elements of high camp and slapstick is especially favored. 6. References to the symbol-object antinomies and associated ideas in Zen Buddhism and (less often) Taoism. See has the X nature, Discordianism, zen, ha ha only serious, koan, AI koans. See also filk, retrocomputing, and the Portrait of J. Random Hacker in Appendix B. If you have an itchy feeling that all six of these traits are really aspects of one thing that is incredibly difficult to talk about exactly, you are (a) correct and (b) responding like a hacker. These traits are also recognizable (though in a less marked form) throughout science-fiction fandom. Hackers (the movie) n. A notable bomb from 1995. Should have been titled "Crackers", because cracking is what the movie was about. It's understandable that they didn't however; titles redolent of snack food are probably a tough sell in Hollywood. hacking run n. [analogy with `bombing run' or `speed run'] A hack session extended long outside normal working times, especially one longer than 12 hours. May cause you to `change phase the hard way' (see phase). Hacking X for Y n. [ITS] Ritual phrasing of part of the information which ITS made publicly available about each user. This information (the INQUIR record) was a sort of form in which the user could fill out various fields. On display, two of these fields were always combined into a project description of the form "Hacking X for Y" (e.g., "Hacking perceptrons for Minsky"). This form of description became traditional and has since been carried over to other systems with more general facilities for self-advertisement (such as Unix plan files). Hackintosh n. 1. An Apple Lisa that has been hacked into emulating a Macintosh (also called a `Mac XL'). 2. A Macintosh assembled from parts theoretically belonging to different models in the line. hackish /hak'ish/ adj. (also hackishness n.) 1. Said of something that is or involves a hack. 2. Of or pertaining to hackers or the hacker subculture. See also true-hacker. = hackishness n. The quality of being or involving a hack. This term is considered mildly silly. Syn. hackitude. hackitude n. Syn. hackishness; this word is considered sillier. hair n. [back-formation from hairy] The complications that make something hairy. "Decoding TECO commands requires a certain amount of hair." Often seen in the phrase `infinite hair', which connotes extreme complexity. Also in `hairiferous' (tending to promote hair growth): "GNUMACS elisp encourages lusers to write complex editing modes." "Yeah, it's pretty hairiferous all right." (or just: "Hair squared!") hairball n. 1. [Fidonet] A large batch of messages that a store-and-forward network is failing to forward when it should. Often used in the phrase "Fido coughed up a hairball today", meaning that the stuck messages have just come unstuck, producing a flood of mail where there had previously been drought. 2. An unmanageably huge mass of source code. "JWZ thought the Mozilla effort bogged down because the code was a huge hairball." 3. Any large amount of garbage coming out suddenly. "Sendmail is coughing up a hairball, so expect some slowness accessing the Internet." H = hairy adj. 1. Annoyingly complicated. "DWIM is incredibly hairy." 2. Incomprehensible. "DWIM is incredibly hairy." 3. Of people, high-powered, authoritative, rare, expert, and/or incomprehensible. Hard to explain except in context: "He knows this hairy lawyer who says there's nothing to worry about." See also hirsute. A well-known result in topology called the Brouwer Fixed-Point Theorem states that any continuous transformation of a 2-sphere into itself has at least one fixed point. Mathematically literate hackers tend to associate the term `hairy' with the informal version of this theorem; "You can't comb a hairy ball smooth." The adjective `long-haired' is well-attested to have been in slang use among scientists and engineers during the early 1950s; it was equivalent to modern `hairy' senses 1 and 2, and was very likely ancestral to the hackish use. In fact the noun `long-hair' was at the time used to describe a person satisfying sense 3. Both senses probably passed out of use when long hair was adopted as a signature trait by the 1960s counterculture, leaving hackish `hairy' as a sort of stunted mutant relic. In British mainstream use, "hairy" means "dangerous", and consequently, in British programming terms, "hairy" may be used to denote complicated and/or incomprehensible code, but only if that complexity or incomprehesiveness is also considered dangerous. = HAKMEM /hak'mem/ n. MIT AI Memo 239 (February 1972). A legendary collection of neat mathematical and programming hacks contributed by many people at MIT and elsewhere. (The title of the memo really is "HAKMEM", which is a 6-letterism for `hacks memo'.) Some of them are very useful techniques, powerful theorems, or interesting unsolved problems, but most fall into the category of mathematical and computer trivia. Here is a sampling of the entries (with authors), slightly paraphrased: Item 41 (Gene Salamin): There are exactly 23,000 prime numbers less than 2^(18). Item 46 (Rich Schroeppel): The most probable suit distribution in bridge hands is 4-4-3-2, as compared to 4-3-3-3, which is the most evenly distributed. This is because the world likes to have unequal numbers: a thermodynamic effect saying things will not be in the state of lowest energy, but in the state of lowest disordered energy. Item 81 (Rich Schroeppel): Count the magic squares of order 5 (that is, all the 5-by-5 arrangements of the numbers from 1 to 25 such that all rows, columns, and diagonals add up to the same number). There are about 320 million, not counting those that differ only by rotation and reflection. Item 154 (Bill Gosper): The myth that any given programming language is machine independent is easily exploded by computing the sum of powers of 2. If the result loops with period = 1 with sign +, you are on a sign-magnitude machine. If the result loops with period = 1 at -1, you are on a twos-complement machine. If the result loops with period greater than 1, including the beginning, you are on a ones-complement machine. If the result loops with period greater than 1, not including the beginning, your machine isn't binary -- the pattern should tell you the base. If you run out of memory, you are on a string or bignum system. If arithmetic overflow is a fatal error, some fascist pig with a read-only mind is trying to enforce machine independence. But the very ability to trap overflow is machine dependent. By this strategy, consider the universe, or, more precisely, algebra: Let X = the sum of many powers of 2 = ...111111 (base 2). Now add X to itself: X + X = ...111110. Thus, 2X = X - 1, so X = -1. Therefore algebra is run on a machine (the universe) that is two's-complement. Item 174 (Bill Gosper and Stuart Nelson): 21963283741 is the only number such that if you represent it on the PDP-10 as both an integer and a floating-point number, the bit patterns of the two representations are identical. Item 176 (Gosper): The "banana phenomenon" was encountered when processing a character string by taking the last 3 letters typed out, searching for a random occurrence of that sequence in the text, taking the letter following that occurrence, typing it out, and iterating. This ensures that every 4-letter string output occurs in the original. The program typed BANANANANANANANA.... We note an ambiguity in the phrase, "the Nth occurrence of." In one sense, there are five 00's in 0000000000; in another, there are nine. The editing program TECO finds five. Thus it finds only the first ANA in BANANA, and is thus obligated to type N next. By Murphy's Law, there is but one NAN, thus forcing A, and thus a loop. An option to find overlapped instances would be useful, although it would require backing up N - 1 characters before seeking the next N-character string. Note: This last item refers to a Dissociated Press implementation. See also banana problem. HAKMEM also contains some rather more complicated mathematical and technical items, but these examples show some of its fun flavor. An HTML transcription of the entire document is available at http://www.inwap.com/pdp10/hbaker/hakmem/hakmem.html. hakspek /hak'speek/ n. A shorthand method of spelling found on many British academic bulletin boards and talker systems. Syllables and whole words in a sentence are replaced by single ASCII characters the names of which are phonetically similar or equivalent, while multiple letters are usually dropped. Hence, `for' becomes `4'; `two', `too', and `to' become `2'; `ck' becomes `k'. "Before I see you tomorrow" becomes "b4 i c u 2moro". First appeared in London about 1986, and was probably caused by the slowness of available talker systems, which operated on archaic machines with outdated operating systems and no standard methods of communication. Has become rarer since. See also talk mode. Halloween Documents n. A pair of Microsoft internal strategy memoranda leaked to ESR in late 1998 that confirmed everybody's paranoia about the current Evil Empire. These documents praised the technical excellence of Linux and outlined a counterstrategy of attempting to lock in customers by "de-commoditizing" Internet protocols and services. They were extensively cited on the Internet and in the press and proved so embarrassing that Microsoft PR barely said a word in public for six months afterwards. hammer vt. Commonwealth hackish syn. for bang on. = hamster n. 1. [Fairchild] A particularly slick little piece of code that does one thing well; a small, self-contained hack. The image is of a hamster happily spinning its exercise wheel. 2. A tailless mouse; that is, one with an infrared link to a receiver on the machine, as opposed to the conventional cable. 3. [UK] Any item of hardware made by Amstrad, a company famous for its cheap plastic PC-almost-compatibles. = HAND // [Usenet: very common] Abbreviation: Have A Nice Day. Typically used to close a Usenet posting, but also used to informally close emails; often preceded by HTH. = hand cruft vt. [pun on `hand craft'] See cruft, sense 3. hand-hacking n. 1. [rare] The practice of translating hot spots from an HLL into hand-tuned assembler, as opposed to trying to coerce the compiler into generating better code. Both the term and the practice are becoming uncommon. See tune, bum, by hand; syn. with v. cruft. 2. [common] More generally, manual construction or patching of data sets that would normally be generated by a translation utility and interpreted by another program, and aren't really designed to be read or modified by humans. hand-roll v. [from obs. mainstream slang `hand-rolled' in opposition to `ready-made', referring to cigarettes] To perform a normally automated software installation or configuration process by hand; implies that the normal process failed due to bugs in the configurator or was defeated by something exceptional in the local environment. "The worst thing about being a gateway between four different nets is having to hand-roll a new sendmail configuration every time any of them upgrades." handle n. 1. [from CB slang] An electronic pseudonym; a `nom de guerre' intended to conceal the user's true identity. Network and BBS handles function as the same sort of simultaneous concealment and display one finds on Citizen's Band radio, from which the term was adopted. Use of grandiose handles is characteristic of warez d00dz, crackers, weenies, spods, and other lower forms of network life; true hackers travel on their own reputations rather than invented legendry. Compare nick, screen name. 2. A magic cookie, often in the form of a numeric index into some array somewhere, through which you can manipulate an object like a file or window. The form `file handle' is especially common. 3. [Mac] A pointer to a pointer to dynamically-allocated memory; the extra level of indirection allows on-the-fly memory compaction (to cut down on fragmentation) or aging out of unused resources, with minimal impact on the (possibly multiple) parts of the larger program containing references to the allocated memory. Compare snap (to snap a handle would defeat its purpose); see also aliasing bug, dangling pointer. = handshaking n. [very common] Hardware or software activity designed to start or keep two machines or programs in synchronization as they do protocol. Often applied to human activity; thus, a hacker might watch two people in conversation nodding their heads to indicate that they have heard each others' points and say "Oh, they're handshaking!". See also protocol. handwave [poss. from gestures characteristic of stage magicians] 1. v. To gloss over a complex point; to distract a listener; to support a (possibly actually valid) point with blatantly faulty logic. 2. n. The act of handwaving. "Boy, what a handwave!" If someone starts a sentence with "Clearly..." or "Obviously..." or "It is self-evident that...", it is a good bet he is about to handwave (alternatively, use of these constructions in a sarcastic tone before a paraphrase of someone else's argument suggests that it is a handwave). The theory behind this term is that if you wave your hands at the right moment, the listener may be sufficiently distracted to not notice that what you have said is bogus. Failing that, if a listener does object, you might try to dismiss the objection with a wave of your hand. The use of this word is often accompanied by gestures: both hands up, palms forward, swinging the hands in a vertical plane pivoting at the elbows and/or shoulders (depending on the magnitude of the handwave); alternatively, holding the forearms in one position while rotating the hands at the wrist to make them flutter. In context, the gestures alone can suffice as a remark; if a speaker makes an outrageously unsupported assumption, you might simply wave your hands in this way, as an accusation, far more eloquent than words could express, that his logic is faulty. hang v. 1. [very common] To wait for an event that will never occur. "The system is hanging because it can't read from the crashed drive". See wedged, hung. 2. To wait for some event to occur; to hang around until something happens. "The program displays a menu and then hangs until you type a character." Compare block. 3. To attach a peripheral device, esp. in the construction `hang off': "We're going to hang another tape drive off the file server." Implies a device attached with cables, rather than something that is strictly inside the machine's chassis. = Hanlon's Razor prov. A corollary of Finagle's Law, similar to Occam's Razor, that reads "Never attribute to malice that which can be adequately explained by stupidity." The derivation of the Hanlon eponym is not definitely known, but a very similar remark ("You have attributed conditions to villainy that simply result from stupidity.") appears in "Logic of Empire", a classic 1941 SF story by Robert A. Heinlein, who calls it the `devil theory' of sociology. Heinlein's popularity in the hacker culture makes plausible the supposition that `Hanlon' is derived from `Heinlein' by phonetic corruption. A similar epigram has been attributed to William James, but Heinlein more probably got the idea from Alfred Korzybski and other practitioners of General Semantics. Quoted here because it seems to be a particular favorite of hackers, often showing up in sig blocks, fortune cookie files and the login banners of BBS systems and commercial networks. This probably reflects the hacker's daily experience of environments created by well-intentioned but short-sighted people. Compare Sturgeon's Law, Ninety-Ninety Rule. happily adv. Of software, used to emphasize that a program is unaware of some important fact about its environment, either because it has been fooled into believing a lie, or because it doesn't care. The sense of `happy' here is not that of elation, but rather that of blissful ignorance. "The program continues to run, happily unaware that its output is going to /dev/null." Also used to suggest that a program or device would really rather be doing something destructive, and is being given an opportunity to do so. "If you enter an O here instead of a zero, the program will happily erase all your data." Neverheless, use of this term implies a basically benign attitude towards the program: It didn't mean any harm, it was just eager to do its job. We'd like to be angry at it but we shouldn't, we should try to understand it instead. The adjective "cheerfully" is often used in exactly the same way. = haque /hak/ n. [Usenet] Variant spelling of hack, used only for the noun form and connoting an elegant hack. that is a hack in sense 2. = hard boot n. See boot. hardcoded adj. 1. [common] Said of data inserted directly into a program, where it cannot be easily modified, as opposed to data in some profile, resource (see de-rezz sense 2), or environment variable that a user or hacker can easily modify. 2. In C, this is esp. applied to use of a literal instead of a #define macro (see magic number). hardwarily /hard-weir'*-lee/ adv. In a way pertaining to hardware. "The system is hardwarily unreliable." The adjective `hardwary' is not traditionally used, though it has recently been reported from the U.K. See softwarily. hardwired adj. 1. In software, syn. for hardcoded. 2. By extension, anything that is not modifiable, especially in the sense of customizable to one's particular needs or tastes. has the X nature [seems to derive from Zen Buddhist koans of the form "Does an X have the Buddha-nature?"] adj. Common hacker construction for `is an X', used for humorous emphasis. "Anyone who can't even use a program with on-screen help embedded in it truly has the loser nature!" See also the X that can be Y is not the true X. See also mu. hash bucket n. A notional receptacle, a set of which might be used to apportion data items for sorting or lookup purposes. When you look up a name in the phone book (for example), you typically hash it by extracting its first letter; the hash buckets are the alphabetically ordered letter sections. This term is used as techspeak with respect to code that uses actual hash functions; in jargon, it is used for human associative memory as well. Thus, two things `in the same hash bucket' are more difficult to discriminate, and may be confused. "If you hash English words only by length, you get too many common grammar words in the first couple of hash buckets." Compare hash collision. hash collision n. [from the techspeak] (var. `hash clash') When used of people, signifies a confusion in associative memory or imagination, especially a persistent one (see thinko). True story: One of us [ESR] was once on the phone with a friend about to move out to Berkeley. When asked what he expected Berkeley to be like, the friend replied: "Well, I have this mental picture of naked women throwing Molotov cocktails, but I think that's just a collision in my hash tables." Compare hash bucket. hat n. Common (spoken) name for the circumflex (`^', ASCII 1011110) character. See ASCII for other synonyms. HCF /H-C-F/ n. Mnemonic for `Halt and Catch Fire', any of several undocumented and semi-mythical machine instructions with destructive side-effects, supposedly included for test purposes on several well-known architectures going as far back as the IBM 360. The MC6800 microprocessor was the first for which an HCF opcode became widely known. This instruction caused the processor to toggle a subset of the bus lines as rapidly as it could; in some configurations this could actually cause lines to burn up. Compare killer poke. heads down [Sun] adj. Concentrating, usually so heavily and for so long that everything outside the focus area is missed. See also hack mode and larval stage, although this mode is hardly confined to fledgling hackers. heartbeat n. 1. The signal emitted by a Level 2 Ethernet transceiver at the end of every packet to show that the collision-detection circuit is still connected. 2. A periodic synchronization signal used by software or hardware, such as a bus clock or a periodic interrupt. 3. The `natural' oscillation frequency of a computer's clock crystal, before frequency division down to the machine's clock rate. 4. A signal emitted at regular intervals by software to demonstrate that it is still alive. Sometimes hardware is designed to reboot the machine if it stops hearing a heartbeat. See also breath-of-life packet. heatseeker n. [IBM] A customer who can be relied upon to buy, without fail, the latest version of an existing product (not quite the same as a member of the lunatic fringe). A 1993 example of a heatseeker was someone who, owning a 286 PC and Windows 3.0, went out and bought Windows 3.1 (which offers no worthwhile benefits unless you have a 386). If all customers were heatseekers, vast amounts of money could be made by just fixing some of the bugs in each release (n) and selling it to them as release (n+1). Microsoft in fact seems to have mastered this technique. heavy metal n. [Cambridge] Syn. big iron. heavy wizardry n. Code or designs that trade on a particularly intimate knowledge or experience of a particular operating system or language or complex application interface. Distinguished from deep magic, which trades more on arcane theoretical knowledge. Writing device drivers is heavy wizardry; so is interfacing to X (sense 2) without a toolkit. Esp. found in source-code comments of the form "Heavy wizardry begins here". Compare voodoo programming. heavyweight adj. [common] High-overhead; baroque; code-intensive; featureful, but costly. Esp. used of communication protocols, language designs, and any sort of implementation in which maximum generality and/or ease of implementation has been pushed at the expense of mundane considerations such as speed, memory utilization, and startup time. EMACS is a heavyweight editor; X is an extremely heavyweight window system. This term isn't pejorative, but one hacker's heavyweight is another's elephantine and a third's monstrosity. Oppose `lightweight'. Usage: now borders on techspeak, especially in the compound `heavyweight process'. heisenbug /hi:'zen-buhg/ n. [from Heisenberg's Uncertainty Principle in quantum physics] A bug that disappears or alters its behavior when one attempts to probe or isolate it. (This usage is not even particularly fanciful; the use of a debugger sometimes alters a program's operating environment significantly enough that buggy code, such as that which relies on the values of uninitialized memory, behaves quite differently.) Antonym of Bohr bug; see also mandelbug, schroedinbug. In C, nine out of ten heisenbugs result from uninitialized auto variables, fandango on core phenomena (esp. lossage related to corruption of the malloc arena) or errors that smash the stack. Helen Keller mode n. 1. State of a hardware or software system that is deaf, dumb, and blind, i.e., accepting no input and generating no output, usually due to an infinite loop or some other excursion into deep space. (Unfair to the real Helen Keller, whose success at learning speech was triumphant.) See also go flatline, catatonic. 2. On IBM PCs under DOS, refers to a specific failure mode in which a screen saver has kicked in over an ill-behaved application which bypasses the very interrupts the screen saver watches for activity. Your choices are to try to get from the program's current state through a successful save-and-exit without being able to see what you're doing, or to re-boot the machine. This isn't (strictly speaking) a crash. hello sailor! interj. Occasional West Coast equivalent of hello world; seems to have originated at SAIL, later associated with the game Zork (which also included "hello, aviator" and "hello, implementor"). Originally from the traditional hooker's greeting to a swabbie fresh off the boat, of course. The standard response is "Nothing happens here."; of all the Zork/Dungeon games, only in Infocom's Zork 3 is "Hello, Sailor" actually useful (excluding the unique situation where _knowing_ this fact is important in Dungeon...). hello, wall! excl. See wall. hello world interj. 1. The canonical minimal test message in the C/Unix universe. 2. Any of the minimal programs that emit this message. Traditionally, the first program a C coder is supposed to write in a new environment is one that just prints "hello, world" to standard output (and indeed it is the first example program in K&R). Environments that generate an unreasonably large executable for this trivial test or which require a hairy compiler-linker invocation to generate it are considered to lose (see X). 3. Greeting uttered by a hacker making an entrance or requesting information from anyone present. "Hello, world! Is the LAN back up yet?" hex n. 1. Short for hexadecimal, base 16. 2. A 6-pack of anything (compare quad, sense 2). Neither usage has anything to do with magic or black art, though the pun is appreciated and occasionally used by hackers. True story: As a joke, some hackers once offered some surplus ICs for sale to be worn as protective amulets against hostile magic. The chips were, of course, hex inverters. hexadecimal n. Base 16. Coined in the early 1960s to replace earlier `sexadecimal', which was too racy and amusing for stuffy IBM, and later adopted by the rest of the industry. Actually, neither term is etymologically pure. If we take `binary' to be paradigmatic, the most etymologically correct term for base 10, for example, is `denary', which comes from `deni' (ten at a time, ten each), a Latin `distributive' number; the corresponding term for base-16 would be something like `sendenary'. `Decimal' is from an ordinal number; the corresponding prefix for 6 would imply something like `sextidecimal'. The `sexa-' prefix is Latin but incorrect in this context, and `hexa-' is Greek. The word `octal' is similarly incorrect; a correct form would be `octaval' (to go with decimal), or `octonary' (to go with binary). If anyone ever implements a base-3 computer, computer scientists will be faced with the unprecedented dilemma of a choice between two correct forms; both `ternary' and `trinary' have a claim to this throne. hexit /hek'sit/ n. A hexadecimal digit (0-9, and A-F or a-f). Used by people who claim that there are only ten digits, dammit; sixteen-fingered human beings are rather rare, despite what some keyboard designs might seem to imply (see space-cadet keyboard). = HHOK See ha ha only serious. = HHOS See ha ha only serious. hidden flag n. [scientific computation] An extra option added to a routine without changing the calling sequence. For example, instead of adding an explicit input variable to instruct a routine to give extra diagnostic output, the programmer might just add a test for some otherwise meaningless feature of the existing inputs, such as a negative mass. The use of hidden flags can make a program very hard to debug and understand, but is all too common wherever programs are hacked on in a hurry. high bit n. [from `high-order bit'] 1. The most significant bit in a byte. 2. [common] By extension, the most significant part of something other than a data byte: "Spare me the whole saga, just give me the high bit." See also meta bit, hobbit, dread high-bit disease, and compare the mainstream slang `bottom line'. high moby /hi:' mohb'ee/ n. The high half of a 512K PDP-10's physical address space; the other half was of course the low moby. This usage has been generalized in a way that has outlasted the PDP-10; for example, at the 1990 Washington D.C. Area Science Fiction Conclave (Disclave), when a miscommunication resulted in two separate wakes being held in commemoration of the shutdown of MIT's last ITS machines, the one on the upper floor was dubbed the `high moby' and the other the `low moby'. All parties involved grokked this instantly. See moby. highly adv. [scientific computation] The preferred modifier for overstating an understatement. As in: `highly nonoptimal', the worst possible way to do something; `highly nontrivial', either impossible or requiring a major research project; `highly nonlinear', completely erratic and unpredictable; `highly nontechnical', drivel written for lusers, oversimplified to the point of being misleading or incorrect (compare drool-proof paper). In other computing cultures, postfixing of in the extreme might be preferred. = hing // n. [IRC] Fortuitous typo for `hint', now in wide intentional use among players of initgame. Compare newsfroup, filk. hired gun n. A contract programmer, as opposed to a full-time staff member. All the connotations of this term suggested by innumerable spaghetti Westerns are intentional. hirsute adj. Occasionally used humorously as a synonym for hairy. = HLL /H-L-L/ n. [High-Level Language (as opposed to assembler)] Found primarily in email and news rather than speech. Rarely, the variants `VHLL' and `MLL' are found. VHLL stands for `Very-High-Level Language' and is used to describe a bondage-and-discipline language that the speaker happens to like; Prolog and Backus's FP are often called VHLLs. `MLL' stands for `Medium-Level Language' and is sometimes used half-jokingly to describe C, alluding to its `structured-assembler' image. See also languages of choice. hoarding n. See software hoarding. H = hobbit n. 1. [rare] The High Order BIT of a byte; same as the meta bit or high bit. 2. The non-ITS name of vad@ai.mit.edu (*Hobbit*), master of lasers. = hog n.,vt. 1. Favored term to describe programs or hardware that seem to eat far more than their share of a system's resources, esp. those which noticeably degrade interactive response. Not used of programs that are simply extremely large or complex or that are merely painfully slow themselves. More often than not encountered in qualified forms, e.g., `memory hog', `core hog', `hog the processor', `hog the disk'. "A controller that never gives up the I/O bus gets killed after the bus-hog timer expires." 2. Also said of people who use more than their fair share of resources (particularly disk, where it seems that 10% of the people use 90% of the disk, no matter how big the disk is or how many people use it). Of course, once disk hogs fill up one filesystem, they typically find some other new one to infect, claiming to the sysadmin that they have an important new project to complete. hole n. A region in an otherwise flat entity which is not actually present. For example, some Unix filesystems can store large files with holes so that unused regions of the file are never actually stored on disk. (In techspeak, these are referred to as `sparse' files.) As another example, the region of memory in IBM PCs reserved for memory-mapped I/O devices which may not actually be present is called `the I/O hole', since memory-management systems must skip over this area when filling user requests for memory. hollised /hol'ist/ adj. [Usenet: _sci.space_] To be hollised is to have been ordered by one's employer not to post any even remotely job-related material to Usenet (or, by extension, to other Internet media). The original and most notorious case of this involved one Ken Hollis, a Lockheed employee and space-program enthusiast who posted publicly available material on access to Space Shuttle launches to _sci.space_. He was gagged under threat of being fired in 1994 at the behest of NASA public-relations officers. The result was, of course, a huge publicity black eye for NASA. Nevertheless several other NASA contractor employees were subsequently hollised for similar activities. Use of this term carries the strong connotation that the persons doing the gagging are bureaucratic idiots blinded to their own best interests by territorial reflexes. H = holy wars n. [from Usenet, but may predate it; common] n. flame wars over religious issues. The paper by Danny Cohen that popularized the terms big-endian and little-endian in connection with the LSB-first/MSB-first controversy was entitled "On Holy Wars and a Plea for Peace". Great holy wars of the past have included ITS vs. Unix, Unix vs. VMS, BSD Unix vs. USG Unix, C vs. Pascal, C vs. FORTRAN, etc. In the year 2000, popular favorites of the day are KDE vs, GNOME, vim vs. elvis, Linux vs. [Free|Net|Open]BSD. Hardy perennials include EMACS vs. vi, my personal computer vs. everyone else's personal computer, ad nauseam. The characteristic that distinguishes holy wars from normal technical disputes is that in a holy war most of the participants spend their time trying to pass off personal value choices and cultural attachments as objective technical evaluations. This happens precisely because in a true holy war, the actual substantive differences between the sides are relatively minor. See also theology. home box n. A hacker's personal machine, especially one he or she owns. "Yeah? Well, my home box runs a full 4.4 BSD, so there!" home machine n. 1. Syn. home box. 2. The machine that receives your email. These senses might be distinct, for example, for a hacker who owns one computer at home, but reads email at work. home page n. 1. One's personal billboard on the World Wide Web. The term `home page' is perhaps a bit misleading because home directories and physical homes in RL are private, but home pages are designed to be very public. 2. By extension, a WWW repository for information and links related to a project or organization. Compare home box. honey pot n. A box designed to attract crackers so that they can be observed in action. It is usually well isolated from the rest of the network, but has extensive logging (usually network layer, on a different machine). Different from an iron box in that it's purpose is to attract, not merely observe. Sometimes, it is also a defensive network security tactic - you set up an easy-to-crack box so that your real servers don't get messed with. The concept was presented in Cheswick & Bellovin's book "Firewalls and Internet Security". hook n. A software or hardware feature included in order to simplify later additions or changes by a user. For example, a simple program that prints numbers might always print them in base 10, but a more flexible version would let a variable determine what base to use; setting the variable to 5 would make the program print numbers in base 5. The variable is a simple hook. An even more flexible program might examine the variable and treat a value of 16 or less as the base to use, but treat any other number as the address of a user-supplied routine for printing a number. This is a hairy but powerful hook; one can then write a routine to print numbers as Roman numerals, say, or as Hebrew characters, and plug it into the program through the hook. Often the difference between a good program and a superb one is that the latter has useful hooks in judiciously chosen places. Both may do the original job about equally well, but the one with the hooks is much more flexible for future expansion of capabilities (EMACS, for example, is all hooks). The term `user exit' is synonymous but much more formal and less hackish. hop 1. n. [common] One file transmission in a series required to get a file from point A to point B on a store-and-forward network. On such networks (including UUCPNET and FidoNet), an important inter-machine metric is the number of hops in the shortest path between them, which can be more significant than their geographical separation. See bang path. 2. v. [rare] To log in to a remote machine, esp. via rlogin or telnet. "I'll hop over to foovax to FTP that." hose 1. vt. [common] To make non-functional or greatly degraded in performance. "That big ray-tracing program really hoses the system." See hosed. 2. n. A narrow channel through which data flows under pressure. Generally denotes data paths that represent performance bottlenecks. 3. n. Cabling, especially thick Ethernet cable. This is sometimes called `bit hose' or `hosery' (play on `hosiery') or `etherhose'. See also washing machine. hosed adj. Same as down. Used primarily by Unix hackers. Humorous: also implies a condition thought to be relatively easy to reverse. Probably derived from the Canadian slang `hoser' popularized by the Bob and Doug Mackenzie skits on SCTV, but this usage predated SCTV by years in hackerdom (it was certainly already live at CMU in the 1970s). See hose. It is also widely used of people in the mainstream sense of `in an extremely unfortunate situation'. Once upon a time, a Cray that had been experiencing periodic difficulties crashed, and it was announced to have been hosed. It was discovered that the crash was due to the disconnection of some coolant hoses. The problem was corrected, and users were then assured that everything was OK because the system had been rehosed. See also dehose. = hot chat n. Sexually explicit one-on-one chat. See teledildonics. hot spot n. 1. [primarily used by C/Unix programmers, but spreading] It is received wisdom that in most programs, less than 10% of the code eats 90% of the execution time; if one were to graph instruction visits versus code addresses, one would typically see a few huge spikes amidst a lot of low-level noise. Such spikes are called `hot spots' and are good candidates for heavy optimization or hand-hacking. The term is especially used of tight loops and recursions in the code's central algorithm, as opposed to (say) initial set-up costs or large but infrequent I/O operations. See tune, bum, hand-hacking. 2. The active location of a cursor on a bit-map display. "Put the mouse's hot spot on the `ON' widget and click the left button." 3. A screen region that is sensitive to mouse gestures, which trigger some action. World Wide Web pages now provide the canonical examples; WWW browsers present hypertext links as hot spots which, when clicked on, point the browser at another document (these are specifically called hotlinks). 4. In a massively parallel computer with shared memory, the one location that all 10,000 processors are trying to read or write at once (perhaps because they are all doing a busy-wait on the same lock). 5. More generally, any place in a hardware design that turns into a performance bottleneck due to resource contention. hotlink /hot'link/ n. A hot spot on a World Wide Web page; an area, which, when clicked or selected, chases a URL. Also spelled `hot link'. Use of this term focuses on the link's role as an immediate part of your display, as opposed to the timeless sense of logical connection suggested by web pointer. Your screen shows hotlinks but your document has web pointers, not (in normal usage) the other way around. house wizard n. [prob. from ad-agency tradetalk, `house freak'] A hacker occupying a technical-specialist, R&D, or systems position at a commercial shop. A really effective house wizard can have influence out of all proportion to his/her ostensible rank and still not have to wear a suit. Used esp. of Unix wizards. The term `house guru' is equivalent. HP-SUX /H-P suhks/ n. Unflattering hackerism for HP-UX, Hewlett-Packard's Unix port, which features some truly unique bogosities in the filesystem internals and elsewhere (these occasionally create portability problems). HP-UX is often referred to as `hockey-pux' inside HP, and one respondent claims that the proper pronunciation is /H-P ukkkhhhh/ as though one were about to spit. Another such alternate spelling and pronunciation is "H-PUX" /H-puhks/. Hackers at HP/Apollo (the former Apollo Computers which was swallowed by HP in 1989) have been heard to complain that Mr. Packard should have pushed to have his name first, if for no other reason than the greater eloquence of the resulting acronym. Compare AIDX, buglix. See also Nominal Semidestructor, Telerat, ScumOS, sun-stools, Slowlaris. = HTH // [Usenet: very common] Abbreviation: Hope This Helps (e.g. following a response to a technical question). Often used just before HAND. See also YHBT. huff v. To compress data using a Huffman code. Various programs that use such methods have been called `HUFF' or some variant thereof. Oppose puff. Compare crunch, compress. humma // excl. A filler word used on various `chat' and `talk' programs when you had nothing to say but felt that it was important to say something. The word apparently originated (at least with this definition) on the MECC Timeshare System (MTS, a now-defunct educational time-sharing system running in Minnesota during the 1970s and the early 1980s) but was later sighted on early Unix systems. Compare the U.K's wibble. = hung adj. [from `hung up'; common] Equivalent to wedged, but more common at Unix/C sites. Not generally used of people. Syn. with locked up, wedged; compare hosed. See also hang. A hung state is distinguished from crashed or down, where the program or system is also unusable but because it is not running rather than because it is waiting for something. However, the recovery from both situations is often the same. It is also distinguished from the similar but more drastic state wedged - hung software can be woken up with easy things like interrupt keys, but wedged will need a kill -9 or even reboot. = hungry puppy n. Syn. slopsucker. hungus /huhng'g*s/ adj. [perhaps related to slang `humongous'] Large, unwieldy, usually unmanageable. "TCP is a hungus piece of code." "This is a hungus set of modifications." The Infocom text adventure game "Beyond Zork" included two monsters called hunguses. hyperspace /hi:'per-spays/ n. A memory location that is far away from where the program counter should be pointing, especially a place that is inaccessible because it is not even mapped in by the virtual-memory system. "Another core dump -- looks like the program jumped off to hyperspace somehow." (Compare jump off into never-never land.) This usage is from the SF notion of a spaceship jumping `into hyperspace', that is, taking a shortcut through higher-dimensional space -- in other words, bypassing this universe. The variant `east hyperspace' is recorded among CMU and Bliss hackers. hysterical reasons n. (also `hysterical raisins') A variant on the stock phrase "for historical reasons", indicating specifically that something must be done in some stupid way for backwards compatibility, and moreover that the feature it must be compatible with was the result of a bad design in the first place. "All IBM PC video adapters have to support MDA text mode for hysterical reasons." Compare bug-for-bug compatible. = I = I didn't change anything!: I see no X here.: IANAL: IBM: IBM discount: ICBM address: ice: ID10T error: idempotent: IDP: If you want X you know where to find it.: ifdef out: IIRC: ill-behaved: IMHO: Imminent Death Of The Net Predicted!: in the extreme: inc: incantation: include: include war: indent style: index of X: infant mortality: infinite: infinite loop: Infinite-Monkey Theorem: infinity: inflate: Infocom: initgame: insanely great: installfest: INTERCAL: interesting: Internet: Internet address: Internet Death Penalty: Internet Exploder: Internet Exploiter: interrupt: interrupt list: interrupts locked out: intro: IRC: iron: Iron Age: iron box: ironmonger: ISO standard cup of tea: ISP: ITS: IWBNI: IYFEG: I didn't change anything! interj. An aggrieved cry often heard as bugs manifest during a regression test. The canonical reply to this assertion is "Then it works just the same as it did before, doesn't it?" See also one-line fix. This is also heard from applications programmers trying to blame an obvious applications problem on an unrelated systems software change, for example a divide-by-0 fault after terminals were added to a network. Usually, their statement is found to be false. Upon close questioning, they will admit some major restructuring of the program that shouldn't have broken anything, in their opinion, but which actually hosed the code completely. = I see no X here. Hackers (and the interactive computer games they write) traditionally favor this slightly marked usage over other possible equivalents such as "There's no X here!" or "X is missing." or "Where's the X?". This goes back to the original PDP-10 ADVENT, which would respond in this wise if you asked it to do something involving an object not present at your location in the game. IANAL // [Usenet] Abbreviation, "I Am Not A Lawyer". Usually precedes legal advice. = IBM /I-B-M/ Inferior But Marketable; It's Better Manually; Insidious Black Magic; It's Been Malfunctioning; Incontinent Bowel Movement; and a near-infinite number of even less complimentary expansions, including `International Business Machines'. See TLA. These abbreviations illustrate the considerable antipathy most hackers long felt toward the `industry leader' (see fear and loathing). What galled hackers about most IBM machines above the PC level wasn't so much that they were underpowered and overpriced (though that does count against them), but that the designs are incredibly archaic, crufty, and elephantine ... and you can't fix them -- source code is locked up tight, and programming tools are expensive, hard to find, and bletcherous to use once you've found them. For many years, before Microsoft, IBM was the company hackers loved to hate. But everything changes. In the 1980s IBM had its own troubles with Microsoft. In the late 1990s IBM re-invented itself as a services company, began to release open-source software through its AlphaWorks group, and began shipping Linux systems and building ties to the Linux community. To the astonishment of all parties, IBM emerged as a friend of the hacker community This lexicon includes a number of entries attributed to `IBM'; these derive from some rampantly unofficial jargon lists circulated within IBM's own beleaguered hacker underground. IBM discount n. A price increase. Outside IBM, this derives from the common perception that IBM products are generally overpriced (see clone); inside, it is said to spring from a belief that large numbers of IBM employees living in an area cause prices to rise. ICBM address n. (Also `missile address') The form used to register a site with the Usenet mapping project, back before the day of pervasive Internet, included a blank for longitude and latitude, preferably to seconds-of-arc accuracy. This was actually used for generating geographically-correct maps of Usenet links on a plotter; however, it became traditional to refer to this as one's `ICBM address' or `missile address', and some people include it in their sig block with that name. (A real missile address would include target elevation.) ice n. [coined by Usenetter Tom Maddox, popularized by William Gibson's cyberpunk SF novels: a contrived acronym for `Intrusion Countermeasure Electronics'] Security software (in Gibson's novels, software that responds to intrusion by attempting to immobilize or even literally kill the intruder). Hence, `icebreaker': a program designed for cracking security on a system. Neither term is in serious use yet as of early 1999, but many hackers find the metaphor attractive, and each may develop a denotation in the future. In the meantime, the speculative usage could be confused with `ICE', an acronym for "in-circuit emulator". In ironic reference to the speculative usage, however, some hackers and computer scientists formed ICE (International Cryptographic Experiment) in 1994. ICE is a consortium to promote uniform international access to strong cryptography. = ID10T error /I-D-ten-T er'*r/ Synonym for PEBKAC, e.g. "The user is being an idiot". Tech-support people passing a problem report to someone higher up the food chain (and presumably better equipped to deal with idiots) may ask the user to convey that there seems to be an I-D-ten-T error. Users never twig. idempotent adj. [from mathematical techspeak] Acting as if used only once, even if used multiple times. This term is often used with respect to C header files, which contain common definitions and declarations to be included by several source files. If a header file is ever included twice during the same compilation (perhaps due to nested #include files), compilation errors can result unless the header file has protected itself against multiple inclusion; a header file so protected is said to be idempotent. The term can also be used to describe an initialization subroutine that is arranged to perform some critical action exactly once, even if the routine is called several times. IDP /I-D-P/ v.,n. [Usenet] Abbreviation for Internet Death Penalty. Common (probably now more so than the full form), and frequently verbed. Compare UDP. = If you want X, you know where to find it. There is a legend that Dennis Ritchie, inventor of C, once responded to demands for features resembling those of what at the time was a much more popular language by observing "If you want PL/I, you know where to find it." Ever since, this has been hackish standard form for fending off requests to alter a new design to mimic some older (and, by implication, inferior and baroque) one. The case X = Pascal manifests semi-regularly on Usenet's _comp.lang.c_ newsgroup. Indeed, the case X = X has been reported in discussions of graphics software (see X). ifdef out /if'def owt/ v. Syn. for condition out, specific to C. IIRC // Common abbreviation for "If I Recall Correctly". ill-behaved adj. 1. [numerical analysis] Said of an algorithm or computational method that tends to blow up because of accumulated roundoff error or poor convergence properties. 2. Software that bypasses the defined OS interfaces to do things (like screen, keyboard, and disk I/O) itself, often in a way that depends on the hardware of the machine it is running on or which is nonportable or incompatible with other pieces of software. In the IBM PC/MS-DOS world, there is a folk theorem (nearly true) to the effect that (owing to gross inadequacies and performance penalties in the OS interface) all interesting applications are ill-behaved. See also bare metal. Oppose well-behaved, compare PC-ism. See mess-dos. IMHO // abbrev. [from SF fandom via Usenet; abbreviation for `In My Humble Opinion'] "IMHO, mixed-case C names should be avoided, as mistyping something in the wrong case can cause hard-to-detect errors -- and they look too Pascalish anyhow." Also seen in variant forms such as IMNSHO (In My Not-So-Humble Opinion) and IMAO (In My Arrogant Opinion). Imminent Death Of The Net Predicted! prov. [Usenet] Since Usenet first got off the ground in 1980-81, it has grown exponentially, approximately doubling in size every year. On the other hand, most people feel the signal-to-noise ratio of Usenet has dropped steadily. These trends led, as far back as mid-1983, to predictions of the imminent collapse (or death) of the net. Ten years and numerous doublings later, enough of these gloomy prognostications have been confounded that the phrase "Imminent Death Of The Net Predicted!" has become a running joke, hauled out any time someone grumbles about the S/N ratio or the huge and steadily increasing volume, or the possible loss of a key node or link, or the potential for lawsuits when ignoramuses post copyrighted material, etc., etc., etc. I = in the extreme adj. A preferred superlative suffix for many hackish terms. See, for example, `obscure in the extreme' under obscure, and compare highly. inc /ink/ v. Verbal (and only rarely written) shorthand for _increment_, i.e. `increase by one'. Especially used by assembly programmers, as many assembly languages have an inc mnemonic. Antonym: dec (see DEC). incantation n. Any particularly arbitrary or obscure command that one must mutter at a system to attain a desired result. Not used of passwords or other explicit security features. Especially used of tricks that are so poorly documented that they must be learned from a wizard. "This compiler normally locates initialized data in the data segment, but if you mutter the right incantation they will be forced into text space." include vt. [Usenet] 1. To duplicate a portion (or whole) of another's message (typically with attribution to the source) in a reply or followup, for clarifying the context of one's response. See the discussion of inclusion styles under "Hacker Writing Style". 2. [from C] #include <disclaimer.h> has appeared in sig blocks to refer to a notional `standard disclaimer file'. include war n. Excessive multi-leveled inclusion within a discussion thread, a practice that tends to annoy readers. In a forum with high-traffic newsgroups, such as Usenet, this can lead to flames and the urge to start a kill file. indent style n. [C, C++, and Java programmers] The rules one uses to indent code in a readable fashion. There are four major C indent styles, described below; all have the aim of making it easier for the reader to visually track the scope of control constructs. They have been inherited by C++ and Java, which have C-like syntaxes. The significant variable is the placement of { and } with respect to the statement(s) they enclose and to the guard or controlling statement (if, else, for, while, or do) on the block, if any. `K&R style' -- Named after Kernighan & Ritchie, because the examples in K&R are formatted this way. Also called `kernel style' because the Unix kernel is written in it, and the `One True Brace Style' (abbrev. 1TBS) by its partisans. In C code, the body is typically indented by eight spaces (or one tab) per level, as shown here. Four spaces are occasionally seen in C, but in C++ and Java four tends to be the rule rather than the exception. if (<cond>) { <body> } `Allman style' -- Named for Eric Allman, a Berkeley hacker who wrote a lot of the BSD utilities in it (it is sometimes called `BSD style'). Resembles normal indent style in Pascal and Algol. It is the only style other than K&R in widespread use among Java programmers. Basic indent per level shown here is eight spaces, but four (or sometimes three) spaces are generally preferred by C++ and Java programmers. if (<cond>) { <body> } `Whitesmiths style' -- popularized by the examples that came with Whitesmiths C, an early commercial C compiler. Basic indent per level shown here is eight spaces, but four spaces are occasionally seen. if (<cond>) { <body> } `GNU style' -- Used throughout GNU EMACS and the Free Software Foundation code, and just about nowhere else. Indents are always four spaces per level, with { and } halfway between the outer and inner indent levels. if (<cond>) { <body> } Surveys have shown the Allman and Whitesmiths styles to be the most common, with about equal mind shares. K&R/1TBS used to be nearly universal, but is now much less common in C (the opening brace tends to get lost against the right paren of the guard part in an if or while, which is a Bad Thing). Defenders of 1TBS argue that any putative gain in readability is less important than their style's relative economy with vertical space, which enables one to see more code on one's screen at once. The Java Language Specification legislates not only the capitalization of identifiers, but where nouns, adjectives, and verbs should be in method, class, interface, and variable names (section 6.8). While the specification stops short of also standardizing on a bracing style, all source code originating from Sun Laboratories uses the K&R style. This has set a precedent for Java programmers, which most follow. Doubtless these issues will continue to be the subject of holy wars. index of X n. See coefficient of X. infant mortality n. It is common lore among hackers (and in the electronics industry at large; this term is possibly techspeak by now) that the chances of sudden hardware failure drop off exponentially with a machine's time since first use (that is, until the relatively distant time at which enough mechanical wear in I/O devices and thermal-cycling stress in components has accumulated for the machine to start going senile). Up to half of all chip and wire failures happen within a new system's first few weeks; such failures are often referred to as `infant mortality' problems (or, occasionally, as `sudden infant death syndrome'). See bathtub curve, burn-in period. infinite adj. [common] Consisting of a large number of objects; extreme. Used very loosely as in: "This program produces infinite garbage." "He is an infinite loser." The word most likely to follow `infinite', though, is hair. (It has been pointed out that fractals are an excellent example of infinite hair.) These uses are abuses of the word's mathematical meaning. The term `semi-infinite', denoting an immoderately large amount of some resource, is also heard. "This compiler is taking a semi-infinite amount of time to optimize my program." See also semi. I = infinite loop n. One that never terminates (that is, the machine spins or buzzes forever and goes catatonic). There is a standard joke that has been made about each generation's exemplar of the ultra-fast machine: "The Cray-3 is so fast it can execute an infinite loop in under 2 seconds!" Infinite-Monkey Theorem n. "If you put an infinite number of monkeys at typewriters, eventually one will bash out the script for Hamlet." (One may also hypothesize a small number of monkeys and a very long period of time.) This theorem asserts nothing about the intelligence of the one random monkey that eventually comes up with the script (and note that the mob will also type out all the possible incorrect versions of Hamlet). It may be referred to semi-seriously when justifying a brute force method; the implication is that, with enough resources thrown at it, any technical challenge becomes a one-banana problem. This argument gets more respect since Linux justified the bazaar mode of development. This theorem was first popularized by the astronomer Sir Arthur Eddington. It became part of the idiom of techies via the classic SF short story "Inflexible Logic" by Russell Maloney, and many younger hackers know it through a reference in Douglas Adams's "Hitchhiker's Guide to the Galaxy". On 1 April 2000 the usage acquired its own Internet standard, (Infinite Monkey Protocol Suite). infinity n. 1. The largest value that can be represented in a particular type of variable (register, memory location, data type, whatever). 2. `minus infinity': The smallest such value, not necessarily or even usually the simple negation of plus infinity. In N-bit twos-complement arithmetic, infinity is 2^(N-1) - 1 but minus infinity is - (2^(N-1)), not -(2^(N-1) - 1). Note also that this is different from time T equals minus infinity, which is closer to a mathematician's usage of infinity. I = inflate vt. To decompress or puff a file. Rare among Internet hackers, used primarily by MS-DOS/Windows types. = Infocom n. A now-legendary games company, active from 1979 to 1989, that commercialized the MDL parser technology used for Zork to produce a line of text adventure games that remain favorites among hackers. Infocom's games were intelligent, funny, witty, erudite, irreverent, challenging, satirical, and most thoroughly hackish in spirit. The physical game packages from Infocom are now prized collector's items. After being acquired by Activision in 1989 they did a few more "modern" (e.g. graphics-intensive) games which were less successful than reissues of their classics. The software, thankfully, is still extant; Infocom games were written in a kind of P-code and distributed with a P-code interpreter core, and not only freeware emulators for that interpreter but an actual compiler as well have been written to permit the P-code to be run on platforms the games never originally graced. In fact, new games written in this P-code are still bering written. (Emulators that can run Infocom game ZIPs, and new games, are available at ftp://wuarchive.wustl.edu:/doc/misc/if-archive/infocom.) initgame /in-it'gaym/ n. [IRC] An IRC version of the trivia game "Botticelli", in which one user changes his nick to the initials of a famous person or other named entity, and the others on the channel ask yes or no questions, with the one to guess the person getting to be "it" next. As a courtesy, the one picking the initials starts by providing a 4-letter hint of the form sex, nationality, life-status, reality-status. For example, MAAR means "Male, American, Alive, Real" (as opposed to "fictional"). Initgame can be surprisingly addictive. See also hing. [1996 update: a recognizable version of the initgame has become a staple of some radio talk shows in the U.S. We had it first! - ESR] insanely great adj. [Mac community, from Steve Jobs; also BSD Unix people via Bill Joy] Something so incredibly elegant that it is imaginable only to someone possessing the most puissant of hacker-natures. installfest [Linux community since c.1998] Common portmanteau word for "installation festival"; Linux user groups frequently run these. Computer users are invited to bring their machines to have Linux installed on their machines. The idea is to get them painlessly over the biggest hump in migrating to Linux, which is initially installing and configuring it for the user's machine. INTERCAL /in't*r-kal/ n. [said by the authors to stand for `Compiler Language With No Pronounceable Acronym'] A computer language designed by Don Woods and James Lyons in 1972. INTERCAL is purposely different from all other computer languages in all ways but one; it is purely a written language, being totally unspeakable. An excerpt from the INTERCAL Reference Manual will make the style of the language clear: It is a well-known and oft-demonstrated fact that a person whose work is incomprehensible is held in high esteem. For example, if one were to state that the simplest way to store a value of 65536 in a 32-bit INTERCAL variable is: DO :1 <- #0$#256 any sensible programmer would say that that was absurd. Since this is indeed the simplest method, the programmer would be made to look foolish in front of his boss, who would of course have happened to turn up, as bosses are wont to do. The effect would be no less devastating for the programmer having been correct. INTERCAL has many other peculiar features designed to make it even more unspeakable. The Woods-Lyons implementation was actually used by many (well, at least several) people at Princeton. The language has been recently reimplemented as C-INTERCAL and is consequently enjoying an unprecedented level of unpopularity; there is even an _alt.lang.intercal_ newsgroup devoted to the study and ... appreciation of the language on Usenet. Inevitably, INTERCAL has a home page on the Web: http://www.tuxedo.org/~esr/intercal/. An extended version, implemented in (what else?) Perl and adding object-oriented features, is available at http://dd-sh.assurdo.com/INTERCAL. See also Befunge. I = interesting adj. In hacker parlance, this word has strong connotations of `annoying', or `difficult', or both. Hackers relish a challenge, and enjoy wringing all the irony possible out of the ancient Chinese curse "May you live in interesting times". Oppose trivial, uninteresting. Internet n. The mother of all networks. First incarnated beginning in 1969 as the ARPANET, a U.S. Department of Defense research testbed. Though it has been widely believed that the goal was to develop a network architecture for military command-and-control that could survive disruptions up to and including nuclear war, this is a myth; in fact, ARPANET was conceived from the start as a way to get most economical use out of then-scarce large-computer resources. As originally imagined, ARPANET's major use would have been to support what is now called remote login and more sophisticated forms of distributed computing, but the infant technology of electronic mail quickly grew to dominate actual usage. Universities, research labs and defense contractors early discovered the Internet's potential as a medium of communication between humans and linked up in steadily increasing numbers, connecting together a quirky mix of academics, techies, hippies, SF fans, hackers, and anarchists. The roots of this lexicon lie in those early years. Over the next quarter-century the Internet evolved in many ways. The typical machine/OS combination moved from DEC PDP-10s and PDP-20s, running TOPS-10 and TOPS-20, to PDP-11s and VAXes and Suns running Unix, and in the 1990s to Unix on Intel microcomputers. The Internet's protocols grew more capable, most notably in the move from NCP/IP to TCP/IP in 1982 and the implementation of Domain Name Service in 1983. It was around this time that people began referring to the collection of interconnected networks with ARPANET at its core as "the Internet". The ARPANET had a fairly strict set of participation guidelines - connected institutions had to be involved with a DOD-related research project. By the mid-80s, many of the organizations clamoring to join didn't fit this profile. In 1986, the National Science Foundation built NSFnet to open up access to its five regional supercomputing centers; NSFnet became the backbone of the Internet, replacing the original ARPANET pipes (which were formally shut down in 1990). Between 1990 and late 1994 the pieces of NSFnet were sold to major telecommunications companies until the Internet backbone had gone completely commercial. That year, 1994, was also the year the mainstream culture discovered the Internet. Once again, the killer app was not the anticipated one - rather, what caught the public imagination was the hypertext and multimedia features of the World Wide Web. Subsequently the Internet has seen off its only serious challenger (the OSI protocol stack favored by European telecom monopolies) and is in the process of absorbing into itself many of the proprietary networks built during the second wave of wide-area networking after 1980. It is now (1996) a commonplace even in mainstream media to predict that a globally-extended Internet will become the key unifying communications technology of the next century. See also the network and Internet address. I = Internet address n. 1. [techspeak] An absolute network address of the form _foo@bar.baz_, where foo is a user name, bar is a sitename, and baz is a `domain' name, possibly including periods itself. Contrast with bang path; see also the network and network address. All Internet machines and most UUCP sites can now resolve these addresses, thanks to a large amount of behind-the-scenes magic and PD software written since 1980 or so. See also bang path, domainist. 2. More loosely, any network address reachable through Internet; this includes bang path addresses and some internal corporate and government networks. Reading Internet addresses is something of an art. Here are the four most important top-level functional Internet domains followed by a selection of geographical domains: _com_ commercial organizations _edu_ educational institutions _gov_ U.S. government civilian sites _mil_ U.S. military sites Note that most of the sites in the _com_ and _edu_ domains are in the U.S. or Canada. _us_ sites in the U.S. outside the functional domains _su_ sites in the ex-Soviet Union (see kremvax). _uk_ sites in the United Kingdom Within the _us_ domain, there are subdomains for the fifty states, each generally with a name identical to the state's postal abbreviation. Within the _uk_ domain, there is an _ac_ subdomain for academic sites and a _co_ domain for commercial ones. Other top-level domains may be divided up in similar ways. Internet Death Penalty [Usenet] (often abbreviated IDP) The ultimate sanction against spam-emitting sites - complete shunning at the router level of all mail and packets, as well as Usenet messages, from the offending domain(s). Compare Usenet Death Penalty, with which it is sometimes confused. Internet Exploder [very common] Pejorative hackerism for Microsoft's "Internet Explorer" web browser (also "Internet Exploiter"). Compare HP-SUX, AIDX, buglix, Macintrash, Telerat, ScumOS, sun-stools, Slowlaris. Internet Exploiter n. Another common name-of-insult for Internet Explorer, Microsoft's overweight Web Browser; more hostile than Internet Exploder. Reflects widespread hostility to Microsoft and a sense that it is seeking to hijack, monopolize, and corrupt the Internet. Compare Exploder and the less pejorative Netscrape. interrupt 1. [techspeak] n. On a computer, an event that interrupts normal processing and temporarily diverts flow-of-control through an "interrupt handler" routine. See also trap. 2. interj. A request for attention from a hacker. Often explicitly spoken. "Interrupt -- have you seen Joe recently?" See priority interrupt. 3. Under MS-DOS, nearly synonymous with `system call', because the OS and BIOS routines are both called using the INT instruction (see interrupt list) and because programmers so often have to bypass the OS (going directly to a BIOS interrupt) to get reasonable performance. interrupt list n. [MS-DOS] The list of all known software interrupt calls (both documented and undocumented) for IBM PCs and compatibles, maintained and made available for free redistribution by Ralf Brown. As of late 1992, it had grown to approximately two megabytes in length. interrupts locked out adj. When someone is ignoring you. In a restaurant, after several fruitless attempts to get the waitress's attention, a hacker might well observe "She must have interrupts locked out". The synonym `interrupts disabled' is also common. Variations abound; "to have one's interrupt mask bit set" and "interrupts masked out" are also heard. See also spl. intro n. [demoscene] Introductory screen of some production. 2. A short demo, usually showing just one or two screens. 3. Small, usually 64k, 40k or 4k demo. Sizes are generally dictated by compo rules. See also dentro, demo. = IRC /I-R-C/ n. [Internet Relay Chat] A worldwide "party line" network that allows one to converse with others in real time. IRC is structured as a network of Internet servers, each of which accepts connections from client programs, one per user. The IRC community and the Usenet and MUD communities overlap to some extent, including both hackers and regular folks who have discovered the wonders of computer networks. Some Usenet jargon has been adopted on IRC, as have some conventions such as emoticons. There is also a vigorous native jargon, represented in this lexicon by entries marked `[IRC]'. See also talk mode. iron n. Hardware, especially older and larger hardware of mainframe class with big metal cabinets housing relatively low-density electronics (but the term is also used of modern supercomputers). Often in the phrase big iron. Oppose silicon. See also dinosaur. Iron Age n. In the history of computing, 1961-1971 -- the formative era of commercial mainframe technology, when ferrite-core dinosaurs ruled the earth. The Iron Age began, ironically enough, with the delivery of the first minicomputer (the PDP-1) and ended with the introduction of the first commercial microprocessor (the Intel 4004) in 1971. See also Stone Age; compare elder days. iron box n. [Unix/Internet] A special environment set up to trap a cracker logging in over remote connections long enough to be traced. May include a modified shell restricting the cracker's movements in unobvious ways, and `bait' files designed to keep him interested and logged on. See also back door, firewall machine, Venus flytrap, and Clifford Stoll's account in "The Cuckoo's Egg" of how he made and used one (see the Bibliography in Appendix C). Compare padded cell, honey pot. ironmonger n. [IBM] A hardware specialist (derogatory). Compare sandbender, polygon pusher. ISO standard cup of tea n. [South Africa] A cup of tea with milk and one teaspoon of sugar, where the milk is poured into the cup before the tea. Variations are ISO 0, with no sugar; ISO 2, with two spoons of sugar; and so on. This may derive from the "NATO standard" cup of coffee and tea (milk and two sugars), military slang going back to the late 1950s and parodying NATO's relentless bureacratic drive to standardize parts across European and U.S. militaries. Like many ISO standards, this one has a faintly alien ring in North America, where hackers generally shun the decadent British practice of adulterating perfectly good tea with dairy products and prefer instead to add a wedge of lemon, if anything. If one were feeling extremely silly, one might hypothesize an analogous `ANSI standard cup of tea' and wind up with a political situation distressingly similar to several that arise in much more serious technical contexts. (Milk and lemon don't mix very well.) [2000 update: There is now, in fact, a `British Standard BS6008: How to make a standard cup of tea.' - ESR] ISP /I-S-P/ Common abbreviation for Internet Service Provider, a kind of company that barely existed before 1993. ISPs sell Internet access to the mass market. While the big nationwide commercial BBSs with Internet access (like America Online, CompuServe, GEnie, Netcom, etc.) are technically ISPs, the term is usually reserved for local or regional small providers (often run by hackers turned entrepreneurs) who resell Internet access cheaply without themselves being information providers or selling advertising. Compare NSP. ITS /I-T-S/ n. 1. Incompatible Time-sharing System, an influential though highly idiosyncratic operating system written for PDP-6s and PDP-10s at MIT and long used at the MIT AI Lab. Much AI-hacker jargon derives from ITS folklore, and to have been `an ITS hacker' qualifies one instantly as an old-timer of the most venerable sort. ITS pioneered many important innovations, including transparent file sharing between machines and terminal-independent I/O. After about 1982, most actual work was shifted to newer machines, with the remaining ITS boxes run essentially as a hobby and service to the hacker community. The shutdown of the lab's last ITS machine in May 1990 marked the end of an era and sent old-time hackers into mourning nationwide (see high moby). 2. A mythical image of operating-system perfection worshiped by a bizarre, fervent retro-cult of old-time hackers and ex-users (see troglodyte, sense 2). ITS worshipers manage somehow to continue believing that an OS maintained by assembly-language hand-hacking that supported only monocase 6-character filenames in one directory per account remains superior to today's state of commercial art (their venom against Unix is particularly intense). See also holy wars, Weenix. IWBNI // Abbreviation for `It Would Be Nice If'. Compare WIBNI. = IYFEG // [Usenet] Abbreviation for `Insert Your Favorite Ethnic Group'. Used as a meta-name when telling ethnic jokes on the net to avoid offending anyone. See JEDR. = J = J. Random: J. Random Hacker: jack in: jaggies: Java: JCL: JEDR: Jeff K.: jello: jiffy: job security: jock: joe code: jolix: juggling eggs: jump off into never-never land: jupiter: J. Random /J rand'm/ n. [common; generalized from J. Random Hacker] Arbitrary; ordinary; any one; any old. `J. Random' is often prefixed to a noun to make a name out of it. It means roughly `some particular' or `any specific one'. "Would you let J. Random Loser marry your daughter?" The most common uses are `J. Random Hacker', `J. Random Loser', and `J. Random Nerd' ("Should J. Random Loser be allowed to gun down other people?"), but it can be used simply as an elaborate version of random in any sense. J. Random Hacker /J rand'm hak'r/ n. [very common] A mythical figure like the Unknown Soldier; the archetypal hacker nerd. This term is one of the oldest in the jargon, apparently going back to MIT in the 1960s. See random, Suzie COBOL. This may originally have been inspired by `J. Fred Muggs', a show-biz chimpanzee whose name was a household word back in the early days of TMRC, and was probably influenced by `J. Presper Eckert' (one of the co-inventors of the electronic computer). See also Fred Foobar. jack in v. To log on to a machine or connect to a network or BBS, esp. for purposes of entering a virtual reality simulation such as a MUD or IRC (leaving is "jacking out"). This term derives from cyberpunk SF, in which it was used for the act of plugging an electrode set into neural sockets in order to interface the brain directly to a virtual reality. It is primarily used by MUD and IRC fans and younger hackers on BBS systems. J = jaggies /jag'eez/ n. The `stairstep' effect observable when an edge (esp. a linear edge of very shallow or steep slope) is rendered on a pixel device (as opposed to a vector display). = Java An object-oriented language originally developed at Sun by James Gosling (and known by the name "Oak") with the intention of being the successor to C++ (the project was however originally sold to Sun as an embedded language for use in set-top boxes). After the great Internet explosion of 1993-1994, Java was hacked into a byte-interpreted language and became the focus of a relentless hype campaign by Sun, which touted it as the new language of choice for distributed applications. Java is indeed a stronger and cleaner design than C++ and has been embraced by many in the hacker community - but it has been a considerable source of frustration to many others, for reasons ranging from uneven support on different Web browser platforms, performance issues, and some notorious deficiencies of some of the standard toolkits (AWT in particular). Microsoft's determined attempts to corrupt the language (which it rightly sees as a threat to its OS monopoly) have not helped. As of 1999, these issues are still in the process of being resolved. Despite many attractive features and a good design, it is difficult to find people willing to praise Java who have tried to implement a complex, real-world system with it (but to be fair it is early days yet, and no other language has ever been forced to spend its childhood under the limelight the way Java has). On the other hand, Java has already been a big win in academic circles, where it has taken the place of Pascal as the preferred tool for teaching the basics of good programming to the next generation of hackers. JCL /J-C-L/ n. 1. IBM's supremely rude Job Control Language. JCL is the script language used to control the execution of programs in IBM's batch systems. JCL has a very fascist syntax, and some versions will, for example, barf if two spaces appear where it expects one. Most programmers confronted with JCL simply copy a working file (or card deck), changing the file names. Someone who actually understands and generates unique JCL is regarded with the mixed respect one gives to someone who memorizes the phone book. It is reported that hackers at IBM itself sometimes sing "Who's the breeder of the crud that mangles you and me? I-B-M, J-C-L, M-o-u-s-e" to the tune of the "Mickey Mouse Club" theme to express their opinion of the beast. 2. A comparative for any very rude software that a hacker is expected to use. "That's as bad as JCL." As with COBOL, JCL is often used as an archetype of ugliness even by those who haven't experienced it. See also IBM, fear and loathing. A (poorly documented, naturally) shell simulating JCL syntax is available at the Retrocomputing Museum http://www.ccil.org/retro. JEDR // n. Synonymous with IYFEG. At one time, people in the Usenet newsgroup _rec.humor.funny_ tended to use `JEDR' instead of IYFEG or `<ethnic>'; this stemmed from a public attempt to suppress the group once made by a loser with initials JEDR after he was offended by an ethnic joke posted there. (The practice was retconned by the expanding these initials as `Joke Ethnic/Denomination/Race'.) After much sound and fury JEDR faded away; this term appears to be doing likewise. JEDR's only permanent effect on the net.culture was to discredit `sensitivity' arguments for censorship so thoroughly that more recent attempts to raise them have met with immediate and near-universal rejection. Jeff K. The spiritual successor to B1FF and the archetype of script kiddies. Jeff K. is a sixteen-year-old suburbanite who fancies himself a "l33t haX0r", although his knowledge of computers seems to be limited to the procedure for getting Quake up and running. His Web page http://www.somethingawful.com/jeffk features a number of hopelessly naive articles, essays, and rants, all filled with the kind of misspellings, studlycaps, and number-for-letter substitutions endemic to the script kiddie and warez d00dz communities. Jeff's offerings, among other things, include hardware advice (such as "AMD VERSIS PENTIUM" and "HOW TO OVARCLOAK YOUR COMPUTAR"), his own Quake clan (Clan 40 OUNSCE), and his own comic strip (Wacky Fun Computar Comic Jokes). Like B1FF, Jeff K. is (fortunately) a hoax. Jeff K. was created by internet game journalist Richard "Lowtax" Kyanka, whose web site Something Awful (http://www.somethingawful.com) highlights unintentionally humorous news items and Web sites, as a parody of the kind of teenage luser who infests Quake servers, chat rooms, and other places where computer enthusiasts congregate. He is well-recognized in the PC game community and his influence has spread to hacker fora like Slashdot as well. J = jello n. [Usenet: by analogy with spam] A message that is both excessively cross-posted and too frequently posted, as opposed to spam (which is merely too frequently posted) or velveeta (which is merely excessively cross-posted). This term is widely recognized but not commonly used; most people refer to both kinds of abuse or their combination as spam. = jiffy n. 1. The duration of one tick of the system clock on your computer (see tick). Often one AC cycle time (1/60 second in the U.S. and Canada, 1/50 most other places), but more recently 1/100 sec has become common. "The swapper runs every 6 jiffies" means that the virtual memory management routine is executed once for every 6 ticks of the clock, or about ten times a second. 2. Confusingly, the term is sometimes also used for a 1-millisecond wall time interval. 3. Even more confusingly, physicists semi-jokingly use `jiffy' to mean the time required for light to travel one foot in a vacuum, which turns out to be close to one nanosecond. 4. Indeterminate time from a few seconds to forever. "I'll do it in a jiffy" means certainly not now and possibly never. This is a bit contrary to the more widespread use of the word. Oppose nano. See also Real Soon Now. = job security n. When some piece of code is written in a particularly obscure fashion, and no good reason (such as time or space optimization) can be discovered, it is often said that the programmer was attempting to increase his job security (i.e., by making himself indispensable for maintenance). This sour joke seldom has to be said in full; if two hackers are looking over some code together and one points at a section and says "job security", the other one may just nod. jock n. 1. A programmer who is characterized by large and somewhat brute-force programs. See brute force. 2. When modified by another noun, describes a specialist in some particular computing area. The compounds `compiler jock' and `systems jock' seem to be the best-established examples. joe code /joh' kohd`/ n. 1. Code that is overly tense and unmaintainable. "Perl may be a handy program, but if you look at the source, it's complete joe code." 2. Badly written, possibly buggy code. Correspondents wishing to remain anonymous have fingered a particular Joe at the Lawrence Berkeley Laboratory and observed that usage has drifted slightly; the original sobriquet `Joe code' was intended in sense 1. 1994 update: This term has now generalized to `<name> code', used to designate code with distinct characteristics traceable to its author. "This section doesn't check for a NULL return from malloc()! Oh. No wonder! It's Ed code!". Used most often with a programmer who has left the shop and thus is a convenient scapegoat for anything that is wrong with the project. jolix /joh'liks/ n.,adj. 386BSD, the freeware port of the BSD Net/2 release to the Intel i386 architecture by Bill Jolitz, Lynne Greer Jolitz, and friends. Used to differentiate from BSDI's port based on the same source tape, which used to be called BSD/386 and is now BSD/OS. See BSD. = juggling eggs vi. Keeping a lot of state in your head while modifying a program. "Don't bother me now, I'm juggling eggs", means that an interrupt is likely to result in the program's being scrambled. In the classic 1975 first-contact SF novel "The Mote in God's Eye", by Larry Niven and Jerry Pournelle, an alien describes a very difficult task by saying "We juggle priceless eggs in variable gravity." See also hack mode and on the gripping hand. jump off into never-never land v. [from J. M. Barrie's "Peter Pan"] Same as branch to Fishkill, but more common in technical cultures associated with non-IBM computers that use the term `jump' rather than `branch'. Compare hyperspace. = jupiter vt. [IRC] To kill an IRC bot or user and then take its place by adopting its nick so that it cannot reconnect. Named after a particular IRC user who did this to NickServ, the robot in charge of preventing people from inadvertently using a nick claimed by another user. Now commonly shortened to `jupe'. = K = K: K&R: k-: kahuna: kamikaze packet: kangaroo code: ken: kernel-of-the-week club: kgbvax: KIBO: kiboze: kibozo: kick: kill file: killer app: killer micro: killer poke: kilo-: KIPS: KISS Principle: kit: klone: kludge: kluge: kluge around: kluge up: Knights of the Lambda Calculus: knobs: Knuth: koan: kremvax: kyrka: = K /K/ n. [from kilo-] A kilobyte. Used both as a spoken word and a written suffix (like meg and gig for megabyte and gigabyte). See quantifiers. K&R [Kernighan and Ritchie] n. Brian Kernighan and Dennis Ritchie's book "The C Programming Language", esp. the classic and influential first edition (Prentice-Hall 1978; ISBN 0-13-110163-3). Syn. White Book, Old Testament. See also New Testament. = k- pref. [rare; poss fr. `kilo-' prefix] Extremely. Rare among hackers, but quite common among crackers and warez d00dz in compounds such as `k-kool' /K'kool'/, `k-rad' /K'rad'/, and `k-awesome' /K'aw`sm/. Also used to intensify negatives; thus, `k-evil', `k-lame', `k-screwed', and `k-annoying'. Overuse of this prefix, or use in more formal or technical contexts, is considered an indicator of lamer status. kahuna /k*-hoo'n*/ n. [IBM: from the Hawaiian title for a shaman] Synonym for wizard, guru. kamikaze packet n. The `official' jargon for what is more commonly called a Christmas tree packet. RFC-1025, "TCP and IP Bake Off" says: 10 points for correctly being able to process a "Kamikaze" packet (AKA nastygram, christmas tree packet, lamp test segment, et al.). That is, correctly handle a segment with the maximum combination of features at once (e.g., a SYN URG PUSH FIN segment with options and data). See also Chernobyl packet. kangaroo code n. Syn. spaghetti code. ken /ken/ n. 1. [Unix] Ken Thompson, principal inventor of Unix. In the early days he used to hand-cut distribution tapes, often with a note that read "Love, ken". Old-timers still use his first name (sometimes uncapitalized, because it's a login name and mail address) in third-person reference; it is widely understood (on Usenet, in particular) that without a last name `Ken' refers only to Ken Thompson. Similarly, Dennis without last name means Dennis Ritchie (and he is often known as _dmr_). See also demigod, Unix. 2. A flaming user. This was originated by the Software Support group at Symbolics because the two greatest flamers in the user community were both named Ken. kernel-of-the-week club The fictional society that BSD bigots claim [Linux] users belong to, alluding to the release-early-release-often style preferred by the kernel maintainers. See bazaar. This was almost certainly inspired by the earlier bug-of-the-month club. kgbvax /K-G-B'vaks/ n. See kremvax. = KIBO /ki:'boh/ 1. [acronym] Knowledge In, Bullshit Out. A summary of what happens whenever valid data is passed through an organization (or person) that deliberately or accidentally disregards or ignores its significance. Consider, for example, what an advertising campaign can do with a product's actual specifications. Compare GIGO; see also SNAFU principle. 2. James Parry <kibo@world.std.com>, a Usenetter infamous for various surrealist net.pranks and an uncanny, machine-assisted knack for joining any thread in which his nom de guerre is mentioned. He has a website at http://www.kibo.com/. kiboze v. [Usenet] To grep the Usenet news for a string, especially with the intention of posting a follow-up. This activity was popularised by Kibo (see KIBO, sense 2). = kibozo /ki:-boh'zoh/ n. [Usenet] One who kibozes but is not Kibo (see KIBO, sense 2). = kick v. 1. [IRC] To cause somebody to be removed from a IRC channel, an option only available to channel ops. This is an extreme measure, often used to combat extreme flamage or flooding, but sometimes used at the CHOP's whim. Compare gun. 2. To reboot a machine or kill a running process. "The server's down, let me go kick it." = kill file n. [Usenet; very common] (alt. `KILL file') Per-user file(s) used by some Usenet reading programs (originally Larry Wall's rn(1)) to discard summarily (without presenting for reading) articles matching some particularly uninteresting (or unwanted) patterns of subject, author, or other header lines. Thus to add a person (or subject) to one's kill file is to arrange for that person to be ignored by one's newsreader in future. By extension, it may be used for a decision to ignore the person or subject in other media. See also plonk. killer app The application that actually makes a sustaining market for a promising but under-utilized technology. First used in the mid-1980s to describe Lotus 1-2-3 once it became evident that demand for that product had been the major driver of the early business market for IBM PCs. The term was then restrospectively applied to VisiCalc, which had played a similar role in the success of the Apple II. After 1994 it became commonplace to describe the World Wide Web as the Internet's killer app. One of the standard questions asked about each new personal-computer technology as it emerges has become "what's the killer app?" killer micro n. [popularized by Eugene Brooks] A microprocessor-based machine that infringes on mini, mainframe, or supercomputer performance turf. Often heard in "No one will survive the attack of the killer micros!", the battle cry of the downsizers. Used esp. of RISC architectures. The popularity of the phrase `attack of the killer micros' is doubtless reinforced by the title of the movie "Attack Of The Killer Tomatoes" (one of the canonical examples of so-bad-it's-wonderful among hackers). This has even more flavor now that killer micros have gone on the offensive not just individually (in workstations) but in hordes (within massively parallel computers). [1996 update: Eugene Brooks was right. Since this term first entered the Jargon File in 1990, the minicomputer has effectively vanished, the mainframe sector is in deep and apparently terminal decline (with IBM but a shadow of its former self), and even the supercomputer business has contracted into a smaller niche. It's networked killer micros as far as the eye can see. --ESR] killer poke n. A recipe for inducing hardware damage on a machine via insertion of invalid values (see poke) into a memory-mapped control register; used esp. of various fairly well-known tricks on bitty boxes without hardware memory management (such as the IBM PC and Commodore PET) that can overload and trash analog electronics in the monitor. See also HCF. kilo- pref. [SI] See quantifiers. KIPS /kips/ n. [abbreviation, by analogy with MIPS using K] Thousands (not 1024s) of Instructions Per Second. Usage: rare. KISS Principle /kis' prin'si-pl/ n. "Keep It Simple, Stupid". A maxim often invoked when discussing design to fend off creeping featurism and control development complexity. Possibly related to the marketroid maxim on sales presentations, "Keep It Short and Simple". kit n. [Usenet; poss. fr. DEC slang for a full software distribution, as opposed to a patch or upgrade] A source software distribution that has been packaged in such a way that it can (theoretically) be unpacked and installed according to a series of steps using only standard Unix tools, and entirely documented by some reasonable chain of references from the top-level README file. The more general term distribution may imply that special tools or more stringent conditions on the host environment are required. klone /klohn/ n. See clone, sense 4. = kludge 1. /klooj/ n. Incorrect (though regrettably common) spelling of kluge (US). These two words have been confused in American usage since the early 1960s, and widely confounded in Great Britain since the end of World War II. 2. [TMRC] A crock that works. (A long-ago "Datamation" article by Jackson Granholme similarly said: "An ill-assorted collection of poorly matching parts, forming a distressing whole.") 3. v. To use a kludge to get around a problem. "I've kludged around it for now, but I'll fix it up properly later." This word appears to have derived from Scots `kludge' or `kludgie' for a common toilet, via British military slang. It apparently became confused with U.S. kluge during or after World War II; some Britons from that era use both words in definably different ways, but kluge is now uncommon in Great Britain. `Kludge' in Commonwealth hackish differs in meaning from `kluge' in that it lacks the positive senses; a kludge is something no Commonwealth hacker wants to be associated too closely with. Also, `kludge' is more widely known in British mainstream slang than `kluge' is in the U.S. K = kluge /klooj/ [from the German `klug', clever; poss. related to Polish `klucz' (a key, a hint, a main point)] 1. n. A Rube Goldberg (or Heath Robinson) device, whether in hardware or software. 2. n. A clever programming trick intended to solve a particular nasty case in an expedient, if not clear, manner. Often used to repair bugs. Often involves ad-hockery and verges on being a crock. 3. n. Something that works for the wrong reason. 4. vt. To insert a kluge into a program. "I've kluged this routine to get around that weird bug, but there's probably a better way." 5. [WPI] n. A feature that is implemented in a rude manner. Nowadays this term is often encountered in the variant spelling `kludge'. Reports from old farts are consistent that `kluge' was the original spelling, reported around computers as far back as the mid-1950s and, at that time, used exclusively of hardware kluges. In 1947, the "New York Folklore Quarterly" reported a classic shaggy-dog story `Murgatroyd the Kluge Maker' then current in the Armed Forces, in which a `kluge' was a complex and puzzling artifact with a trivial function. Other sources report that `kluge' was common Navy slang in the WWII era for any piece of electronics that worked well on shore but consistently failed at sea. However, there is reason to believe this slang use may be a decade older. Several respondents have connected it to the brand name of a device called a "Kluge paper feeder", an adjunct to mechanical printing presses. Legend has it that the Kluge feeder was designed before small, cheap electric motors and control electronics; it relied on a fiendishly complex assortment of cams, belts, and linkages to both power and synchronize all its operations from one motive driveshaft. It was accordingly temperamental, subject to frequent breakdowns, and devilishly difficult to repair -- but oh, so clever! People who tell this story also aver that `Kluge' was the name of a design engineer. There is in fact a Brandtjen & Kluge Inc., an old family business that manufactures printing equipment - interestingly, their name is pronounced /kloo'gee/! Henry Brandtjen, president of the firm, told me (ESR, 1994) that his company was co-founded by his father and an engineer named Kluge /kloo'gee/, who built and co-designed the original Kluge automatic feeder in 1919. Mr. Brandtjen claims, however, that this was a simple device (with only four cams); he says he has no idea how the myth of its complexity took hold. TMRC and the MIT hacker culture of the early '60s seems to have developed in a milieu that remembered and still used some WWII military slang (see also foobar). It seems likely that `kluge' came to MIT via alumni of the many military electronics projects that had been located in Cambridge (many in MIT's venerable Building 20, in which TMRC is also located) during the war. The variant `kludge' was apparently popularized by the Datamation article mentioned above; it was titled "How to Design a Kludge" (February 1962, pp. 30, 31). This spelling was probably imported from Great Britain, where kludge has an independent history (though this fact was largely unknown to hackers on either side of the Atlantic before a mid-1993 debate in the Usenet group _alt.folklore.computers_ over the First and Second Edition versions of this entry; everybody used to think kludge was just a mutation of kluge). It now appears that the British, having forgotten the etymology of their own `kludge' when `kluge' crossed the Atlantic, repaid the U.S. by lobbing the `kludge' orthography in the other direction and confusing their American cousins' spelling! The result of this history is a tangle. Many younger U.S. hackers pronounce the word as /klooj/ but spell it, incorrectly for its meaning and pronunciation, as `kludge'. (Phonetically, consider huge, refuge, centrifuge, and deluge as opposed to sludge, judge, budge, and fudge. Whatever its failings in other areas, English spelling is perfectly consistent about this distinction.) British hackers mostly learned /kluhj/ orally, use it in a restricted negative sense and are at least consistent. European hackers have mostly learned the word from written American sources and tend to pronounce it /kluhj/ but use the wider American meaning! Some observers consider this mess appropriate in view of the word's meaning. kluge around vt. To avoid a bug or difficult condition by inserting a kluge. Compare workaround. kluge up vt. To lash together a quick hack to perform a task; this is milder than cruft together and has some of the connotations of hack up (note, however, that the construction `kluge on' corresponding to hack on is never used). "I've kluged up this routine to dump the buffer contents to a safe place." Knights of the Lambda Calculus n. A semi-mythical organization of wizardly LISP and Scheme hackers. The name refers to a mathematical formalism invented by Alonzo Church, with which LISP is intimately connected. There is no enrollment list and the criteria for induction are unclear, but one well-known LISPer has been known to give out buttons and, in general, the members know who they are.... knobs pl.n. Configurable options, even in software and even those you can't adjust in real time. Anything you can twiddle is a knob. "Has this PNG viewer got an alpha knob?" Software may be described as having "knobs and switches" or occasionally "knobs and lights". = Knuth /ka-nooth'/ n. [Donald E. Knuth's "The Art of Computer Programming"] Mythically, the reference that answers all questions about data structures or algorithms. A safe answer when you do not know: "I think you can find that in Knuth." Contrast the literature. See also bible. There is a Donald Knuth home page at http://www-cs-faculty.Stanford.EDU/~knuth. = koan /koh'an/ n. A Zen teaching riddle. Classically, koans are attractive paradoxes to be meditated on; their purpose is to help one to enlightenment by temporarily jamming normal cognitive processing so that something more interesting can happen (this practice is associated with Rinzei Zen Buddhism). Hackers are very fond of the koan form and compose their own koans for humororous and/or enlightening effect. See Some AI Koans, has the X nature, hacker humor. kremvax /krem-vaks/ n. [from the then large number of Usenet VAXen with names of the form _foovax_] Originally, a fictitious Usenet site at the Kremlin, announced on April 1, 1984 in a posting ostensibly originated there by Soviet leader Konstantin Chernenko. The posting was actually forged by Piet Beertema as an April Fool's joke. Other fictitious sites mentioned in the hoax were _moskvax_ and kgbvax. This was probably the funniest of the many April Fool's forgeries perpetrated on Usenet (which has negligible security against them), because the notion that Usenet might ever penetrate the Iron Curtain seemed so totally absurd at the time. In fact, it was only six years later that the first genuine site in Moscow, _demos.su_, joined Usenet. Some readers needed convincing that the postings from it weren't just another prank. Vadim Antonov, senior programmer at Demos and the major poster from there up to mid-1991, was quite aware of all this, referred to it frequently in his own postings, and at one point twitted some credulous readers by blandly asserting that he was a hoax! Eventually he even arranged to have the domain's gateway site named _kremvax_, thus neatly turning fiction into fact and demonstrating that the hackish sense of humor transcends cultural barriers. [Mr. Antonov also contributed the Russian-language material for this lexicon. --ESR] In an even more ironic historical footnote, _kremvax_ became an electronic center of the anti-communist resistance during the bungled hard-line coup of August 1991. During those three days the Soviet UUCP network centered on _kremvax_ became the only trustworthy news source for many places within the USSR. Though the sysops were concentrating on internal communications, cross-border postings included immediate transliterations of Boris Yeltsin's decrees condemning the coup and eyewitness reports of the demonstrations in Moscow's streets. In those hours, years of speculation that totalitarianism would prove unable to maintain its grip on politically-loaded information in the age of computer networking were proved devastatingly accurate -- and the original _kremvax_ joke became a reality as Yeltsin and the new Russian revolutionaries of `glasnost' and `perestroika' made _kremvax_ one of the timeliest means of their outreach to the West. = kyrka /chur'ka/ n. [Swedish] See feature key. = L = lace card: lag: lamer: language lawyer: languages of choice: LART: larval stage: lase: laser chicken: lasherism: laundromat: LDB: leaf site: leak: leaky heap: leapfrog attack: leech: leech mode: legal: legalese: LER: LERP: let the smoke out: letterbomb: lexer: lexiphage: life: Life is hard: light pipe: lightweight: like kicking dead whales down the beach: like nailing jelly to a tree: line 666: line eater the: line noise: line starve: linearithmic: link farm: link rot: link-dead: lint: Lintel: Linus: Linux: lion food: Lions Book: LISP: list-bomb: lithium lick: little-endian: live: live data: Live Free Or Die!: livelock: liveware: lobotomy: locals the: locked and loaded: locked up: logic bomb: logical: loop through: loose bytes: lord high fixer: lose: lose lose: loser: losing: loss: lossage: lost in the noise: lost in the underflow: lots of MIPS but no I/O: low-bandwidth: LPT: Lubarsky's Law of Cybernetic Entomology: Lumber Cartel: lunatic fringe: lurker: luser: = lace card n. obs. A punched card with all holes punched (also called a `whoopee card' or `ventilator card'). Card readers tended to jam when they got to one of these, as the resulting card had too little structural strength to avoid buckling inside the mechanism. Card punches could also jam trying to produce these things owing to power-supply problems. When some practical joker fed a lace card through the reader, you needed to clear the jam with a `card knife' -- which you used on the joker first. lag n. [MUD, IRC; very common] When used without qualification this is synomous with netlag. Curiously, people will often complain "I'm really lagged" when in fact it is their server or network connection that is lagging. lamer n. [prob. originated in skateboarder slang] 1. Synonym for luser, not used much by hackers but common among warez d00dz, crackers, and phreakers. A person who downloads much, but who never uploads. (Also known as `leecher'). Oppose elite. Has the same connotations of self-conscious elitism that use of luser does among hackers. 2. Someone who tries to crack a BBS. 3. Someone who annoys the sysop or other BBS users - for instance, by posting lots of silly messages, uploading virus-ridden software, frequently dropping carrier, etc. Crackers also use it to refer to cracker wannabees. In phreak culture, a lamer is one who scams codes off others rather than doing cracks or really understanding the fundamental concepts. In warez d00dz culture, where the ability to wave around cracked commercial software within days of (or before) release to the commercial market is much esteemed, the lamer might try to upload garbage or shareware or something incredibly old (old in this context is read as a few years to anything older than 3 days). `Lamer' is also much used in the IRC world in a similar sense to the above. language lawyer n. A person, usually an experienced or senior software engineer, who is intimately familiar with many or most of the numerous restrictions and features (both useful and esoteric) applicable to one or more computer programming languages. A language lawyer is distinguished by the ability to show you the five sentences scattered through a 200-plus-page manual that together imply the answer to your question "if only you had thought to look there". Compare wizard, legal, legalese. languages of choice n. C, C++, LISP, and Perl. Nearly every hacker knows one of C or LISP, and most good ones are fluent in both. C++, despite some serious drawbacks, is generally preferred to other object-oriented languages (though in 1999 it looks as though Java has displaced it in the affections of hackers, if not everywhere). Since around 1990 Perl has rapidly been gaining favor, especially as a tool for systems-administration utilities and rapid prototyping. Python, Smalltalk and Prolog are also popular in small but influential communities. There is also a rapidly dwindling category of older hackers with FORTRAN, or even assembler, as their language of choice. They often prefer to be known as Real Programmers, and other hackers consider them a bit odd (see "The Story of Mel" in Appendix A). Assembler is generally no longer considered interesting or appropriate for anything but HLL implementation, glue, and a few time-critical and hardware-specific uses in systems programs. FORTRAN occupies a shrinking niche in scientific programming. Most hackers tend to frown on languages like Pascal and Ada, which don't give them the near-total freedom considered necessary for hacking (see bondage-and-discipline language), and to regard everything even remotely connected with COBOL or other traditional card walloper languages as a total and unmitigated loss. LART // Luser Attitude Readjustment Tool. 1. n. In the collective mythos of scary devil monastery, this is an essential item in the toolkit of every BOFH. The LART classic is a 2x4 or other large billet of wood usable as a club, to be applied upside the head of spammers and other people who cause sysadmins more grief than just naturally goes with the job. Perennial debates rage on _alt.sysadmin.recovery_ over what constitutes the truly effective LART; knobkerries, semiautomatic weapons, flamethrowers, and tactical nukes all have their partisans. Compare clue-by-four. 2. v. To use a LART. Some would add "in malice", but some sysadmins do prefer to gently lart their users as a first (and sometimes final) warning. 3. interj. Calling for one's LART, much as a surgeon might call "Scalpel!". 4. interj. [rare] Used in flames as a rebuke. "LART! LART! LART!" larval stage n. Describes a period of monomaniacal concentration on coding apparently passed through by all fledgling hackers. Common symptoms include the perpetration of more than one 36-hour hacking run in a given week; neglect of all other activities including usual basics like food, sleep, and personal hygiene; and a chronic case of advanced bleary-eye. Can last from 6 months to 2 years, the apparent median being around 18 months. A few so afflicted never resume a more `normal' life, but the ordeal seems to be necessary to produce really wizardly (as opposed to merely competent) programmers. See also wannabee. A less protracted and intense version of larval stage (typically lasting about a month) may recur when one is learning a new OS or programming language. lase /layz/ vt. To print a given document via a laser printer. "OK, let's lase that sucker and see if all those graphics-macro calls did the right things." laser chicken n. Kung Pao Chicken, a standard Chinese dish containing chicken, peanuts, and hot red peppers in a spicy pepper-oil sauce. Many hackers call it `laser chicken' for two reasons: It can zap you just like a laser, and the sauce has a red color reminiscent of some laser beams. The dish has also been called `gunpowder chicken'. In a variation on this theme, it is reported that some Australian hackers have redesignated the common dish `lemon chicken' as `Chernobyl Chicken'. The name is derived from the color of the sauce, which is considered bright enough to glow in the dark (as, mythically, do some of the inhabitants of Chernobyl). lasherism n. [Harvard] A program that solves a standard problem (such as the Eight Queens puzzle or implementing the life algorithm) in a deliberately nonstandard way. Distinguished from a crock or kluge by the fact that the programmer did it on purpose as a mental exercise. Such constructions are quite popular in exercises such as the Obfuscated C Contest, and occasionally in retrocomputing. Lew Lasher was a student at Harvard around 1980 who became notorious for such behavior. laundromat n. Syn. disk farm; see washing machine. LDB /l*'d*b/ vt. [from the PDP-10 instruction set] To extract from the middle. "LDB me a slice of cake, please." This usage has been kept alive by Common LISP's function of the same name. Considered silly. See also DPB. leaf site n.,obs. Before pervasive TCP/IP, this term was used of a machine that merely originated and read Usenet news or mail, and did not relay any third-party traffic. It was often uttered in a critical tone; when the ratio of leaf sites to backbone, rib, and other relay sites got too high, the network tended to develop bottlenecks. Compare backbone site, rib site. Now that traffic patterns depend more on the distribution of routers than of host machines this term has largely fallen out of use. leak n. With qualifier, one of a class of resource-management bugs that occur when resources are not freed properly after operations on them are finished, so they effectively disappear (leak out). This leads to eventual exhaustion as new allocation requests come in. memory leak and fd leak have their own entries; one might also refer, to, say, a `window handle leak' in a window system. leaky heap n. [Cambridge] An arena with a memory leak. leapfrog attack n. Use of userid and password information obtained illicitly from one host (e.g., downloading a file of account IDs and passwords, tapping TELNET, etc.) to compromise another host. Also, the act of TELNETting through one or more hosts in order to confuse a trace (a standard cracker procedure). leech 1. n. (Also `leecher'.) Among BBS types, crackers and warez d00dz, one who consumes knowledge without generating new software, cracks, or techniques. BBS culture specifically defines a leech as someone who downloads files with few or no uploads in return, and who does not contribute to the message section. Cracker culture extends this definition to someone (a lamer, usually) who constantly presses informed sources for information and/or assistance, but has nothing to contribute. 2. v. [common, Toronto area] To instantly fetch a file (other than a mail attachment) whether by FTP or IRC file req or any other method. Seems to be a holdover from the early 1990s when Toronto had a very active BBS and warez scene. = leech mode n. [warez d00dz] "Leech mode" or "leech access" or (simply "leech" as in "You get leech") is the access mode on a FTP site where one can download as many files as one wants, without having to upload. Leech mode is often promised on banner sites, but rarely obtained. See ratio site, banner site. legal adj. Loosely used to mean `in accordance with all the relevant rules', esp. in connection with some set of constraints defined by software. "The older =+ alternate for += is no longer legal syntax in ANSI C." "This parser processes each line of legal input the moment it sees the trailing linefeed." Hackers often model their work as a sort of game played with the environment in which the objective is to maneuver through the thicket of `natural laws' to achieve a desired objective. Their use of `legal' is flavored as much by this game-playing sense as by the more conventional one having to do with courts and lawyers. Compare language lawyer, legalese. = legalese n. Dense, pedantic verbiage in a language description, product specification, or interface standard; text that seems designed to obfuscate and requires a language lawyer to parse it. Though hackers are not afraid of high information density and complexity in language (indeed, they rather enjoy both), they share a deep and abiding loathing for legalese; they associate it with deception, suits, and situations in which hackers generally get the short end of the stick. L = LER /L-E-R/ n. 1. [TMRC, from `Light-Emitting Diode'] A light-emitting resistor (that is, one in the process of burning up). Ohm's law was broken. See also SED. 2. An incandescent light bulb (the filament emits light because it's resistively heated). LERP /lerp/ vi.,n. Quasi-acronym for Linear Interpolation, used as a verb or noun for the operation. "Bresenham's algorithm lerps incrementally between the two endpoints of the line." let the smoke out v. To fry hardware (see fried). See magic smoke for a discussion of the underlying mythology. letterbomb 1. n. A piece of email containing live data intended to do nefarious things to the recipient's machine or terminal. It used to be possible, for example, to send letterbombs that would lock up some specific kinds of terminals when they are viewed, so thoroughly that the user must cycle power (see cycle, sense 3) to unwedge them. Under Unix, a letterbomb can also try to get part of its contents interpreted as a shell command to the mailer. The results of this could range from silly to tragic; fortunately it has been some years since any of the standard Unix/Internet mail software was vulnerable to such an attack (though, as the Melissa virus attack demonstrated in early 1999, Microsoft systems can have serious problems). See also Trojan horse; compare nastygram. 2. Loosely, a mailbomb. lexer /lek'sr/ n. Common hacker shorthand for `lexical analyzer', the input-tokenizing stage in the parser for a language (the part that breaks it into word-like pieces). "Some C lexers get confused by the old-style compound ops like =-." = lexiphage /lek'si-fayj`/ n. A notorious word chomper on ITS. See bagbiter. This program would draw on a selected victim's bitmapped terminal the words "THE BAG" in ornate letters, followed a pair of jaws biting pieces of it off. life n. 1. A cellular-automata game invented by John Horton Conway and first introduced publicly by Martin Gardner ("Scientific American", October 1970); the game's popularity had to wait a few years for computers on which it could reasonably be played, as it's no fun to simulate the cells by hand. Many hackers pass through a stage of fascination with it, and hackers at various places contributed heavily to the mathematical analysis of this game (most notably Bill Gosper at MIT, who even implemented life in TECO!; see Gosperism). When a hacker mentions `life', he is much more likely to mean this game than the magazine, the breakfast cereal, or the human state of existence. 2. The opposite of Usenet. As in "Get a life!" Life is hard prov. [XEROX PARC] This phrase has two possible interpretations: (1) "While your suggestion may have some merit, I will behave as though I hadn't heard it." (2) "While your suggestion has obvious merit, equally obvious circumstances prevent it from being seriously considered." The charm of the phrase lies precisely in this subtle but important ambiguity. light pipe n. Fiber optic cable. Oppose copper. lightweight adj. Opposite of heavyweight; usually found in combining forms such as `lightweight process'. like kicking dead whales down the beach adj. Describes a slow, difficult, and disgusting process. First popularized by a famous quote about the difficulty of getting work done under one of IBM's mainframe OSes. "Well, you could write a C compiler in COBOL, but it would be like kicking dead whales down the beach." See also fear and loathing. like nailing jelly to a tree adj. Used to describe a task thought to be impossible, esp. one in which the difficulty arises from poor specification or inherent slipperiness in the problem domain. "Trying to display the `prettiest' arrangement of nodes and arcs that diagrams a given graph is like nailing jelly to a tree, because nobody's sure what `prettiest' means algorithmically." Hacker use of this term may recall mainstream slang originated early in the 20th century by President Theodore Roosevelt. There is a legend that, weary of inconclusive talks with Colombia over the right to dig a canal through its then-province Panama, he remarked, "Negotiating with those pirates is like trying to nail currant jelly to the wall." Roosevelt's government subsequently encouraged the anti-Colombian insurgency that created the nation of Panama. line 666 [from Christian eschatological myth] n. The notional line of source at which a program fails for obscure reasons, implying either that somebody is out to get it (when you are the programmer), or that it richly deserves to be so gotten (when you are not). "It works when I trace through it, but seems to crash on line 666 when I run it." "What happens is that whenever a large batch comes through, mmdf dies on the Line of the Beast. Probably some twit hardcoded a buffer size." line eater, the n. obs. [Usenet] 1. A bug in some now-obsolete versions of the netnews software that used to eat up to BUFSIZ bytes of the article text. The bug was triggered by having the text of the article start with a space or tab. This bug was quickly personified as a mythical creature called the `line eater', and postings often included a dummy line of `line eater food'. Ironically, line eater `food' not beginning with a space or tab wasn't actually eaten, since the bug was avoided; but if there was a space or tab before it, then the line eater would eat the food and the beginning of the text it was supposed to be protecting. The practice of `sacrificing to the line eater' continued for some time after the bug had been nailed to the wall, and is still humorously referred to. The bug itself was still occasionally reported to be lurking in some mail-to-netnews gateways as late as 1991. 2. See NSA line eater. line noise n. 1. [techspeak] Spurious characters due to electrical noise in a communications link, especially an RS-232 serial connection. Line noise may be induced by poor connections, interference or crosstalk from other circuits, electrical storms, cosmic rays, or (notionally) birds crapping on the phone wires. 2. Any chunk of data in a file or elsewhere that looks like the results of line noise in sense 1. 3. Text that is theoretically a readable text or program source but employs syntax so bizarre that it looks like line noise in senses 1 or 2. Yes, there are languages this ugly. The canonical example is TECO; it is often claimed that "TECO's input syntax is indistinguishable from line noise." Other non-WYSIWYG editors, such as Multics qed and Unix ed, in the hands of a real hacker, also qualify easily, as do deliberately obfuscated languages such as INTERCAL. line starve [MIT] 1. vi. To feed paper through a printer the wrong way by one line (most printers can't do this). On a display terminal, to move the cursor up to the previous line of the screen. "To print `X squared', you just output `X', line starve, `2', line feed." (The line starve causes the `2' to appear on the line above the `X', and the line feed gets back to the original line.) 2. n. A character (or character sequence) that causes a terminal to perform this action. ASCII 0011010, also called SUB or control-Z, was one common line-starve character in the days before microcomputers and the X3.64 terminal standard. Today, the term might be used for the ISO reverse line feed character 0x8D. Unlike `line feed', `line starve' is not standard ASCII terminology. Even among hackers it is considered a bit silly. 3. [proposed] A sequence such as \c (used in System V echo, as well as nroff and troff) that suppresses a newline or other character(s) that would normally be emitted. linearithmic adj. Of an algorithm, having running time that is O(N log N). Coined as a portmanteau of `linear' and `logarithmic' in "Algorithms In C" by Robert Sedgewick (Addison-Wesley 1990, ISBN 0-201-51425-7). link farm n. [Unix] A directory tree that contains many links to files in a master directory tree of files. Link farms save space when one is maintaining several nearly identical copies of the same source tree -- for example, when the only difference is architecture-dependent object files. "Let's freeze the source and then rebuild the FROBOZZ-3 and FROBOZZ-4 link farms." Link farms may also be used to get around restrictions on the number of -I (include-file directory) arguments on older C preprocessors. However, they can also get completely out of hand, becoming the filesystem equivalent of spaghetti code. link rot n. The natural decay of web links as the sites they're connected to change or die. Compare bit rot. link-dead adj. [MUD] The state a player is in when they kill their connection to a MUD without leaving it properly. The player is then commonly left as a statue in the game, and is only removed after a certain period of time (an hour on most MUDs). Used on IRC as well, although it is inappropriate in that context. Compare netdead. lint [from Unix's lint(1), named for the bits of fluff it supposedly picks from programs] 1. vt. To examine a program closely for style, language usage, and portability problems, esp. if in C, esp. if via use of automated analysis tools, most esp. if the Unix utility lint(1) is used. This term used to be restricted to use of lint(1) itself, but (judging by references on Usenet) it has become a shorthand for desk check at some non-Unix shops, even in languages other than C. Also as v. delint. 2. n. Excess verbiage in a document, as in "This draft has too much lint". Lintel n. The emerging Linux/Intel alliance. This term began to be used in early 1999 after it became clear that the Wintel alliance was under increasing strain and Intel started taking stakes in Linux companies. = Linus /leen'us'/ or /lin'us'/, not /li:'nus/ Linus Torvalds, the author of Linux. Nobody in the hacker culture has been as readily recognized by first name alone since Ken (Thompson). = Linux /lee'nuhks/ or /li'nuks/, not /li:'nuhks/ n. The free Unix workalike created by Linus Torvalds and friends starting about 1991. The pronunciation /lee'nuhks/ is preferred because the name `Linus' has an /ee/ sound in Swedish (Linus's family is part of Finland's 6% ethnic-Swedish minority). This may be the most remarkable hacker project in history -- an entire clone of Unix for 386, 486 and Pentium micros, distributed for free with sources over the net (ports to Alpha and Sparc and many other machines are also in use). Linux is what GNU aimed to be, and it relies on the GNU toolset. But the Free Software Foundation didn't produce the kernel to go with that toolset until 1999, which was too late. Other, similar efforts like FreeBSD and NetBSD have been technically successful but never caught fire the way Linux has; as this is written in 2000, Linux is seriously challenging Microsoft's OS dominance. It has already captured 31% of the Internet-server market and 25% of general business servers. An earlier version of this entry opined "The secret of Linux's success seems to be that Linus worked much harder early on to keep the development process open and recruit other hackers, creating a snowball effect." Truer than we knew. See bazaar. (Some people object that the name `Linux' should be used to refer only to the kernel, not the entire operating system. This claim is a proxy for an underlying territorial dispute; people who insist on the term `GNU/Linux' want the the FSF to get most of the credit for Linux because RMS and friends wrote many of its user-level tools. Neither this theory nor the term `GNU/Linux' has gained more than minority acceptance). = lion food n. [IBM] Middle management or HQ staff (or, by extension, administrative drones in general). From an old joke about two lions who, escaping from the zoo, split up to increase their chances but agree to meet after 2 months. When they finally meet, one is skinny and the other overweight. The thin one says: "How did you manage? I ate a human just once and they turned out a small army to chase me -- guns, nets, it was terrible. Since then I've been reduced to eating mice, insects, even grass." The fat one replies: "Well, I hid near an IBM office and ate a manager a day. And nobody even noticed!" Lions Book n. "Source Code and Commentary on Unix level 6", by John Lions. The two parts of this book contained (1) the entire source listing of the Unix Version 6 kernel, and (2) a commentary on the source discussing the algorithms. These were circulated internally at the University of New South Wales beginning 1976-77, and were, for years after, the only detailed kernel documentation available to anyone outside Bell Labs. Because Western Electric wished to maintain trade secret status on the kernel, the Lions Book was only supposed to be distributed to affiliates of source licensees. In spite of this, it soon spread by samizdat to a good many of the early Unix hackers. [1996 update: The Lions book lives again! It was put back in print as ISBN 1-57398-013-7 from Peer-To-Peer Communications, with forewords by Dennis Ritchie and Ken Thompson. In a neat bit of reflexivity, the page before the contents quotes this entry.] LISP n. [from `LISt Processing language', but mythically from `Lots of Irritating Superfluous Parentheses'] AI's mother tongue, a language based on the ideas of (a) variable-length lists and trees as fundamental data types, and (b) the interpretation of code as data and vice-versa. Invented by John McCarthy at MIT in the late 1950s, it is actually older than any other HLL still in use except FORTRAN. Accordingly, it has undergone considerable adaptive radiation over the years; modern variants are quite different in detail from the original LISP 1.5. The dominant HLL among hackers until the early 1980s, LISP now shares the throne with C. Its partisans claim it is the only language that is truly beautiful. See languages of choice. All LISP functions and programs are expressions that return values; this, together with the high memory utilization of LISPs, gave rise to Alan Perlis's famous quip (itself a take on an Oscar Wilde quote) that "LISP programmers know the value of everything and the cost of nothing". One significant application for LISP has been as a proof by example that most newer languages, such as COBOL and Ada, are full of unnecessary crocks. When the Right Thing has already been done once, there is no justification for bogosity in newer languages. = list-bomb v. To mailbomb someone by forging messages causing the victim to become a subscriber to many mailing lists. This is a self-defeating tactic; it merely forces mailing list servers to require confirmation by return message for every subscription. lithium lick n. [NeXT] Steve Jobs. Employees who have gotten too much attention from their esteemed founder are said to have `lithium lick' when they begin to show signs of Jobsian fervor and repeat the most recent catch phrases in normal conversation -- for example, "It just works, right out of the box!" little-endian adj. Describes a computer architecture in which, within a given 16- or 32-bit word, bytes at lower addresses have lower significance (the word is stored `little-end-first'). The PDP-11 and VAX families of computers and Intel microprocessors and a lot of communications and networking hardware are little-endian. See big-endian, middle-endian, NUXI problem. The term is sometimes used to describe the ordering of units other than bytes; most often, bits within a byte. live /li:v/ adj.,adv. [common] Opposite of `test'. Refers to actual real-world data or a program working with it. For example, the response to "I think the record deleter is finished" might be "Is it live yet?" or "Have you tried it out on live data?" This usage usually carries the connotation that live data is more fragile and must not be corrupted, or bad things will happen. So a more appropriate response might be: "Well, make sure it works perfectly before we throw live data at it." The implication here is that record deletion is something pretty significant, and a haywire record-deleter running amok live would probably cause great harm. live data n. 1. Data that is written to be interpreted and takes over program flow when triggered by some un-obvious operation, such as viewing it. One use of such hacks is to break security. For example, some smart terminals have commands that allow one to download strings to program keys; this can be used to write live data that, when listed to the terminal, infects it with a security-breaking virus that is triggered the next time a hapless user strikes that key. For another, there are some well-known bugs in vi that allow certain texts to send arbitrary commands back to the machine when they are simply viewed. 2. In C code, data that includes pointers to function hooks (executable code). 3. An object, such as a trampoline, that is constructed on the fly by a program and intended to be executed as code. Live Free Or Die! imp. 1. The state motto of New Hampshire, which appears on that state's automobile license plates. 2. A slogan associated with Unix in the romantic days when Unix aficionados saw themselves as a tiny, beleaguered underground tilting against the windmills of industry. The "free" referred specifically to freedom from the fascist design philosophies and crufty misfeatures common on competing operating systems. Armando Stettner, one of the early Unix developers, used to give out fake license plates bearing this motto under a large Unix, all in New Hampshire colors of green and white. These are now valued collector's items. In 1994 DEC put an inferior imitation of these in circulation with a red corporate logo added. Compaq (half of which was once DEC) has continued the practice. livelock /li:v'lok/ n. A situation in which some critical stage of a task is unable to finish because its clients perpetually create more work for it to do after they have been serviced but before it can clear its queue. Differs from deadlock in that the process is not blocked or waiting for anything, but has a virtually infinite amount of work to do and can never catch up. L = liveware /li:v'weir/ n. 1. Synonym for wetware. Less common. 2. [Cambridge] Vermin. "Waiter, there's some liveware in my salad..." L = lobotomy n. 1. What a hacker subjected to formal management training is said to have undergone. At IBM and elsewhere this term is used by both hackers and low-level management; the latter doubtless intend it as a joke. 2. The act of removing the processor from a microcomputer in order to replace or upgrade it. Some very cheap clone systems are sold in `lobotomized' form -- everything but the brain. locals, the pl.n. The users on one's local network (as opposed, say, to people one reaches via public Internet or UUCP connects). The marked thing about this usage is how little it has to do with real-space distance. "I have to do some tweaking on this mail utility before releasing it to the locals." locked and loaded adj.,obs. [from military slang for an M-16 rifle with magazine inserted and prepared for firing] Said of a removable disk volume properly prepared for use -- that is, locked into the drive and with the heads loaded. Ironically, because their heads are `loaded' whenever the power is up, this description is never used of Winchester drives (which are named after a rifle). locked up adj. Syn. for hung, wedged. logic bomb n. Code surreptitiously inserted into an application or OS that causes it to perform some destructive or security-compromising activity whenever specified conditions are met. Compare back door. logical adj. [from the technical term `logical device', wherein a physical device is referred to by an arbitrary `logical' name] Having the role of. If a person (say, Les Earnest at SAIL) who had long held a certain post left and were replaced, the replacement would for a while be known as the `logical' Les Earnest. (This does not imply any judgment on the replacement.) Compare virtual. At Stanford, `logical' compass directions denote a coordinate system in which `logical north' is toward San Francisco, `logical west' is toward the ocean, etc., even though logical north varies between physical (true) north near San Francisco and physical west near San Jose. (The best rule of thumb here is that, by definition, El Camino Real always runs logical north-and-south.) In giving directions, one might say: "To get to Rincon Tarasco restaurant, get onto El Camino Bignum going logical north." Using the word `logical' helps to prevent the recipient from worrying about that the fact that the sun is setting almost directly in front of him. The concept is reinforced by North American highways which are almost, but not quite, consistently labeled with logical rather than physical directions. A similar situation exists at MIT: Route 128 (famous for the electronics industry that has grown up along it) is a 3-quarters circle surrounding Boston at a radius of 10 miles, terminating near the coastline at each end. It would be most precise to describe the two directions along this highway as `clockwise' and `counterclockwise', but the road signs all say "north" and "south", respectively. A hacker might describe these directions as `logical north' and `logical south', to indicate that they are conventional directions not corresponding to the usual denotation for those words. (If you went logical south along the entire length of route 128, you would start out going northwest, curve around to the south, and finish headed due east, passing along one infamous stretch of pavement that is simultaneously route 128 south and Interstate 93 north, and is signed as such!) loop through vt. To process each element of a list of things. "Hold on, I've got to loop through my paper mail." Derives from the computer-language notion of an iterative loop; compare `cdr down' (under cdr), which is less common among C and Unix programmers. ITS hackers used to say `IRP over' after an obscure pseudo-op in the MIDAS PDP-10 assembler (the same IRP op can nowadays be found in Microsoft's assembler). loose bytes n. Commonwealth hackish term for the padding bytes or shims many compilers insert between members of a record or structure to cope with alignment requirements imposed by the machine architecture. lord high fixer n. [primarily British, from Gilbert & Sullivan's `lord high executioner'] The person in an organization who knows the most about some aspect of a system. See wizard. lose vi. 1. [very common] To fail. A program loses when it encounters an exceptional condition or fails to work in the expected manner. 2. To be exceptionally unesthetic or crocky. 3. Of people, to be obnoxious or unusually stupid (as opposed to ignorant). See also deserves to lose. 4. n. Refers to something that is losing, especially in the phrases "That's a lose!" and "What a lose!" lose lose interj. A reply to or comment on an undesirable situation. "I accidentally deleted all my files!" "Lose, lose." loser n. An unexpectedly bad situation, program, programmer, or person. Someone who habitually loses. (Even winners can lose occasionally.) Someone who knows not and knows not that he knows not. Emphatic forms are `real loser', `total loser', and `complete loser' (but not **`moby loser', which would be a contradiction in terms). See luser. = losing adj. Said of anything that is or causes a lose or lossage. "The compiler is losing badly when I try to use templates." = loss n. Something (not a person) that loses; a situation in which something is losing. Emphatic forms include `moby loss', and `total loss', `complete loss'. Common interjections are "What a loss!" and "What a moby loss!" Note that `moby loss' is OK even though **`moby loser' is not used; applied to an abstract noun, moby is simply a magnifier, whereas when applied to a person it implies substance and has positive connotations. Compare lossage. lossage /los'*j/ n. [very common] The result of a bug or malfunction. This is a mass or collective noun. "What a loss!" and "What lossage!" are nearly synonymous. The former is slightly more particular to the speaker's present circumstances; the latter implies a continuing lose of which the speaker is currently a victim. Thus (for example) a temporary hardware failure is a loss, but bugs in an important tool (like a compiler) are serious lossage. = lost in the noise adj. Syn. lost in the underflow. This term is from signal processing, where signals of very small amplitude cannot be separated from low-intensity noise in the system. Though popular among hackers, it is not confined to hackerdom; physicists, engineers, astronomers, and statisticians all use it. lost in the underflow adj. Too small to be worth considering; more specifically, small beyond the limits of accuracy or measurement. This is a reference to `floating underflow', a condition that can occur when a floating-point arithmetic processor tries to handle quantities smaller than its limit of magnitude. It is also a pun on `undertow' (a kind of fast, cold current that sometimes runs just offshore and can be dangerous to swimmers). "Well, sure, photon pressure from the stadium lights alters the path of a thrown baseball, but that effect gets lost in the underflow." Compare epsilon, epsilon squared; see also overflow bit. lots of MIPS but no I/O adj. Used to describe a person who is technically brilliant but can't seem to communicate with human beings effectively. Technically it describes a machine that has lots of processing power but is bottlenecked on input-output (in 1991, the IBM Rios, a.k.a. RS/6000, was a notorious example). low-bandwidth adj. [from communication theory] Used to indicate a talk that, although not content-free, was not terribly informative. "That was a low-bandwidth talk, but what can you expect for an audience of suits!" Compare zero-content, bandwidth, math-out. LPT /L-P-T/ or /lip'it/ or /lip-it'/ n. 1. Line printer (originally Line Printing Terminal). Rare under Unix, more common among hackers who grew up with ITS, MS-DOS, CP/M and other operating systems that were strongly influenced by early DEC conventions. 2. Local PorT. Used among MS-DOS programmers (and so expanded in the MS-DOS 5 manual). It seems likely this is a backronym. = Lubarsky's Law of Cybernetic Entomology prov. "There is always one more bug." Lumber Cartel n. A mythical conspiracy accused by spam-spewers of funding anti-spam activism in order to force the direct-mail promotions industry back onto paper. Hackers, predictably, responded by forming a "Lumber Cartel" spoofing this paranoid theory; the web page is http://come.to/the.lumber.cartel. Members often include the tag TINLC ("There Is No Lumber Cartel") in their postings; see TINC, backbone cabal and NANA for explanation. lunatic fringe n. [IBM] Customers who can be relied upon to accept release 1 versions of software. Compare heatseeker. lurker n. One of the `silent majority' in a electronic forum; one who posts occasionally or not at all but is known to read the group's postings regularly. This term is not pejorative and indeed is casually used reflexively: "Oh, I'm just lurking." Often used in `the lurkers', the hypothetical audience for the group's flamage-emitting regulars. When a lurker speaks up for the first time, this is called `delurking'. The creator of the popular science-fiction TV series "Babylon 5" has ties to SF fandom and the hacker culture. In that series, the use of the term `lurker' for a homeless or displaced person is a conscious reference to the jargon term. luser /loo'zr/ n. [common] A user; esp. one who is also a loser. (luser and loser are pronounced identically.) This word was coined around 1975 at MIT. Under ITS, when you first walked up to a terminal at MIT and typed Control-Z to get the computer's attention, it printed out some status information, including how many people were already using the computer; it might print "14 users", for example. Someone thought it would be a great joke to patch the system to print "14 losers" instead. There ensued a great controversy, as some of the users didn't particularly want to be called losers to their faces every time they used the computer. For a while several hackers struggled covertly, each changing the message behind the back of the others; any time you logged into the computer it was even money whether it would say "users" or "losers". Finally, someone tried the compromise "lusers", and it stuck. Later one of the ITS machines supported luser as a request-for-help command. ITS died the death in mid-1990, except as a museum piece; the usage lives on, however, and the term `luser' is often seen in program comments and on Usenet. Compare mundane, muggle. = M = M: M$: macdink: machinable: machoflops: Macintoy: Macintrash: macro: macro-: macrology: macrotape: maggotbox: magic: magic cookie: magic number: magic smoke: mail storm: mailbomb: mailing list: main loop: mainframe: management: mandelbug: manged: mangle: mangled name: mangler: manularity: marbles: marginal: Marginal Hacks: marginally: marketroid: Mars: martian: massage: math-out: Matrix: maximum Maytag mode: meatspace: meatware: meeces: meg: mega-: megapenny: MEGO: meltdown network: meme: meme plague: memetics: memory farts: memory leak: memory smash: menuitis: mess-dos: meta: meta bit: metasyntactic variable: MFTL: mickey: mickey mouse program: micro-: MicroDroid: microfloppies: microfortnight: microLenat: microReid: microserf: Microsloth Windows: Microsoft: micros~1: middle-endian: middle-out implementation: milliLampson: minifloppies: MIPS: misbug: misfeature: Missed'em-five: missile address: miswart: MMF: mobo: moby: mockingbird: mod: mode: mode bit: modulo: molly-guard: Mongolian Hordes technique: monkey up: monkey scratch: monstrosity: monty: Moof: Moore's Law: moose call: moria: MOTAS: MOTOS: MOTSS: mouse ahead: mouse around: mouse belt: mouse droppings: mouse elbow: mouso: MS-DOS: mu: MUD: muddie: mudhead: muggle: multician: Multics: multitask: mumblage: mumble: munch: munching: munching squares: munchkin: mundane: mung: munge: Murphy's Law: music: mutter: M pref. (on units) suff. (on numbers) [SI] See quantifiers. M$ Common net abbreviation for Microsoft, everybody's least favorite monopoly. macdink /mak'dink/ vt. [from the Apple Macintosh, which is said to encourage such behavior] To make many incremental and unnecessary cosmetic changes to a program or file. Often the subject of the macdinking would be better off without them. "When I left at 11 P.M. last night, he was still macdinking the slides for his presentation." See also fritterware, window shopping. machinable adj. Machine-readable. Having the softcopy nature. machoflops /mach'oh-flops/ n. [pun on `megaflops', a coinage for `millions of FLoating-point Operations Per Second'] Refers to artificially inflated performance figures often quoted by computer manufacturers. Real applications are lucky to get half the quoted speed. See Your mileage may vary, benchmark. Macintoy /mak'in-toy/ n. The Apple Macintosh, considered as a toy. Less pejorative than Macintrash. M = Macintrash /mak'in-trash`/ n. The Apple Macintosh, as described by a hacker who doesn't appreciate being kept away from the real computer by the interface. The term maggotbox has been reported in regular use in the Research Triangle area of North Carolina. Compare Macintoy. See also beige toaster, WIMP environment, point-and-drool interface, drool-proof paper, user-friendly. macro /mak'roh/ n. [techspeak] A name (possibly followed by a formal arg list) that is equated to a text or symbolic expression to which it is to be expanded (possibly with the substitution of actual arguments) by a macro expander. This definition can be found in any technical dictionary; what those won't tell you is how the hackish connotations of the term have changed over time. The term `macro' originated in early assemblers, which encouraged the use of macros as a structuring and information-hiding device. During the early 1970s, macro assemblers became ubiquitous, and sometimes quite as powerful and expensive as HLLs, only to fall from favor as improving compiler technology marginalized assembler programming (see languages of choice). Nowadays the term is most often used in connection with the C preprocessor, LISP, or one of several special-purpose languages built around a macro-expansion facility (such as TeX or Unix's [nt]roff suite). Indeed, the meaning has drifted enough that the collective `macros' is now sometimes used for code in any special-purpose application control language (whether or not the language is actually translated by text expansion), and for macro-like entities such as the `keyboard macros' supported in some text editors (and PC TSR or Macintosh INIT/CDEV keyboard enhancers). = macro- pref. Large. Opposite of micro-. In the mainstream and among other technical cultures (for example, medical people) this competes with the prefix mega-, but hackers tend to restrict the latter to quantification. = macrology /mak-rol'*-jee/ n. 1. Set of usually complex or crufty macros, e.g., as part of a large system written in LISP, TECO, or (less commonly) assembler. 2. The art and science involved in comprehending a macrology in sense 1. Sometimes studying the macrology of a system is not unlike archeology, ecology, or theology, hence the sound-alike construction. See also boxology. macrotape /mak'roh-tayp/ n. An industry-standard reel of tape. Originally, as opposed to a DEC microtape; nowadays, as opposed to modern QIC and DDS tapes. Syn. round tape. maggotbox /mag'*t-boks/ n. See Macintrash. This is even more derogatory. magic 1. adj. As yet unexplained, or too complicated to explain; compare automagically and (Arthur C.) Clarke's Third Law: "Any sufficiently advanced technology is indistinguishable from magic." "TTY echoing is controlled by a large number of magic bits." "This routine magically computes the parity of an 8-bit byte in three instructions." 2. adj. Characteristic of something that works although no one really understands why (this is especially called black magic). 3. n. [Stanford] A feature not generally publicized that allows something otherwise impossible, or a feature formerly in that category but now unveiled. 4. n. The ultimate goal of all engineering & development, elegance in the extreme; from the first corollary to Clarke's Third Law: "Any technology distinguishable from magic is insufficiently advanced". Parodies playing on these senses of the term abound; some have made their way into serious documentation, as when a MAGIC directive was described in the Control Card Reference for GCOS c.1978. For more about hackish `magic', see Appendix A. Compare black magic, wizardly, deep magic, heavy wizardry. magic cookie n. [Unix; common] 1. Something passed between routines or programs that enables the receiver to perform some operation; a capability ticket or opaque identifier. Especially used of small data objects that contain data encoded in a strange or intrinsically machine-dependent way. E.g., on non-Unix OSes with a non-byte-stream model of files, the result of ftell(3) may be a magic cookie rather than a byte offset; it can be passed to fseek(3), but not operated on in any meaningful way. The phrase `it hands you a magic cookie' means it returns a result whose contents are not defined but which can be passed back to the same or some other program later. 2. An in-band code for changing graphic rendition (e.g., inverse video or underlining) or performing other control functions (see also cookie). Some older terminals would leave a blank on the screen corresponding to mode-change magic cookies; this was also called a glitch (or occasionally a `turd'; compare mouse droppings). See also cookie. magic number n. [Unix/C; common] 1. In source code, some non-obvious constant whose value is significant to the operation of a program and that is inserted inconspicuously in-line (hardcoded), rather than expanded in by a symbol set by a commented #define. Magic numbers in this sense are bad style. 2. A number that encodes critical information used in an algorithm in some opaque way. The classic examples of these are the numbers used in hash or CRC functions, or the coefficients in a linear congruential generator for pseudo-random numbers. This sense actually predates and was ancestral to the more commonsense 1. 3. Special data located at the beginning of a binary data file to indicate its type to a utility. Under Unix, the system and various applications programs (especially the linker) distinguish between types of executable file by looking for a magic number. Once upon a time, these magic numbers were PDP-11 branch instructions that skipped over header data to the start of executable code; 0407, for example, was octal for `branch 16 bytes relative'. Many other kinds of files now have magic numbers somewhere; some magic numbers are, in fact, strings, like the !<arch> at the beginning of a Unix archive file or the %! leading PostScript files. Nowadays only a wizard knows the spells to create magic numbers. How do you choose a fresh magic number of your own? Simple -- you pick one at random. See? It's magic! The magic number, on the other hand, is 7+/-2. See "The magical number seven, plus or minus two: some limits on our capacity for processing information" by George Miller, in the "Psychological Review" 63:81-97 (1956). This classic paper established the number of distinct items (such as numeric digits) that humans can hold in short-term memory. Among other things, this strongly influenced the interface design of the phone system. magic smoke n. A substance trapped inside IC packages that enables them to function (also called `blue smoke'; this is similar to the archaic `phlogiston' hypothesis about combustion). Its existence is demonstrated by what happens when a chip burns up -- the magic smoke gets let out, so it doesn't work any more. See smoke test, let the smoke out. Usenetter Jay Maynard tells the following story: "Once, while hacking on a dedicated Z80 system, I was testing code by blowing EPROMs and plugging them in the system, then seeing what happened. One time, I plugged one in backwards. I only discovered that after I realized that Intel didn't put power-on lights under the quartz windows on the tops of their EPROMs -- the die was glowing white-hot. Amazingly, the EPROM worked fine after I erased it, filled it full of zeros, then erased it again. For all I know, it's still in service. Of course, this is because the magic smoke didn't get let out." Compare the original phrasing of Murphy's Law. mail storm n. [from broadcast storm, influenced by `maelstrom'] What often happens when a machine with an Internet connection and active users re-connects after extended downtime -- a flood of incoming mail that brings the machine to its knees. See also hairball. mailbomb (also _mail bomb_) [Usenet] 1. v. To send, or urge others to send, massive amounts of email to a single system or person, esp. with intent to crash or spam the recipient's system. Sometimes done in retaliation for a perceived serious offense. Mailbombing is itself widely regarded as a serious offense -- it can disrupt email traffic or other facilities for innocent users on the victim's system, and in extreme cases, even at upstream sites. 2. n. An automatic procedure with a similar effect. 3. n. The mail sent. Compare letterbomb, nastygram, BLOB (sense 2), list-bomb. mailing list n. (often shortened in context to `list') 1. An email address that is an alias (or macro, though that word is never used in this connection) for many other email addresses. Some mailing lists are simple `reflectors', redirecting mail sent to them to the list of recipients. Others are filtered by humans or programs of varying degrees of sophistication; lists filtered by humans are said to be `moderated'. 2. The people who receive your email when you send it to such an address. Mailing lists are one of the primary forms of hacker interaction, along with Usenet. They predate Usenet, having originated with the first UUCP and ARPANET connections. They are often used for private information-sharing on topics that would be too specialized for or inappropriate to public Usenet groups. Though some of these maintain almost purely technical content (such as the Internet Engineering Task Force mailing list), others (like the `sf-lovers' list maintained for many years by Saul Jaffe) are recreational, and many are purely social. Perhaps the most infamous of the social lists was the eccentric _bandykin_ distribution; its latter-day progeny, _lectroids_ and _tanstaafl_, still include a number of the oddest and most interesting people in hackerdom. Mailing lists are easy to create and (unlike Usenet) don't tie up a significant amount of machine resources (until they get very large, at which point they can become interesting torture tests for mail software). Thus, they are often created temporarily by working groups, the members of which can then collaborate on a project without ever needing to meet face-to-face. Much of the material in this lexicon was criticized and polished on just such a mailing list (called `jargon-friends'), which included all the co-authors of Steele-1983. main loop n. The top-level control flow construct in an input- or event-driven program, the one which receives and acts or dispatches on the program's input. See also driver. mainframe n. Term originally referring to the cabinet containing the central processor unit or `main frame' of a room-filling Stone Age batch machine. After the emergence of smaller `minicomputer' designs in the early 1970s, the traditional big iron machines were described as `mainframe computers' and eventually just as mainframes. The term carries the connotation of a machine designed for batch rather than interactive use, though possibly with an interactive timesharing operating system retrofitted onto it; it is especially used of machines built by IBM, Unisys, and the other great dinosaurs surviving from computing's Stone Age. It has been common wisdom among hackers since the late 1980s that the mainframe architectural tradition is essentially dead (outside of the tiny market for number-crunching supercomputers (see cray)), having been swamped by the recent huge advances in IC technology and low-cost personal computing. The wave of failures, takeovers, and mergers among traditional mainframe makers in the early 1990s bore this out. The biggest mainframer of all, IBM, was compelled to re-invent itself as a huge systems-consulting house. (See dinosaurs mating and killer micro). management n. 1. Corporate power elites distinguished primarily by their distance from actual productive work and their chronic failure to manage (see also suit). Spoken derisively, as in "Management decided that ...". 2. Mythically, a vast bureaucracy responsible for all the world's minor irritations. Hackers' satirical public notices are often signed `The Mgt'; this derives from the "Illuminatus" novels (see the Bibliography in Appendix C). mandelbug /man'del-buhg/ n. [from the Mandelbrot set] A bug whose underlying causes are so complex and obscure as to make its behavior appear chaotic or even non-deterministic. This term implies that the speaker thinks it is a Bohr bug, rather than a heisenbug. See also schroedinbug. manged /mahnjd/ n. [probably from the French `manger' or Italian `mangiare', to eat; perhaps influenced by English `mange', `mangy'] adj. Refers to anything that is mangled or damaged, usually beyond repair. "The disk was manged after the electrical storm." Compare mung. M = mangle vt. 1. Used similarly to mung or scribble, but more violent in its connotations; something that is mangled has been irreversibly and totally trashed. 2. To produce the mangled name corresponding to a C++ declaration. M = mangled name n. A name, appearing in a C++ object file, that is a coded representation of the object declaration as it appears in the source. Mangled names are used because C++ allows multiple objects to have the same name, as long as they are distinguishable in some other way, such as by having different parameter types. Thus, the internal name must have that additional information embedded in it, using the limited character set allowed by most linkers. For instance, one popular compiler encodes the standard library function declaration "memchr(const void*,int,unsigned int)" as "@memchr$qpxviui". mangler n. [DEC] A manager. Compare management. Note that system mangler is somewhat different in connotation. = manularity /man`yoo-la'ri-tee/ n. [prob. fr. techspeak `manual' + `granularity'] A notional measure of the manual labor required for some task, particularly one of the sort that automation is supposed to eliminate. "Composing English on paper has much higher manularity than using a text editor, especially in the revising stage." Hackers tend to consider manularity a symptom of primitive methods; in fact, a true hacker confronted with an apparent requirement to do a computing task by hand will inevitably seize the opportunity to build another tool (see toolsmith). marbles pl.n. [from mainstream "lost all his/her marbles"] The minimum needed to build your way further up some hierarchy of tools or abstractions. After a bad system crash, you need to determine if the machine has enough marbles to come up on its own, or enough marbles to allow a rebuild from backups, or if you need to rebuild from scratch. "This compiler doesn't even have enough marbles to compile hello world." marginal adj. [common] 1. [techspeak] An extremely small change. "A marginal increase in core can decrease GC time drastically." In everyday terms, this means that it is a lot easier to clean off your desk if you have a spare place to put some of the junk while you sort through it. 2. Of little merit. "This proposed new feature seems rather marginal to me." 3. Of extremely small probability of winning. "The power supply was rather marginal anyway; no wonder it fried." Marginal Hacks n. Margaret Jacks Hall, a building into which the Stanford AI Lab was moved near the beginning of the 1980s (from the D. C. Power Lab). marginally adv. Slightly. "The ravs here are only marginally better than at Small Eating Place." See epsilon. marketroid /mar'k*-troyd/ n. alt. `marketing slime', `marketeer', `marketing droid', `marketdroid'. A member of a company's marketing department, esp. one who promises users that the next version of a product will have features that are not actually scheduled for inclusion, are extremely difficult to implement, and/or are in violation of the laws of physics; and/or one who describes existing features (and misfeatures) in ebullient, buzzword-laden adspeak. Derogatory. Compare droid. Mars n. A legendary tragic failure, the archetypal Hacker Dream Gone Wrong. Mars was the code name for a family of PDP-10 compatible computers built by Systems Concepts (now, The SC Group): the multi-processor SC-30M, the small uniprocessor SC-25M, and the never-built superprocessor SC-40M. These machines were marvels of engineering design; although not much slower than the unique Foonly F-1, they were physically smaller and consumed less power than the much slower DEC KS10 or Foonly F-2, F-3, or F-4 machines. They were also completely compatible with the DEC KL10, and ran all KL10 binaries (including the operating system) with no modifications at about 2-3 times faster than a KL10. When DEC cancelled the Jupiter project in 1983, Systems Concepts should have made a bundle selling their machine into shops with a lot of software investment in PDP-10s, and in fact their spring 1984 announcement generated a great deal of excitement in the PDP-10 world. TOPS-10 was running on the Mars by the summer of 1984, and TOPS-20 by early fall. Unfortunately, the hackers running Systems Concepts were much better at designing machines than at mass producing or selling them; the company allowed itself to be sidetracked by a bout of perfectionism into continually improving the design, and lost credibility as delivery dates continued to slip. They also overpriced the product ridiculously; they believed they were competing with the KL10 and VAX 8600 and failed to reckon with the likes of Sun Microsystems and other hungry startups building workstations with power comparable to the KL10 at a fraction of the price. By the time SC shipped the first SC-30M to Stanford in late 1985, most customers had already made the traumatic decision to abandon the PDP-10, usually for VMS or Unix boxes. Most of the Mars computers built ended up being purchased by CompuServe. This tale and the related saga of Foonly hold a lesson for hackers: if you want to play in the Real World, you need to learn Real World moves. martian n. A packet sent on a TCP/IP network with a source address of the test loopback interface [127.0.0.1]. This means that it will come back labeled with a source address that is clearly not of this earth. "The domain server is getting lots of packets from Mars. Does that gateway have a martian filter?" Compare Christmas tree packet, Godzillagram. = massage vt. [common] Vague term used to describe `smooth' transformations of a data set into a different form, esp. transformations that do not lose information. Connotes less pain than munch or crunch. "He wrote a program that massages X bitmap files into GIF format." Compare slurp. = math-out n. [poss. from `white-out' (the blizzard variety)] A paper or presentation so encrusted with mathematical or other formal notation as to be incomprehensible. This may be a device for concealing the fact that it is actually content-free. See also numbers, social science number. Matrix n. [FidoNet] 1. What the Opus BBS software and sysops call FidoNet. 2. Fanciful term for a cyberspace expected to emerge from current networking experiments (see the network). The name of the rather good 1999 cypherpunk movie "The Matrix" played on this sense, which however had been established for years before. 3. The totality of present-day computer networks (popularized in this sense by John Quarterman; rare outside academic literature). maximum Maytag mode n. What a washing machine or, by extension, any disk drive is in when it's being used so heavily that it's shaking like an old Maytag with an unbalanced load. If prolonged for any length of time, can lead to disks becoming walking drives. In 1999 it's been some years since hard disks were large enough to do this, but the same phenomenon has recently been reported with 24X CD-ROM drives. meatspace /meet'spays/ n. The physical world, where the meat lives - as opposed to cyberspace. Hackers are actually more willing to use this term than `cyberspace', because it's not speculative - we already have a running meatspace implementation (the universe). Compare RL. meatware n. Synonym for wetware. Less common. M = meeces /mees'*z/ n. [TMRC] Occasional furry visitors who are not urchins. [That is, mice. This may no longer be in live use; it clearly derives from the refrain of the early-1960s cartoon character Mr. Jinx: "I hate meeces to pieces!" -- ESR] = meg /meg/ n. See quantifiers. mega- /me'g*/ pref. [SI] See quantifiers. = megapenny /meg'*-pen`ee/ n. $10,000 (1 cent * 10^6). Used semi-humorously as a unit in comparing computer cost and performance figures. MEGO /me'goh/ or /mee'goh/ [`My Eyes Glaze Over', often `Mine Eyes Glazeth (sic) Over', attributed to the futurologist Herman Kahn] Also `MEGO factor'. 1. n. A handwave intended to confuse the listener and hopefully induce agreement because the listener does not want to admit to not understanding what is going on. MEGO is usually directed at senior management by engineers and contains a high proportion of TLAs. 2. excl. An appropriate response to MEGO tactics. 3. Among non-hackers, often refers not to behavior that causes the eyes to glaze, but to the eye-glazing reaction itself, which may be triggered by the mere threat of technical detail as effectively as by an actual excess of it. = meltdown, network n. See network meltdown. meme /meem/ n. [coined by analogy with `gene', by Richard Dawkins] An idea considered as a replicator, esp. with the connotation that memes parasitize people into propagating them much as viruses do. Used esp. in the phrase `meme complex' denoting a group of mutually supporting memes that form an organized belief system, such as a religion. This lexicon is an (epidemiological) vector of the `hacker subculture' meme complex; each entry might be considered a meme. However, `meme' is often misused to mean `meme complex'. Use of the term connotes acceptance of the idea that in humans (and presumably other tool- and language-using sophonts) cultural evolution by selection of adaptive ideas has superseded biological evolution by selection of hereditary traits. Hackers find this idea congenial for tolerably obvious reasons. meme plague n. The spread of a successful but pernicious meme, esp. one that parasitizes the victims into giving their all to propagate it. Astrology, BASIC, and the other guy's religion are often considered to be examples. This usage is given point by the historical fact that `joiner' ideologies like Naziism or various forms of millennarian Christianity have exhibited plague-like cycles of exponential growth followed by collapses to small reservoir populations. memetics /me-met'iks/ n. [from meme] The study of memes. As of early 1999, this is still an extremely informal and speculative endeavor, though the first steps towards at least statistical rigor have been made by H. Keith Henson and others. Memetics is a popular topic for speculation among hackers, who like to see themselves as the architects of the new information ecologies in which memes live and replicate. memory farts n. The flatulent sounds that some DOS box BIOSes (most notably AMI's) make when checking memory on bootup. memory leak n. An error in a program's dynamic-store allocation logic that causes it to fail to reclaim discarded memory, leading to eventual collapse due to memory exhaustion. Also (esp. at CMU) called core leak. These problems were severe on older machines with small, fixed-size address spaces, and special "leak detection" tools were commonly written to root them out. With the advent of virtual memory, it is unfortunately easier to be sloppy about wasting a bit of memory (although when you run out of memory on a VM machine, it means you've got a real leak!). See aliasing bug, fandango on core, smash the stack, precedence lossage, overrun screw, leaky heap, leak. memory smash n. [XEROX PARC] Writing through a pointer that doesn't point to what you think it does. This occasionally reduces your machine to a rubble of bits. Note that this is subtly different from (and more general than) related terms such as a memory leak or fandango on core because it doesn't imply an allocation error or overrun condition. menuitis /men`yoo-i:'tis/ n. Notional disease suffered by software with an obsessively simple-minded menu interface and no escape. Hackers find this intensely irritating and much prefer the flexibility of command-line or language-style interfaces, especially those customizable via macros or a special-purpose language in which one can encode useful hacks. See user-obsequious, drool-proof paper, WIMP environment, for the rest of us. M = mess-dos /mes-dos/ n. [semi-obsolescent now that DOS is] Derisory term for MS-DOS. Often followed by the ritual banishing "Just say No!" See MS-DOS. Most hackers (even many MS-DOS hackers) loathed MS-DOS for its single-tasking nature, its limits on application size, its nasty primitive interface, and its ties to IBMness and Microsoftness (see fear and loathing). Also `mess-loss', `messy-dos', `mess-dog', `mess-dross', `mush-dos', and various combinations thereof. In Ireland and the U.K. it is even sometimes called `Domestos' after a brand of toilet cleanser. M = meta /me't*/ or /may't*/ or (Commonwealth) /mee't*/ adj.,pref. [from analytic philosophy] One level of description up. A metasyntactic variable is a variable in notation used to describe syntax, and meta-language is language used to describe language. This is difficult to explain briefly, but much hacker humor turns on deliberate confusion between meta-levels. See hacker humor. meta bit n. The top bit of an 8-bit character, which is on in character values 128-255. Also called high bit, alt bit, or (rarely) hobbit. Some terminals and consoles (see space-cadet keyboard) have a META shift key. Others (including, mirabile dictu, keyboards on IBM PC-class machines) have an ALT key. See also bucky bits. Historical note: although in modern usage shaped by a universe of 8-bit bytes the meta bit is invariably hex 80 (octal 0200), things were different on earlier machines with 36-bit words and 9-bit bytes. The MIT and Stanford keyboards (see space-cadet keyboard) generated hex 100 (octal 400) from their meta keys. metasyntactic variable n. A name used in examples and understood to stand for whatever thing is under discussion, or any random member of a class of things under discussion. The word foo is the canonical example. To avoid confusion, hackers never (well, hardly ever) use `foo' or other words like it as permanent names for anything. In filenames, a common convention is that any filename beginning with a metasyntactic-variable name is a scratch file that may be deleted at any time. Metasyntactic variables are so called because (1) they are variables in the metalanguage used to talk about programs etc; (2) they are variables whose values are often variables (as in usages usages like "the value of f(foo,bar) is the sum of foo and bar"). However, it has been plausibly suggested that the real reason for the term "metasyntactic variable" is that it sounds good. To some extent, the list of one's preferred metasyntactic variables is a cultural signature. They occur both in series (used for related groups of variables or objects) and as singletons. Here are a few common signatures: foo, bar, baz, quux, quuux, quuuux...: MIT/Stanford usage, now found everywhere (thanks largely to early versions of this lexicon!). At MIT (but not at Stanford), baz dropped out of use for a while in the 1970s and '80s. A common recent mutation of this sequence inserts qux before quux. bazola, ztesch: Stanford (from mid-'70s on). foo, bar, thud, grunt: This series was popular at CMU. Other CMU-associated variables include gorp. foo, bar, fum: This series is reported to be common at XEROX PARC. fred, jim, sheila, barney: See the entry for fred. These tend to be Britishisms. corge, grault, flarp: Popular at Rutgers University and among GOSMACS hackers. zxc, spqr, wombat: Cambridge University (England). shme Berkeley, GeoWorks, Ingres. Pronounced /shme/ with a short /e/. foo, bar, baz, bongo Yale, late 1970s. spam Python programmers. snork Brown University, early 1970s. foo, bar, zot Helsinki University of Technology, Finland. blarg, wibble New Zealand. toto, titi, tata, tutu France. pippo, pluto, paperino Italy. Pippo /pee'po/ and Paperino /pa-per-ee'-no/ are the Italian names for Goofy and Donald Duck. aap, noot, mies The Netherlands. These are the first words a child used to learn to spell on a Dutch spelling board. oogle, foogle, boogle; zork, gork, bork These two series (which may be continued with other initial consonents) are reportedly common in England, and said to go back to Lewis Carroll. Of all these, only `foo' and `bar' are universal (and baz nearly so). The compounds foobar and `foobaz' also enjoy very wide currency. Some jargon terms are also used as metasyntactic names; barf and mumble, for example. See also Commonwealth Hackish for discussion of numerous metasyntactic variables found in Great Britain and the Commonwealth. MFTL /M-F-T-L/ [abbreviation: `My Favorite Toy Language'] 1. adj. Describes a talk on a programming language design that is heavy on the syntax (with lots of BNF), sometimes even talks about semantics (e.g., type systems), but rarely, if ever, has any content (see content-free). More broadly applied to talks -- even when the topic is not a programming language -- in which the subject matter is gone into in unnecessary and meticulous detail at the sacrifice of any conceptual content. "Well, it was a typical MFTL talk". 2. n. Describes a language about which the developers are passionate (often to the point of proselytic zeal) but no one else cares about. Applied to the language by those outside the originating group. "He cornered me about type resolution in his MFTL." The first great goal in the mind of the designer of an MFTL is usually to write a compiler for it, then bootstrap the design away from contamination by lesser languages by writing a compiler for it in itself. Thus, the standard put-down question at an MFTL talk is "Has it been used for anything besides its own compiler?" On the other hand, a (compiled) language that cannot even be used to write its own compiler is beneath contempt. (The qualification has become necessary because of the increasing popularity of interpreted languages like Perl and Python. See break-even point. (On a related note, Doug McIlroy once proposed a test of the generality and utility of a language and the operating system under which it is compiled: "Is the output of a FORTRAN program acceptable as input to the FORTRAN compiler?" In other words, can you write programs that write programs? (See toolsmith.) Alarming numbers of (language, OS) pairs fail this test, particularly when the language is FORTRAN; aficionados are quick to point out that Unix (even using FORTRAN) passes it handily. That the test could ever be failed is only surprising to those who have had the good fortune to have worked only under modern systems which lack OS-supported and -imposed "file types".) mickey n. The resolution unit of mouse movement. It has been suggested that the `disney' will become a benchmark unit for animation graphics performance. mickey mouse program n. North American equivalent of a noddy (that is, trivial) program. Doesn't necessarily have the belittling connotations of mainstream slang "Oh, that's just mickey mouse stuff!"; sometimes trivial programs can be very useful. micro- pref. 1. Very small; this is the root of its use as a quantifier prefix. 2. A quantifier prefix, calling for multiplication by 10^(-6) (see quantifiers). Neither of these uses is peculiar to hackers, but hackers tend to fling them both around rather more freely than is countenanced in standard English. It is recorded, for example, that one CS professor used to characterize the standard length of his lectures as a microcentury -- that is, about 52.6 minutes (see also attoparsec, nanoacre, and especially microfortnight). 3. Personal or human-scale -- that is, capable of being maintained or comprehended or manipulated by one human being. This sense is generalized from `microcomputer', and is esp. used in contrast with `macro-' (the corresponding Greek prefix meaning `large'). 4. Local as opposed to global (or macro-). Thus a hacker might say that buying a smaller car to reduce pollution only solves a microproblem; the macroproblem of getting to work might be better solved by using mass transit, moving to within walking distance, or (best of all) telecommuting. MicroDroid n. [Usenet] A Microsoft employee, esp. one who posts to various operating-system advocacy newsgroups. MicroDroids post follow-ups to any messages critical of Microsoft's operating systems, and often end up sounding like visiting fundamentalist missionaries. See also astroturfing; compare microserf. microfloppies n. 3.5-inch floppies, as opposed to 5.25-inch vanilla or mini-floppies and the now-obsolete 8-inch variety. This term may be headed for obsolescence as 5.25-inchers pass out of use, only to be revived if anybody floats a sub-3-inch floppy standard. See stiffy, minifloppies. microfortnight n. 1/1000000 of the fundamental unit of time in the Furlong/Firkin/Fortnight system of measurement; 1.2096 sec. (A furlong is 1/8th of a mile; a firkin is 1/4th of a barrel; the mass unit of the system is taken to be a firkin of water). The VMS operating system has a lot of tuning parameters that you can set with the SYSGEN utility, and one of these is TIMEPROMPTWAIT, the time the system will wait for an operator to set the correct date and time at boot if it realizes that the current value is bogus. This time is specified in microfortnights! Multiple uses of the millifortnight (about 20 minutes) and nanofortnight have also been reported. microLenat /mi:`-kroh-len'-*t/ n. The unit of bogosity. consensus is that this is the largest unit practical for everyday use. The microLenat, originally invented by David Jefferson, was promulgated as an attack against noted computer scientist Doug Lenat by a tenured graduate student at CMU. Doug had failed the student on an important exam because the student gave only "AI is bogus" as his answer to the questions. The slur is generally considered unmerited, but it has become a running gag nevertheless. Some of Doug's friends argue that of course a microLenat is bogus, since it is only one millionth of a Lenat. Others have suggested that the unit should be redesignated after the grad student, as the microReid. microReid /mi:'kroh-reed/ n. See microLenat. microserf /mi:'kro-s*rf/ [popularized, though not originated, by Douglas Copeland's book "Microserfs"] A programmer at Microsoft, especially a low-level coder with little chance of fame or fortune. Compare MicroDroid. Microsloth Windows /mi:'kroh-sloth` win'dohz/ n. (Variants combine {Microshift, Macroshaft, Microsuck} with {Windoze, WinDOS}. Hackerism(s) for `Microsoft Windows'. A thirty-two bit extension and graphical shell to a sixteen bit patch to an eight bit operating system originally coded for a four bit microprocessor which was written by a two-bit company that can't stand one bit of competition. Also just called `Windoze', with the implication that you can fall asleep waiting for it to do anything; the latter term is extremely common on Usenet. See Black Screen of Death and Blue Screen of Death; compare X, sun-stools. Microsoft The new Evil Empire (the old one was IBM). The basic complaints are, as formerly with IBM, that (a) their system designs are horrible botches, (b) we can't get source to fix them, and (c) they throw their weight around a lot. See also Halloween Documents. micros~1 An abbreviation of the full name Microsoft resembling the rather bogus way Windows 9x's VFAT filesystem truncates long file names to fit in the MS-DOS 8+3 scheme (the real filename is stored elsewhere). If other files start with the same prefix, they'll be called micros~2 and so on, causing lots of problems with backups and other routine system-administration problems. During the US Antitrust trial against Microsoft the names Micros~1 ans Micros~2 were suggested for the two companies that would exist after a break-up. middle-endian adj. Not big-endian or little-endian. Used of perverse byte orders such as 3-4-1-2 or 2-1-4-3, occasionally found in the packed-decimal formats of minicomputer manufacturers who shall remain nameless. See NUXI problem. Non-US hackers use this term to describe the American mm/dd/yy style of writing dates (Europeans write little-endian dd/mm/yy, and Japanese use big-endian yy/mm/dd for Western dates). middle-out implementation See bottom-up implementation. = milliLampson /mil'*-lamp`sn/ n. A unit of talking speed, abbreviated mL. Most people run about 200 milliLampsons. The eponymous Butler Lampson (a CS theorist and systems implementor highly regarded among hackers) goes at 1000. A few people speak faster. This unit is sometimes used to compare the (sometimes widely disparate) rates at which people can generate ideas and actually emit them in speech. For example, noted computer architect C. Gordon Bell (designer of the PDP-11) is said, with some awe, to think at about 1200 mL but only talk at about 300; he is frequently reduced to fragments of sentences as his mouth tries to keep up with his speeding brain. minifloppies n.,obs. 5.25-inch floppy disks, as opposed to 3.5-inch or microfloppies and the long-obsolescent 8-inch variety (if there is ever a smaller size, they will undoubtedly be tagged `nanofloppies'). At one time, this term was a trademark of Shugart Associates for their SA-400 minifloppy drive. Nobody paid any attention. See stiffy. MIPS /mips/ n. [abbreviation] 1. A measure of computing speed; formally, `Million Instructions Per Second' (that's 10^6 per second, not 2^(20)!); often rendered by hackers as `Meaningless Indication of Processor Speed' or in other unflattering ways, such as `Meaningless Information Provided by Salesmen'. This joke expresses an attitude nearly universal among hackers about the value of most benchmark claims, said attitude being one of the great cultural divides between hackers and marketroids (see also BogoMIPS). The singular is sometimes `1 MIP' even though this is clearly etymologically wrong. See also KIPS and GIPS. 2. Computers, especially large computers, considered abstractly as sources of computrons. "This is just a workstation; the heavy MIPS are hidden in the basement." 3. The corporate name of a particular RISC-chip company; among other things, they designed the processor chips used in DEC's 3100 workstation series. 4. Acronym for `Meaningless Information per Second' (a joke, prob. from sense 1). misbug /mis-buhg/ n. [MIT; rare (like its referent)] An unintended property of a program that turns out to be useful; something that should have been a bug but turns out to be a feature. Compare green lightning. See miswart. misfeature /mis-fee'chr/ or /mis'fee`chr/ n. [common] A feature that eventually causes lossage, possibly because it is not adequate for a new situation that has evolved. Since it results from a deliberate and properly implemented feature, a misfeature is not a bug. Nor is it a simple unforeseen side effect; the term implies that the feature in question was carefully planned, but its long-term consequences were not accurately or adequately predicted (which is quite different from not having thought ahead at all). A misfeature can be a particularly stubborn problem to resolve, because fixing it usually involves a substantial philosophical change to the structure of the system involved. Many misfeatures (especially in user-interface design) arise because the designers/implementors mistake their personal tastes for laws of nature. Often a former feature becomes a misfeature because trade-offs were made whose parameters subsequently change (possibly only in the judgment of the implementors). "Well, yeah, it is kind of a misfeature that file names are limited to six characters, but the original implementors wanted to save directory space and we're stuck with it for now." Missed'em-five n. Pejorative hackerism for AT&T System V Unix, generally used by BSD partisans in a bigoted mood. (The synonym `SysVile' is also encountered.) See software bloat, Berzerkeley. missile address n. See ICBM address. miswart /mis-wort/ n. [from wart by analogy with misbug] A feature that superficially appears to be a wart but has been determined to be the Right Thing. For example, in some versions of the EMACS text editor, the `transpose characters' command exchanges the character under the cursor with the one before it on the screen, except when the cursor is at the end of a line, in which case the two characters before the cursor are exchanged. While this behavior is perhaps surprising, and certainly inconsistent, it has been found through extensive experimentation to be what most users want. This feature is a miswart. = MMF // [Usenet; common] Abbreviation: "Make Money Fast". Refers to any kind of scheme which promises participants large profits with little or no risk or effort. Typically, it is a some kind of multi-level marketing operation which involves recruiting more members, or an illegal pyramid scam. The term is also used to refer to any kind of spam which promotes this. For more information, see the Make Money Fast Myth Page. mobo /moh'bo/ Written and (rarely) spoken contraction of "motherboard" moby /moh'bee/ [MIT: seems to have been in use among model railroad fans years ago. Derived from Melville's "Moby Dick" (some say from `Moby Pickle'). Now common.] 1. adj. Large, immense, complex, impressive. "A Saturn V rocket is a truly moby frob." "Some MIT undergrads pulled off a moby hack at the Harvard-Yale game." (See Appendix A for discussion.) 2. n. obs. The maximum address space of a machine (see below). For a 680[234]0 or VAX or most modern 32-bit architectures, it is 4,294,967,296 8-bit bytes (4 gigabytes). 3. A title of address (never of third-person reference), usually used to show admiration, respect, and/or friendliness to a competent hacker. "Greetings, moby Dave. How's that address-book thing for the Mac going?" 4. adj. In backgammon, doubles on the dice, as in `moby sixes', `moby ones', etc. Compare this with bignum (sense 3): double sixes are both bignums and moby sixes, but moby ones are not bignums (the use of `moby' to describe double ones is sarcastic). Standard emphatic forms: `Moby foo', `moby win', `moby loss'. `Foby moo': a spoonerism due to Richard Greenblatt. 5. The largest available unit of something which is available in discrete increments. Thus, ordering a "moby Coke" at the local fast-food joint is not just a request for a large Coke, it's an explicit request for the largest size they sell. This term entered hackerdom with the Fabritek 256K memory added to the MIT AI PDP-6 machine, which was considered unimaginably huge when it was installed in the 1960s (at a time when a more typical memory size for a timesharing system was 72 kilobytes). Thus, a moby is classically 256K 36-bit words, the size of a PDP-6 or PDP-10 moby. Back when address registers were narrow the term was more generally useful, because when a computer had virtual memory mapping, it might actually have more physical memory attached to it than any one program could access directly. One could then say "This computer has 6 mobies" meaning that the ratio of physical memory to address space is 6, without having to say specifically how much memory there actually is. That in turn implied that the computer could timeshare six `full-sized' programs without having to swap programs between memory and disk. Nowadays the low cost of processor logic means that address spaces are usually larger than the most physical memory you can cram onto a machine, so most systems have much less than one theoretical `native' moby of core. Also, more modern memory-management techniques (esp. paging) make the `moby count' less significant. However, there is one series of widely-used chips for which the term could stand to be revived -- the Intel 8088 and 80286 with their incredibly brain-damaged segmented-memory designs. On these, a `moby' would be the 1-megabyte address span of a segment/offset pair (by coincidence, a PDP-10 moby was exactly 1 megabyte of 9-bit bytes). mockingbird n. Software that intercepts communications (especially login transactions) between users and hosts and provides system-like responses to the users while saving their responses (especially account IDs and passwords). A special case of Trojan horse. mod vt.,n. [very common] 1. Short for `modify' or `modification'. Very commonly used -- in fact the full terms are considered markers that one is being formal. The plural `mods' is used esp. with reference to bug fixes or minor design changes in hardware or software, most esp. with respect to patch sets or a diff. 2. Short for modulo but used only for its techspeak sense. mode n. [common] A general state, usually used with an adjective describing the state. Use of the word `mode' rather than `state' implies that the state is extended over time, and probably also that some activity characteristic of that state is being carried out. "No time to hack; I'm in thesis mode." In its jargon sense, `mode' is most often attributed to people, though it is sometimes applied to programs and inanimate objects. In particular, see hack mode, day mode, night mode, demo mode, fireworks mode, and yoyo mode; also talk mode. One also often hears the verbs `enable' and `disable' used in connection with jargon modes. Thus, for example, a sillier way of saying "I'm going to crash" is "I'm going to enable crash mode now". One might also hear a request to "disable flame mode, please". In a usage much closer to techspeak, a mode is a special state that certain user interfaces must pass into in order to perform certain functions. For example, in order to insert characters into a document in the Unix editor vi, one must type the "i" key, which invokes the "Insert" command. The effect of this command is to put vi into "insert mode", in which typing the "i" key has a quite different effect (to wit, it inserts an "i" into the document). One must then hit another special key, "ESC", in order to leave "insert mode". Nowadays, modeful interfaces are generally considered losing but survive in quite a few widely used tools built in less enlightened times. mode bit n. [common] A flag, usually in hardware, that selects between two (usually quite different) modes of operation. The connotations are different from flag bit in that mode bits are mainly written during a boot or set-up phase, are seldom explicitly read, and seldom change over the lifetime of an ordinary program. The classic example was the EBCDIC-vs.-ASCII bit (#12) of the Program Status Word of the IBM 360. modulo /mod'yu-loh/ prep. Except for. An overgeneralization of mathematical terminology; one can consider saying that 4 equals 22 except for the 9s (4 = 22 mod 9). "Well, LISP seems to work okay now, modulo that GC bug." "I feel fine today modulo a slight headache." = molly-guard /mol'ee-gard/ n. [University of Illinois] A shield to prevent tripping of some Big Red Switch by clumsy or ignorant hands. Originally used of the plexiglass covers improvised for the BRS on an IBM 4341 after a programmer's toddler daughter (named Molly) frobbed it twice in one day. Later generalized to covers over stop/reset switches on disk drives and networking equipment. In hardware catalogues, you'll see the much less interesting description "guarded button". Mongolian Hordes technique n. [poss. from the Sixties counterculture expression `Mongolian clusterfuck' for a public orgy] Development by gang bang. Implies that large numbers of inexperienced programmers are being put on a job better performed by a few skilled ones (but see bazaar). Also called `Chinese Army technique'; see also Brooks's Law. = monkey up vt. To hack together hardware for a particular task, especially a one-shot job. Connotes an extremely crufty and consciously temporary solution. Compare hack up, kluge up, cruft together. monkey, scratch n. See scratch monkey. monstrosity 1. n. A ridiculously elephantine program or system, esp. one that is buggy or only marginally functional. 2. adj. The quality of being monstrous (see `Overgeneralization' in the discussion of jargonification). See also baroque. monty /mon'tee/ n. 1. [US Geological Survey] A program with a ludicrously complex user interface written to perform extremely trivial tasks. An example would be a menu-driven, button clicking, pulldown, pop-up windows program for listing directories. The original monty was an infamous weather-reporting program, Monty the Amazing Weather Man, written at the USGS. Monty had a widget-packed X-window interface with over 200 buttons; and all monty actually did was FTP files off the network. 2. [Great Britain; commonly capitalized as `Monty' or as `the Full Monty'] 16 megabytes of memory, when fitted to an IBM-PC or compatible. A standard PC-compatible using the AT- or ISA-bus with a normal BIOS cannot access more than 16 megabytes of RAM. Generally used of a PC, Unix workstation, etc. to mean `fully populated with' memory, disk-space or some other desirable resource. This usage may be related to a TV commercial for Del Monte fruit juice, in which one of the characters insisted on "the full Del Monte"; but see the World Wide Words article "The Full Monty" for discussion of the rather complex etymology that may lie behind this. Compare American moby. = Moof /moof/ [Macintosh users] 1. n. The call of a semi-legendary creature, properly called the dogcow. (Some previous versions of this entry claimed, incorrectly, that Moof was the name of the creature.) 2. adj. Used to flag software that's a hack, something untested and on the edge. On one Apple CD-ROM, certain folders such as "Tools & Apps (Moof!)" and "Development Platforms (Moof!)", are so marked to indicate that they contain software not fully tested or sanctioned by the powers that be. When you open these folders you cross the boundary into hackerland. 3. v. On the Microsoft Network, the term `moof' has gained popularity as a verb meaning `to be suddenly disconnected by the system'. One might say "I got moofed". = Moore's Law /morz law/ prov. The observation that the logic density of silicon integrated circuits has closely followed the curve (bits per square inch) = 2^(t - 1962) where t is time in years; that is, the amount of information storable on a given amount of silicon has roughly doubled every year since the technology was invented. This relation, first uttered in 1964 by semiconductor engineer Gordon Moore (who co-founded Intel four years later) held until the late 1970s, at which point the doubling period slowed to 18 months. The doubling period remained at that value through time of writing (late 1999). Moore's Law is apparently self-fulfilling. The implication is that somebody, somewhere is going to be able to build a better chip than you if you rest on your laurels, so you'd better start pushing hard on the problem. See also Parkinson's Law of Data and Gates's Law. moose call n. See whalesong. moria /mor'ee-*/ n. Like nethack and rogue, one of the large PD Dungeons-and-Dragons-like simulation games, available for a wide range of machines and operating systems. The name is from Tolkien's Mines of Moria; compare elder days, elvish. The game is extremely addictive and a major consumer of time better used for hacking. See also nethack, rogue, Angband. = MOTAS /moh-tahz/ n. [Usenet: Member Of The Appropriate Sex, after MOTOS and MOTSS] A potential or (less often) actual sex partner. See also SO. = MOTOS /moh-tohs/ n. [acronym from the 1970 U.S. census forms via Usenet: Member Of The Opposite Sex] A potential or (less often) actual sex partner. See MOTAS, MOTSS, SO. Less common than MOTSS or MOTAS, which has largely displaced it. = MOTSS /mots/ or /M-O-T-S-S/ n. [from the 1970 U.S. census forms via Usenet] Member Of The Same Sex, esp. one considered as a possible sexual partner. The gay-issues newsgroup on Usenet is called _soc.motss_. See MOTOS and MOTAS, which derive from it. See also SO. mouse ahead vi. Point-and-click analog of `type ahead'. To manipulate a computer's pointing device (almost always a mouse in this usage, but not necessarily) and its selection or command buttons before a computer program is ready to accept such input, in anticipation of the program accepting the input. Handling this properly is rare, but it can help make a WIMP environment much more usable, assuming the users are familiar with the behavior of the user interface. mouse around vi. To explore public portions of a large system, esp. a network such as Internet via FTP or TELNET, looking for interesting stuff to snarf. mouse belt n. See rat belt. mouse droppings n. [MS-DOS] Pixels (usually single) that are not properly restored when the mouse pointer moves away from a particular location on the screen, producing the appearance that the mouse pointer has left droppings behind. The major causes for this problem are programs that write to the screen memory corresponding to the mouse pointer's current location without hiding the mouse pointer first, and mouse drivers that do not quite support the graphics mode in use. mouse elbow n. A tennis-elbow-like fatigue syndrome resulting from excessive use of a WIMP environment. Similarly, `mouse shoulder'; GLS reports that he used to get this a lot before he taught himself to be ambimoustrous. mouso /mow'soh/ n. [by analogy with `typo'] An error in mouse usage resulting in an inappropriate selection or graphic garbage on the screen. Compare thinko, braino. MS-DOS /M-S-dos/ n. [MicroSoft Disk Operating System] A clone of CP/M for the 8088 crufted together in 6 weeks by hacker Tim Paterson at Seattle Computer Products, who called the original QDOS (Quick and Dirty Operating System) and is said to have regretted it ever since. Microsoft licensed QDOS order to have something to demo for IBM on time, and the rest is history. Numerous features, including vaguely Unix-like but rather broken support for subdirectories, I/O redirection, and pipelines, were hacked into Microsoft's 2.0 and subsequent versions; as a result, there are two or more incompatible versions of many system calls, and MS-DOS programmers can never agree on basic things like what character to use as an option switch or whether to be case-sensitive. The resulting appalling mess is now the highest-unit-volume OS in history. Often known simply as DOS, which annoys people familiar with other similarly abbreviated operating systems (the name goes back to the mid-1960s, when it was attached to IBM's first disk operating system for the 360). The name further annoys those who know what the term operating system does (or ought to) connote; DOS is more properly a set of relatively simple interrupt services. Some people like to pronounce DOS like "dose", as in "I don't work on dose, man!", or to compare it to a dose of brain-damaging drugs (a slogan button in wide circulation among hackers exhorts: "MS-DOS: Just say No!"). See mess-dos, ill-behaved. mu /moo/ The correct answer to the classic trick question "Have you stopped beating your wife yet?". Assuming that you have no wife or you have never beaten your wife, the answer "yes" is wrong because it implies that you used to beat your wife and then stopped, but "no" is worse because it suggests that you have one and are still beating her. According to various Discordians and Douglas Hofstadter the correct answer is usually "mu", a Japanese word alleged to mean "Your question cannot be answered because it depends on incorrect assumptions". Hackers tend to be sensitive to logical inadequacies in language, and many have adopted this suggestion with enthusiasm. The word `mu' is actually from Chinese, meaning `nothing'; it is used in mainstream Japanese in that sense. Native speakers do not recognize the Discordian question-denying use, which almost certainly derives from overgeneralization of the answer in the following well-known Rinzai Zen koan: A monk asked Joshu, "Does a dog have the Buddha nature?" Joshu retorted, "Mu!" See also has the X nature, Some AI Koans, and Douglas Hofstadter's "Gödel, Escher, Bach: An Eternal Golden Braid" (pointer in the Bibliography in Appendix C. MUD /muhd/ n. [acronym, Multi-User Dungeon; alt. Multi-User Dimension] 1. A class of virtual reality experiments accessible via the Internet. These are real-time chat forums with structure; they have multiple `locations' like an adventure game, and may include combat, traps, puzzles, magic, a simple economic system, and the capability for characters to build more structure onto the database that represents the existing world. 2. vi. To play a MUD. The acronym MUD is often lowercased and/or verbed; thus, one may speak of `going mudding', etc. Historically, MUDs (and their more recent progeny with names of MU- form) derive from a hack by Richard Bartle and Roy Trubshaw on the University of Essex's DEC-10 in the early 1980s; descendants of that game still exist today and are sometimes generically called _BartleMUD_s. There is a widespread myth (repeated, unfortunately, by earlier versions of this lexicon) that the name MUD was trademarked to the commercial MUD run by Bartle on British Telecom (the motto: "You haven't lived 'til you've died on MUD!"); however, this is false -- Richard Bartle explicitly placed `MUD' in the public domain in 1985. BT was upset at this, as they had already printed trademark claims on some maps and posters, which were released and created the myth. Students on the European academic networks quickly improved on the MUD concept, spawning several new MUDs (VAXMUD, AberMUD, LPMUD). Many of these had associated bulletin-board systems for social interaction. Because these had an image as `research' they often survived administrative hostility to BBSs in general. This, together with the fact that Usenet feeds were often spotty and difficult to get in the U.K., made the MUDs major foci of hackish social interaction there. AberMUD and other variants crossed the Atlantic around 1988 and quickly gained popularity in the U.S.; they became nuclei for large hacker communities with only loose ties to traditional hackerdom (some observers see parallels with the growth of Usenet in the early 1980s). The second wave of MUDs (TinyMUD and variants) tended to emphasize social interaction, puzzles, and cooperative world-building as opposed to combat and competition (in writing, these social MUDs are sometimes referred to as `MU*', with `MUD' implicitly reserved for the more game-oriented ones). By 1991, over 50% of MUD sites were of a third major variety, LPMUD, which synthesizes the combat/puzzle aspects of AberMUD and older systems with the extensibility of TinyMud. In 1996 the cutting edge of the technology is Pavel Curtis's MOO, even more extensible using a built-in object-oriented language. The trend toward greater programmability and flexibility will doubtless continue. The state of the art in MUD design is still moving very rapidly, with new simulation designs appearing (seemingly) every month. Around 1991 there was an unsuccessful movement to deprecate the term MUD itself, as newer designs exhibit an exploding variety of names corresponding to the different simulation styles being explored. It survived. See also bonk/oif, FOD, link-dead, mudhead, talk mode. muddie n. Syn. mudhead. More common in Great Britain, possibly because system administrators there like to mutter "bloody muddies" when annoyed at the species. = mudhead n. Commonly used to refer to a MUD player who eats, sleeps, and breathes MUD. Mudheads have been known to fail their degrees, drop out, etc., with the consolation, however, that they made wizard level. When encountered in person, on a MUD, or in a chat system, all a mudhead will talk about is three topics: the tactic, character, or wizard that is supposedly always unfairly stopping him/her from becoming a wizard or beating a favorite MUD; why the specific game he/she has experience with is so much better than any other; and the MUD he or she is writing or going to write because his/her design ideas are so much better than in any existing MUD. See also wannabee. To the anthropologically literate, this term may recall the Zuni/Hopi legend of the mudheads or `koyemshi', mythical half-formed children of an unnatural union. Figures representing them act as clowns in Zuni sacred ceremonies. Others may recall the `High School Madness' sequence from the Firesign Theatre album "Don't Crush That Dwarf, Hand Me the Pliers", in which there is a character named "Mudhead". = muggle [from J.K. Rowling's `Harry Potter' books, 1998] A non-wizard. Not as disparaging as luser; implies vague pity rather than contempt. In the universe of Rowling's enormously (and deservedly) popular children's series, muggles and wizards inhabit the same modern world, but each group is ignorant of the commonplaces of the others' existence - most muggles are unaware that wizards exist, and wizards (used to magical ways of doing everything) are perplexed and fascinated by muggle artifacts. In retrospect it seems completely inevitable that hackers would adopt this metaphor, and in hacker usage it readily forms compounds such as `muggle-friendly'. Compare luser, mundane. = multician /muhl-ti'shn/ n. [coined at Honeywell, ca. 1970] Competent user of Multics. Perhaps oddly, no one has ever promoted the analogous `Unician'. Multics /muhl'tiks/ n. [from "MULTiplexed Information and Computing Service"] An early time-sharing operating system co-designed by a consortium including MIT, GE, and Bell Laboratories as a successor to CTSS. The design was first presented in 1965, planned for operation in 1967, first operational in 1969, and took several more years to achieve respectable performance and stability. Multics was very innovative for its time -- among other things, it provided a hierarchical file system with access control on individual files and introduced the idea of treating all devices uniformly as special files. It was also the first OS to run on a symmetric multiprocessor, and the only general-purpose system to be awarded a B2 security rating by the NSA (see Orange Book). Bell Labs left the development effort in 1969 after judging that second-system effect had bloated Multics to the point of practical unusability. Honeywell commercialized Multics in 1972 after buying out GE's computer group, but it was never very successful: at its peak in the 1980s, there were between 75 and 100 Multics sites, each a multi-million dollar mainframe. One of the former Multics developers from Bell Labs was Ken Thompson, and Unix deliberately carried through and extended many of Multics' design ideas; indeed, Thompson described the very name `Unix' as `a weak pun on Multics'. For this and other reasons, aspects of the Multics design remain a topic of occasional debate among hackers. See also brain-damaged and GCOS. MIT ended its development association with Multics in 1977. Honeywell sold its computer business to Bull in the mid 80s, and development on Multics was stopped in 1988. Four Multics sites were known to be still in use as late as 1998. There is a Multics page at http://www.stratus.com/pub/vos/multics/tvv/multics.html. = multitask n. Often used of humans in the same meaning it has for computers, to describe a person doing several things at once (but see thrash). The term `multiplex', from communications technology (meaning to handle more than one channel at the same time), is used similarly. mumblage /muhm'bl*j/ n. The topic of one's mumbling (see mumble). "All that mumblage" is used like "all that stuff" when it is not quite clear how the subject of discussion works, or like "all that crap" when `mumble' is being used as an implicit replacement for pejoratives. M = mumble interj. 1. Said when the correct response is too complicated to enunciate, or the speaker has not thought it out. Often prefaces a longer answer, or indicates a general reluctance to get into a long discussion. "Don't you think that we could improve LISP performance by using a hybrid reference-count transaction garbage collector, if the cache is big enough and there are some extra cache bits for the microcode to use?" "Well, mumble ... I'll have to think about it." 2. [MIT] Expression of not-quite-articulated agreement, often used as an informal vote of consensus in a meeting: "So, shall we dike out the COBOL emulation?" "Mumble!" 3. Sometimes used as an expression of disagreement (distinguished from sense 2 by tone of voice and other cues). "I think we should buy a VAX." "Mumble!" Common variant: `mumble frotz' (see frotz; interestingly, one does not say `mumble frobnitz' even though `frotz' is short for `frobnitz'). 4. Yet another metasyntactic variable, like foo. 5. When used as a question ("Mumble?") means "I didn't understand you". 6. Sometimes used in `public' contexts on-line as a placefiller for things one is barred from giving details about. For example, a poster with pre-released hardware in his machine might say "Yup, my machine now has an extra 16M of memory, thanks to the card I'm testing for Mumbleco." 7. A conversational wild card used to designate something one doesn't want to bother spelling out, but which can be glarked from context. Compare blurgle. 8. [XEROX PARC] A colloquialism used to suggest that further discussion would be fruitless. = munch vt. [often confused with mung, q.v.] To transform information in a serial fashion, often requiring large amounts of computation. To trace down a data structure. Related to crunch and nearly synonymous with grovel, but connotes less pain. munching n. Exploration of security holes of someone else's computer for thrills, notoriety, or to annoy the system manager. Compare cracker. See also hacked off. munching squares n. A display hack dating back to the PDP-1 (ca. 1962, reportedly discovered by Jackson Wright), which employs a trivial computation (repeatedly plotting the graph Y = X XOR T for successive values of T -- see HAKMEM items 146-148) to produce an impressive display of moving and growing squares that devour the screen. The initial value of T is treated as a parameter, which, when well-chosen, can produce amazing effects. Some of these, later (re)discovered on the LISP machine, have been christened `munching triangles' (try AND for XOR and toggling points instead of plotting them), `munching w's', and `munching mazes'. More generally, suppose a graphics program produces an impressive and ever-changing display of some basic form, foo, on a display terminal, and does it using a relatively simple program; then the program (or the resulting display) is likely to be referred to as `munching foos'. [This is a good example of the use of the word foo as a metasyntactic variable.] munchkin /muhnch'kin/ n. [from the squeaky-voiced little people in L. Frank Baum's "The Wizard of Oz"] A teenage-or-younger micro enthusiast hacking BASIC or something else equally constricted. A term of mild derision -- munchkins are annoying but some grow up to be hackers after passing through a larval stage. The term urchin is also used. See also wannabee, bitty box. M = mundane n. [from SF fandom] 1. A person who is not in science fiction fandom. 2. A person who is not in the computer industry. In this sense, most often an adjectival modifier as in "in my mundane life...." See also Real World, muggle. = mung /muhng/ vt. [in 1960 at MIT, `Mash Until No Good'; sometime after that the derivation from the recursive acronym `Mung Until No Good' became standard; but see munge] 1. To make changes to a file, esp. large-scale and irrevocable changes. See BLT. 2. To destroy, usually accidentally, occasionally maliciously. The system only mungs things maliciously; this is a consequence of Finagle's Law. See scribble, mangle, trash, nuke. Reports from Usenet suggest that the pronunciation /muhnj/ is now usual in speech, but the spelling `mung' is still common in program comments (compare the widespread confusion over the proper spelling of kluge). 3. The kind of beans the sprouts of which are used in Chinese food. (That's their real name! Mung beans! Really!) Like many early hacker terms, this one seems to have originated at TMRC; it was already in use there in 1958. Peter Samson (compiler of the original TMRC lexicon) thinks it may originally have been onomatopoeic for the sound of a relay spring (contact) being twanged. However, it is known that during the World Wars, `mung' was U.S. army slang for the ersatz creamed chipped beef better known as `SOS', and it seems quite likely that the word in fact goes back to Scots-dialect munge. = munge /muhnj/ vt. 1. [derogatory] To imperfectly transform information. 2. A comprehensive rewrite of a routine, data structure or the whole program. 3. To modify data in some way the speaker doesn't need to go into right now or cannot describe succinctly (compare mumble). 4. To add spamblock to an email address. This term is often confused with mung, which probably was derived from it. However, it also appears the word `munge' was in common use in Scotland in the 1940s, and in Yorkshire in the 1950s, as a verb, meaning to munch up into a masticated mess, and as a noun, meaning the result of munging something up (the parallel with the kluge/kludge pair is amusing). The OED reports `munge' as an archaic verb nmeaning "to wipe (a person's nose)". = Murphy's Law prov. The correct, original Murphy's Law reads: "If there are two or more ways to do something, and one of those ways can result in a catastrophe, then someone will do it." This is a principle of defensive design, cited here because it is usually given in mutant forms less descriptive of the challenges of design for lusers. For example, you don't make a two-pin plug symmetrical and then label it `THIS WAY UP'; if it matters which way it is plugged in, then you make the design asymmetrical (see also the anecdote under magic smoke). Edward A. Murphy, Jr. was one of the engineers on the rocket-sled experiments that were done by the U.S. Air Force in 1949 to test human acceleration tolerances (USAF project MX981). One experiment involved a set of 16 accelerometers mounted to different parts of the subject's body. There were two ways each sensor could be glued to its mount, and somebody methodically installed all 16 the wrong way around. Murphy then made the original form of his pronouncement, which the test subject (Major John Paul Stapp) quoted at a news conference a few days later. Within months `Murphy's Law' had spread to various technical cultures connected to aerospace engineering. Before too many years had gone by variants had passed into the popular imagination, changing as they went. Most of these are variants on "Anything that can go wrong, will"; this is correctly referred to as Finagle's Law. The memetic drift apparent in these mutants clearly demonstrates Murphy's Law acting on itself! music n. A common extracurricular interest of hackers (compare science-fiction fandom, oriental food; see also filk). Hackish folklore has long claimed that musical and programming abilities are closely related, and there has been at least one large-scale statistical study that supports this. Hackers, as a rule, like music and often develop musical appreciation in unusual and interesting directions. Folk music is very big in hacker circles; so is electronic music, and the sort of elaborate instrumental jazz/rock that used to be called `progressive' and isn't recorded much any more. The hacker's musical range tends to be wide; many can listen with equal appreciation to (say) Talking Heads, Yes, Gentle Giant, Pat Metheny, Scott Joplin, Tangerine Dream, Dream Theater, King Sunny Ade, The Pretenders, Screaming Trees, or the Brandenburg Concerti. It is also apparently true that hackerdom includes a much higher concentration of talented amateur musicians than one would expect from a similar-sized control group of mundane types. mutter vt. To quietly enter a command not meant for the ears, eyes, or fingers of ordinary mortals. Often used in `mutter an incantation'. See also wizard. = N = N: nadger: nagware: nailed to the wall: nailing jelly: naive: naive user: NAK: NANA: nano: nano-: nanoacre: nanobot: nanocomputer: nanofortnight: nanotechnology: nasal demons: nastygram: Nathan Hale: nature: neat hack: neats vs. scruffies: neep-neep: neophilia: nerd: nerd knob: net.-: net.god: net.personality: net.police: NetBOLLIX: netburp: netdead: nethack: netiquette: netlag: netnews: netrock: Netscrape: netsplit: netter: network address: network meltdown: New Jersey: New Testament: newbie: newgroup wars: newline: NeWS: newsfroup: newsgroup: nick: nickle: night mode: Nightmare File System: NIL: Ninety-Ninety Rule: nipple mouse: NMI: no-op: noddy: node: Nominal Semidestructor: non-optimal solution: nonlinear: nontrivial: not ready for prime time: notwork: NP-: nroff: NSA line eater: NSP: nude: nugry: nuke: number-crunching: numbers: NUXI problem: nybble: nyetwork: = N /N/ quant. 1. A large and indeterminate number of objects: "There were N bugs in that crock!" Also used in its original sense of a variable name: "This crock has N bugs, as N goes to infinity." (The true number of bugs is always at least N + 1; see Lubarsky's Law of Cybernetic Entomology.) 2. A variable whose value is inherited from the current context. For example, when a meal is being ordered at a restaurant, N may be understood to mean however many people there are at the table. From the remark "We'd like to order N wonton soups and a family dinner for N - 1" you can deduce that one person at the table wants to eat only soup, even though you don't know how many people there are (see great-wall). 3. `Nth': adj. The ordinal counterpart of N, senses 1 and 2. "Now for the Nth and last time..." In the specific context "Nth-year grad student", N is generally assumed to be at least 4, and is usually 5 or more (see tenured graduate student). See also random numbers, two-to-the-N. nadger /nad'jr/ v. [UK, from rude slang noun `nadgers' for testicles; compare American & British `bollixed'] Of software or hardware (not people), to twiddle some object in a hidden manner, generally so that it conforms better to some format. For instance, string printing routines on 8-bit processors often take the string text from the instruction stream, thus a print call looks like jsr print:"Hello world". The print routine has to `nadger' the saved instruction pointer so that the processor doesn't try to execute the text as instructions when the subroutine returns. See adger. nagware /nag'weir/ n. [Usenet] The variety of shareware that displays a large screen at the beginning or end reminding you to register, typically requiring some sort of keystroke to continue so that you can't use the software in batch mode. Compare annoyware, crippleware. nailed to the wall adj. [like a trophy] Said of a bug finally eliminated after protracted, and even heroic, effort. nailing jelly vi. See like nailing jelly to a tree. naive adj. 1. Untutored in the perversities of some particular program or system; one who still tries to do things in an intuitive way, rather than the right way (in really good designs these coincide, but most designs aren't `really good' in the appropriate sense). This trait is completely unrelated to general maturity or competence, or even competence at any other specific program. It is a sad commentary on the primitive state of computing that the natural opposite of this term is often claimed to be `experienced user' but is really more like `cynical user'. 2. Said of an algorithm that doesn't take advantage of some superior but advanced technique, e.g., the bubble sort. It may imply naivete on the part of the programmer, although there are situations where a naive algorithm is preferred, because it is more important to keep the code comprehensible than to go for maximum performance. "I know the linear search is naive, but in this case the list typically only has half a dozen items." = naive user n. A luser. Tends to imply someone who is ignorant mainly owing to inexperience. When this is applied to someone who has experience, there is a definite implication of stupidity. NAK /nak/ interj. [from the ASCII mnemonic for 0010101] 1. On-line joke answer to ACK?: "I'm not here." 2. On-line answer to a request for chat: "I'm not available." 3. Used to politely interrupt someone to tell them you don't understand their point or that they have suddenly stopped making sense. See ACK, sense 3. "And then, after we recode the project in COBOL...." "Nak, Nak, Nak! I thought I heard you say COBOL!" 4. A negative answer. "OK if I boot the server?" "NAK!" NANA // [Usenet] The newsgroups news.admin.net-abuse.*, devoted to fighting spam and network abuse. Each individual newsgroup is often referred to by adding a letter to NANA. For example, NANAU would refer to news.admin.net-abuse.usenet. When spam began to be a serious problem around 1995, and a loose network of anti-spammers formed to combat it, spammers immediately accused them of being the backbone cabal, or the Cabal reborn. Though this was not true, spam-fighters ironically accepted the label and the tag line "There is No Cabal" reappeared (later, and now commonly, abbreviated to "TINC"). Nowadays "the Cabal" is generally understood to refer to the NANA regulars. nano /nan'oh/ n. [CMU: from `nanosecond'] A brief period of time. "Be with you in a nano" means you really will be free shortly, i.e., implies what mainstream people mean by "in a jiffy" (whereas the hackish use of `jiffy' is quite different -- see jiffy). nano- pref. [SI: the next quantifier below micro-; meaning * 10^(-9)] Smaller than micro-, and used in the same rather loose and connotative way. Thus, one has nanotechnology (coined by hacker K. Eric Drexler) by analogy with `microtechnology'; and a few machine architectures have a `nanocode' level below `microcode'. Tom Duff at Bell Labs has also pointed out that "Pi seconds is a nanocentury". See also quantifiers, pico-, nanoacre, nanobot, nanocomputer, nanofortnight. = nanoacre /nan'oh-ay`kr/ n. A unit (about 2 mm square) of real estate on a VLSI chip. The term gets its giggle value from the fact that VLSI nanoacres have costs in the same range as real acres once one figures in design and fabrication-setup costs. nanobot /nan'oh-bot/ n. A robot of microscopic proportions, presumably built by means of nanotechnology. As yet, only used informally (and speculatively!). Also called a `nanoagent'. nanocomputer /nan'oh-k*m-pyoo'tr/ n. A computer with molecular-sized switching elements. Designs for mechanical nanocomputers which use single-molecule sliding rods for their logic have been proposed. The controller for a nanobot would be a nanocomputer. nanofortnight n. [Adelaide University] 1 fortnight * 10^(-9), or about 1.2 msec. This unit was used largely by students doing undergraduate practicals. See microfortnight, attoparsec, and micro-. nanotechnology /nan'-oh-tek-no`l*-jee/ n. A hypothetical fabrication technology in which objects are designed and built with the individual specification and placement of each separate atom. The first unequivocal nanofabrication experiments took place in 1990, for example with the deposition of individual xenon atoms on a nickel substrate to spell the logo of a certain very large computer company. Nanotechnology has been a hot topic in the hacker subculture ever since the term was coined by K. Eric Drexler in his book "Engines of Creation" (Anchor/Doubleday, ISBN 0-385-19973-2), where he predicted that nanotechnology could give rise to replicating assemblers, permitting an exponential growth of productivity and personal wealth (there's an authorized transcription at http://www.foresight.org/EOC/index.html.). See also blue goo, gray goo, nanobot. nasal demons n. Recognized shorthand on the Usenet group _comp.std.c_ for any unexpected behavior of a C compiler on encountering an undefined construct. During a discussion on that group in early 1992, a regular remarked "When the compiler encounters [a given undefined construct] it is legal for it to make demons fly out of your nose" (the implication is that the compiler may choose any arbitrarily bizarre way to interpret the code without violating the ANSI C standard). Someone else followed up with a reference to "nasal demons", which quickly became established. nastygram /nas'tee-gram/ n. 1. A protocol packet or item of email (the latter is also called a letterbomb) that takes advantage of misfeatures or security holes on the target system to do untoward things. 2. Disapproving mail, esp. from a net.god, pursuant to a violation of netiquette or a complaint about failure to correct some mail- or news-transmission problem. Compare shitogram, mailbomb. 3. A status report from an unhappy, and probably picky, customer. "What'd Corporate say in today's nastygram?" 4. [deprecated] An error reply by mail from a daemon; in particular, a bounce message. Nathan Hale n. An asterisk (see also splat, ASCII). Oh, you want an etymology? Notionally, from "I regret that I have only one asterisk for my country!", a misquote of the famous remark uttered by Nathan Hale just before he was hanged. Hale was a (failed) spy for the rebels in the American War of Independence. nature n. See has the X nature. neat hack n. [very common] 1. A clever technique. 2. A brilliant practical joke, where neatness is correlated with cleverness, harmlessness, and surprise value. Example: the Caltech Rose Bowl card display switch (see Appendix A for discussion). See also hack. neats vs. scruffies n. The label used to refer to one of the continuing holy wars in AI research. This conflict tangles together two separate issues. One is the relationship between human reasoning and AI; `neats' tend to try to build systems that `reason' in some way identifiably similar to the way humans report themselves as doing, while `scruffies' profess not to care whether an algorithm resembles human reasoning in the least as long as it works. More importantly, neats tend to believe that logic is king, while scruffies favor looser, more ad-hoc methods driven by empirical knowledge. To a neat, scruffy methods appear promiscuous, successful only by accident, and not productive of insights about how intelligence actually works; to a scruffy, neat methods appear to be hung up on formalism and irrelevant to the hard-to-capture `common sense' of living intelligences. neep-neep /neep neep/ n. [onomatopoeic, widely spread through SF fandom but reported to have originated at Caltech in the 1970s] One who is fascinated by computers. Less specific than hacker, as it need not imply more skill than is required to boot games on a PC. The derived noun `neeping' applies specifically to the long conversations about computers that tend to develop in the corners at most SF-convention parties (the term `neepery' is also in wide use). Fandom has a related proverb to the effect that "Hacking is a conversational black hole!". neophilia /nee`oh-fil'-ee-*/ n. The trait of being excited and pleased by novelty. Common among most hackers, SF fans, and members of several other connected leading-edge subcultures, including the pro-technology `Whole Earth' wing of the ecology movement, space activists, many members of Mensa, and the Discordian/neo-pagan underground. All these groups overlap heavily and (where evidence is available) seem to share characteristic hacker tropisms for science fiction, music, and oriental food. The opposite tendency is `neophobia'. nerd n. 1. [mainstream slang] Pejorative applied to anyone with an above-average IQ and few gifts at small talk and ordinary social rituals. 2. [jargon] Term of praise applied (in conscious ironic reference to sense 1) to someone who knows what's really important and interesting and doesn't care to be distracted by trivial chatter and silly status games. Compare the two senses of computer geek. The word itself appears to derive from the lines "And then, just to show them, I'll sail to Ka-Troo / And Bring Back an It-Kutch, a Preep and a Proo, / A Nerkle, a Nerd, and a Seersucker, too!" in the Dr. Seuss book "If I Ran the Zoo" (1950). (The spellings `nurd' and `gnurd' also used to be current at MIT, where `nurd' is reported from as far back as 1957.) How it developed its mainstream meaning is unclear, but sense 1 seems to have entered mass culture in the early 1970s (there are reports that in the mid-1960s it meant roughly "annoying misfit" without the connotation of intelligence). An IEEE Spectrum article (4/95, page 16) once derived `nerd' in its variant form `knurd' from the word `drunk' backwards, but this bears all the hallmarks of a bogus folk etymology. Hackers developed sense 2 in self-defense perhaps ten years later, and some actually wear "Nerd Pride" buttons, only half as a joke. At MIT one can find not only buttons but (what else?) pocket protectors bearing the slogan and the MIT seal. nerd knob n. [Cisco] a command in a complex piece of software which is more likely to be used by an extremely experienced user to tweak a setting of one sort or another - a setting which the average user may not even know exists. Nerd knobs tend to be toggles, turning on or off a particular, specific, narrowly defined behavior. net.- /net dot/ pref. [Usenet] Prefix used to describe people and events related to Usenet. From the time before the Great Renaming, when most non-local newsgroups had names beginning `net.'. Includes net.gods, `net.goddesses' (various charismatic net.women with circles of on-line admirers), `net.lurkers' (see lurker), `net.person', `net.parties' (a synonym for boink, sense 2), and many similar constructs. See also net.police. net.god /net god/ n. Accolade referring to anyone who satisfies some combination of the following conditions: has been visible on Usenet for more than 5 years, ran one of the original backbone sites, moderated an important newsgroup, wrote news software, or knows Gene, Mark, Rick, Mel, Henry, Chuq, and Greg personally. See demigod. Net.goddesses such as Rissa or the Slime Sisters have (so far) been distinguished more by personality than by authority. net.personality /net per`sn-al'-*-tee/ n. Someone who has made a name for him or herself on Usenet, through either longevity or attention-getting posts, but doesn't meet the other requirements of net.godhood. net.police /net-p*-lees'/ n. (var. `net.cops') Those Usenet readers who feel it is their responsibility to pounce on and flame any posting which they regard as offensive or in violation of their understanding of netiquette. Generally used sarcastically or pejoratively. Also spelled `net police'. See also net.-, code police. NetBOLLIX n. [from bollix: to bungle, or British `bollocks'] IBM's NetBIOS, an extremely brain-damaged network protocol that, like Blue Glue, is used at commercial shops that don't know any better. netburp n. [IRC] When netlag gets really bad, and delays between servers exceed a certain threshhold, the IRC network effectively becomes partitioned for a period of time, and large numbers of people seem to be signing off at the same time and then signing back on again when things get better. An instance of this is called a `netburp' (or, sometimes, netsplit). = netdead n. [IRC] The state of someone who signs off IRC, perhaps during a netburp, and doesn't sign back on until later. In the interim, he is "dead to the net". Compare link-dead. = nethack /net'hak/ n. [Unix] A dungeon game similar to rogue but more elaborate, distributed in C source over Usenet and very popular at Unix sites and on PC-class machines (nethack is probably the most widely distributed of the freeware dungeon games). The earliest versions, written by Jay Fenlason and later considerably enhanced by Andries Brouwer, were simply called `hack'. The name changed when maintenance was taken over by a group of hackers originally organized by Mike Stephenson. There is now an official site one at http://www.nethack.org/. See also moria, rogue, Angband. = netiquette /net'ee-ket/ or /net'i-ket/ n. [portmanteau, network + etiquette] The conventions of politeness recognized on Usenet, such as avoidance of cross-posting to inappropriate groups and refraining from commercial pluggery outside the _biz_ groups. netlag n. [IRC, MUD] A condition that occurs when the delays in the IRC network or on a MUD become severe enough that servers briefly lose and then reestablish contact, causing messages to be delivered in bursts, often with delays of up to a minute. (Note that this term has nothing to do with mainstream "jet lag", a condition which hackers tend not to be much bothered by.) Often shortened to just `lag'. = netnews /net'n[y]ooz/ n. 1. The software that makes Usenet run. 2. The content of Usenet. "I read netnews right after my mail most mornings." = netrock /net'rok/ n. [IBM] A flame; used esp. on VNET, IBM's internal corporate network. = Netscrape n. [sometimes elaborated to `Netscrape Fornicator', also `Nutscrape'] Standard name-of-insult for Netscape Navigator/Communicator, Netscape's overweight Web browser. Compare Internet Exploiter. netsplit n. Syn. netburp. netter n. 1. Loosely, anyone with a network address. 2. More specifically, a Usenet regular. Most often found in the plural. "If you post that in a technical group, you're going to be flamed by angry netters for the rest of time!" network address n. (also `net address') As used by hackers, means an address on `the' network (see the network; this used to include bang path addresses but now almost always implies an Internet address). Net addresses are often used in email text as a more concise substitute for personal names; indeed, hackers may come to know each other quite well by network names without ever learning each others' `legal' monikers. Indeed, display of a network address (e.g on business cards) used to function as an important hacker identification signal, like lodge pins among Masons or tie-dyed T-shirts among Grateful Dead fans. In the day of pervasive Internet this is less true, but you can still be fairly sure that anyone with a network address handwritten on his or her convention badge is a hacker. network meltdown n. A state of complete network overload; the network equivalent of thrashing. This may be induced by a Chernobyl packet. See also broadcast storm, kamikaze packet. Network meltdown is often a result of network designs that are optimized for a steady state of moderate load and don't cope well with the very jagged, bursty usage patterns of the real world. One amusing instance of this is triggered by the popular and very bloody shoot-'em-up game _Doom_ on the PC. When used in multiplayer mode over a network, the game uses broadcast packets to inform other machines when bullets are fired. This causes problems with weapons like the chain gun which fire rapidly -- it can blast the network into a meltdown state just as easily as it shreds opposing monsters. New Jersey adj. [primarily Stanford/Silicon Valley] Brain-damaged or of poor design. This refers to the allegedly wretched quality of such software as C, C++, and Unix (which originated at Bell Labs in Murray Hill, New Jersey). "This compiler bites the bag, but what can you expect from a compiler designed in New Jersey?" Compare Berkeley Quality Software. See also Unix conspiracy. New Testament n. [C programmers] The second edition of K&R's "The C Programming Language" (Prentice-Hall, 1988; ISBN 0-13-110362-8), describing ANSI Standard C. See K&R; this version is also called `K&R2'. newbie /n[y]oo'bee/ n. [verry common; orig. from British public-school and military slang variant of `new boy'] A Usenet neophyte. This term surfaced in the newsgroup _talk.bizarre_ but is now in wide use (the combination "clueless newbie" is especially common). Criteria for being considered a newbie vary wildly; a person can be called a newbie in one newsgroup while remaining a respected regular in another. The label `newbie' is sometimes applied as a serious insult to a person who has been around Usenet for a long time but who carefully hides all evidence of having a clue. See B1FF; see also gnubie. N = newgroup wars /n[y]oo'groop worz/ n. [Usenet] The salvos of dueling newgroup and rmgroup messages sometimes exchanged by persons on opposite sides of a dispute over whether a newsgroup should be created net-wide, or (even more frequently) whether an obsolete one should be removed. These usually settle out within a week or two as it becomes clear whether the group has a natural constituency (usually, it doesn't). At times, especially in the completely anarchic _alt_ hierarchy, the names of newsgroups themselves become a form of comment or humor; e.g., the group _alt.swedish.chef.bork.bork.bork_ which originated as a birthday joke for a Muppets fan, or any number of specialized abuse groups named after particularly notorious flamers, e.g., _alt.weemba_. newline /n[y]oo'li:n/ n. 1. [techspeak, primarily Unix] The ASCII LF character (0001010), used under Unix as a text line terminator. Though the term `newline' appears in ASCII standards, it never caught on in the general computing world before Unix. 2. More generally, any magic character, character sequence, or operation (like Pascal's writeln procedure) required to terminate a text record or separate lines. See crlf, terpri. = NeWS /nee'wis/, /n[y]oo'is/ or /n[y]ooz/ n. [acronym; the `Network Window System'] The road not taken in window systems, an elegant PostScript-based environment that would almost certainly have won the standards war with X if it hadn't been proprietary to Sun Microsystems. There is a lesson here that too many software vendors haven't yet heeded. Many hackers insist on the two-syllable pronunciations above as a way of distinguishing NeWS from Usenet news (the netnews software). newsfroup // n. [Usenet] Silly synonym for newsgroup, originally a typo but now in regular use on Usenet's talk.bizarre, and other lunatic-fringe groups. Compare hing, grilf, pr0n and filk. newsgroup n. [Usenet] One of Usenet's huge collection of topic groups or fora. Usenet groups can be `unmoderated' (anyone can post) or `moderated' (submissions are automatically directed to a moderator, who edits or filters and then posts the results). Some newsgroups have parallel mailing lists for Internet people with no netnews access, with postings to the group automatically propagated to the list and vice versa. Some moderated groups (especially those which are actually gatewayed Internet mailing lists) are distributed as `digests', with groups of postings periodically collected into a single large posting with an index. Among the best-known are _comp.lang.c_ (the C-language forum), _comp.arch_ (on computer architectures), _comp.unix.wizards_ (for Unix wizards), _rec.arts.sf.written_ and siblings (for science-fiction fans), and _talk.politics.misc_ (miscellaneous political discussions and flamage). nick n. [IRC; very common] Short for nickname. On IRC, every user must pick a nick, which is sometimes the same as the user's real name or login name, but is often more fanciful. Compare handle, screen name. nickle /ni'kl/ n. [from `nickel', common name for the U.S. 5-cent coin] A nybble + 1; 5 bits. Reported among developers for Mattel's GI 1600 (the Intellivision games processor), a chip with 16-bit-wide RAM but 10-bit-wide ROM. See also deckle, and nybble for names of other bit units. night mode n. See phase (of people). Nightmare File System n. Pejorative hackerism for Sun's Network File System (NFS). In any nontrivial network of Suns where there is a lot of NFS cross-mounting, when one Sun goes down, the others often freeze up. Some machine tries to access the down one, and (getting no response) repeats indefinitely. This causes it to appear dead to some messages (what is actually happening is that it is locked up in what should have been a brief excursion to a higher spl level). Then another machine tries to reach either the down machine or the pseudo-down machine, and itself becomes pseudo-down. The first machine to discover the down one is now trying both to access the down one and to respond to the pseudo-down one, so it is even harder to reach. This situation snowballs very quickly, and soon the entire network of machines is frozen -- worst of all, the user can't even abort the file access that started the problem! Many of NFS's problems are excused by partisans as being an inevitable result of its statelessness, which is held to be a great feature (critics, of course, call it a great misfeature). (ITS partisans are apt to cite this as proof of Unix's alleged bogosity; ITS had a working NFS-like shared file system with none of these problems in the early 1970s.) See also broadcast storm. NIL /nil/ No. Used in reply to a question, particularly one asked using the `-P' convention. Most hackers assume this derives simply from LISP terminology for `false' (see also T), but NIL as a negative reply was well-established among radio hams decades before the advent of LISP. The historical connection between early hackerdom and the ham radio world was strong enough that this may have been an influence. Ninety-Ninety Rule n. "The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time." Attributed to Tom Cargill of Bell Labs, and popularized by Jon Bentley's September 1985 "Bumper-Sticker Computer Science" column in "Communications of the ACM". It was there called the "Rule of Credibility", a name which seems not to have stuck. Other maxims in the same vein include the law attributed to the early British computer scientist Douglas Hartree: "The time from now until the completion of the project tends to become constant." nipple mouse n. Var. `clit mouse, clitoris' Common term for the pointing device used on IBM ThinkPads and a few other laptop computers. The device, which sits between the `g' and `h' keys on the keyboard, indeed resembles a rubber nipple intended to be tweaked by a forefinger. Many hackers consider these superior to the glide pads found on most laptops, which are harder to control precisely. NMI /N-M-I/ n. Non-Maskable Interrupt. An IRQ 7 on the PDP-11 or 680[01234]0; the NMI line on an 80[1234]86. In contrast with a priority interrupt (which might be ignored, although that is unlikely), an NMI is never ignored. Except, that is, on clone boxes, where NMI is often ignored on the motherboard because flaky hardware can generate many spurious ones. no-op /noh'op/ n.,v. alt. NOP /nop/ [no operation] 1. A machine instruction that does nothing (sometimes used in assembler-level programming as filler for data or patch areas, or to overwrite code to be removed in binaries). 2. A person who contributes nothing to a project, or has nothing going on upstairs, or both. As in "He's a no-op." 3. Any operation or sequence of operations with no effect, such as circling the block without finding a parking space, or putting money into a vending machine and having it fall immediately into the coin-return box, or asking someone for help and being told to go away. "Oh, well, that was a no-op." Hot-and-sour soup (see great-wall) that is insufficiently either is `no-op soup'; so is wonton soup if everybody else is having hot-and-sour. = noddy /nod'ee/ adj. [UK: from the children's books] 1. Small and un-useful, but demonstrating a point. Noddy programs are often written by people learning a new language or system. The archetypal noddy program is hello world. Noddy code may be used to demonstrate a feature or bug of a compiler. May be used of real hardware or software to imply that it isn't worth using. "This editor's a bit noddy." 2. A program that is more or less instant to produce. In this use, the term does not necessarily connote uselessness, but describes a hack sufficiently trivial that it can be written and debugged while carrying on (and during the space of) a normal conversation. "I'll just throw together a noddy awk script to dump all the first fields." In North America this might be called a mickey mouse program. See toy program. node n. 1. [Internet, UUCP] A host machine on the network. 2. [MS-DOS BBSes] A dial-in line on a BBS. Thus an MS-DOS sysop might say that his BBS has 4 nodes even though it has a single machine and no Internet link, confusing an Internet hacker no end. Nominal Semidestructor n. Soundalike slang for `National Semiconductor', found among other places in the Networking/2 networking sources. During the late 1970s to mid-1980s this company marketed a series of microprocessors including the NS16000 and NS32000 and several variants. At one point early in the great microprocessor race, the specs on these chips made them look like serious competition for the rising Intel 80x86 and Motorola 680x0 series. Unfortunately, the actual parts were notoriously flaky and never implemented the full instruction set promised in their literature, apparently because the company couldn't get any of the mask steppings to work as designed. They eventually sank without trace, joining the Zilog Z8000 and a few even more obscure also-rans in the graveyard of forgotten microprocessors. Compare HP-SUX, AIDX, buglix, Macintrash, Telerat, ScumOS, sun-stools, Slowlaris, Internet Exploder. = non-optimal solution n. (also `sub-optimal solution') An astoundingly stupid way to do something. This term is generally used in deadpan sarcasm, as its impact is greatest when the person speaking looks completely serious. Compare stunning. See also Bad Thing. nonlinear adj. [scientific computation] 1. Behaving in an erratic and unpredictable fashion; unstable. When used to describe the behavior of a machine or program, it suggests that said machine or program is being forced to run far outside of design specifications. This behavior may be induced by unreasonable inputs, or may be triggered when a more mundane bug sends the computation far off from its expected course. 2. When describing the behavior of a person, suggests a tantrum or a flame. "When you talk to Bob, don't mention the drug problem or he'll go nonlinear for hours." In this context, `go nonlinear' connotes `blow up out of proportion' (proportion connotes linearity). nontrivial adj. Requiring real thought or significant computing power. Often used as an understated way of saying that a problem is quite difficult or impractical, or even entirely unsolvable ("Proving P=NP is nontrivial"). The preferred emphatic form is `decidedly nontrivial'. See trivial, uninteresting, interesting. not ready for prime time adj. Usable, but only just so; not very robust; for internal use only. Said of a program or device. Often connotes that the thing will be made more solid Real Soon Now. This term comes from the ensemble name of the original cast of "Saturday Night Live", the "Not Ready for Prime Time Players". It has extra flavor for hackers because of the special (though now semi-obsolescent) meaning of prime time. Compare beta. notwork /not'werk/ n. A network, when it is acting flaky or is down. Compare nyetwork. Said at IBM to have originally referred to a particular period of flakiness on IBM's VNET corporate network ca. 1988; but there are independent reports of the term from elsewhere. = NP- /N-P/ pref. Extremely. Used to modify adjectives describing a level or quality of difficulty; the connotation is often `more so than it should be' This is generalized from the computer-science terms `NP-hard' and `NP-complete'; NP-complete problems all seem to be very hard, but so far no one has found a proof that they are. NP is the set of Nondeterministic-Polynomial algorithms, those that can be completed by a nondeterministic Turing machine in an amount of time that is a polynomial function of the size of the input; a solution for one NP-complete problem would solve all the others. "Coding a BitBlt implementation to perform correctly in every case is NP-annoying." Note, however, that strictly speaking this usage is misleading; there are plenty of easy problems in class NP. NP-complete problems are hard not because they are in class NP, but because they are the hardest problems in class NP. nroff /N'rof/ n. [Unix, from "new roff" (see troff)] A companion program to the Unix typesetter troff, accepting identical input but preparing output for terminals and line printers. = NSA line eater n. The National Security Agency trawling program sometimes assumed to be reading the net for the U.S. Government's spooks. Most hackers used to think it was mythical but believed in acting as though existed just in case. since the mid-1990s it has gradually become known that the NSA actually does this, quite illegaly, through its Echelon program. The standard countermeasure is to put loaded phrases like `KGB', `Uzi', `nuclear materials', `Palestine', `cocaine', and `assassination' in their sig blocks in a (probably futile) attempt to confuse and overload the creature. The GNU version of EMACS actually has a command that randomly inserts a bunch of insidious anarcho-verbiage into your edited text. As far back as the 1970s there was a mainstream variant of this myth involving a `Trunk Line Monitor', which supposedly used speech recognition to extract words from telephone trunks. This is much harder than noticing keywords in email, and most of the people who originally propagated it had no idea of then-current technology or the storage, signal-processing, or speech recognition needs of such a project. On the basis of mass-storage costs alone it would have been cheaper to hire 50 high-school students and just let them listen in. Twenty years and several orders of technological magnitude later, however, there are clear indications that the NSA has actually deployed such filtering (again, very much against U.S. law). NSP /N-S-P/ n. Common abbreviation for `Network Service Provider', one of the big national or regional companies that maintains a portion of the Internet backbone and resells connectivity to ISPs. In 1996, major NSPs include ANS, MCI, UUNET, and Sprint. An Internet wholesaler. nude adj. Said of machines delivered without an operating system (compare bare metal). "We ordered 50 systems, but they all arrived nude, so we had to spend a an extra weekend with the installation disks." This usage is a recent innovation reflecting the fact that most IBM-PC clones are now delivered with an operating system pre-installed at the factory. Other kinds of hardware are still normally delivered without OS, so this term is particular to PC support groups. nugry /n[y]oo'gree/ [Usenet, 'newbie' + '-gry'] `. n. A newbie who posts a FAQ in the rec.puzzles newsgroup, especially if it is a variant of the notorious and unanswerable "What, besides `angry' and `hungry', is the third common English word that ends in -GRY?". In the newsgroup, the canonical answer is of course `nugry' itself. Plural is `nusgry' /n[y]oos'gree/. 2. adj. Having the qualities of a nugry. nuke /n[y]ook/ vt. [common] 1. To intentionally delete the entire contents of a given directory or storage volume. "On Unix, rm -r /usr will nuke everything in the usr filesystem." Never used for accidental deletion; contrast blow away. 2. Syn. for dike, applied to smaller things such as files, features, or code sections. Often used to express a final verdict. "What do you want me to do with that 80-meg wallpaper file?" "Nuke it." 3. Used of processes as well as files; nuke is a frequent verbal alias for kill -9 on Unix. 4. On IBM PCs, a bug that results in fandango on core can trash the operating system, including the FAT (the in-core copy of the disk block chaining information). This can utterly scramble attached disks, which are then said to have been `nuked'. This term is also used of analogous lossages on Macintoshes and other micros without memory protection. number-crunching n. [common] Computations of a numerical nature, esp. those that make extensive use of floating-point numbers. The only thing Fortrash is good for. This term is in widespread informal use outside hackerdom and even in mainstream slang, but has additional hackish connotations: namely, that the computations are mindless and involve massive use of brute force. This is not always evil, esp. if it involves ray tracing or fractals or some other use that makes pretty pictures, esp. if such pictures can be used as wallpaper. See also crunch. numbers n. [scientific computation] Output of a computation that may not be significant results but at least indicate that the program is running. May be used to placate management, grant sponsors, etc. `Making numbers' means running a program because output -- any output, not necessarily meaningful output -- is needed as a demonstration of progress. See pretty pictures, math-out, social science number. NUXI problem /nuk'see pro'bl*m/ n. Refers to the problem of transferring data between machines with differing byte-order. The string `UNIX' might look like `NUXI' on a machine with a different `byte sex' (e.g., when transferring data from a little-endian to a big-endian, or vice-versa). See also middle-endian, swab, and bytesexual. nybble /nib'l/ (alt. `nibble') n. [from v. `nibble' by analogy with `bite' => `byte'] Four bits; one hex digit; a half-byte. Though `byte' is now techspeak, this useful relative is still jargon. Compare byte; see also bit. The more mundane spelling "nibble" is also commonly used. Apparently the `nybble' spelling is uncommon in Commonwealth Hackish, as British orthography would suggest the pronunciation /ni:'bl/. Following `bit', `byte' and `nybble' there have been quite a few analogical attempts to construct unambiguous terms for bit blocks of other sizes. All of these are strictly jargon, not techspeak, and not very common jargon at that (most hackers would recognize them in context but not use them spontaneously). We collect them here for reference together with the ambiguous techspeak terms `word', `half-word' and `double word'; some (indicated) have substantial information separate entries. 2 bits: crumb, quad, quarter, tayste, tydbit 4 bits: nybble 5 bits: nickle 10 bits: deckle 16 bits: playte, chawmp (on a 32-bit machine), word (on a 16-bit machine), half-word (on a 32-bit machine). 18 bits: chawmp (on a 36-bit machine), half-word (on a 36-bit machine) 32 bits: dynner, gawble (on a 32-bit machine), word (on a 32-bit machine), longword (on a 16-bit machine). 36: word (on a 36-bit machine) 48 bits: gawble (under circumstances that remain obscure) 64 bits double word (on a 32-bit machine) The fundamental motivation for most of these jargon terms (aside from the normal hackerly enjoyment of punning wordplay) is the extreme ambiguity of the term `word' and its derivatives. = nyetwork /nyet'werk/ n. [from Russian `nyet' = no] A network, when it is acting flaky or is down. Compare notwork. = O = Ob-: Obfuscated C Contest: obi-wan error: Objectionable-C: obscure: octal forty: off the trolley: off-by-one error: offline: ogg: -oid: old fart: Old Testament: on the gripping hand: one-banana problem: one-line fix: one-liner wars: ooblick: op: open: open source: open switch: operating system: optical diff: optical grep: optimism: Oracle the: Orange Book: oriental food: orphan: orphaned i-node: orthogonal: OS: OS/2: OSS: OSU: OTOH: out-of-band: overclock: overflow bit: overflow pdl: overrun: overrun screw: Ob- /ob/ pref. Obligatory. A piece of netiquette acknowledging that the author has been straying from the newsgroup's charter topic. For example, if a posting in alt.sex is a response to a part of someone else's posting that has nothing particularly to do with sex, the author may append `ObSex' (or `Obsex') and toss off a question or vignette about some unusual erotic act. It is considered a sign of great winnitude when one's Obs are more interesting than other people's whole postings. Obfuscated C Contest n. (in full, the `International Obfuscated C Code Contest', or IOCCC) An annual contest run since 1984 over Usenet by Landon Curt Noll and friends. The overall winner is whoever produces the most unreadable, creative, and bizarre (but working) C program; various other prizes are awarded at the judges' whim. C's terse syntax and macro-preprocessor facilities give contestants a lot of maneuvering room. The winning programs often manage to be simultaneously (a) funny, (b) breathtaking works of art, and (c) horrible examples of how not to code in C. This relatively short and sweet entry might help convey the flavor of obfuscated C: /* * HELLO WORLD program * by Jack Applin and Robert Heckendorn, 1985 * (Note: depends on being able to modify elements of argv[], * which is not guaranteed by ANSI and often not possible.) */ main(v,c)char**c;{for(v[c++]="Hello, world!\n)"; (!!c)[*c]&&(v--||--c&&execlp(*c,*c,c[!!c]+!!c,!c)); **c=!c)write(!!*c,*c,!!**c);} Here's another good one: /* * Program to compute an approximation of pi * by Brian Westley, 1988 * (requires pcc macro concatenation; try gcc -traditional-cpp) */ #define _ -F<00||--F-OO--; int F=00,OO=00; main(){F_OO();printf("%1.3f\n",4.*-F/OO/OO);}F_OO() { _-_-_-_ _-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_-_-_-_-_ _-_-_-_-_-_-_-_ _-_-_-_ } Note that this program works by computing its own area. For more digits, write a bigger program. See also hello world. The IOCCC has an official home page at http://www.ioccc.org. obi-wan error /oh'bee-won` er'*r/ n. [RPI, from `off-by-one' and the Obi-Wan Kenobi character in "Star Wars"] A loop of some sort in which the index is off by 1. Common when the index should have started from 0 but instead started from 1. A kind of off-by-one error. See also zeroth. Objectionable-C n. Hackish take on "Objective-C", the name of an object-oriented dialect of C in competition with the better-known C++ (it is used to write native applications on the NeXT machine). Objectionable-C uses a Smalltalk-like syntax, but lacks the flexibility of Smalltalk method calls, and (like many such efforts) comes frustratingly close to attaining the Right Thing without actually doing so. obscure adj. Used in an exaggeration of its normal meaning, to imply total incomprehensibility. "The reason for that last crash is obscure." "The find(1) command's syntax is obscure!" The phrase `moderately obscure' implies that something could be figured out but probably isn't worth the trouble. The construction `obscure in the extreme' is the preferred emphatic form. octal forty /ok'tl for'tee/ n. Hackish way of saying "I'm drawing a blank." Octal 40 is the ASCII space character, 0100000; by an odd coincidence, hex 40 (01000000) is the EBCDIC space character. See wall. off the trolley adj. Describes the behavior of a program that malfunctions and goes catatonic, but doesn't actually crash or abort. See glitch, bug, deep space, wedged. This term is much older than computing, and is (uncommon) slang elsewhere. A trolley is the small wheel that trolls, or runs against, the heavy wire that carries the current to run a streetcar. It's at the end of the long pole (the trolley pole) that reaches from the roof of the streetcar to the overhead line. When the trolley stops making contact with the wire (from passing through a switch, going over bumpy track, or whatever), the streetcar comes to a halt, (usually) without crashing. The streetcar is then said to be off the trolley, or off the wire. Later on, trolley came to mean the streetcar itself. Since streetcars became common in the 1890s, the term is more than 100 years old. Nowadays, trolleys are only seen on historic streetcars, since modern streetcars use pantographs to contact the wire. off-by-one error n. [common] Exceedingly common error induced in many ways, such as by starting at 0 when you should have started at 1 or vice-versa, or by writing < N instead of <= N or vice-versa. Also applied to giving something to the person next to the one who should have gotten it. Often confounded with fencepost error, which is properly a particular subtype of it. offline adv. Not now or not here. "Let's take this discussion offline." Specifically used on Usenet to suggest that a discussion be moved off a public newsgroup to email. = ogg /og/ v. [CMU] 1. In the multi-player space combat game Netrek, to execute kamikaze attacks against enemy ships which are carrying armies or occupying strategic positions. Named during a game in which one of the players repeatedly used the tactic while playing Orion ship G, showing up in the player list as "Og". This trick has been roundly denounced by those who would return to the good old days when the tactic of dogfighting was dominant, but as Sun Tzu wrote, "What is of supreme importance in war is to attack the enemy's strategy, not his tactics." However, the traditional answer to the newbie question "What does ogg mean?" is just "Pick up some armies and I'll show you." 2. In other games, to forcefully attack an opponent with the expectation that the resources expended will be renewed faster than the opponent will be able to regain his previous advantage. Taken more seriously as a tactic since it has gained a simple name. 3. To do anything forcefully, possibly without consideration of the drain on future resources. "I guess I'd better go ogg the problem set that's due tomorrow." "Whoops! I looked down at the map for a sec and almost ogged that oncoming car." -oid suff. [from Greek suffix -oid = `in the image of'] 1. Used as in mainstream slang English to indicate a poor imitation, a counterfeit, or some otherwise slightly bogus resemblance. Hackers will happily use it with all sorts of non-Greco/Latin stem words that wouldn't keep company with it in mainstream English. For example, "He's a nerdoid" means that he superficially resembles a nerd but can't make the grade; a `modemoid' might be a 300-baud box (Real Modems run at 28.8 or up); a `computeroid' might be any bitty box. The word `keyboid' could be used to describe a chiclet keyboard, but would have to be written; spoken, it would confuse the listener as to the speaker's city of origin. 2. More specifically, an indicator for `resembling an android' which in the past has been confined to science-fiction fans and hackers. It too has recently (in 1991) started to go mainstream (most notably in the term `trendoid' for victims of terminal hipness). This is probably traceable to the popularization of the term droid in "Star Wars" and its sequels. (See also windoid.) Coinages in both forms have been common in science fiction for at least fifty years, and hackers (who are often SF fans) have probably been making `-oid' jargon for almost that long [though GLS and I can personally confirm only that they were already common in the mid-1970s --ESR]. = old fart n. Tribal elder. A title self-assumed with remarkable frequency by (esp.) Usenetters who have been programming for more than about 25 years; often appears in sig blocks attached to Jargon File contributions of great archeological significance. This is a term of insult in the second or third person but one of pride in first person. Old Testament n. [C programmers] The first edition of K&R, the sacred text describing Classic C. on the gripping hand In the progression that starts "On the one hand..." and continues "On the other hand..." mainstream English may add "on the third hand..." even though most people don't have three hands. Among hackers, it is just as likely to be "on the gripping hand". This metaphor supplied the title of Larry Niven & Jerry Pournelle's 1993 SF novel "The Gripping Hand" which involved a species of hostile aliens with three arms (the same species, in fact, referenced in juggling eggs). As with TANSTAAFL and con, this usage one of the naturalized imports from SF fandom frequently observed among hackers. = one-banana problem n. At mainframe shops, where the computers have operators for routine administrivia, the programmers and hardware people tend to look down on the operators and claim that a trained monkey could do their job. It is frequently observed that the incentives that would be offered said monkeys can be used as a scale to describe the difficulty of a task. A one-banana problem is simple; hence, "It's only a one-banana job at the most; what's taking them so long?" At IBM, folklore divides the world into one-, two-, and three-banana problems. Other cultures have different hierarchies and may divide them more finely; at ICL, for example, five grapes (a bunch) equals a banana. Their upper limit for the in-house sysapes is said to be two bananas and three grapes (another source claims it's three bananas and one grape, but observes "However, this is subject to local variations, cosmic rays and ISO"). At a complication level any higher than that, one asks the manufacturers to send someone around to check things. See also Infinite-Monkey Theorem. one-line fix n. Used (often sarcastically) of a change to a program that is thought to be trivial or insignificant right up to the moment it crashes the system. Usually `cured' by another one-line fix. See also I didn't change anything! one-liner wars n. A game popular among hackers who code in the language APL (see write-only language and line noise). The objective is to see who can code the most interesting and/or useful routine in one line of operators chosen from APL's exceedingly hairy primitive set. A similar amusement was practiced among TECO hackers and is now popular among Perl aficionados. Ken Iverson, the inventor of APL, has been credited with a one-liner that, given a number N, produces a list of the prime numbers from 1 to N inclusive. It looks like this: (2 = 0 +.= T o.| T) / T <- iN where `o' is the APL null character, the assignment arrow is a single character, and `i' represents the APL iota. Here's a Perl program that prints primes: perl -wle '(1 x $_) !~ /^(11+)\1+$/ && print while ++ $_' In the Perl world this game is sometimes called Perl Golf because the player with the fewest (key)strokes wins. ooblick /oo'blik/ n. [from the Dr. Seuss title "Bartholomew and the Oobleck"; the spelling `oobleck' is still current in the mainstream] A bizarre semi-liquid sludge made from cornstarch and water. Enjoyed among hackers who make batches during playtime at parties for its amusing and extremely non-Newtonian behavior; it pours and splatters, but resists rapid motion like a solid and will even crack when hit by a hammer. Often found near lasers. Here is a field-tested ooblick recipe contributed by GLS: 1 cup cornstarch 1 cup baking soda 3/4 cup water N drops of food coloring This recipe isn't quite as non-Newtonian as a pure cornstarch ooblick, but has an appropriately slimy feel. Some, however, insist that the notion of an ooblick recipe is far too mechanical, and that it is best to add the water in small increments so that the various mixed states the cornstarch goes through as it becomes ooblick can be grokked in fullness by many hands. For optional ingredients of this experience, see the "Ceremonial Chemicals" section of Appendix B. = op /op/ n. 1. In England and Ireland, common verbal abbreviation for `operator', as in system operator. Less common in the U.S., where sysop seems to be preferred. 2. [IRC] Someone who is endowed with privileges on IRC, not limited to a particular channel. These are generally people who are in charge of the IRC server at their particular site. Sometimes used interchangeably with CHOP. Compare sysop. open n. Abbreviation for `open (or left) parenthesis' -- used when necessary to eliminate oral ambiguity. To read aloud the LISP form (DEFUN FOO (X) (PLUS X 1)) one might say: "Open defun foo, open eks close, open, plus eks one, close close." = open source n. [common; also adj. `open-source'] Term coined in March 1998 following the Mozilla release to describe software distributed in source under licenses guaranteeing anybody rights to freely use, modify, and redistribute, the code. The intent was to be able to sell the hackers' ways of doing software to industry and the mainstream by avoid the negative connotations (to suits) of the term "free software". For discussion of the followon tactics and their consequences, see the Open Source Initiative site. open switch n. [IBM: prob. from railroading] An unresolved question, issue, or problem. operating system n. [techspeak] (Often abbreviated `OS') The foundation software of a machine; that which schedules tasks, allocates storage, and presents a default interface to the user between applications. The facilities an operating system provides and its general design philosophy exert an extremely strong influence on programming style and on the technical cultures that grow up around its host machines. Hacker folklore has been shaped primarily by the Unix, ITS, TOPS-10, TOPS-20/TWENEX, WAITS, CP/M, MS-DOS, and Multics operating systems (most importantly by ITS and Unix). optical diff n. See vdiff. optical grep n. See vgrep. optimism n. What a programmer is full of after fixing the last bug and before discovering the next last bug. Fred Brooks's book "The Mythical Man-Month" (See "Brooks's Law") contains the following paragraph that describes this extremely well: All programmers are optimists. Perhaps this modern sorcery especially attracts those who believe in happy endings and fairy godmothers. Perhaps the hundreds of nitty frustrations drive away all but those who habitually focus on the end goal. Perhaps it is merely that computers are young, programmers are younger, and the young are always optimists. But however the selection process works, the result is indisputable: "This time it will surely run," or "I just found the last bug.". See also Lubarsky's Law of Cybernetic Entomology. Oracle, the The all-knowing, all-wise Internet Oracle _rec.humor.oracle_), or one of the foreign language derivatives of same. Newbies frequently confuse the Oracle with Oracle, a database vendor. As a result, the unmoderated _rec.humor.oracle.d_ is frequently crossposted to by the clueless, looking for advice on SQL. As more than one person has said in similar situations, "Don't people bother to look at the newsgroup description line anymore?" (To which the standard response is, "Did people ever read it in the first place?") Orange Book n. The U.S. Government's standards document "Trusted Computer System Evaluation Criteria, DOD standard 5200.28-STD, December, 1985" which characterize secure computing architectures and defines levels A1 (most secure) through D (least). Modern Unixes are roughly C2. See also crayola books, book titles. oriental food n. Hackers display an intense tropism towards oriental cuisine, especially Chinese, and especially of the spicier varieties such as Szechuan and Hunan. This phenomenon (which has also been observed in subcultures that overlap heavily with hackerdom, most notably science-fiction fandom) has never been satisfactorily explained, but is sufficiently intense that one can assume the target of a hackish dinner expedition to be the best local Chinese place and be right at least three times out of four. See also ravs, great-wall, stir-fried random, laser chicken, Yu-Shiang Whole Fish. Thai, Indian, Korean, and Vietnamese cuisines are also quite popular. orphan n. [Unix] A process whose parent has died; one inherited by init(1). Compare zombie. orphaned i-node /or'f*nd i:'nohd/ n. [Unix] 1. [techspeak] A file that retains storage but no longer appears in the directories of a filesystem. 2. By extension, a pejorative for any person no longer serving a useful function within some organization, esp. lion food without subordinates. orthogonal adj. [from mathematics] Mutually independent; well separated; sometimes, irrelevant to. Used in a generalization of its mathematical meaning to describe sets of primitives or capabilities that, like a vector basis in geometry, span the entire `capability space' of the system and are in some sense non-overlapping or mutually independent. For example, in architectures such as the PDP-11 or VAX where all or nearly all registers can be used interchangeably in any role with respect to any instruction, the register set is said to be orthogonal. Or, in logic, the set of operators `not' and `or' is orthogonal, but the set `nand', `or', and `not' is not (because any one of these can be expressed in terms of the others). Also used in comments on human discourse: "This may be orthogonal to the discussion, but...." OS /O-S/ 1. [Operating System] n. An abbreviation heavily used in email, occasionally in speech. 2. n. obs. On ITS, an output spy. See "OS and JEDGAR" in Appendix A. OS/2 /O S too/ n. The anointed successor to MS-DOS for Intel 286- and 386-based micros; proof that IBM/Microsoft couldn't get it right the second time, either. Often called `Half-an-OS'. Mentioning it is usually good for a cheap laugh among hackers -- the design was so baroque, and the implementation of 1.x so bad, that 3 years after introduction you could still count the major apps shipping for it on the fingers of two hands -- in unary. The 2.x versions are said to have improved somewhat, and informed hackers now rate them superior to Microsoft Windows (an endorsement which, however, could easily be construed as damning with faint praise). See monstrosity, cretinous, second-system effect. = OSS Written-only acronym for "Open Source Software" (see open source. This is a rather ugly TLA, and the principals in the open-source movement don't use it, but it has (perhaps inevitably) spread through the trade press like kudzu. OSU /O-S-U/ n. obs. [TMRC] Acronym for Officially Sanctioned User; a user who is recognized as such by the computer authorities and allowed to use the computer above the objections of the security monitor. OTOH // [Usenet; very common] On The Other Hand. out-of-band adj. [from telecommunications and network theory] 1. In software, describes values of a function which are not in its `natural' range of return values, but are rather signals that some kind of exception has occurred. Many C functions, for example, return a nonnegative integral value, but indicate failure with an out-of-band return value of -1. Compare hidden flag, green bytes, fence. 2. Also sometimes used to describe what communications people call `shift characters', such as the ESC that leads control sequences for many terminals, or the level shift indicators in the old 5-bit Baudot codes. 3. In personal communication, using methods other than email, such as telephones or snail-mail. overclock /oh'vr-klok'/ vt. To operate a CPU or other digital logic device at a rate higher than it was designed for, under the assumption that the manufacturer put some slop into the specification to account for manufacturing tolerances. Overclocking something can result in intermittent crashes, and can even burn things out, since power dissipation is directly proportional to clock frequency. People who make a hobby of this are sometimes called "overclockers"; they are thrilled that they can run their 450MHz CPU at 500MHz, even though they can only tell the difference by running a benchmark program. overflow bit n. 1. [techspeak] A flag on some processors indicating an attempt to calculate a result too large for a register to hold. 2. More generally, an indication of any kind of capacity overload condition. "Well, the Ada description was baroque all right, but I could hack it OK until they got to the exception handling ... that set my overflow bit." 3. The hypothetical bit that will be set if a hacker doesn't get to make a trip to the Room of Porcelain Fixtures: "I'd better process an internal interrupt before the overflow bit gets set." overflow pdl n. [MIT] The place where you put things when your PDL is full. If you don't have one and too many things get pushed, you forget something. The overflow pdl for a person's memory might be a memo pad. This usage inspired the following doggerel: Hey, diddle, diddle The overflow pdl To get a little more stack; If that's not enough Then you lose it all, And have to pop all the way back. -The Great Quux The term `pdl' (see PDL) seems to be primarily an MITism; outside MIT this term is replaced by `overflow stack' (but that wouldn't rhyme with `diddle'). overrun n. 1. [techspeak] Term for a frequent consequence of data arriving faster than it can be consumed, esp. in serial line communications. For example, at 9600 baud there is almost exactly one character per millisecond, so if a silo can hold only two characters and the machine takes longer than 2 msec to get to service the interrupt, at least one character will be lost. 2. Also applied to non-serial-I/O communications. "I forgot to pay my electric bill due to mail overrun." "Sorry, I got four phone calls in 3 minutes last night and lost your message to overrun." When thrashing at tasks, the next person to make a request might be told "Overrun!" Compare firehose syndrome. 3. More loosely, may refer to a buffer overflow not necessarily related to processing time (as in overrun screw). overrun screw n. [C programming] A variety of fandango on core produced by scribbling past the end of an array (C implementations typically have no checks for this error). This is relatively benign and easy to spot if the array is static; if it is auto, the result may be to smash the stack -- often resulting in heisenbugs of the most diabolical subtlety. The term `overrun screw' is used esp. of scribbles beyond the end of arrays allocated with malloc(3); this typically trashes the allocation header for the next block in the arena, producing massive lossage within malloc and often a core dump on the next operation to use stdio(3) or malloc(3) itself. See spam, overrun; see also memory leak, memory smash, aliasing bug, precedence lossage, fandango on core, secondary damage. = P = P-mail: P.O.D.: packet over air: padded cell: page in: page out: pain in the net: Pangloss parity: paper-net: param: PARC: parent message: parity errors: Parkinson's Law of Data: parm: parse: Pascal: pastie: patch: patch pumpkin: patch space: path: pathological: payware: PBD: PC-ism: PD: PDL: PDP-10: PDP-20: PEBKAC: peek: pencil and paper: Pentagram Pro: Pentium: peon: percent-S: perf: perfect programmer syndrome: Perl: person of no account: pessimal: pessimizing compiler: peta-: PETSCII: PFY: phage: phase: phase of the moon: phase-wrapping: PHB: phreaker: phreaking: pico-: pig-tail: pilot error: ping: Ping O' Death: ping storm: pink wire: pipe: pistol: pixel sort: pizza box: plaid screen: plain-ASCII: plan file: platinum-iridium: playpen: playte: plingnet: plokta: plonk: plug-and-pray: plugh: plumbing: PM: pnambic: pod: point-and-drool interface: pointy hat: pointy-haired: poke: poll: polygon pusher: POM: pop: POPJ: poser: post: postcardware: posting: postmaster: PostScript: pound on: power cycle: power hit: PPN: pr0n: precedence lossage: prepend: prestidigitization: pretty pictures: prettyprint: pretzel key: priesthood: prime time: print: printing discussion: priority interrupt: profile: progasm: proggy: proglet: program: Programmer's Cheer: programming: programming fluid: propeller head: propeller key: proprietary: protocol: provocative maintenance: prowler: pseudo: pseudoprime: pseudosuit: psychedelicware: psyton: pubic directory: puff: pumpkin holder: pumpking: punched card: punt: Purple Book: purple wire: push: Python: P-mail n. [rare] Physical mail, as opposed to email. Synonymous with snail-mail, but much less common. P.O.D. /P-O-D/ [rare] Acronym for `Piece Of Data' (as opposed to a code section). See also pod. packet over air [common among backbone ISPs] The protocol notionally being used by Internet data attempting to traverse a physical gap or break in the network, such as might be caused by a fiber-seeking backhoe. "I see why you're dropping packets. You seem to have a packet over air problem. padded cell n. Where you put lusers so they can't hurt anything. A program that limits a luser to a carefully restricted subset of the capabilities of the host system (for example, the rsh(1) utility on USG Unix). Note that this is different from an iron box because it is overt and not aimed at enforcing security so much as protecting others (and the luser) from the consequences of the luser's boundless naivete (see naive). Also `padded cell environment'. page in v. [MIT] 1. To become aware of one's surroundings again after having paged out (see page out). Usually confined to the sarcastic comment: "Eric pages in, film at 11!" 2. Syn. `swap in'; see swap. page out vi. [MIT] 1. To become unaware of one's surroundings temporarily, due to daydreaming or preoccupation. "Can you repeat that? I paged out for a minute." See page in. Compare glitch, thinko. 2. Syn. `swap out'; see swap. pain in the net n. A flamer. Pangloss parity n. [from Dr. Pangloss, the eternal optimist in Voltaire's "Candide"] In corporate DP shops, a common condition of severe but equally shared lossage resulting from the theory that as long as everyone in the organization has the exactly the same model of obsolete computer, everything will be fine. paper-net n. Hackish way of referring to the postal service, analogizing it to a very slow, low-reliability network. Usenet sig blocks sometimes include a "Paper-Net:" header just before the sender's postal address; common variants of this are "Papernet" and "P-Net". Note that the standard netiquette guidelines discourage this practice as a waste of bandwidth, since netters are quite unlikely to casually use postal addresses. Compare voice-net, snail-mail, P-mail. param /p*-ram'/ n. [common] Shorthand for `parameter'. See also parm; compare arg, var. PARC n. See XEROX PARC. parent message n. What a followup follows up. parity errors pl.n. Little lapses of attention or (in more severe cases) consciousness, usually brought on by having spent all night and most of the next day hacking. "I need to go home and crash; I'm starting to get a lot of parity errors." Derives from a relatively common but nearly always correctable transient error in memory hardware. It predates RAM; in fact, this term is reported to have already have been in use in its jargoin sense back in the 1960s when magnetic cores ruled. Parity errors can also afflict mass storage and serial communication lines; this is more serious because not always correctable. Parkinson's Law of Data prov. "Data expands to fill the space available for storage"; buying more memory encourages the use of more memory-intensive techniques. It has been observed since the mid-1980s that the memory usage of evolving systems tends to double roughly once every 18 months. Fortunately, memory density available for constant dollars also tends to about double once every 18 months (see Moore's Law); unfortunately, the laws of physics guarantee that the latter cannot continue indefinitely. parm /parm/ n. Further-compressed form of param. This term is an IBMism, and written use is almost unknown outside IBM shops; spoken /parm/ is more widely distributed, but the synonym arg is favored among hackers. Compare arg, var. parse [from linguistic terminology] vt. 1. To determine the syntactic structure of a sentence or other utterance (close to the standard English meaning). "That was the one I saw you." "I can't parse that." 2. More generally, to understand or comprehend. "It's very simple; you just kretch the glims and then aos the zotz." "I can't parse that." 3. Of fish, to have to remove the bones yourself. "I object to parsing fish", means "I don't want to get a whole fish, but a sliced one is okay". A `parsed fish' has been deboned. There is some controversy over whether `unparsed' should mean `bony', or also mean `deboned'. = Pascal n. An Algol-descended language designed by Niklaus Wirth on the CDC 6600 around 1967-68 as an instructional tool for elementary programming. This language, designed primarily to keep students from shooting themselves in the foot and thus extremely restrictive from a general-purpose-programming point of view, was later promoted as a general-purpose tool and, in fact, became the ancestor of a large family of languages including Modula-2 and Ada (see also bondage-and-discipline language). The hackish point of view on Pascal was probably best summed up by a devastating (and, in its deadpan way, screamingly funny) 1981 paper by Brian Kernighan (of K&R fame) entitled "Why Pascal is Not My Favorite Programming Language", which was turned down by the technical journals but circulated widely via photocopies. It was eventually published in "Comparing and Assessing Programming Languages", edited by Alan Feuer and Narain Gehani (Prentice-Hall, 1984). Part of his discussion is worth repeating here, because its criticisms are still apposite to Pascal itself after ten years of improvement and could also stand as an indictment of many other bondage-and-discipline languages. At the end of a summary of the case against Pascal, Kernighan wrote: 9. There is no escape This last point is perhaps the most important. The language is inadequate but circumscribed, because there is no way to escape its limitations. There are no casts to disable the type-checking when necessary. There is no way to replace the defective run-time environment with a sensible one, unless one controls the compiler that defines the "standard procedures". The language is closed. People who use Pascal for serious programming fall into a fatal trap. Because the language is impotent, it must be extended. But each group extends Pascal in its own direction, to make it look like whatever language they really want. Extensions for separate compilation, FORTRAN-like COMMON, string data types, internal static variables, initialization, octal numbers, bit operators, etc., all add to the utility of the language for one group but destroy its portability to others. I feel that it is a mistake to use Pascal for anything much beyond its original target. In its pure form, Pascal is a toy language, suitable for teaching but not for real programming. Pascal has since been almost entirely displaced (by C) from the niches it had acquired in serious applications and systems programming, but retains some popularity as a hobbyist language in the MS-DOS and Macintosh worlds. = pastie /pay'stee/ n. An adhesive-backed label designed to be attached to a key on a keyboard to indicate some non-standard character which can be accessed through that key. Pasties are likely to be used in APL environments, where almost every key is associated with a special character. A pastie on the R key, for example, might remind the user that it is used to generate the rho character. The term properly refers to nipple-concealing devices formerly worn by strippers in concession to indecent-exposure laws; compare tits on a keyboard. P = patch 1. n. A temporary addition to a piece of code, usually as a quick-and-dirty remedy to an existing bug or misfeature. A patch may or may not work, and may or may not eventually be incorporated permanently into the program. Distinguished from a diff or mod by the fact that a patch is generated by more primitive means than the rest of the program; the classical examples are instructions modified by using the front panel switches, and changes made directly to the binary executable of a program originally written in an HLL. Compare one-line fix. 2. vt. To insert a patch into a piece of code. 3. [in the Unix world] n. A diff (sense 2). 4. A set of modifications to binaries to be applied by a patching program. IBM operating systems often receive updates to the operating system in the form of absolute hexadecimal patches. If you have modified your OS, you have to disassemble these back to the source. The patches might later be corrected by other patches on top of them (patches were said to "grow scar tissue"). The result was often a convoluted patch space and headaches galore. 5. [Unix] the patch(1) program, written by Larry Wall, which automatically applies a patch (sense 3) to a set of source code. There is a classic story of a tiger team penetrating a secure military computer that illustrates the danger inherent in binary patches (or, indeed, any patches that you can't -- or don't -- inspect and examine before installing). They couldn't find any trap doors or any way to penetrate security of IBM's OS, so they made a site visit to an IBM office (remember, these were official military types who were purportedly on official business), swiped some IBM stationery, and created a fake patch. The patch was actually the trapdoor they needed. The patch was distributed at about the right time for an IBM patch, had official stationery and all accompanying documentation, and was dutifully installed. The installation manager very shortly thereafter learned something about proper procedures. patch pumpkin n. [Perl hackers] A notional token passed around among the members of a project. Possession of the patch pumpkin means one has the exclusive authority to make changes on the project's master source tree. The implicit assumption is that `pumpkin holder' status is temporary and rotates periodically among senior project members. This term comes from the Perl development community, but has been sighted elsewhere. It derives from a stuffed-toy pumpkin that was passed around at a development shop years ago as the access control for a shared backup-tape drive. patch space n. An unused block of bits left in a binary so that it can later be modified by insertion of machine-language instructions there (typically, the patch space is modified to contain new code, and the superseded code is patched to contain a jump or call to the patch space). The near-universal use of compilers and interpreters has made this term rare; it is now primarily historical outside IBM shops. See patch (sense 4), zap (sense 4), hook. path n. 1. A bang path or explicitly routed Internet address; a node-by-node specification of a link between two machines. Though these are now obsolete as a form of addressing, they still show up in diagnostics and trace headers ocvcasionally (e.g. in NNTP headers). 2. [Unix] A filename, fully specified relative to the root directory (as opposed to relative to the current directory; the latter is sometimes called a `relative path'). This is also called a `pathname'. 3. [Unix and MS-DOS] The `search path', an environment variable specifying the directories in which the shell (COMMAND.COM, under MS-DOS) should look for commands. Other, similar constructs abound under Unix (for example, the C preprocessor has a `search path' it uses in looking for #include files). pathological adj. 1. [scientific computation] Used of a data set that is grossly atypical of normal expected input, esp. one that exposes a weakness or bug in whatever algorithm one is using. An algorithm that can be broken by pathological inputs may still be useful if such inputs are very unlikely to occur in practice. 2. When used of test input, implies that it was purposefully engineered as a worst case. The implication in both senses is that the data is spectacularly ill-conditioned or that someone had to explicitly set out to break the algorithm in order to come up with such a crazy example. 3. Also said of an unlikely collection of circumstances. "If the network is down and comes up halfway through the execution of that command by root, the system may just crash." "Yes, but that's a pathological case." Often used to dismiss the case from discussion, with the implication that the consequences are acceptable, since they will happen so infrequently (if at all) that it doesn't seem worth going to the extra trouble to handle that case (see sense 1). payware /pay'weir/ n. Commercial software. Oppose shareware or freeware. = PBD /P-B-D/ n. [abbrev. of `Programmer Brain Damage'] Applied to bug reports revealing places where the program was obviously broken by an incompetent or short-sighted programmer. Compare UBD; see also brain-damaged. PC-ism /P-C-izm/ n. A piece of code or coding technique that takes advantage of the unprotected single-tasking environment in IBM PCs and the like running DOS, e.g., by busy-waiting on a hardware register, direct diddling of screen memory, or using hard timing loops. Compare ill-behaved, vaxism, unixism. Also, `PC-ware' n., a program full of PC-isms on a machine with a more capable operating system. Pejorative. PD /P-D/ adj. [common] Abbreviation for `public domain', applied to software distributed over Usenet and from Internet archive sites. Much of this software is not in fact public domain in the legal sense but travels under various copyrights granting reproduction and use rights to anyone who can snarf a copy. See copyleft. PDL /P-D-L/, /pid'l/, /p*d'l/ or /puhd'l/ 1. n. `Program Design Language'. Any of a large class of formal and profoundly useless pseudo-languages in which management forces one to design programs. Too often, management expects PDL descriptions to be maintained in parallel with the code, imposing massive overhead to little or no benefit. See also flowchart. 2. v. To design using a program design language. "I've been pdling so long my eyes won't focus beyond 2 feet." 3. n. `Page Description Language'. Refers to any language which is used to control a graphics device, usually a laserprinter. The most common example is, of course, Adobe's PostScript language, but there are many others, such as Xerox InterPress, etc. 4. In ITS days, the preferred MITism for stack. See overflow pdl. 5. Dave Lebling, one of the co-authors of Zork; (his network address on the ITS machines was at one time pdl@dms). PDP-10 n. [Programmed Data Processor model 10] The machine that made timesharing real. It looms large in hacker folklore because of its adoption in the mid-1970s by many university computing facilities and research labs, including the MIT AI Lab, Stanford, and CMU. Some aspects of the instruction set (most notably the bit-field instructions) are still considered unsurpassed. The 10 was eventually eclipsed by the VAX machines (descendants of the PDP-11) when DEC recognized that the 10 and VAX product lines were competing with each other and decided to concentrate its software development effort on the more profitable VAX. The machine was finally dropped from DEC's line in 1983, following the failure of the Jupiter Project at DEC to build a viable new model. (Some attempts by other companies to market clones came to nothing; see Foonly and Mars.) This event spelled the doom of ITS and the technical cultures that had spawned the original Jargon File, but by mid-1991 it had become something of a badge of honorable old-timerhood among hackers to have cut one's teeth on a PDP-10. See TOPS-10, ITS, BLT, DDT, DPB, EXCH, HAKMEM, LDB, pop, push. See also http://www.inwap.com/pdp10/. = PDP-20 n. The most famous computer that never was. PDP-10 computers running the TOPS-10 operating system were labeled `DECsystem-10' as a way of differentiating them from the PDP-11. Later on, those systems running TOPS-20 were labeled `DECSYSTEM-20' (the block capitals being the result of a lawsuit brought against DEC by Singer, which once made a computer called `system-10'), but contrary to popular lore there was never a `PDP-20'; the only difference between a 10 and a 20 was the operating system and the color of the paint. Most (but not all) machines sold to run TOPS-10 were painted `Basil Blue', whereas most TOPS-20 machines were painted `Chinese Red' (often mistakenly called orange). = PEBKAC /peb'kak/ [Abbrev., "Problem Exists Between Keyboard And Chair"] Used by support people, particularly at call centers and help desks. Not used with the public. Denotes pilot error as the cause of the crash, especially stupid errors that even a luser could figure out. Very derogatory. Usage: "Did you ever figure out why that guy couldn't print?" "Yeah, he kept cancelling the operation before it could finish. PEBKAC." peek n.,vt. (and poke) The commands in most microcomputer BASICs for directly accessing memory contents at an absolute address; often extended to mean the corresponding constructs in any HLL (peek reads memory, poke modifies it). Much hacking on small, non-MMU micros used to consist of `peek'ing around memory, more or less at random, to find the location where the system keeps interesting stuff. Long (and variably accurate) lists of such addresses for various computers circulated (see interrupt list). The results of `poke's at these addresses may be highly useful, mildly amusing, useless but neat, or (most likely) total lossage (see killer poke). Since a real operating system provides useful, higher-level services for the tasks commonly performed with peeks and pokes on micros, and real languages tend not to encourage low-level memory groveling, a question like "How do I do a peek in C?" is diagnostic of the newbie. (Of course, OS kernels often have to do exactly this; a real kernel hacker would unhesitatingly, if unportably, assign an absolute address to a pointer variable and indirect through it.) pencil and paper n. An archaic information storage and transmission device that works by depositing smears of graphite on bleached wood pulp. More recent developments in paper-based technology include improved `write-once' update devices which use tiny rolling heads similar to mouse balls to deposit colored pigment. All these devices require an operator skilled at so-called `handwriting' technique. These technologies are ubiquitous outside hackerdom, but nearly forgotten inside it. Most hackers had terrible handwriting to begin with, and years of keyboarding tend to have encouraged it to degrade further. Perhaps for this reason, hackers deprecate pencil-and-paper technology and often resist using it in any but the most trivial contexts. Pentagram Pro n. A humorous corruption of "Pentium Pro", with a Satanic reference, implying that the chip is inherently evil. Often used with "666 MHz"; there is a T-shirt. See Pentium Pentium n. The name given to Intel's P5 chip, the successor to the 80486. The name was chosen because of difficulties Intel had in trademarking a number. It suggests the number five (implying 586) while (according to Intel) conveying a meaning of strength "like titanium". Among hackers, the plural is frequently `pentia'. See also Pentagram Pro. Intel did not stick to this convention when naming its P6 processor the Pentium Pro; many believe this is due to difficulties in selling a chip with "sex" in its name. Successor chips have been called `Pentium II' and `Pentium III'. = peon n. A person with no special (root or wheel) privileges on a computer system. "I can't create an account on foovax for you; I'm only a peon there." percent-S /per-sent' es'/ n. [From the code in C's printf(3) library function used to insert an arbitrary string argument] An unspecified person or object. "I was just talking to some percent-s in administration." Compare random. perf /perf/ n. Syn. chad (sense 1). The term `perfory' /per'f*-ree/ is also heard. The term perf may also refer to the perforations themselves, rather than the chad they produce when torn (philatelists use it this way). perfect programmer syndrome n. Arrogance; the egotistical conviction that one is above normal human error. Most frequently found among programmers of some native ability but relatively little experience (especially new graduates; their perceptions may be distorted by a history of excellent performance at solving toy problems). "Of course my program is correct, there is no need to test it." "Yes, I can see there may be a problem here, but I'll never type rm -r / while in root mode." Perl /perl/ n. [Practical Extraction and Report Language, a.k.a. Pathologically Eclectic Rubbish Lister] An interpreted language developed by Larry Wall (author of patch(1) and rn(1)) and distributed over Usenet. Superficially resembles awk, but is much hairier, including many facilities reminiscent of sed(1) and shells and a comprehensive Unix system-call interface. Unix sysadmins, who are almost always incorrigible hackers, generally consider it one of the languages of choice, and it is by far the most widely used tool for making `live' web pages via CGI. Perl has been described, in a parody of a famous remark about lex(1), as the "Swiss-Army chainsaw" of Unix programming. Though Perl is very useful, it would be a stretch to describe it as pretty or elegant; people who like clean, spare design generally prefer Python. See also Camel Book, TMTOWTDI. person of no account n. [University of California at Santa Cruz] Used when referring to a person with no network address, frequently to forestall confusion. Most often as part of an introduction: "This is Bill, a person of no account, but he used to be bill@random.com". Compare return from the dead. pessimal /pes'im-l/ adj. [Latin-based antonym for `optimal'] Maximally bad. "This is a pessimal situation." Also `pessimize' vt. To make as bad as possible. These words are the obvious Latin-based antonyms for `optimal' and `optimize', but for some reason they do not appear in most English dictionaries, although `pessimize' is listed in the OED. pessimizing compiler /pes'*-mi:z`ing k*m-pi:l'r/ n. A compiler that produces object [antonym of techspeak `optimizing compiler'] code that is worse than the straightforward or obvious hand translation. The implication is that the compiler is actually trying to optimize the program, but through excessive cleverness is doing the opposite. A few pessimizing compilers have been written on purpose, however, as pranks or burlesques. peta- /pe't*/ pref [SI] See quantifiers. = PETSCII /pet'skee/ n. obs. [abbreviation of PET ASCII] The variation (many would say perversion) of the ASCII character set used by the Commodore Business Machines PET series of personal computers and the later Commodore C64, C16, C128, and VIC20 machines. The PETSCII set used left-arrow and up-arrow (as in old-style ASCII) instead of underscore and caret, placed the unshifted alphabet at positions 65-90, put the shifted alphabet at positions 193-218, and added graphics characters. = PFY n. [Usenet; common] Abbreviation for `Pimply-Faced Youth'. A BOFH in training, esp. one apprenticed to an elder BOFH aged in evil. phage n. A program that modifies other programs or databases in unauthorized ways; esp. one that propagates a virus or Trojan horse. See also worm, mockingbird. The analogy, of course, is with phage viruses in biology. phase 1. n. The offset of one's waking-sleeping schedule with respect to the standard 24-hour cycle; a useful concept among people who often work at night and/or according to no fixed schedule. It is not uncommon to change one's phase by as much as 6 hours per day on a regular basis. "What's your phase?" "I've been getting in about 8 P.M. lately, but I'm going to wrap around to the day schedule by Friday." A person who is roughly 12 hours out of phase is sometimes said to be in `night mode'. (The term `day mode' is also (but less frequently) used, meaning you're working 9 to 5 (or, more likely, 10 to 6).) The act of altering one's cycle is called `changing phase'; `phase shifting' has also been recently reported from Caltech. 2. `change phase the hard way': To stay awake for a very long time in order to get into a different phase. 3. `change phase the easy way': To stay asleep, etc. However, some claim that either staying awake longer or sleeping longer is easy, and that it is shortening your day or night that is really hard (see wrap around). The `jet lag' that afflicts travelers who cross many time-zone boundaries may be attributed to two distinct causes: the strain of travel per se, and the strain of changing phase. Hackers who suddenly find that they must change phase drastically in a short period of time, particularly the hard way, experience something very like jet lag without traveling. phase of the moon n. Used humorously as a random parameter on which something is said to depend. Sometimes implies unreliability of whatever is dependent, or that reliability seems to be dependent on conditions nobody has been able to determine. "This feature depends on having the channel open in mumble mode, having the foo switch set, and on the phase of the moon." See also heisenbug. True story: Once upon a time there was a program bug that really did depend on the phase of the moon. There was a little subroutine that had traditionally been used in various programs at MIT to calculate an approximation to the moon's true phase. GLS incorporated this routine into a LISP program that, when it wrote out a file, would print a timestamp line almost 80 characters long. Very occasionally the first line of the message would be too long and would overflow onto the next line, and when the file was later read back in the program would barf. The length of the first line depended on both the precise date and time and the length of the phase specification when the timestamp was printed, and so the bug literally depended on the phase of the moon! The first paper edition of the Jargon File (Steele-1983) included an example of one of the timestamp lines that exhibited this bug, but the typesetter `corrected' it. This has since been described as the phase-of-the-moon-bug bug. However, beware of assumptions. A few years ago, engineers of CERN (European Center for Nuclear Research) were baffled by some errors in experiments conducted with the LEP particle accelerator. As the formidable amount of data generated by such devices is heavily processed by computers before being seen by humans, many people suggested the software was somehow sensitive to the phase of the moon. A few desperate engineers discovered the truth; the error turned out to be the result of a tiny change in the geometry of the 27km circumference ring, physically caused by the deformation of the Earth by the passage of the Moon! This story has entered physics folklore as a Newtonian vengeance on particle physics and as an example of the relevance of the simplest and oldest physical laws to the most modern science. phase-wrapping n. [MIT] Syn. wrap around, sense 2. PHB /P-H-B/ [Usenet; common; rarely spoken] Abbreviation, "Pointy-Haired Boss". From the Dilbert character, the archetypal halfwitted middle-management type. See also pointy-haired. phreaker /freek'r/ n. One who engages in phreaking. See also blue box. P = phreaking /freek'ing/ n. [from `phone phreak'] 1. The art and science of cracking the phone network (so as, for example, to make free long-distance calls). 2. By extension, security-cracking in any other context (especially, but not exclusively, on communications networks) (see cracking). At one time phreaking was a semi-respectable activity among hackers; there was a gentleman's agreement that phreaking as an intellectual game and a form of exploration was OK, but serious theft of services was taboo. There was significant crossover between the hacker community and the hard-core phone phreaks who ran semi-underground networks of their own through such media as the legendary "TAP Newsletter". This ethos began to break down in the mid-1980s as wider dissemination of the techniques put them in the hands of less responsible phreaks. Around the same time, changes in the phone network made old-style technical ingenuity less effective as a way of hacking it, so phreaking came to depend more on overtly criminal acts such as stealing phone-card numbers. The crimes and punishments of gangs like the `414 group' turned that game very ugly. A few old-time hackers still phreak casually just to keep their hand in, but most these days have hardly even heard of `blue boxes' or any of the other paraphernalia of the great phreaks of yore. pico- pref. [SI: a quantifier meaning * 10^-12] Smaller than nano-; used in the same rather loose connotative way as nano- and micro-. This usage is not yet common in the way nano- and micro- are, but should be instantly recognizable to any hacker. See also quantifiers, micro-. = pig-tail [radio hams] A short piece of cable with two connectors on each end for converting between one connector type and another. Common pig-tails are 9-to-25-pin serial-port converters and cables to connect PCMCIA network cards to an RJ-45 network cable. P = pilot error n. [Sun: from aviation] A user's misconfiguration or misuse of a piece of software, producing apparently buglike results (compare UBD). "Joe Luser reported a bug in sendmail that causes it to generate bogus headers." "That's not a bug, that's pilot error. His sendmail.cf is hosed." ping [from the submariners' term for a sonar pulse] 1. n. Slang term for a small network message (ICMP ECHO) sent by a computer to check for the presence and alertness of another. The Unix command ping(8) can be used to do this manually (note that ping(8)'s author denies the widespread folk etymology that the name was ever intended as acronym for `Packet INternet Groper'). Occasionally used as a phone greeting. See ACK, also ENQ. 2. vt. To verify the presence of. 3. vt. To get the attention of. 4. vt. To send a message to all members of a mailing list requesting an ACK (in order to verify that everybody's addresses are reachable). "We haven't heard much of anything from Geoff, but he did respond with an ACK both times I pinged jargon-friends." 5. n. A quantum packet of happiness. People who are very happy tend to exude pings; furthermore, one can intentionally create pings and aim them at a needy party (e.g., a depressed person). This sense of ping may appear as an exclamation; "Ping!" (I'm happy; I am emitting a quantum of happiness; I have been struck by a quantum of happiness). The form "pingfulness", which is used to describe people who exude pings, also occurs. (In the standard abuse of language, "pingfulness" can also be used as an exclamation, in which case it's a much stronger exclamation than just "ping"!). Oppose blargh. The funniest use of `ping' to date was described in January 1991 by Steve Hayman on the Usenet group _comp.sys.next_. He was trying to isolate a faulty cable segment on a TCP/IP Ethernet hooked up to a NeXT machine, and got tired of having to run back to his console after each cabling tweak to see if the ping packets were getting through. So he used the sound-recording feature on the NeXT, then wrote a script that repeatedly invoked ping(8), listened for an echo, and played back the recording on each returned packet. Result? A program that caused the machine to repeat, over and over, "Ping ... ping ... ping ..." as long as the network was up. He turned the volume to maximum, ferreted through the building with one ear cocked, and found a faulty tee connector in no time. Ping O' Death n. A notorious exploit that (when first discovered) could be easily used to crash a wide variety of machines by overunning size limits in their TCP/IP stacks. First revealed in late 1996. The open-source Unix community patched its systems to remove the vulnerability within days or weeks, the closed-source OS vendors generally took months. While the difference in response times repeated a pattern familiar from other security incidents, the accompanying glare of Web-fueled publicity proved unusually embarrassing to the OS vendors and so passed into history and myth. The term is now used to refer to any nudge delivered by network wizards over the network that causes bad things to happen on the system being nudged. For the full story on the original exploit, see http://www.insecure.org/sploits/ping-o-death.html. Compare with 'kamikaze packet,' 'Finger of Death' and 'Chernobyl packet.' ping storm n. A form of DoS attack consisting of a flood of ping requests (normally used to check network conditions) designed to disrupt the normal activity of a system. This act is sometimes called `ping lashing' or `ping flood'. Compare mail storm, broadcast storm. pink wire n. [from the pink PTFE wire used in military equipment] As blue wire, but used in military applications. 2. vi. To add a pink wire to a board. pipe n. [common] Idiomatically, one's connection to the Internet; in context, the expansion "bit pipe" is understood. A "fat pipe" is a line with T1 or higher capacity. A person with a 28.8 modem might be heard to complain "I need a bigger pipe". pistol n. [IBM] A tool that makes it all too easy for you to shoot yourself in the foot. "Unix rm * makes such a nice pistol!" P = pixel sort n. [Commodore users] Any compression routine which irretrievably loses valuable data in the process of crunching it. Disparagingly used for `lossy' methods such as JPEG. The theory, of course, is that these methods are only used on photographic images in which minor loss-of-data is not visible to the human eye. The term `pixel sort' implies distrust of this theory. Compare bogo-sort. pizza box n. [Sun] The largish thin box housing the electronics in (especially Sun) desktop workstations, so named because of its size and shape and the dimpled pattern that looks like air holes. Two meg single-platter removable disk packs used to be called pizzas, and the huge drive they were stuck into was referred to as a pizza oven. It's an index of progress that in the old days just the disk was pizza-sized, while now the entire computer is. plaid screen n. [XEROX PARC] A `special effect' that occurs when certain kinds of memory smashes overwrite the control blocks or image memory of a bit-mapped display. The term "salt and pepper" may refer to a different pattern of similar origin. Though the term as coined at PARC refers to the result of an error, some of the X demos induce plaid-screen effects deliberately as a display hack. plain-ASCII /playn-as'kee/ Syn. flat-ASCII. plan file n. [Unix] On systems that support finger, the `.plan' file in a user's home directory is displayed when the user is fingered. This feature was originally intended to be used to keep potential fingerers apprised of one's location and near-future plans, but has been turned almost universally to humorous and self-expressive purposes (like a sig block). See also Hacking X for Y. A recent innovation in plan files has been the introduction of "scrolling plan files" which are one-dimensional animations made using only the printable ASCII character set, carriage return and line feed, avoiding terminal specific escape sequences, since the finger command will (for security reasons; see letterbomb) not pass the escape character. Scrolling .plan files have become art forms in miniature, and some sites have started competitions to find who can create the longest running, funniest, and most original animations. Various animation characters include: Centipede: mmmmme Lorry/Truck: oo-oP Andalusian Video Snail: _@/ and a compiler (ASP) is available on Usenet for producing them. See also twirling baton. platinum-iridium adj. Standard, against which all others of the same category are measured. Usage: silly. The notion is that one of whatever it is has actually been cast in platinum-iridium alloy and placed in the vault beside the Standard Kilogram at the International Bureau of Weights and Measures near Paris. (From 1889 to 1960, the meter was defined to be the distance between two scratches in a platinum-iridium bar kept in that same vault -- this replaced an earlier definition as 10^(-7) times the distance between the North Pole and the Equator along a meridian through Paris; unfortunately, this had been based on an inexact value of the circumference of the Earth. From 1960 to 1984 it was defined to be 1650763.73 wavelengths of the orange-red line of krypton-86 propagating in a vacuum. It is now defined as the length of the path traveled by light in a vacuum in the time interval of 1/299,792,458 of a second. The kilogram is now the only unit of measure officially defined in terms of a unique artifact.) "This garbage-collection algorithm has been tested against the platinum-iridium cons cell in Paris." Compare golden. playpen n. [IBM] A room where programmers work. Compare salt mines. = playte /playt/ 16 bits, by analogy with nybble and byte. Usage: rare and extremely silly. See also dynner and crumb. General discussion of such terms is under nybble. = plingnet /pling'net/ n. Syn. UUCPNET. Also see Commonwealth Hackish, which uses `pling' for bang (as in bang path). P = plokta /plok't*/ v. [acronym: Press Lots Of Keys To Abort] To press random keys in an attempt to get some response from the system. One might plokta when the abort procedure for a program is not known, or when trying to figure out if the system is just sluggish or really hung. Plokta can also be used while trying to figure out any unknown key sequence for a particular operation. Someone going into `plokta mode' usually places both hands flat on the keyboard and mashes them down, hoping for some useful response. A slightly more directed form of plokta can often be seen in mail messages or Usenet articles from new users -- the text might end with ^X^C q quit :q ^C end x exit ZZ ^D ? help as the user vainly tries to find the right exit sequence, with the incorrect tries piling up at the end of the message.... P = plonk excl.,vt. [Usenet: possibly influenced by British slang `plonk' for cheap booze, or `plonker' for someone behaving stupidly (latter is lit. equivalent to Yiddish `schmuck')] The sound a newbie makes as he falls to the bottom of a kill file. While it originated in the newsgroup _talk.bizarre_, this term (usually written "*plonk*") is now (1994) widespread on Usenet as a form of public ridicule. = plug-and-pray adj.,vi. Parody of the techspeak term `plug-and-play', describing a PC peripheral card which is claimed to have no need for hardware configuration via DIP switches, and which should be work as soon as it is inserted in the PC. Unfortunately, even the PCI bus is not up to pulling this off reliably, and people who have to do installation or troubleshoot PCs soon find themselves longing for the DIP switches. plugh /ploogh/ v. [from the ADVENT game] See xyzzy. plumbing n. [Unix] Term used for shell code, so called because of the prevalence of `pipelines' that feed the output of one program to the input of another. Under Unix, user utilities can often be implemented or at least prototyped by a suitable collection of pipelines and temp-file grinding encapsulated in a shell script; this is much less effort than writing C every time, and the capability is considered one of Unix's major winning features. A few other OSs such as IBM's VM/CMS support similar facilities. Esp. used in the construction `hairy plumbing' (see hairy). "You can kluge together a basic spell-checker out of sort(1), comm(1), and tr(1) with a little plumbing." See also tee. P = PM /P-M/ 1. v. (from `preventive maintenance') To bring down a machine for inspection or test purposes. See provocative maintenance; see also scratch monkey. 2. n. Abbrev. for `Presentation Manager', an elephantine OS/2 graphical user interface. pnambic /p*-nam'bik/ [Acronym from the scene in the film version of "The Wizard of Oz" in which the true nature of the wizard is first discovered: "Pay no attention to the man behind the curtain."] 1. A stage of development of a process or function that, owing to incomplete implementation or to the complexity of the system, requires human interaction to simulate or replace some or all of the actions, inputs, or outputs of the process or function. 2. Of or pertaining to a process or function whose apparent operations are wholly or partially falsified. 3. Requiring prestidigitization. The ultimate pnambic product was "Dan Bricklin's Demo", a program which supported flashy user-interface design prototyping. There is a related maxim among hackers: "Any sufficiently advanced technology is indistinguishable from a rigged demo." See magic, sense 1, for illumination of this point. pod n. [allegedly from abbreviation POD for `Prince Of Darkness'] A Diablo 630 (or, latterly, any letter-quality impact printer). From the DEC-10 PODTYPE program used to feed formatted text to it. Not to be confused with P.O.D.. point-and-drool interface n. Parody of the techspeak term `point-and-shoot interface', describing a windows, icons, and mouse-based interface such as is found on the Macintosh. The implication, of course, is that such an interface is only suitable for idiots. See for the rest of us, WIMP environment, Macintrash, drool-proof paper. Also `point-and-grunt interface'. pointy hat n. See wizard hat. This synonym specifically refers to the wizards of Unseen University in Terry Pratchett's "Discworld" serious of humorous fantasies; these books are extremely popular among hackers. pointy-haired adj. [after the character in the Dilbert comic strip] Describes the extreme form of the property that separates suits and marketroids from hackers. Compare brain-dead; demented; see PHB. Always applied to people, never to ideas. The plural form is often used as a noun. "The pointy-haireds ordered me to use Windows NT, but I set up a Linux server with Samba instead." poke n.,vt. See peek. poll v.,n. 1. [techspeak] The action of checking the status of an input line, sensor, or memory location to see if a particular external event has been registered. 2. To repeatedly call or check with someone: "I keep polling him, but he's not answering his phone; he must be swapped out." 3. To ask. "Lunch? I poll for a takeout order daily." polygon pusher n. A chip designer who spends most of his or her time at the physical layout level (which requires drawing lots of multi-colored polygons). Also `rectangle slinger'. POM /P-O-M/ n. Common abbreviation for phase of the moon. Usage: usually in the phrase `POM-dependent', which means flaky. pop /pop/ [from the operation that removes the top of a stack, and the fact that procedure return addresses are usually saved on the stack] (also capitalized `POP') 1. vt. To remove something from a stack or PDL. If a person says he/she has popped something from his stack, that means he/she has finally finished working on it and can now remove it from the list of things hanging overhead. 2. When a discussion gets to a level of detail so deep that the main point of the discussion is being lost, someone will shout "Pop!", meaning "Get back up to a higher level!" The shout is frequently accompanied by an upthrust arm with a finger pointing to the ceiling. 3. [all-caps, as `POP'] Point of Presence, a bank of dial-in lines allowing customers to make (local) calls into an ISP. This is borderline techspeak. POPJ /pop'J/ n.,v. [from a PDP-10 return-from-subroutine instruction] To return from a digression. By verb doubling, "Popj, popj" means roughly "Now let's see, where were we?" See RTI. poser n. A wannabee; not hacker slang, but used among crackers, phreaks and warez d00dz. Not as negative as lamer or leech. Probably derives from a similar usage among punk-rockers and metalheads, putting down those who "talk the talk but don't walk the walk". = post v. To send a message to a mailing list or newsgroup. Distinguished in context from `mail'; one might ask, for example: "Are you going to post the patch or mail it to known users?" postcardware n. A kind of shareware that borders on freeware, in that the author requests only that satisfied users send a postcard of their home town or something. (This practice, silly as it might seem, serves to remind users that they are otherwise getting something for nothing, and may also be psychologically related to real estate `sales' in which $1 changes hands just to keep the transaction from being a gift.) posting n. Noun corresp. to v. post (but note that post can be nouned). Distinguished from a `letter' or ordinary email message by the fact that it is broadcast rather than point-to-point. It is not clear whether messages sent to a small mailing list are postings or email; perhaps the best dividing line is that if you don't know the names of all the potential recipients, it is a posting. postmaster n. The email contact and maintenance person at a site connected to the Internet or UUCPNET. Often, but not always, the same as the admin. The Internet standard for electronic mail (RFC-822) requires each machine to have a `postmaster' address; usually it is aliased to this person. PostScript n. A Page Description Language (PDL), based on work originally done by John Gaffney at Evans and Sutherland in 1976, evolving through `JaM' (`John and Martin', Martin Newell) at XEROX PARC, and finally implemented in its current form by John Warnock et al. after he and Chuck Geschke founded Adobe Systems Incorporated in 1982. PostScript gets its leverage by using a full programming language, rather than a series of low-level escape sequences, to describe an image to be printed on a laser printer or other output device (in this it parallels EMACS, which exploited a similar insight about editing tasks). It is also noteworthy for implementing on-the fly rasterization, from Bezier curve descriptions, of high-quality fonts at low (e.g. 300 dpi) resolution (it was formerly believed that hand-tuned bitmap fonts were required for this task). Hackers consider PostScript to be among the most elegant hacks of all time, and the combination of technical merits and widespread availability has made PostScript the language of choice for graphical output. pound on vt. Syn. bang on. power cycle vt. (also, `cycle power' or just `cycle') To power off a machine and then power it on immediately, with the intention of clearing some kind of hung or gronked state. Syn. 120 reset; see also Big Red Switch. Compare Vulcan nerve pinch, bounce (sense 4), and boot, and see the "Some AI Koans" (in Appendix A) about Tom Knight and the novice. power hit n. A spike or drop-out in the electricity supplying your machine; a power glitch. These can cause crashes and even permanent damage to your machine(s). PPN /P-P-N/, /pip'n/ n. obs. [from `Project-Programmer Number'] A user-ID under TOPS-10 and its various mutant progeny at SAIL, BBN, CompuServe, and elsewhere. Old-time hackers from the PDP-10 era sometimes use this to refer to user IDs on other systems as well. pr0n // [Usenet, IRC] Pornography. Originally this referred only to Internet porn but since then it has expanded to refer to just about anything. The term comes from the warez kiddies tendency to replace letters with numbers. At some point on IRC someone mistyped, swapped the middle two letters, and the name stuck, then propagated over into mainstream hacker usage. Compare filk, grilf, hing and newsfroup. precedence lossage /pre's*-dens los'*j/ n. [C programmers] Coding error in an expression due to unexpected grouping of arithmetic or logical operators by the compiler. Used esp. of certain common coding errors in C due to the nonintuitively low precedence levels of &, |, ^, <<, and >> (for this reason, experienced C programmers deliberately forget the language's baroque precedence hierarchy and parenthesize defensively). Can always be avoided by suitable use of parentheses. LISP fans enjoy pointing out that this can't happen in their favorite language, which eschews precedence entirely, requiring one to use explicit parentheses everywhere. See aliasing bug, memory leak, memory smash, smash the stack, fandango on core, overrun screw. prepend /pree`pend'/ vt. [by analogy with `append'] To prefix. As with `append' (but not `prefix' or `suffix' as a verb), the direct object is always the thing being added and not the original word (or character string, or whatever). "If you prepend a semicolon to the line, the translation routine will pass it through unaltered." prestidigitization /pres`t*-di`j*-ti:-zay'sh*n/ n. 1. The act of putting something into digital notation via sleight of hand. 2. Data entry through legerdemain. pretty pictures n. [scientific computation] The next step up from numbers. Interesting graphical output from a program that may not have any sensible relationship to the system the program is intended to model. Good for showing to management. prettyprint /prit'ee-print/ v. (alt. `pretty-print') 1. To generate `pretty' human-readable output from a hairy internal representation; esp. used for the process of grinding (sense 1) program code, and most esp. for LISP code. 2. To format in some particularly slick and nontrivial way. pretzel key n. [Mac users] See feature key. priesthood n. obs. [TMRC] The select group of system managers responsible for the operation and maintenance of a batch operated computer system. On these computers, a user never had direct access to a computer, but had to submit his/her data and programs to a priest for execution. Results were returned days or even weeks later. See acolyte. prime time n. [from TV programming] Normal high-usage hours on a system or network. Back in the days of big timesharing machines `prime time' was when lots of people were competing for limited cycles, usually the day shift. Avoidance of prime time was traditionally given as a major reason for night mode hacking. The term fell into disuse during the early PC era, but has been revived to refer to times of day or evening at which the Internet tends to be heavily loaded, making Web access slow. The hackish tendency to late-night hacking runs has changed not a bit. print v. To output, even if to a screen. If a hacker says that a program "printed a message", he means this; if he refers to printing a file, he probably means it in the conventional sense of writing to a hardcopy device (compounds like `print job' and `printout', on the other hand, always refer to the latter). This very common term is likely a holdover from the days when printing terminals were the norm, perpetuated by programming language constructs like C's printf(3). See senses 1 and 2 of tty. = printing discussion n. [XEROX PARC] A protracted, low-level, time-consuming, generally pointless discussion of something only peripherally interesting to all. priority interrupt n. [from the hardware term] Describes any stimulus compelling enough to yank one right out of hack mode. Classically used to describe being dragged away by an SO for immediate sex, but may also refer to more mundane interruptions such as a fire alarm going off in the near vicinity. Also called an NMI (non-maskable interrupt), especially in PC-land. profile n. 1. A control file for a program, esp. a text file automatically read from each user's home directory and intended to be easily modified by the user in order to customize the program's behavior. Used to avoid hardcoded choices (see also dot file, rc file). 2. [techspeak] A report on the amounts of time spent in each routine of a program, used to find and tune away the hot spots in it. This sense is often verbed. Some profiling modes report units other than time (such as call counts) and/or report at granularities other than per-routine, but the idea is similar. 3.[techspeak] A subset of a standard used for a particular purpose. This sense confuses hackers who wander into the weird world of ISO standards no end! = progasm /proh'gaz-m/ n. [University of Wisconsin] The euphoria experienced upon the completion of a program or other computer-related project. = proggy n. 1. Any computer program that is considered a full application. 2. Any computer program that is made up of or otherwise contains proglets. 3. Any computer program that is large enough to be normally distributed as an RPM or tarball. = proglet /prog'let/ n. [UK] A short _extempore_ program written to meet an immediate, transient need. Often written in BASIC, rarely more than a dozen lines long, and containing no subroutines. The largest amount of code that can be written off the top of one's head, that does not need any editing, and that runs correctly the first time (this amount varies significantly according to one's skill and the language one is using). Compare toy program, noddy, one-liner wars. program n. 1. A magic spell cast over a computer allowing it to turn one's input into error messages. 2. An exercise in experimental epistemology. 3. A form of art, ostensibly intended for the instruction of computers, which is nevertheless almost inevitably a failure if other programmers can't understand it. Programmer's Cheer "Shift to the left! Shift to the right! Pop up, push down! Byte! Byte! Byte!" A joke so old it has hair on it. programming n. 1. The art of debugging a blank sheet of paper (or, in these days of on-line editing, the art of debugging an empty file). "Bloody instructions which, being taught, return to plague their inventor" ("Macbeth", Act 1, Scene 7) 2. A pastime similar to banging one's head against a wall, but with fewer opportunities for reward. 3. The most fun you can have with your clothes on. 4. The least fun you can have with your clothes off. programming fluid n. 1. Coffee. 2. Cola. 3. Any caffeinacious stimulant. Many hackers consider these essential for those all-night hacking runs. See wirewater. propeller head n. Used by hackers, this is syn. with computer geek. Non-hackers sometimes use it to describe all techies. Prob. derives from SF fandom's tradition (originally invented by old-time fan Ray Faraday Nelson) of propeller beanies as fannish insignia (though nobody actually wears them except as a joke). propeller key n. [Mac users] See feature key. proprietary adj. 1. In marketroid-speak, superior; implies a product imbued with exclusive magic by the unmatched brilliance of the company's own hardware or software designers. 2. In the language of hackers and users, inferior; implies a product not conforming to open-systems standards, and thus one that puts the customer at the mercy of a vendor able to gouge freely on service and upgrade charges after the initial sale has locked the customer in. Often in the phrase "proprietary crap". 3. Synonym for closed-source, e.g. software issued in binary without source and under a restructive license. Since the coining of the term open source, many hackers have made a conscious effort to distinguish between `proprietary' and `commercial' software. It is possible for software to be commercial (that is, intended to make a profit for the producers) without being proprietary. The reverse is also possible, for example in binary-only freeware. protocol n. As used by hackers, this never refers to niceties about the proper form for addressing letters to the Papal Nuncio or the order in which one should use the forks in a Russian-style place setting; hackers don't care about such things. It is used instead to describe any set of rules that allow different machines or pieces of software to coordinate with each other without ambiguity. So, for example, it does include niceties about the proper form for addressing packets on a network or the order in which one should use the forks in the Dining Philosophers Problem. It implies that there is some common message format and an accepted set of primitives or commands that all parties involved understand, and that transactions among them follow predictable logical sequences. See also handshaking, do protocol. provocative maintenance n. [common ironic mutation of `preventive maintenance'] Actions performed upon a machine at regularly scheduled intervals to ensure that the system remains in a usable state. So called because it is all too often performed by a field servoid who doesn't know what he is doing; such `maintenance' often induces problems, or otherwise results in the machine's remaining in an unusable state for an indeterminate amount of time. See also scratch monkey. prowler n. [Unix] A daemon that is run periodically (typically once a week) to seek out and erase core files, truncate administrative logfiles, nuke lost+found directories, and otherwise clean up the cruft that tends to pile up in the corners of a file system. See also GFR, reaper, skulker. = pseudo /soo'doh/ n. [Usenet: truncation of `pseudonym'] 1. An electronic-mail or Usenet persona adopted by a human for amusement value or as a means of avoiding negative repercussions of one's net.behavior; a `nom de Usenet', often associated with forged postings designed to conceal message origins. Perhaps the best-known and funniest hoax of this type is B1FF. See also tentacle. 2. Notionally, a flamage-generating AI program simulating a Usenet user. Many flamers have been accused of actually being such entities, despite the fact that no AI program of the required sophistication yet exists. However, in 1989 there was a famous series of forged postings that used a phrase-frequency-based travesty generator to simulate the styles of several well-known flamers; it was based on large samples of their back postings (compare Dissociated Press). A significant number of people were fooled by the forgeries, and the debate over their authenticity was settled only when the perpetrator came forward to publicly admit the hoax. P = pseudoprime n. A backgammon prime (six consecutive occupied points) with one point missing. This term is an esoteric pun derived from number theory: a number that passes a certain kind of "primality test" may be called a `pseudoprime' (all primes pass any such test, but so do some composite numbers), and any number that passes several is, in some sense, almost certainly prime. The hacker backgammon usage stems from the idea that a pseudoprime is almost as good as a prime: it will do the same job unless you are unlucky. pseudosuit /soo'doh-s[y]oot`/ n. A suit wannabee; a hacker who has decided that he wants to be in management or administration and begins wearing ties, sport coats, and (shudder!) suits voluntarily. It's his funeral. See also lobotomy. psychedelicware /si:`k*-del'-ik-weir/ n. [UK] Syn. display hack. See also smoking clover. psyton /si:'ton/ n. [TMRC] The elementary particle carrying the sinister force. The probability of a process losing is proportional to the number of psytons falling on it. Psytons are generated by observers, which is why demos are more likely to fail when lots of people are watching. [This term appears to have been largely superseded by bogon; see also quantum bogodynamics. --ESR] P = pubic directory /pyoob'ik d*-rek't*-ree/) n. [NYU] (also `pube directory' /pyoob' d*-rek't*-ree/) The `pub' (public) directory on a machine that allows FTP access. So called because it is the default location for SEX (sense 1). "I'll have the source in the pube directory by Friday." puff vt. To decompress data that has been crunched by Huffman coding. At least one widely distributed Huffman decoder program was actually named `PUFF', but these days it is usually packaged with the encoder. Oppose huff, see inflate. = pumpkin holder n. See patch pumpkin. pumpking n. Syn. for pumpkin holder; see patch pumpkin. P = punched card n.obs. [techspeak] (alt. `punch card') The signature medium of computing's Stone Age, now obsolescent outside of some IBM shops. The punched card actually predated computers considerably, originating in 1801 as a control device for mechanical looms. The version patented by Hollerith and used with mechanical tabulating machines in the 1890 U.S. Census was a piece of cardboard about 90 mm by 215 mm. There is a widespread myth that it was designed to fit in the currency trays used for that era's larger dollar bills, but recent investigations have falsified this. IBM (which originated as a tabulating-machine manufacturer) married the punched card to computers, encoding binary information as patterns of small rectangular holes; one character per column, 80 columns per card. Other coding schemes, sizes of card, and hole shapes were tried at various times. The 80-column width of most character terminals is a legacy of the IBM punched card; so is the size of the quick-reference cards distributed with many varieties of computers even today. See chad, chad box, eighty-column mind, green card, dusty deck, lace card, card walloper. punt v. [from the punch line of an old joke referring to American football: "Drop back 15 yards and punt!"] 1. To give up, typically without any intention of retrying. "Let's punt the movie tonight." "I was going to hack all night to get this feature in, but I decided to punt" may mean that you've decided not to stay up all night, and may also mean you're not ever even going to put in the feature. 2. More specifically, to give up on figuring out what the Right Thing is and resort to an inefficient hack. 3. A design decision to defer solving a problem, typically because one cannot define what is desirable sufficiently well to frame an algorithmic solution. "No way to know what the right form to dump the graph in is -- we'll punt that for now." 4. To hand a tricky implementation problem off to some other section of the design. "It's too hard to get the compiler to do that; let's punt to the runtime system." 5. To knock someone off an Internet or chat connection; a `punter' thus, is a person or program that does this. = Purple Book n. 1. The "System V Interface Definition". The covers of the first editions were an amazingly nauseating shade of off-lavender. 2. Syn. Wizard Book. Donald Lewine's "POSIX Programmer's Guide" (O'Reilly, 1991, ISBN 0-937175-73-0). See also book titles. purple wire n. [IBM] Wire installed by Field Engineers to work around problems discovered during testing or debugging. These are called `purple wires' even when (as is frequently the case) their actual physical color is yellow.... Compare blue wire, yellow wire, and red wire. push [from the operation that puts the current information on a stack, and the fact that procedure return addresses are saved on a stack] (Also PUSH /push/ or PUSHJ /push'J/, the latter based on the PDP-10 procedure call instruction.) 1. To put something onto a stack or PDL. If one says that something has been pushed onto one's stack, it means that the Damoclean list of things hanging over ones's head has grown longer and heavier yet. This may also imply that one will deal with it before other pending items; otherwise one might say that the thing was `added to my queue'. 2. vi. To enter upon a digression, to save the current discussion for later. Antonym of pop; see also stack, PDL. Python /pi:'thon/ In the words of its author, "the other scripting language" (other than Perl, that is). Python's design is notably clean, elegant, and well thought through; it tends to attract the sort of programmers who find Perl grubby and exiguous. Python's relationship with Perl is rather like the BSD community's relationship to Linux - it's the smaller party in a (usually friendly) rivalry, but the average quality of its developers is generally conceded to be rather higher than in the larger community it competes with. There's a Python resource page at http://www.python.org. See also Guido. = Q = quad: quadruple bucky: quantifiers: quantum bogodynamics: quarter: ques: quick-and-dirty: quine: quote chapter and verse: quotient: quux: qux: QWERTY: quad n. 1. Two bits; syn. for quarter, crumb, tayste. 2. A four-pack of anything (compare hex, sense 2). 3. The rectangle or box glyph used in the APL language for various arcane purposes mostly related to I/O. Former Ivy-Leaguers and Oxford types are said to associate it with nostalgic memories of dear old University. quadruple bucky n. obs. 1. On an MIT space-cadet keyboard, use of all four of the shifting keys (control, meta, hyper, and super) while typing a character key. 2. On a Stanford or MIT keyboard in raw mode, use of four shift keys while typing a fifth character, where the four shift keys are the control and meta keys on both sides of the keyboard. This was very difficult to do! One accepted technique was to press the left-control and left-meta keys with your left hand, the right-control and right-meta keys with your right hand, and the fifth key with your nose. Quadruple-bucky combinations were very seldom used in practice, because when one invented a new command one usually assigned it to some character that was easier to type. If you want to imply that a program has ridiculously many commands or features, you can say something like: "Oh, the command that makes it spin the tapes while whistling Beethoven's Fifth Symphony is quadruple-bucky-cokebottle." See double bucky, bucky bits, cokebottle. quantifiers In techspeak and jargon, the standard metric prefixes used in the SI (Système International) conventions for scientific measurement have dual uses. With units of time or things that come in powers of 10, such as money, they retain their usual meanings of multiplication by powers of 1000 = 10^3. But when used with bytes or other things that naturally come in powers of 2, they usually denote multiplication by powers of 1024 = 2^(10). Here are the SI magnifying prefixes, along with the corresponding binary interpretations in common use: prefix decimal binary kilo- 1000^1 1024^1 = 2^10 = 1,024 mega- 1000^2 1024^2 = 2^20 = 1,048,576 giga- 1000^3 1024^3 = 2^30 = 1,073,741,824 tera- 1000^4 1024^4 = 2^40 = 1,099,511,627,776 peta- 1000^5 1024^5 = 2^50 = 1,125,899,906,842,624 exa- 1000^6 1024^6 = 2^60 = 1,152,921,504,606,846,976 zetta- 1000^7 1024^7 = 2^70 = 1,180,591,620,717,411,303,424 yotta- 1000^8 1024^8 = 2^80 = 1,208,925,819,614,629,174,706,176 Here are the SI fractional prefixes: prefix decimal jargon usage milli- 1000^-1 (seldom used in jargon) micro- 1000^-2 small or human-scale (see micro-) nano- 1000^-3 even smaller (see nano-) pico- 1000^-4 even smaller yet (see pico-) femto- 1000^-5 (not used in jargon---yet) atto- 1000^-6 (not used in jargon---yet) zepto- 1000^-7 (not used in jargon---yet) yocto- 1000^-8 (not used in jargon---yet) The prefixes zetta-, yotta-, zepto-, and yocto- have been included in these tables purely for completeness and giggle value; they were adopted in 1990 by the `19th Conference Generale des Poids et Mesures'. The binary peta- and exa- loadings, though well established, are not in jargon use either -- yet. The prefix milli-, denoting multiplication by 1/1000, has always been rare in jargon (there is, however, a standard joke about the `millihelen' -- notionally, the amount of beauty required to launch one ship). See the entries on micro-, pico-, and nano- for more information on connotative jargon use of these terms. `Femto' and `atto' (which, interestingly, derive not from Greek but from Danish) have not yet acquired jargon loadings, though it is easy to predict what those will be once computing technology enters the required realms of magnitude (however, see attoparsec). There are, of course, some standard unit prefixes for powers of 10. In the following table, the `prefix' column is the international standard suffix for the appropriate power of ten; the `binary' column lists jargon abbreviations and words for the corresponding power of 2. The B-suffixed forms are commonly used for byte quantities; the words `meg' and `gig' are nouns that may (but do not always) pluralize with `s'. _prefix decimal binary pronunciation_ kilo- k K, KB, /kay/ mega- M M, MB, meg /meg/ giga- G G, GB, gig /gig/,/jig/ Confusingly, hackers often use K or M as though they were suffix or numeric multipliers rather than a prefix; thus "2K dollars", "2M of disk space". This is also true (though less commonly) of G. Note that the formal SI metric prefix for 1000 is `k'; some use this strictly, reserving `K' for multiplication by 1024 (KB is thus `kilobytes'). K, M, and G used alone refer to quantities of bytes; thus, 64G is 64 gigabytes and `a K' is a kilobyte (compare mainstream use of `a G' as short for `a grand', that is, $1000). Whether one pronounces `gig' with hard or soft `g' depends on what one thinks the proper pronunciation of `giga-' is. Confusing 1000 and 1024 (or other powers of 2 and 10 close in magnitude) -- for example, describing a memory in units of 500K or 524K instead of 512K -- is a sure sign of the marketroid. One example of this: it is common to refer to the capacity of 3.5" microfloppies as `1.44 MB' In fact, this is a completely bogus number. The correct size is 1440 KB, that is, 1440 * 1024 = 1474560 bytes. So the `mega' in `1.44 MB' is compounded of two `kilos', one of which is 1024 and the other of which is 1000. The correct number of megabytes would of course be 1440 / 1024 = 1.40625. Alas, this fine point is probably lost on the world forever. [1993 update: hacker Morgan Burke has proposed, to general approval on Usenet, the following additional prefixes: groucho 10^(-30) harpo 10^(-27) harpi 10^(27) grouchi 10^(30) We observe that this would leave the prefixes zeppo-, gummo-, and chico- available for future expansion. Sadly, there is little immediate prospect that Mr. Burke's eminently sensible proposal will be ratified.] [1999 upate: there is an IEC proposal for binary multipliers, but no evidence that any of its proposals are in live use.] quantum bogodynamics /kwon'tm boh`goh-di:-nam'iks/ n. A theory that characterizes the universe in terms of bogon sources (such as politicians, used-car salesmen, TV evangelists, and suits in general), bogon sinks (such as taxpayers and computers), and bogosity potential fields. Bogon absorption, of course, causes human beings to behave mindlessly and machines to fail (and may also cause both to emit secondary bogons); however, the precise mechanics of the bogon-computron interaction are not yet understood and remain to be elucidated. Quantum bogodynamics is most often invoked to explain the sharp increase in hardware and software failures in the presence of suits; the latter emit bogons, which the former absorb. See bogon, computron, suit, psyton. quarter n. Two bits. This in turn comes from the `pieces of eight' famed in pirate movies -- Spanish silver crowns that could be broken into eight pie-slice-shaped `bits' to make change. Early in American history the Spanish coin was considered equal to a dollar, so each of these `bits' was considered worth 12.5 cents. Syn. tayste, crumb, quad. Usage: rare. General discussion of such terms is under nybble. ques /kwes/ 1. n. The question mark character (?, ASCII 0111111). 2. interj. What? Also frequently verb-doubled as "Ques ques?" See wall. quick-and-dirty adj. [common] Describes a crock put together under time or user pressure. Used esp. when you want to convey that you think the fast way might lead to trouble further down the road. "I can have a quick-and-dirty fix in place tonight, but I'll have to rewrite the whole module to solve the underlying design problem." See also kluge. quine /kwi:n/ n. [from the name of the logician Willard van Orman Quine, via Douglas Hofstadter] A program that generates a copy of its own source text as its complete output. Devising the shortest possible quine in some given programming language is a common hackish amusement. (We ignore some variants of BASIC in which a program consisting of a single empty string literal reproduces itself trivially.) Here is one classic quine: ((lambda (x) (list x (list (quote quote) x))) (quote (lambda (x) (list x (list (quote quote) x))))) This one works in LISP or Scheme. It's relatively easy to write quines in other languages such as Postscript which readily handle programs as data; much harder (and thus more challenging!) in languages like C which do not. Here is a classic C quine for ASCII machines: char*f="char*f=%c%s%c;main() {printf(f,34,f,34,10);}%c"; main(){printf(f,34,f,34,10);} For excruciatingly exact quinishness, remove the interior line breaks. Here is another elegant quine in ANSI C: #define q(k)main(){return!puts(#k"\nq("#k")");} q(#define q(k)main(){return!puts(#k"\nq("#k")");}) Some infamous Obfuscated C Contest entries have been quines that reproduced in exotic ways. There is an amusing Quine Home Page. quote chapter and verse v. [by analogy with the mainstream phrase] To cite a relevant excerpt from an appropriate bible. "I don't care if rn gets it wrong; `Followup-To: poster' is explicitly permitted by RFC-1036. I'll quote chapter and verse if you don't believe me." See also legalese, language lawyer, RTFS (sense 2). quotient n. See coefficient of X. Q = quux /kwuhks/ n. [Mythically, from the Latin semi-deponent verb quuxo, quuxare, quuxandum iri; noun form variously `quux' (plural `quuces', anglicized to `quuxes') and `quuxu' (genitive plural is `quuxuum', for four u-letters out of seven in all, using up all the `u' letters in Scrabble).] 1. Originally, a metasyntactic variable like foo and foobar. Invented by Guy Steele for precisely this purpose when he was young and naive and not yet interacting with the real computing community. Many people invent such words; this one seems simply to have been lucky enough to have spread a little. In an eloquent display of poetic justice, it has returned to the originator in the form of a nickname. 2. interj. See foo; however, denotes very little disgust, and is uttered mostly for the sake of the sound of it. 3. Guy Steele in his persona as `The Great Quux', which is somewhat infamous for light verse and for the `Crunchly' cartoons. 4. In some circles, used as a punning opposite of `crux'. "Ah, that's the quux of the matter!" implies that the point is not crucial (compare tip of the ice-cube). 5. quuxy: adj. Of or pertaining to a quux. qux /kwuhks/ The fourth of the standard metasyntactic variable, after baz and before the quu(u...)x series. See foo, bar, baz, quux. This appears to be a recent mutation from quux, and many versions (especially older versions) of the standard series just run foo, bar, baz, quux, .... QWERTY /kwer'tee/ adj. [from the keycaps at the upper left] Pertaining to a standard English-language typewriter keyboard (sometimes called the Sholes keyboard after its inventor), as opposed to Dvorak or non-US-ASCII layouts or a space-cadet keyboard or APL keyboard. Historical note: The QWERTY layout is a fine example of a fossil. It is sometimes said that it was designed to slow down the typist, but this is wrong; it was designed to allow faster typing -- under a constraint now long obsolete. In early typewriters, fast typing using nearby type-bars jammed the mechanism. So Sholes fiddled the layout to separate the letters of many common digraphs (he did a far from perfect job, though; `th', `tr', `ed', and `er', for example, each use two nearby keys). Also, putting the letters of `typewriter' on one line allowed it to be typed with particular speed and accuracy for demos. The jamming problem was essentially solved soon afterward by a suitable use of springs, but the keyboard layout lives on. The QWERTY keyboard has also spawned some unhelpful economic myths about how technical standards get and stay established; see http://www.reasonmag.com/9606/Fe.QWERTY.html. = R = rabbit job: rain dance: rainbow series: random: Random Number God: random numbers: randomness: rape: rare mode: raster blaster: raster burn: rasterbation: rat belt: rat dance: ratio site: rave: rave on!: ravs: raw mode: RBL: rc file: RE: read-only user: README file: real: real estate: real hack: real operating system: Real Programmer: Real Soon Now: real time: real user: Real World: reality check: reality-distortion field: reaper: recompile the world: rectangle slinger: recursion: recursive acronym: Red Book: red wire: regexp: register dancing: rehi: reincarnation cycle of: reinvent the wheel: relay rape: religion of CHI: religious issues: replicator: reply: restriction: retcon: RETI: retrocomputing: return from the dead: RFC: RFE: rib site: rice box: Right Thing: rip: ripoff: RL: roach: robocanceller: robot: robust: rococo: rogue: room-temperature IQ: root: root mode: rot13: rotary debugger: round tape: RSN: RTBM: RTFAQ: RTFB: RTFM: RTFS: RTI: RTM: RTS: rude: runes: runic: rusty iron: rusty memory: rusty wire: R = rabbit job n. [Cambridge] A batch job that does little, if any, real work, but creates one or more copies of itself, breeding like rabbits. Compare wabbit, fork bomb. rain dance n. 1. Any ceremonial action taken to correct a hardware problem, with the expectation that nothing will be accomplished. This especially applies to reseating printed circuit boards, reconnecting cables, etc. "I can't boot up the machine. We'll have to wait for Greg to do his rain dance." 2. Any arcane sequence of actions performed with computers or software in order to achieve some goal; the term is usually restricted to rituals that include both an incantation or two and physical activity or motion. Compare magic, voodoo programming, black art, cargo cult programming, wave a dead chicken; see also casting the runes. rainbow series n. Any of several series of technical manuals distinguished by cover color. The original rainbow series was the NCSC security manuals (see Orange Book, crayola books); the term has also been commonly applied to the PostScript reference set (see Red Book, Green Book, Blue Book, White Book). Which books are meant by "`the' rainbow series" unqualified is thus dependent on one's local technical culture. random adj. 1. Unpredictable (closest to mathematical definition); weird. "The system's been behaving pretty randomly." 2. Assorted; undistinguished. "Who was at the conference?" "Just a bunch of random business types." 3. (pejorative) Frivolous; unproductive; undirected. "He's just a random loser." 4. Incoherent or inelegant; poorly chosen; not well organized. "The program has a random set of misfeatures." "That's a random name for that function." "Well, all the names were chosen pretty randomly." 5. In no particular order, though deterministic. "The I/O channels are in a pool, and when a file is opened one is chosen randomly." 6. Arbitrary. "It generates a random name for the scratch file." 7. Gratuitously wrong, i.e., poorly done and for no good apparent reason. For example, a program that handles file name defaulting in a particularly useless way, or an assembler routine that could easily have been coded using only three registers, but redundantly uses seven for values with non-overlapping lifetimes, so that no one else can invoke it without first saving four extra registers. What randomness! 8. n. A random hacker; used particularly of high-school students who soak up computer time and generally get in the way. 9. n. Anyone who is not a hacker (or, sometimes, anyone not known to the hacker speaking); the noun form of sense 2. "I went to the talk, but the audience was full of randoms asking bogus questions". 10. n. (occasional MIT usage) One who lives at Random Hall. See also J. Random, some random X. 11. [UK] Conversationally, a non sequitur or something similarly out-of-the-blue. As in: "Stop being so random!" This sense equates to `hatstand', taken from the Viz comic character "Roger Irrelevant - He's completely Hatstand." Random Number God [rec.games.roguelike.angband; often abbreviated `RNG'] The malign force which lurks behind the random number generator in Angband (and by extension elsewhere). A dark god that demands sacrifices and toys with its victims. "I just found a really great item; I suppose the RNG is about to punish me..." Apparently, Angband's random number generator occasionally gets locked in a repetition, so you get something with a 3% chance happening 8 times in a row. Improbable, but far too common to be pure chance. Compare Shub-Internet. random numbers n. When one wishes to specify a large but random number of things, and the context is inappropriate for N, certain numbers are preferred by hacker tradition (that is, easily recognized as placeholders). These include the following: 17 Long described at MIT as `the least random number'; see 23. 23 Sacred number of Eris, Goddess of Discord (along with 17 and 5). 42 The Answer to the Ultimate Question of Life, the Universe, and Everything. (Note that this answer is completely fortuitous. :-)) 69 From the sexual act. This one was favored in MIT's ITS culture. 105 69 hex = 105 decimal, and 69 decimal = 105 octal. 666 The Number of the Beast. For further enlightenment, study the "Principia Discordia", "The Hitchhiker's Guide to the Galaxy", "The Joy of Sex", and the Christian Bible (Revelation 13:18). See also Discordianism or consult your pineal gland. See also for values of. randomness n. 1. An inexplicable misfeature; gratuitous inelegance. 2. A hack or crock that depends on a complex combination of coincidences (or, possibly, the combination upon which the crock depends for its accidental failure to malfunction). "This hack can output characters 40-57 by putting the character in the four-bit accumulator field of an XCT and then extracting six bits -- the low 2 bits of the XCT opcode are the right thing." "What randomness!" 3. Of people, synonymous with `flakiness'. The connotation is that the person so described is behaving weirdly, incompetently, or inappropriately for reasons which are (a) too tiresome to bother inquiring into, (b) are probably as inscrutable as quantum phenomena anyway, and (c) are likely to pass with time. "Maybe he has a real complaint, or maybe it's just randomness. See if he calls back." Despite the negative connotations jargon uses of this term have, it is worth noting that randomness can actually be a valuable resource, very useful for applications in cryptography and elsewhere. Computers are so thoroughly deterministic that they have a hard time generating high-quality randomess, so hackers have sometimes felt the need to built special-purpose contraptions for this purpose alone. One well-known website offers random bits generated by radioactive decay. Another derives random bits from images of Lava Lite lamps. (Hackers invariably find the latter hilarious. If you have to ask why, you'll never get it.) rape vt. 1. To screw someone or something, violently; in particular, to destroy a program or information irrecoverably. Often used in describing file-system damage. "So-and-so was running a program that did absolute disk I/O and ended up raping the master directory." 2. To strip a piece of hardware for parts. 3. [CMU/Pitt] To mass-copy files from an anonymous ftp site. "Last night I raped Simtel's dskutl directory." rare mode adj. [Unix] CBREAK mode (character-by-character with interrupts enabled). Distinguished from raw mode and cooked mode; the phrase "a sort of half-cooked (rare?) mode" is used in the V7/BSD manuals to describe the mode. Usage: rare. raster blaster n. [Cambridge] Specialized hardware for bitblt operations (a blitter). Allegedly inspired by `Rasta Blasta', British slang for the sort of portable stereo Americans call a `boom box' or `ghetto blaster'. raster burn n. Eyestrain brought on by too many hours of looking at low-res, poorly tuned, or glare-ridden monitors, esp. graphics monitors. See terminal illness. rasterbation n. [portmanteau: raster + masturbation] The gratuituous use of comuputer generated images and effects in movies and graphic art which would have been better without them. Especially employed as a term of abuse by Photoshop/GIMP users and graphic artists. rat belt n. A cable tie, esp. the sawtoothed, self-locking plastic kind that you can remove only by cutting (as opposed to a random twist of wire or a twist tie or one of those humongous metal clip frobs). Small cable ties are `mouse belts'. rat dance n. [From the Dilbert comic strip of November 14, 1995] A hacking run that produces results which, while superficially coherent, have little or nothing to do with its original objectives. There are strong connotations that the coding process and the objectives themselves were pretty random. (In the original comic strip, the Ratbert is invited to dance on Dilbert's keyboard in order to produce bugs for him to fix, and authors a Web browser instead.) Compare Infinite-Monkey Theorem. This term seems to have become widely recognized quite rapidly after the original strip, a fact which testifies to Dilbert's huge popularity among hackers. All too many find the perverse incentives and Kafkaesque atmosphere of Dilbert's mythical workplace reflective of their own experiences. ratio site [warez d00dz] A FTP site storing pirated files where one must first upload something before being able to download. There is a ratio, based on bytes or files count, between the uploads and download. For instance, on a 2:1 site, to download a 4 Mb file, one must first upload at least 2 Mb of files. The hotter the contents of the server are, the smaller the ratio is. More often than not, the server refuses uploads because its disk is full, making it useless for downloading - or the connection magically breaks after one has uploaded a large amount of files, just before the downloading phase begins. See also banner site, leech mode. rave vi. [WPI] 1. To persist in discussing a specific subject. 2. To speak authoritatively on a subject about which one knows very little. 3. To complain to a person who is not in a position to correct the difficulty. 4. To purposely annoy another person verbally. 5. To evangelize. See flame. 6. Also used to describe a less negative form of blather, such as friendly bullshitting. `Rave' differs slightly from flame in that `rave' implies that it is the persistence or obliviousness of the person speaking that is annoying, while flame implies somewhat more strongly that the tone or content is offensive as well. rave on! imp. Sarcastic invitation to continue a rave, often by someone who wishes the raver would get a clue but realizes this is unlikely. ravs /ravz/, also `Chinese ravs' n. [primarily MIT/Boston usage] Jiao-zi (steamed or boiled) or Guo-tie (pan-fried). A Chinese appetizer, known variously in the plural as dumplings, pot stickers (the literal translation of guo-tie), and (around Boston) `Peking Ravioli'. The term `rav' is short for `ravioli', and among hackers always means the Chinese kind rather than the Italian kind. Both consist of a filling in a pasta shell, but the Chinese kind includes no cheese, uses a thinner pasta, has a pork-vegetable filling (good ones include Chinese chives), and is cooked differently, either by steaming or frying. A rav or dumpling can be cooked any way, but a potsticker is always the pan-fried kind (so called because it sticks to the frying pot and has to be scraped off). "Let's get hot-and-sour soup and three orders of ravs." See also oriental food. raw mode n. A mode that allows a program to transfer bits directly to or from an I/O device (or, under bogus operating systems that make a distinction, a disk file) without any processing, abstraction, or interpretation by the operating system. Compare rare mode, cooked mode. This is techspeak under Unix, jargon elsewhere. RBL /R-B-L/ Abbreviation: "Realtime Blackhole List". A service that allows people to blacklist sites for emitting spam, and makes the blacklist available in real time to electronic-mail transport programs that know how to use RBL so they can filter out mail from those sites. Drastic (and controversial) but effective. There is an RBL home page. rc file /R-C fi:l/ n. [Unix: from `runcom files' on the CTSS system 1962-63, via the startup script /etc/rc] Script file containing startup instructions for an application program (or an entire operating system), usually a text file containing commands of the sort that might have been invoked manually once the system was running but are to be executed automatically each time the system starts up. See also dot file, profile (sense 1). RE /R-E/ n. Common spoken and written shorthand for regexp. read-only user n. Describes a luser who uses computers almost exclusively for reading Usenet, bulletin boards, and/or email, rather than writing code or purveying useful information. See twink, terminal junkie, lurker. README file n. Hacker's-eye introduction traditionally included in the top-level directory of a Unix source distribution, containing a pointer to more detailed documentation, credits, miscellaneous revision history, notes, etc. (The file may be named README, or READ.ME, or rarely ReadMe or readme.txt or some other variant.) In the Mac and PC worlds, software is not usually distributed in source form, and the README is more likely to contain user-oriented material like last-minute documentation changes, error workarounds, and restrictions. When asked, hackers invariably relate the README convention to the famous scene in Lewis Carroll's "Alice's Adventures In Wonderland" in which Alice confronts magic munchies labeled "Eat Me" and "Drink Me". real adj. Not simulated. Often used as a specific antonym to virtual in any of its jargon senses. = real estate n. May be used for any critical resource measured in units of area. Most frequently used of `chip real estate', the area available for logic on the surface of an integrated circuit (see also nanoacre). May also be used of floor space in a dinosaur pen, or even space on a crowded desktop (whether physical or electronic). real hack n. A crock. This is sometimes used affectionately; see hack. real operating system n. The sort the speaker is used to. People from the BSDophilic academic community are likely to issue comments like "System V? Why don't you use a real operating system?", people from the commercial/industrial Unix sector are known to complain "BSD? Why don't you use a real operating system?", and people from IBM object "Unix? Why don't you use a real operating system?" Only MS-DOS is universally considered unreal. See holy wars, religious issues, proprietary, Get a real computer! = Real Programmer n. [indirectly, from the book "Real Men Don't Eat Quiche"] A particular sub-variety of hacker: one possessed of a flippant attitude toward complexity that is arrogant even when justified by experience. The archetypal `Real Programmer' likes to program on the bare metal and is very good at same, remembers the binary opcodes for every machine he has ever programmed, thinks that HLLs are sissy, and uses a debugger to edit his code because full-screen editors are for wimps. Real Programmers aren't satisfied with code that hasn't been bummed into a state of tenseness just short of rupture. Real Programmers never use comments or write documentation: "If it was hard to write", says the Real Programmer, "it should be hard to understand." Real Programmers can make machines do things that were never in their spec sheets; in fact, they are seldom really happy unless doing so. A Real Programmer's code can awe with its fiendish brilliance, even as its crockishness appalls. Real Programmers live on junk food and coffee, hang line-printer art on their walls, and terrify the crap out of other programmers -- because someday, somebody else might have to try to understand their code in order to change it. Their successors generally consider it a Good Thing that there aren't many Real Programmers around any more. For a famous (and somewhat more positive) portrait of a Real Programmer, see "The Story of Mel" in Appendix A. The term itself was popularized by a 1983 Datamation article "Real Programmers Don't Use Pascal" by Ed Post, still circulating on Usenet and Internet in on-line form. You can browse "Real Programmers Don't Use Pascal" from the Datamation home page http://www.datamation.com. Real Soon Now adv. [orig. from SF's fanzine community, popularized by Jerry Pournelle's column in "BYTE"] 1. Supposed to be available (or fixed, or cheap, or whatever) real soon now according to somebody, but the speaker is quite skeptical. 2. When one's gods, fates, or other time commitments permit one to get to it (in other words, don't hold your breath). Often abbreviated RSN. Compare copious free time. real time 1. [techspeak] adj. Describes an application which requires a program to respond to stimuli within some small upper limit of response time (typically milli- or microseconds). Process control at a chemical plant is the canonical example. Such applications often require special operating systems (because everything else must take a back seat to response time) and speed-tuned hardware. 2. adv. In jargon, refers to doing something while people are watching or waiting. "I asked her how to find the calling procedure's program counter on the stack and she came up with an algorithm in real time." real user n. 1. A commercial user. One who is paying real money for his computer usage. 2. A non-hacker. Someone using the system for an explicit purpose (a research project, a course, etc.) other than pure exploration. See user. Hackers who are also students may also be real users. "I need this fixed so I can do a problem set. I'm not complaining out of randomness, but as a real user." See also luser. Real World n. 1. Those institutions at which `programming' may be used in the same sentence as `FORTRAN', `COBOL', `RPG', `IBM', `DBASE', etc. Places where programs do such commercially necessary but intellectually uninspiring things as generating payroll checks and invoices. 2. The location of non-programmers and activities not related to programming. 3. A bizarre dimension in which the standard dress is shirt and tie and in which a person's working hours are defined as 9 to 5 (see code grinder). 4. Anywhere outside a university. "Poor fellow, he's left MIT and gone into the Real World." Used pejoratively by those not in residence there. In conversation, talking of someone who has entered the Real World is not unlike speaking of a deceased person. It is also noteworthy that on the campus of Cambridge University in England, there is a gaily-painted lamp-post which bears the label `REALITY CHECKPOINT'. It marks the boundary between university and the Real World; check your notions of reality before passing. This joke is funnier because the Cambridge `campus' is actually coextensive with the center of Cambridge town. See also fear and loathing, mundane, and uninteresting. reality check n. 1. The simplest kind of test of software or hardware; doing the equivalent of asking it what 2 + 2 is and seeing if you get 4. The software equivalent of a smoke test. 2. The act of letting a real user try out prototype software. Compare sanity check. reality-distortion field n. An expression used to describe the persuasive ability of managers like Steve Jobs (the term originated at Apple in the 1980s to describe his peculiar charisma). Those close to these managers become passionately committed to possibly insane projects, without regard to the practicality of their implementation or competitive forces in the marketpace. reaper n. A prowler that GFRs files. A file removed in this way is said to have been `reaped'. = recompile the world The surprisingly large amount of work that needs to be done as the result of any small but globally visible program change. "The world" may mean the entirety of some huge program, or may in theory refer to every program of a certain class in the entire known universe. For instance, "Add one #define to stdio.h, and you have to recompile the world." This means that any minor change to the standard-I/O header file theoretically mandates recompiling every C program in existence, even if only to verify that the change didn't screw something else up. In practice, you may not actually have to recompile the world, but the implication is that some human cleverness is required to figure out what parts can be safely left out. rectangle slinger n. See polygon pusher. recursion n. See recursion. See also tail recursion. recursive acronym n. A hackish (and especially MIT) tradition is to choose acronyms/abbreviations that refer humorously to themselves or to other acronyms/abbreviations. The classic examples were two MIT editors called EINE ("EINE Is Not EMACS") and ZWEI ("ZWEI Was EINE Initially"). More recently, there is a Scheme compiler called LIAR (Liar Imitates Apply Recursively), and GNU (q.v., sense 1) stands for "GNU's Not Unix!" -- and a company with the name Cygnus, which expands to "Cygnus, Your GNU Support" (though Cygnus people say this is a backronym). See also mung, EMACS. Red Book n. 1. Informal name for one of the four standard references on PostScript ("PostScript Language Reference Manual", Adobe Systems (Addison-Wesley, 1985; QA76.73.P67P67; ISBN 0-201-10174-2, or the 1990 second edition ISBN 0-201-18127-4); the others are known as the Green Book, the Blue Book, and the White Book (sense 2). 2. Informal name for one of the 3 standard references on Smalltalk ("Smalltalk-80: The Interactive Programming Environment" by Adele Goldberg (Addison-Wesley, 1984; QA76.8.S635G638; ISBN 0-201-11372-4); this too is associated with blue and green books). 3. Any of the 1984 standards issued by the CCITT eighth plenary assembly. These include, among other things, the X.400 email spec and the Group 1 through 4 fax standards. 4. The new version of the Green Book (sense 4) -- IEEE 1003.1-1990, a.k.a ISO 9945-1 -- is (because of the color and the fact that it is printed on A4 paper) known in the USA as "the Ugly Red Book That Won't Fit On The Shelf" and in Europe as "the Ugly Red Book That's A Sensible Size". 5. The NSA "Trusted Network Interpretation" companion to the Orange Book. 6. Nemeth, Snyder, Seebass, Hein; "Unix System Administration Handbook, Second Edition" (Prentice Hall PTR, New Jersey; 1995; QA76.76.063N45; ISBN 0-13-151051-7). See also book titles. red wire n. [IBM] Patch wires installed by programmers who have no business mucking with the hardware. It is said that the only thing more dangerous than a hardware guy with a code patch is a softy with a soldering iron.... Compare blue wire, yellow wire, purple wire. regexp /reg'eksp/ n. [Unix] (alt. `regex' or `reg-ex') 1. Common written and spoken abbreviation for `regular expression', one of the wildcard patterns used, e.g., by Unix utilities such as grep(1), sed(1), and awk(1). These use conventions similar to but more elaborate than those described under glob. For purposes of this lexicon, it is sufficient to note that regexps also allow complemented character sets using ^; thus, one can specify `any non-alphabetic character' with [^A-Za-z]. 2. Name of a well-known PD regexp-handling package in portable C, written by revered Usenetter Henry Spencer. R = register dancing n. Many older processor architectures suffer from a serious shortage of general-purpose registers. This is especially a problem for compiler-writers, because their generated code needs places to store temporaries for things like intermediate values in expression evaluation. Some designs with this problem, like the Intel 80x86, do have a handful of special-purpose registers that can be pressed into service, providing suitable care is taken to avoid unpleasant side effects on the state of the processor: while the special-purpose register is being used to hold an intermediate value, a delicate minuet is required in which the previous value of the register is saved and then restored just before the official function (and value) of the special-purpose register is again needed. rehi [IRC, MUD] "Hello again." Very commonly used to greet people upon returning to an IRC channel after channel hopping. reincarnation, cycle of n. See cycle of reincarnation. reinvent the wheel v. To design or implement a tool equivalent to an existing one or part of one, with the implication that doing so is silly or a waste of time. This is often a valid criticism. On the other hand, automobiles don't use wooden rollers, and some kinds of wheel have to be reinvented many times before you get them right. On the third hand, people reinventing the wheel do tend to come up with the moral equivalent of a trapezoid with an offset axle. relay rape n. The hijacking of a third party's unsecured mail server to deliver spam. religion of CHI /ki:/ n. [Case Western Reserve University] Yet another hackish parody religion (see also Church of the SubGenius, Discordianism). In the mid-70s, the canonical "Introduction to Programming" courses at CWRU were taught in Algol, and student exercises were punched on cards and run on a Univac 1108 system using a homebrew operating system named CHI. The religion had no doctrines and but one ritual: whenever the worshipper noted that a digital clock read 11:08, he or she would recite the phrase "It is 11:08; ABS, ALPHABETIC, ARCSIN, ARCCOS, ARCTAN." The last five words were the first five functions in the appropriate chapter of the Algol manual; note the special pronunciations /obz/ and /ark'sin/ rather than the more common /ahbz/ and /ark'si:n/. Using an alarm clock to warn of 11:08's arrival was considered harmful. religious issues n. Questions which seemingly cannot be raised without touching off holy wars, such as "What is the best operating system (or editor, language, architecture, shell, mail reader, news reader)?", "What about that Heinlein guy, eh?", "What should we add to the new Jargon File?" See holy wars; see also theology, bigot. This term is a prime example of ha ha only serious. People actually develop the most amazing and religiously intense attachments to their tools, even when the tools are intangible. The most constructive thing one can do when one stumbles into the crossfire is mumble Get a life! and leave -- unless, of course, one's own unassailably rational and obviously correct choices are being slammed. replicator n. Any construct that acts to produce copies of itself; this could be a living organism, an idea (see meme), a program (see quine, worm, wabbit, fork bomb, and virus), a pattern in a cellular automaton (see life, sense 1), or (speculatively) a robot or nanobot. It is even claimed by some that Unix and C are the symbiotic halves of an extremely successful replicator; see Unix conspiracy. reply n. See followup. = restriction n. A bug or design error that limits a program's capabilities, and which is sufficiently egregious that nobody can quite work up enough nerve to describe it as a feature. Often used (esp. by marketroid types) to make it sound as though some crippling bogosity had been intended by the designers all along, or was forced upon them by arcane technical constraints of a nature no mere user could possibly comprehend (these claims are almost invariably false). Old-time hacker Joseph M. Newcomer advises that whenever choosing a quantifiable but arbitrary restriction, you should make it either a power of 2 or a power of 2 minus 1. If you impose a limit of 107 items in a list, everyone will know it is a random number -- on the other hand, a limit of 15 or 16 suggests some deep reason (involving 0- or 1-based indexing in binary) and you will get less flamage for it. Limits which are round numbers in base 10 are always especially suspect. retcon /ret'kon/ [short for `retroactive continuity', from the Usenet newsgroup _rec.arts.comics_] 1. n. The common situation in pulp fiction (esp. comics or soap operas) where a new story `reveals' things about events in previous stories, usually leaving the `facts' the same (thus preserving continuity) while completely changing their interpretation. For example, revealing that a whole season of "Dallas" was a dream was a retcon. 2. vt. To write such a story about a character or fictitious object. "Byrne has retconned Superman's cape so that it is no longer unbreakable." "Marvelman's old adventures were retconned into synthetic dreams." "Swamp Thing was retconned from a transformed person into a sentient vegetable." "Darth Vader was retconned into Luke Skywalker's father in "The Empire Strikes Back". [This term is included because it is a good example of hackish linguistic innovation in a field completely unrelated to computers. The word `retcon' will probably spread through comics fandom and lose its association with hackerdom within a couple of years; for the record, it started here. --ESR] [1993 update: some comics fans on the net now claim that retcon was independently in use in comics fandom before _rec.arts.comics_. In lexicography, nothing is ever simple. --ESR] R = RETI v. Syn. RTI retrocomputing /ret'-roh-k*m-pyoo'ting/ n. Refers to emulations of way-behind-the-state-of-the-art hardware or software, or implementations of never-was-state-of-the-art; esp. if such implementations are elaborate practical jokes and/or parodies, written mostly for hack value, of more `serious' designs. Perhaps the most widely distributed retrocomputing utility was the pnch(6) or bcd(6) program on V7 and other early Unix versions, which would accept up to 80 characters of text argument and display the corresponding pattern in punched card code. Other well-known retrocomputing hacks have included the programming language INTERCAL, a JCL-emulating shell for Unix, the card-punch-emulating editor named 029, and various elaborate PDP-11 hardware emulators and RT-11 OS emulators written just to keep an old, sourceless Zork binary running. A tasty selection of retrocomputing programs are made available at the Retrocomputing Museum, http://www.ccil.org/retro. return from the dead v. To regain access to the net after a long absence. Compare person of no account. RFC /R-F-C/ n. [Request For Comment] One of a long-established series of numbered Internet informational documents and standards widely followed by commercial software and freeware in the Internet and Unix communities. Perhaps the single most influential one has been RFC-822 (the Internet mail-format standard). The RFCs are unusual in that they are floated by technical experts acting on their own initiative and reviewed by the Internet at large, rather than formally promulgated through an institution such as ANSI. For this reason, they remain known as RFCs even once adopted as standards. The RFC tradition of pragmatic, experience-driven, after-the-fact standard writing done by individuals or small working groups has important advantages over the more formal, committee-driven process typical of ANSI or ISO. Emblematic of some of these advantages is the existence of a flourishing tradition of `joke' RFCs; usually at least one a year is published, usually on April 1st. Well-known joke RFCs have included 527 ("ARPAWOCKY", R. Merryman, UCSD; 22 June 1973), 748 ("Telnet Randomly-Lose Option", Mark R. Crispin; 1 April 1978), and 1149 ("A Standard for the Transmission of IP Datagrams on Avian Carriers", D. Waitzman, BBN STC; 1 April 1990). The first was a Lewis Carroll pastiche; the second a parody of the TCP-IP documentation style, and the third a deadpan skewering of standards-document legalese, describing protocols for transmitting Internet data packets by carrier pigeon. The RFCs are most remarkable for how well they work -- they manage to have neither the ambiguities that are usually rife in informal specifications, nor the committee-perpetrated misfeatures that often haunt formal standards, and they define a network that has grown to truly worldwide proportions. RFE /R-F-E/ n. 1. [techspeak] Request For Enhancement (compare RFC). 2. [from `Radio Free Europe', Bellcore and Sun] Radio Free Ethernet, a system (originated by Peter Langston) for broadcasting audio among Sun SPARCstations over the ethernet. rib site n. [by analogy with backbone site] A machine that has an on-demand high-speed link to a backbone site and serves as a regional distribution point for lots of third-party traffic in email and Usenet news. Compare leaf site, backbone site. rice box n. [from ham radio slang] Any Asian-made commodity computer, esp. an 80x86-based machine built to IBM PC-compatible ISA or EISA-bus standards. Right Thing n. That which is compellingly the correct or appropriate thing to use, do, say, etc. Often capitalized, always emphasized in speech as though capitalized. Use of this term often implies that in fact reasonable people may disagree. "What's the right thing for LISP to do when it sees (mod a 0)? Should it return a, or give a divide-by-0 error?" Oppose Wrong Thing. rip v. 1. To extract the digital representation of a piece of music from an audio CD. Software that does this is often called a "CD ripper". 2. [Amiga hackers] To extract sound or graphics from a program that they have been compiled/assembled into, or which generates them at run-time. In the case of older Amiga games this entails searching through memory shortly after a reboot. This sense has been in use for many years and probably gave rise to the (now more common) sense 1. ripoff n. Synonym for chad, sense 1. = RL // n. [MUD community] Real Life. "Firiss laughs in RL" means that Firiss's player is laughing. Compare meatspace; oppose VR. roach vt. [Bell Labs] To destroy, esp. of a data structure. Hardware gets toasted or fried, software gets roached. = robocanceller /roh-boh-kan'sel-*r/ A program that monitors Usenet feeds, attempting to detect and eliminate spam by sending appropriate cancel messages . Robocancellers may use the Breidbart Index as a trigger. Programming them is not a game for amateurs; see ARMM. See also Dave the Resurrector. robot n. See bot. = robust adj. Said of a system that has demonstrated an ability to recover gracefully from the whole range of exceptional inputs and situations in a given environment. One step below bulletproof. Carries the additional connotation of elegance in addition to just careful attention to detail. Compare smart, oppose brittle. = rococo adj. Terminally baroque. Used to imply that a program has become so encrusted with the software equivalent of gold leaf and curlicues that they have completely swamped the underlying design. Called after the later and more extreme forms of Baroque architecture and decoration prevalent during the mid-1700s in Europe. Alan Perlis said: "Every program eventually becomes rococo, and then rubble." Compare critical mass. rogue 1. [Unix] n. A Dungeons-and-Dragons-like game using character graphics, written under BSD Unix and subsequently ported to other Unix systems. The original BSD curses(3) screen-handling package was hacked together by Ken Arnold primarily to support games, and the development of rogue(6) popularized its use; it has since become one of Unix's most important and heavily used application libraries. Nethack, Omega, Larn, Angband, and an entire subgenre of computer dungeon games (all known as `roguelikes') all took off from the inspiration provided by rogue(6); the popular Windows game Diablo, though graphics-intensive, has very similar play logic. See also nethack. 2. [Usenet] adj. An ISP which permits net abuse (usually in the form of spamming) by its customers, or which itself engages in such activities. Rogue ISPs are sometimes subject to IDPs or UDPs. Sometimes deliberately mispelled as "rouge". See also nethack, moria, Angband. room-temperature IQ quant. [IBM] 80 or below (nominal room temperature is 72 degrees Fahrenheit, 22 degrees Celsius). Used in describing the expected intelligence range of the luser. "Well, but how's this interface going to play with the room-temperature IQ crowd?" See drool-proof paper. This is a much more insulting phrase in countries that use Celsius thermometers. root n. [Unix] 1. The superuser account (with user name `root') that ignores permission bits, user number 0 on a Unix system. The term avatar is also used. 2. The top node of the system directory structure; historically the home directory of the root user, but probably named after the root of an (inverted) tree. 3. By extension, the privileged system-maintenance login on any OS. See root mode, go root, see also wheel. root mode n. Syn. with wizard mode or `wheel mode'. Like these, it is often generalized to describe privileged states in systems other than OSes. rot13 /rot ther'teen/ n.,v. [Usenet: from `rotate alphabet 13 places'] The simple Caesar-cypher encryption that replaces each English letter with the one 13 places forward or back along the alphabet, so that "The butler did it!" becomes "Gur ohgyre qvq vg!" Most Usenet news reading and posting programs include a rot13 feature. It is used to enclose the text in a sealed wrapper that the reader must choose to open -- e.g., for posting things that might offend some readers, or spoilers. A major advantage of rot13 over rot(N) for other N is that it is self-inverse, so the same code can be used for encoding and decoding. See also spoiler space, which has partly displaced rot13 since non-Unix-based newsreaders became common. rotary debugger n. [Commodore] Essential equipment for those late-night or early-morning debugging sessions. Mainly used as sustenance for the hacker. Comes in many decorator colors, such as Sausage, Pepperoni, and Garbage. See ANSI standard pizza. round tape n. Industry-standard 1/2-inch magnetic tape (7- or 9-track) on traditional circular reels. See macrotape, oppose square tape. RSN /R-S-N/ adj. See Real Soon Now. RTBM /R-T-B-M/ imp. [Unix] Commonwealth Hackish variant of RTFM; expands to `Read The Bloody Manual'. RTBM is often the entire text of the first reply to a question from a newbie; the second would escalate to "RTFM". RTFAQ /R-T-F-A-Q/ imp. [Usenet: primarily written, by analogy with RTFM] Abbrev. for `Read the FAQ!', an exhortation that the person addressed ought to read the newsgroup's FAQ list before posting questions. = RTFB /R-T-F-B/ imp. [Unix] Abbreviation for `Read The Fucking Binary'. Used when neither documentation nor source for the problem at hand exists, and the only thing to do is use some debugger or monitor and directly analyze the assembler or even the machine code. "No source for the buggy port driver? Aaargh! I hate proprietary operating systems. Time to RTFB." Of the various RTF? forms, `RTFB' is the least pejorative against anyone asking a question for which RTFB is the answer; the anger here is directed at the absence of both source and adequate documentation. RTFM /R-T-F-M/ imp. [Unix] Abbreviation for `Read The Fucking Manual'. 1. Used by gurus to brush off questions they consider trivial or annoying. Compare Don't do that then!. 2. Used when reporting a problem to indicate that you aren't just asking out of randomness. "No, I can't figure out how to interface Unix to my toaster, and yes, I have RTFM." Unlike sense 1, this use is considered polite. See also FM, RTFAQ, RTFB, RTFS, STFW, RTM, all of which mutated from RTFM, and compare UTSL. RTFS /R-T-F-S/ [Unix] 1. imp. Abbreviation for `Read The Fucking Source'. Variant form of RTFM, used when the problem at hand is not necessarily obvious and not answerable from the manuals -- or the manuals are not yet written and maybe never will be. For even trickier situations, see RTFB. Unlike RTFM, the anger inherent in RTFS is not usually directed at the person asking the question, but rather at the people who failed to provide adequate documentation. 2. imp. `Read The Fucking Standard'; this oath can only be used when the problem area (e.g., a language or operating system interface) has actually been codified in a ratified standards document. The existence of these standards documents (and the technically inappropriate but politically mandated compromises that they inevitably contain, and the impenetrable legalese in which they are invariably written, and the unbelievably tedious bureaucratic process by which they are produced) can be unnerving to hackers, who are used to a certain amount of ambiguity in the specifications of the systems they use. (Hackers feel that such ambiguities are acceptable as long as the Right Thing to do is obvious to any thinking observer; sadly, this casual attitude towards specifications becomes unworkable when a system becomes popular in the Real World.) Since a hacker is likely to feel that a standards document is both unnecessary and technically deficient, the deprecation inherent in this term may be directed as much against the standard as against the person who ought to read it. RTI /R-T-I/ interj. The mnemonic for the `return from interrupt' instruction on many computers including the 6502 and 6800. The variant `RETI' is found among former Z80 hackers (almost nobody programs these things in assembler anymore). Equivalent to "Now, where was I?" or used to end a conversational digression. See pop; see also POPJ. RTM /R-T-M/ [Usenet: abbreviation for `Read The Manual'] 1. Politer variant of RTFM. 2. Robert Tappan Morris, perpetrator of the great Internet worm of 1988 (see Great Worm); villain to many, naive hacker gone wrong to a few. Morris claimed that the worm that brought the Internet to its knees was a benign experiment that got out of control as the result of a coding error. After the storm of negative publicity that followed this blunder, Morris's username on ITS was hacked from RTM to RTFM. RTS /R-T-S/ imp. Abbreviation for `Read The Screen'. Mainly used by hackers in the microcomputer world. Refers to what one would like to tell the suit one is forced to explain an extremely simple application to. Particularly appropriate when the suit failed to notice the `Press any key to continue' prompt, and wishes to know `why won't it do anything'. Also seen as `RTFS' in especially deserving cases. rude [WPI] adj. 1. (of a program) Badly written. 2. Functionally poor, e.g., a program that is very difficult to use because of gratuitously poor (random?) design decisions. Oppose cuspy. 3. Anything that manipulates a shared resource without regard for its other users in such a way as to cause a (non-fatal) problem. Examples: programs that change tty modes without resetting them on exit, or windowing programs that keep forcing themselves to the top of the window stack. Compare all-elbows. runes pl.n. 1. Anything that requires heavy wizardry or black art to parse: core dumps, JCL commands, APL, or code in a language you haven't a clue how to read. Not quite as bad as line noise, but close. Compare casting the runes, Great Runes. 2. Special display characters (for example, the high-half graphics on an IBM PC). 3. [borderline techspeak] 16-bit characters from the Unicode multilingual character set. = runic adj. Syn. obscure. VMS fans sometimes refer to Unix as `Runix'; Unix fans return the compliment by expanding VMS to `Very Messy Syntax' or `Vachement Mauvais Système' (French idiom, "Hugely Bad System"). rusty iron n. Syn. tired iron. It has been claimed that this is the inevitable fate of water MIPS. rusty memory n. Mass-storage that uses iron-oxide-based magnetic media (esp. tape and the pre-Winchester removable disk packs used in washing machines). Compare donuts. rusty wire n. [Amateur Packet Radio] Any very noisy network medium, in which the packets are subject to frequent corruption. Most prevalent in reference to wireless links subject to all the vagaries of RF noise and marginal propagation conditions. "Yes, but how good is your whizbang new protocol on really rusty wire?". = S = S/N ratio: sacred: saga: sagan: SAIL: salescritter: salt: salt mines: salt substrate: same-day service: samizdat: samurai: sandbender: sandbox: sanity check: Saturday-night special: say: scag: scanno: scary devil monastery: schroedinbug: science-fiction fandom: scram switch: scratch: scratch monkey: scream and die: screaming tty: screen: screen name: screw: screwage: scribble: script kiddies: scrog: scrool: scrozzle: scruffies: SCSI: ScumOS: search-and-destroy mode: second-system effect: secondary damage: security through obscurity: SED: segfault: seggie: segment: segmentation fault: segv: self-reference: selvage: semi: semi-automated: semi-infinite: senior bit: September that never ended: server: SEX: sex changer: shambolic link: shar file: sharchive: Share and enjoy!: shareware: sharing violation: shebang: shelfware: shell: shell out: shift left (or right) logical: shim: shitogram: short card: shotgun debugging: shovelware: showstopper: shriek: Shub-Internet: sidecar: SIG: sig block: sig quote: sig virus: signal-to-noise ratio: silicon: silly walk: silo: Silver Book: since time T equals minus infinity: sitename: skrog: skulker: slab: slack: slap on the side: slash: slashdot effect: sleep: slim: slop: slopsucker: Slowlaris: slurp: smart: smart terminal: smash case: smash the stack: smiley: smoke: smoke and mirrors: smoke test: smoking clover: smoot: SMOP: smurf: SNAFU principle: snail: snail-mail: snap: snarf: snarf & barf: snarf down: snark: sneaker: sneakernet: sniff: snivitz: 'Snooze: SO: social engineering: social science number: sock puppet: sodium substrate: soft boot: softcopy: software bloat: software hoarding: software laser: software rot: softwarily: softy: some random X: sorcerer's apprentice mode: SOS: source: source of all good bits: space-cadet keyboard: spaceship operator: SPACEWAR: spaghetti code: spaghetti inheritance: spam: spam bait: spamblock: spamhaus: spamvertize: spangle: spawn: special-case: speedometer: spell: spelling flame: spider: spider food: spiffy: spike: spin: spl: splash screen: splat: splat out: spod: spoiler: spoiler space: sponge: spoof: spool: spool file: spungle: square tape: squirrelcide: stack: stack puke: stale pointer bug: star out: state: stealth manager: steam-powered: STFW: stiffy: stir-fried random: stomp on: Stone Age: stone knives and bearskins: stoppage: store: strided: stroke: strudel: stubroutine: studly: studlycaps: stunning: stupid-sort: Stupids: Sturgeon's Law: sucking mud: sufficiently small: suit: suitable win: suitably small: Sun: sun lounge: sun-stools: sunspots: super source quench: superloser: superprogrammer: superuser: support: surf: Suzie COBOL: swab: swap: swap space: swapped in: swapped out: swizzle: sync: syntactic salt: syntactic sugar: sys-frog: sysadmin: sysape: sysop: system: systems jock: system mangler: SysVile: S/N ratio // n. (also `s/n ratio', `s:n ratio'). Syn. signal-to-noise ratio. Often abbreviated `SNR'. sacred adj. Reserved for the exclusive use of something (an extension of the standard meaning). Often means that anyone may look at the sacred object, but clobbering it will screw whatever it is sacred to. The comment "Register 7 is sacred to the interrupt handler" appearing in a program would be interpreted by a hacker to mean that if any other part of the program changes the contents of register 7, dire consequences are likely to ensue. = saga n. [WPI] A cuspy but bogus raving story about N random broken people. Here is a classic example of the saga form, as told by Guy L. Steele: Jon L. White (login name JONL) and I (GLS) were office mates at MIT for many years. One April, we both flew from Boston to California for a week on research business, to consult face-to-face with some people at Stanford, particularly our mutual friend Richard P. Gabriel (RPG; see gabriel). RPG picked us up at the San Francisco airport and drove us back to Palo Alto (going logical south on route 101, parallel to El Camino Bignum). Palo Alto is adjacent to Stanford University and about 40 miles south of San Francisco. We ate at The Good Earth, a `health food' restaurant, very popular, the sort whose milkshakes all contain honey and protein powder. JONL ordered such a shake -- the waitress claimed the flavor of the day was "lalaberry". I still have no idea what that might be, but it became a running joke. It was the color of raspberry, and JONL said it tasted rather bitter. I ate a better tostada there than I have ever had in a Mexican restaurant. After this we went to the local Uncle Gaylord's Old Fashioned Ice Cream Parlor. They make ice cream fresh daily, in a variety of intriguing flavors. It's a chain, and they have a slogan: "If you don't live near an Uncle Gaylord's -- MOVE!" Also, Uncle Gaylord (a real person) wages a constant battle to force big-name ice cream makers to print their ingredients on the package (like air and plastic and other non-natural garbage). JONL and I had first discovered Uncle Gaylord's the previous August, when we had flown to a computer-science conference in Berkeley, California, the first time either of us had been on the West Coast. When not in the conference sessions, we had spent our time wandering the length of Telegraph Avenue, which (like Harvard Square in Cambridge) was lined with picturesque street vendors and interesting little shops. On that street we discovered Uncle Gaylord's Berkeley store. The ice cream there was very good. During that August visit JONL went absolutely bananas (so to speak) over one particular flavor, ginger honey. Therefore, after eating at The Good Earth -- indeed, after every lunch and dinner and before bed during our April visit -- a trip to Uncle Gaylord's (the one in Palo Alto) was mandatory. We had arrived on a Wednesday, and by Thursday evening we had been there at least four times. Each time, JONL would get ginger honey ice cream, and proclaim to all bystanders that "Ginger was the spice that drove the Europeans mad! That's why they sought a route to the East! They used it to preserve their otherwise off-taste meat." After the third or fourth repetition RPG and I were getting a little tired of this spiel, and began to paraphrase him: "Wow! Ginger! The spice that makes rotten meat taste good!" "Say! Why don't we find some dog that's been run over and sat in the sun for a week and put some ginger on it for dinner?!" "Right! With a lalaberry shake!" And so on. This failed to faze JONL; he took it in good humor, as long as we kept returning to Uncle Gaylord's. He loves ginger honey ice cream. Now RPG and his then-wife KBT (Kathy Tracy) were putting us up (putting up with us?) in their home for our visit, so to thank them JONL and I took them out to a nice French restaurant of their choosing. I unadventurously chose the filet mignon, and KBT had _je ne sais quoi du jour_, but RPG and JONL had _lapin_ (rabbit). (Waitress: "_Oui_, we have fresh rabbit, fresh today." RPG: "Well, JONL, I guess we won't need any ginger!") We finished the meal late, about 11 P.M., which is 2 A.M Boston time, so JONL and I were rather droopy. But it wasn't yet midnight. Off to Uncle Gaylord's! Now the French restaurant was in Redwood City, north of Palo Alto. In leaving Redwood City, we somehow got onto route 101 going north instead of south. JONL and I wouldn't have known the difference had RPG not mentioned it. We still knew very little of the local geography. I did figure out, however, that we were headed in the direction of Berkeley, and half-jokingly suggested that we continue north and go to Uncle Gaylord's in Berkeley. RPG said "Fine!" and we drove on for a while and talked. I was drowsy, and JONL actually dropped off to sleep for 5 minutes. When he awoke, RPG said, "Gee, JONL, you must have slept all the way over the bridge!", referring to the one spanning San Francisco Bay. Just then we came to a sign that said "University Avenue". I mumbled something about working our way over to Telegraph Avenue; RPG said "Right!" and maneuvered some more. Eventually we pulled up in front of an Uncle Gaylord's. Now, I hadn't really been paying attention because I was so sleepy, and I didn't really understand what was happening until RPG let me in on it a few moments later, but I was just alert enough to notice that we had somehow come to the Palo Alto Uncle Gaylord's after all. JONL noticed the resemblance to the Palo Alto store, but hadn't caught on. (The place is lit with red and yellow lights at night, and looks much different from the way it does in daylight.) He said, "This isn't the Uncle Gaylord's I went to in Berkeley! It looked like a barn! But this place looks just like the one back in Palo Alto!" RPG deadpanned, "Well, this is the one I always come to when I'm in Berkeley. They've got two in San Francisco, too. Remember, they're a chain." JONL accepted this bit of wisdom. And he was not totally ignorant -- he knew perfectly well that University Avenue was in Berkeley, not far from Telegraph Avenue. What he didn't know was that there is a completely different University Avenue in Palo Alto. JONL went up to the counter and asked for ginger honey. The guy at the counter asked whether JONL would like to taste it first, evidently their standard procedure with that flavor, as not too many people like it. JONL said, "I'm sure I like it. Just give me a cone." The guy behind the counter insisted that JONL try just a taste first. "Some people think it tastes like soap." JONL insisted, "Look, I love ginger. I eat Chinese food. I eat raw ginger roots. I already went through this hassle with the guy back in Palo Alto. I know I like that flavor!" At the words "back in Palo Alto" the guy behind the counter got a very strange look on his face, but said nothing. KBT caught his eye and winked. Through my stupor I still hadn't quite grasped what was going on, and thought RPG was rolling on the floor laughing and clutching his stomach just because JONL had launched into his spiel ("makes rotten meat a dish for princes") for the forty-third time. At this point, RPG clued me in fully. RPG, KBT, and I retreated to a table, trying to stifle our chuckles. JONL remained at the counter, talking about ice cream with the guy b.t.c., comparing Uncle Gaylord's to other ice cream shops and generally having a good old time. At length the g.b.t.c. said, "How's the ginger honey?" JONL said, "Fine! I wonder what exactly is in it?" Now Uncle Gaylord publishes all his recipes and even teaches classes on how to make his ice cream at home. So the g.b.t.c. got out the recipe, and he and JONL pored over it for a while. But the g.b.t.c. could contain his curiosity no longer, and asked again, "You really like that stuff, huh?" JONL said, "Yeah, I've been eating it constantly back in Palo Alto for the past two days. In fact, I think this batch is about as good as the cones I got back in Palo Alto!" G.b.t.c. looked him straight in the eye and said, "You're in Palo Alto!" JONL turned slowly around, and saw the three of us collapse in a fit of giggles. He clapped a hand to his forehead and exclaimed, "I've been hacked!" [My spies on the West Coast inform me that there is a close relative of the raspberry found out there called an `ollalieberry' --ESR] [Ironic footnote: the meme about ginger vs. rotting meat is an urban legend. It's not borne out by an examination of medieval recipes or period purchase records for spices, and appears full-blown in the works of Samuel Pegge, a gourmand and notorious flake case who originated numerous food myths. The truth seems to be that ginger was used to cover not rot but the extreme salt taste of meat packed in brine, which was the best method available before refrigeration. --ESR] sagan /say'gn/ n. [from Carl Sagan's TV series "Cosmos"; think "billions and billions"] A large quantity of anything. "There's a sagan different ways to tweak EMACS." "The U.S. Government spends sagans on bombs and welfare -- hard to say which is more destructive." = SAIL /sayl/, not /S-A-I-L/ n. 1. The Stanford Artificial Intelligence Lab. An important site in the early development of LISP; with the MIT AI Lab, BBN, CMU, XEROX PARC, and the Unix community, one of the major wellsprings of technical innovation and hacker-culture traditions (see the WAITS entry for details). The SAIL machines were shut down in late May 1990, scant weeks after the MIT AI Lab's ITS cluster was officially decommissioned. 2. The Stanford Artificial Intelligence Language used at SAIL (sense 1). It was an Algol-60 derivative with a coroutining facility and some new data types intended for building search trees and association lists. salescritter /sayls'kri`tr/ n. Pejorative hackerism for a computer salesperson. Hackers tell the following joke: Q. What's the difference between a used-car dealer and a computer salesman? A. The used-car dealer knows he's lying. [Some versions add: ...and probably knows how to drive.] This reflects the widespread hacker belief that salescritters are self-selected for stupidity (after all, if they had brains and the inclination to use them, they'd be in programming). The terms `salesthing' and `salesdroid' are also common. Compare marketroid, suit, droid. salt n. A tiny bit of near-random data inserted where too much regularity would be undesirable; a data frob (sense 1). For example, the Unix crypt(3) man page mentions that "the salt string is used to perturb the DES algorithm in one of 4096 different ways." salt mines n. Dense quarters housing large numbers of programmers working long hours on grungy projects, with some hope of seeing the end of the tunnel in N years. Noted for their absence of sunshine. Compare playpen, sandbox. salt substrate n. [MIT] Collective noun used to refer to potato chips, pretzels, saltines, or any other form of snack food designed primarily as a carrier for sodium chloride. Also `sodium substrate'. From the technical term `chip substrate', used to refer to the silicon on the top of which the active parts of integrated circuits are deposited. same-day service n. Ironic term used to describe long response time, particularly with respect to MS-DOS system calls (which ought to require only a tiny fraction of a second to execute). Such response time is a major incentive for programmers to write programs that are not well-behaved. See also PC-ism. samizdat /sahm-iz-daht/ n. [Russian, literally "self publishing"] The process of disseminating documentation via underground channels. Originally referred to underground duplication and distribution of banned books in the Soviet Union; now refers by obvious extension to any less-than-official promulgation of textual material, esp. rare, obsolete, or never-formally-published computer documentation. Samizdat is obviously much easier when one has access to high-bandwidth networks and high-quality laser printers. Note that samizdat is properly used only with respect to documents which contain needed information (see also hacker ethic) but which are for some reason otherwise unavailable, but not in the context of documents which are available through normal channels, for which unauthorized duplication would be unethical copyright violation. See Lions Book for a historical example. S = samurai n. A hacker who hires out for legal cracking jobs, snooping for factions in corporate political fights, lawyers pursuing privacy-rights and First Amendment cases, and other parties with legitimate reasons to need an electronic locksmith. In 1991, mainstream media reported the existence of a loose-knit culture of samurai that meets electronically on BBS systems, mostly bright teenagers with personal micros; they have modeled themselves explicitly on the historical samurai of Japan and on the "net cowboys" of William Gibson's cyberpunk novels. Those interviewed claim to adhere to a rigid ethic of loyalty to their employers and to disdain the vandalism and theft practiced by criminal crackers as beneath them and contrary to the hacker ethic; some quote Miyamoto Musashi's "Book of Five Rings", a classic of historical samurai doctrine, in support of these principles. See also sneaker, Stupids, social engineering, cracker, hacker ethic, and dark-side hacker. = sandbender n. [IBM] A person involved with silicon lithography and the physical design of chips. Compare ironmonger, polygon pusher. sandbox n. 1. (also `sandbox, the') Common term for the R&D department at many software and computer companies (where hackers in commercial environments are likely to be found). Half-derisive, but reflects the truth that research is a form of creative play. Compare playpen. 2. Syn. link farm. 3. A controlled environment within which potentially dangerous programs are run. Used esp. in reference to Java implementations. = sanity check n. [very common] 1. The act of checking a piece of code (or anything else, e.g., a Usenet posting) for completely stupid mistakes. Implies that the check is to make sure the author was sane when it was written; e.g., if a piece of scientific software relied on a particular formula and was giving unexpected results, one might first look at the nesting of parentheses or the coding of the formula, as a `sanity check', before looking at the more complex I/O or data structure manipulation routines, much less the algorithm itself. Compare reality check. 2. A run-time test, either validating input or ensuring that the program hasn't screwed up internally (producing an inconsistent value or state). Saturday-night special n. [from police slang for a cheap handgun] A quick-and-dirty program or feature kluged together during off hours, under a deadline, and in response to pressure from a salescritter. Such hacks are dangerously unreliable, but all too often sneak into a production release after insufficient review. say vt. 1. To type to a terminal. "To list a directory verbosely, you have to say ls -l." Tends to imply a newline-terminated command (a `sentence'). 2. A computer may also be said to `say' things to you, even if it doesn't have a speech synthesizer, by displaying them on a terminal in response to your commands. Hackers find it odd that this usage confuses mundanes. scag vt. To destroy the data on a disk, either by corrupting the filesystem or by causing media damage. "That last power hit scagged the system disk." Compare scrog, roach. scanno /skan'oh/ n. An error in a document caused by a scanner glitch, analogous to a typo or thinko. S = scary devil monastery n. Anagram frequently used to refer to the newsgroup _alt.sysadmin.recovery_, which is populated with characters that rather justify the reference. schroedinbug /shroh'din-buhg/ n. [MIT: from the Schroedinger's Cat thought-experiment in quantum physics] A design or implementation bug in a program that doesn't manifest until someone reading source or using the program in an unusual way notices that it never should have worked, at which point the program promptly stops working for everybody until fixed. Though (like bit rot) this sounds impossible, it happens; some programs have harbored latent schroedinbugs for years. Compare heisenbug, Bohr bug, mandelbug. science-fiction fandom n. Another voluntary subculture having a very heavy overlap with hackerdom; most hackers read SF and/or fantasy fiction avidly, and many go to `cons' (SF conventions) or are involved in fandom-connected activities such as the Society for Creative Anachronism. Some hacker jargon originated in SF fandom; see defenestration, great-wall, cyberpunk, h, ha ha only serious, IMHO, mundane, neep-neep, Real Soon Now. Additionally, the jargon terms cowboy, cyberspace, de-rezz, go flatline, ice, phage, virus, wetware, wirehead, and worm originated in SF stories. scram switch n. [from the nuclear power industry] An emergency-power-off switch (see Big Red Switch), esp. one positioned to be easily hit by evacuating personnel. In general, this is not something you frob lightly; these often initiate expensive events (such as Halon dumps) and are installed in a dinosaur pen for use in case of electrical fire or in case some luckless field servoid should put 120 volts across himself while Easter egging. (See also molly-guard, TMRC.) A correspondent reports a legend that "Scram" is an acronym for "Start Cutting Right Away, Man" (another less plausible variant of this legend refers to "Safety Control Rod Axe Man"; these are almost certainly both backronyms). The story goes that in the earliest nuclear power experiments the engineers recognized the possibility that the reactor wouldn't behave exactly as predicted by their mathematical models. Accordingly, they made sure that they had mechanisms in place that would rapidly drop the control rods back into the reactor. One mechanism took the form of `scram technicians'. These individuals stood next to the ropes or cables that raised and lowered the control rods. Equipped with axes or cable-cutters, these technicians stood ready for the (literal) `scram' command. If necessary, they would cut the cables, and gravity would expeditiously return the control rods to the reactor, thereby averting yet another kind of core dump. Modern reactor control rods are held in place with claw-like devices, held closed by current. SCRAM switches are circuit breakers that immediately open the circuit to the rod arms, resulting in the rapid insertion and subsequent bottoming of the control rods. scratch 1. [from `scratchpad'] adj. Describes a data structure or recording medium attached to a machine for testing or temporary-use purposes; one that can be scribbled on without loss. Usually in the combining forms `scratch memory', `scratch register', `scratch disk', `scratch tape', `scratch volume'. See also scratch monkey. 2. [primarily IBM] vt. To delete (as in a file). scratch monkey n. As in "Before testing or reconfiguring, always mount a scratch monkey", a proverb used to advise caution when dealing with irreplaceable data or devices. Used to refer to any scratch volume hooked to a computer during any risky operation as a replacement for some precious resource or data that might otherwise get trashed. This term preserves the memory of Mabel, the Swimming Wonder Monkey, star of a biological research program at the University of Toronto. Mabel was not (so the legend goes) your ordinary monkey; the university had spent years teaching her how to swim, breathing through a regulator, in order to study the effects of different gas mixtures on her physiology. Mabel suffered an untimely demise one day when a DEC field circus engineer troubleshooting a crash on the program's VAX inadvertently interfered with some custom hardware that was wired to Mabel. It is reported that, after calming down an understandably irate customer sufficiently to ascertain the facts of the matter, a DEC troubleshooter called up the field circus manager responsible and asked him sweetly, "Can you swim?" Not all the consequences to humans were so amusing; the sysop of the machine in question was nearly thrown in jail at the behest of certain clueless droids at the local `humane' society. The moral is clear: When in doubt, always mount a scratch monkey. [The actual incident occured in 1979 or 1980. There is a version of this story, complete with reported dialogue between one of the project people and DEC field service, that has been circulating on Internet since 1986. It is hilarious and mythic, but gets some facts wrong. For example, it reports the machine as a PDP-11 and alleges that Mabel's demise occurred when DEC PMed the machine. Earlier versions of this entry were based on that story; this one has been corrected from an interview with the hapless sysop. --ESR] scream and die v. Syn. cough and die, but connotes that an error message was printed or displayed before the program crashed. screaming tty n. [Unix] A terminal line which spews an infinite number of random characters at the operating system. This can happen if the terminal is either disconnected or connected to a powered-off terminal but still enabled for login; misconfiguration, misimplementation, or simple bad luck can start such a terminal screaming. A screaming tty or two can seriously degrade the performance of a vanilla Unix system; the arriving "characters" are treated as userid/password pairs and tested as such. The Unix password encryption algorithm is designed to be computationally intensive in order to foil brute-force crack attacks, so although none of the logins succeeds; the overhead of rejecting them all can be substantial. screen n. [Atari ST demoscene] One demoeffect or one screenful of them. Probably comes from old Sierra-style adventures or shoot-em-ups where one travels from one place to another one screenful at a time. = screen name n. A handle sense 1. This term has been common among users of IRC, MUDs, and commercial on-line services since the mid-1990s. Hackers recognize the term but don't generally use it. screw n. [MIT] A lose, usually in software. Especially used for user-visible misbehavior caused by a bug or misfeature. This use has become quite widespread outside MIT. = screwage /skroo'*j/ n. Like lossage but connotes that the failure is due to a designed-in misfeature rather than a simple inadequacy or a mere bug. scribble n. To modify a data structure in a random and unintentionally destructive way. "Bletch! Somebody's disk-compactor program went berserk and scribbled on the i-node table." "It was working fine until one of the allocation routines scribbled on low core." Synonymous with trash; compare mung, which conveys a bit more intention, and mangle, which is more violent and final. S = script kiddies pl.n. 1. The lowest form of cracker; script kiddies do mischief with scripts and programs written by others, often without understanding the exploit. 2. People who cannot program, but who create tacky HTML pages by copying JavaScript routines from other tacky HTML pages. More generally, a script kiddie writes (or more likely cuts and pastes) code without either having or desiring to have a mental model of what the code does; someone who thinks of code as magical incantations and asks only "what do I need to type to make this happen?" scrog /skrog/ vt. [Bell Labs] To damage, trash, or corrupt a data structure. "The list header got scrogged." Also reported as `skrog', and ascribed to the comic strip "The Wizard of Id". Compare scag; possibly the two are related. Equivalent to scribble or mangle. = scrool /skrool/ n. [from the pioneering Roundtable chat system in Houston ca. 1984; prob. originated as a typo for `scroll'] The log of old messages, available for later perusal or to help one get back in synch with the conversation. It was originally called the `scrool monster', because an early version of the roundtable software had a bug where it would dump all 8K of scrool on a user's terminal. = scrozzle /skroz'l/ vt. Used when a self-modifying code segment runs incorrectly and corrupts the running program or vital data. "The damn compiler scrozzled itself again!" S = scruffies n. See neats vs. scruffies. SCSI n. [Small Computer System Interface] A bus-independent standard for system-level interfacing between a computer and intelligent devices. Typically annotated in literature with `sexy' (/sek'see/), `sissy' (/sis'ee/), and `scuzzy' (/skuh'zee/) as pronunciation guides -- the last being the overwhelmingly predominant form, much to the dismay of the designers and their marketing people. One can usually assume that a person who pronounces it /S-C-S-I/ is clueless. ScumOS /skuhm'os/ or /skuhm'O-S/ n. Unflattering hackerism for SunOS, the BSD Unix variant supported on Sun Microsystems's Unix workstations (see also sun-stools), and compare AIDX, Macintrash, Nominal Semidestructor, HP-SUX. Despite what this term might suggest, Sun was founded by hackers and still enjoys excellent relations with hackerdom; usage is more often in exasperation than outright loathing. search-and-destroy mode n. Hackerism for a noninteractive search-and-replace facility in an editor, so called because an incautiously chosen match pattern can cause infinite damage. second-system effect n. (sometimes, more euphoniously, `second-system syndrome') When one is designing the successor to a relatively small, elegant, and successful system, there is a tendency to become grandiose in one's success and design an elephantine feature-laden monstrosity. The term was first used by Fred Brooks in his classic "The Mythical Man-Month: Essays on Software Engineering" (Addison-Wesley, 1975; ISBN 0-201-00650-2). It described the jump from a set of nice, simple operating systems on the IBM 70xx series to OS/360 on the 360 series. A similar effect can also happen in an evolving system; see Brooks's Law, creeping elegance, creeping featurism. See also Multics, OS/2, X, software bloat. This version of the jargon lexicon has been described (with altogether too much truth for comfort) as an example of second-system effect run amok on jargon-1.... secondary damage n. When a fatal error occurs (esp. a segfault) the immediate cause may be that a pointer has been trashed due to a previous fandango on core. However, this fandango may have been due to an earlier fandango, so no amount of analysis will reveal (directly) how the damage occurred. "The data structure was clobbered, but it was secondary damage." By extension, the corruption resulting from N cascaded fandangoes on core is `Nth-level damage'. There is at least one case on record in which 17 hours of grovelling with adb actually dug up the underlying bug behind an instance of seventh-level damage! The hacker who accomplished this near-superhuman feat was presented with an award by his fellows. security through obscurity (alt. `security by obscurity') A term applied by hackers to most OS vendors' favorite way of coping with security holes -- namely, ignoring them, documenting neither any known holes nor the underlying security algorithms, trusting that nobody will find out about them and that people who do find out about them won't exploit them. This "strategy" never works for long and occasionally sets the world up for debacles like the RTM worm of 1988 (see Great Worm), but once the brief moments of panic created by such events subside most vendors are all too willing to turn over and go back to sleep. After all, actually fixing the bugs would siphon off the resources needed to implement the next user-interface frill on marketing's wish list -- and besides, if they started fixing security bugs customers might begin to expect it and imagine that their warranties of merchantability gave them some sort of right to a system with fewer holes in it than a shotgunned Swiss cheese, and then where would we be? Historical note: There are conflicting stories about the origin of this term. It has been claimed that it was first used in the Usenet newsgroup in _comp.sys.apollo_ during a campaign to get HP/Apollo to fix security problems in its Unix-clone Aegis/DomainOS (they didn't change a thing). ITS fans, on the other hand, say it was coined years earlier in opposition to the incredibly paranoid Multics people down the hall, for whom security was everything. In the ITS culture it referred to (1) the fact that by the time a tourist figured out how to make trouble he'd generally gotten over the urge to make it, because he felt part of the community; and (2) (self-mockingly) the poor coverage of the documentation and obscurity of many commands. One instance of deliberate security through obscurity is recorded; the command to allow patching the running ITS system (escape escape control-R) echoed as $$^D. If you actually typed alt alt ^D, that set a flag that would prevent patching the system even if you later got it right. SED /S-E-D/ n. [TMRC, from `Light-Emitting Diode'] Smoke-emitting diode. A friode that lost the war. See also LER. segfault n.,vi. Syn. segment, segmentation fault. S = seggie /seg'ee/ n. [Unix] Shorthand for segmentation fault reported from Britain. segment /seg'ment/ vi. To experience a segmentation fault. Confusingly, this is often pronounced more like the noun `segment' than like mainstream v. segment; this is because it is actually a noun shorthand that has been verbed. segmentation fault n. [Unix] 1. [techspeak] An error in which a running program attempts to access memory not allocated to it and core dumps with a segmentation violation error. This is often caused by improper usage of pointers in the source code, dereferencing a null pointer, or (in C) inadvertently using a non-pointer variable as a pointer. The classic example is: int i; scanf ("%d", i); /* should have used &i */ 2. To lose a train of thought or a line of reasoning. Also uttered as an exclamation at the point of befuddlement. segv /seg'vee/ n.,vi. Yet another synonym for segmentation fault (actually, in this case, `segmentation violation'). = self-reference n. See self-reference. selvage /sel'v*j/ n. [from sewing and weaving] See chad (sense 1). semi /se'mee/ or /se'mi:/ 1. n. Abbreviation for `semicolon', when speaking. "Commands to grind are prefixed by semi-semi-star" means that the prefix is ;;*, not 1/4 of a star. 2. A prefix used with words such as `immediately' as a qualifier. "When is the system coming up?" "Semi-immediately." (That is, maybe not for an hour.) "We did consider that possibility semi-seriously." See also infinite. semi-automated adj. [US Geological Survey] A procedure that has yet to be completely automated; it still requires a smidge of clueful human interaction. Semi-automated programs usually come with written-out operator instructions that are worth their weight in gold - without them, very nasty things can happen. At USGS semi-automated programs are often referred to as "semi-automated weapons". semi-infinite n. See infinite. senior bit n. [IBM; rare] Syn. meta bit. September that never ended All time since September 1993. One of the seasonal rhythms of the Usenet used to be the annual September influx of clueless newbies who, lacking any sense of netiquette, made a general nuisance of themselves. This coincided with people starting college, getting their first internet accounts, and plunging in without bothering to learn what was acceptable. These relatively small drafts of newbies could be assimilated within a few months. But in September 1993, AOL users became able to post to Usenet, nearly overwhelming the old-timers' capacity to acculturate them; to those who nostalgically recall the period before hand, this triggered an inexorable decline in the quality of discussions on newsgroups. See also AOL!. server n. A kind of daemon that performs a service for the requester and which often runs on a computer other than the one on which the server runs. A particularly common term on the Internet, which is rife with `web servers', `name servers', `domain servers', `news servers', `finger servers', and the like. S = SEX /seks/ [Sun Users' Group & elsewhere] n. 1. Software EXchange. A technique invented by the blue-green algae hundreds of millions of years ago to speed up their evolution, which had been terribly slow up until then. Today, SEX parties are popular among hackers and others (of course, these are no longer limited to exchanges of genetic software). In general, SEX parties are a Good Thing, but unprotected SEX can propagate a virus. See also pubic directory. 2. The rather Freudian mnemonic often used for Sign EXtend, a machine instruction found in the PDP-11 and many other architectures. The RCA 1802 chip used in the early Elf and SuperElf personal computers had a `SEt X register' SEX instruction, but this seems to have had little folkloric impact. The Data General instruction set also had SEX. DEC's engineers nearly got a PDP-11 assembler that used the SEX mnemonic out the door at one time, but (for once) marketing wasn't asleep and forced a change. That wasn't the last time this happened, either. The author of "The Intel 8086 Primer", who was one of the original designers of the 8086, noted that there was originally a SEX instruction on that processor, too. He says that Intel management got cold feet and decreed that it be changed, and thus the instruction was renamed CBW and CWD (depending on what was being extended). Amusingly, the Intel 8048 (the microcontroller used in IBM PC keyboards) is also missing straight SEX but has logical-or and logical-and instructions ORL and ANL. The Motorola 6809, used in the Radio Shack Color Computer and in U.K.'s `Dragon 32' personal computer, actually had an official SEX instruction; the 6502 in the Apple II with which it competed did not. British hackers thought this made perfect mythic sense; after all, it was commonly observed, you could (on some theoretical level) have sex with a dragon, but you can't have sex with an apple. sex changer n. Syn. gender mender. shambolic link /sham-bol'ik link/ n. A Unix symbolic link, particularly when it confuses you, points to nothing at all, or results in your ending up in some completely unexpected part of the filesystem.... shar file /shar' fi:l/ n. Syn. sharchive. sharchive /shar'ki:v/ n. [Unix and Usenet; from /bin/sh archive] A flattened representation of a set of one or more files, with the unique property that it can be unflattened (the original files restored) by feeding it through a standard Unix shell; thus, a sharchive can be distributed to anyone running Unix, and no special unpacking software is required. Sharchives are also intriguing in that they are typically created by shell scripts; the script that produces sharchives is thus a script which produces self-unpacking scripts, which may themselves contain scripts. (The downsides of sharchives are that they are an ideal venue for Trojan horse attacks and that, for recipients not running Unix, no simple un-sharchiving program is possible; sharchives can and do make use of arbitrarily-powerful shell features.) Sharchives are also commonly referred to as `shar files' after the name of the most common program for generating them. Share and enjoy! imp. 1. Commonly found at the end of software release announcements and README files, this phrase indicates allegiance to the hacker ethic of free information sharing (see hacker ethic, sense 1). 2. The motto of the complaints division of Sirius Cybernetics Corporation (the ultimate gaggle of incompetent suits) in Douglas Adams's "Hitch Hiker's Guide to the Galaxy". The irony of using this as a cultural recognition signal appeals to hackers. shareware /sheir'weir/ n. A kind of freeware (sense 1) for which the author requests some payment, usually in the accompanying documentation files or in an announcement made by the software itself. Such payment may or may not buy additional support or functionality. See also careware, charityware, crippleware, FRS, guiltware, postcardware, and -ware; compare payware. sharing violation [From a file error common to several OSs] A response to receiving information, typically of an excessively personal nature, that you were probably happier not knowing. "You know those little noises that Pat makes in bed..?" "Whoa! Sharing violation!" In contrast to the original file error, which indicated that you were not being given data that you did want. shebang /sh*-bang/ n. The character sequence "#!" that frequently begins executable shell scripts under Unix. Probably derived from "shell bang" under the influence of American slang "the whole shebang" (everything, the works). = shelfware /shelf'weir/ n. Software purchased on a whim (by an individual user) or in accordance with policy (by a corporation or government agency), but not actually required for any particular use. Therefore, it often ends up on some shelf. shell [orig. Multics n. techspeak, widely propagated via Unix] 1. [techspeak] The command interpreter used to pass commands to an operating system; so called because it is the part of the operating system that interfaces with the outside world. 2. More generally, any interface program that mediates access to a special resource or server for convenience, efficiency, or security reasons; for this meaning, the usage is usually `a shell around' whatever. This sort of program is also called a `wrapper'. 3. A skeleton program, created by hand or by another program (like, say, a parser generator), which provides the necessary incantations to set up some task and the control flow to drive it (the term driver is sometimes used synonymously). The user is meant to fill in whatever code is needed to get real work done. This usage is common in the AI and Microsoft Windows worlds, and confuses Unix hackers. Historical note: Apparently, the original Multics shell (sense 1) was so called because it was a shell (sense 3); it ran user programs not by starting up separate processes, but by dynamically linking the programs into its own code, calling them as subroutines, and then dynamically de-linking them on return. The VMS command interpreter still does something very like this. = shell out vi. [Unix] To spawn an interactive subshell from within a program (e.g., a mailer or editor). "Bang foo runs foo in a subshell, while bang alone shells out." shift left (or right) logical [from any of various machines' instruction sets] 1. vi. To move oneself to the left (right). To move out of the way. 2. imper. "Get out of that (my) seat! You can shift to that empty one to the left (right)." Often used without the `logical', or as `left shift' instead of `shift left'. Sometimes heard as LSH /lish/, from the PDP-10 instruction set. See Programmer's Cheer. shim n. A small piece of data inserted in order to achieve a desired memory alignment or other addressing property. For example, the PDP-11 Unix linker, in split I&D (instructions and data) mode, inserts a two-byte shim at location 0 in data space so that no data object will have an address of 0 (and be confused with the C null pointer). See also loose bytes. shitogram /shit'oh-gram/ n. A really nasty piece of email. Compare nastygram, flame. short card n. A half-length IBM XT expansion card or adapter that will fit in one of the two short slots located towards the right rear of a standard chassis (tucked behind the floppy disk drives). See also tall card. shotgun debugging n. The software equivalent of Easter egging; the making of relatively undirected changes to software in the hope that a bug will be perturbed out of existence. This almost never works, and usually introduces more bugs. shovelware /shuh'v*l-weir`/ n. 1. Extra software dumped onto a CD-ROM or tape to fill up the remaining space on the medium after the software distribution it's intended to carry, but not integrated with the distribution. 2. A slipshod compilation of software dumped onto a CD-ROM without much care for organization or even usability. showstopper n. A hardware or (especially) software bug that makes an implementation effectively unusable; one that absolutely has to be fixed before development can go on. Opposite in connotation from its original theatrical use, which refers to something stunningly good. shriek n. See excl. Occasional CMU usage, also in common use among APL fans and mathematicians, especially category theorists. S = Shub-Internet /shuhb' in't*r-net/ n. [MUD: from H. P. Lovecraft's evil fictional deity Shub-Niggurath, the Black Goat with a Thousand Young] The harsh personification of the Internet: Beast of a Thousand Processes, Eater of Characters, Avatar of Line Noise, and Imp of Call Waiting; the hideous multi-tendriled entity formed of all the manifold connections of the net. A sect of MUDders worships Shub-Internet, sacrificing objects and praying for good connections. To no avail -- its purpose is malign and evil, and is the cause of all network slowdown. Often heard as in "Freela casts a tac nuke at Shub-Internet for slowing her down." (A forged response often follows along the lines of: "Shub-Internet gulps down the tac nuke and burps happily.") Also cursed by users of the Web, FTP and TELNET when the system slows down. The dread name of Shub-Internet is seldom spoken aloud, as it is said that repeating it three times will cause the being to wake, deep within its lair beneath the Pentagon. Compare Random Number God. [January 1996: It develops that one of the computer administrators in the basement of the Pentagon read this entry and fell over laughing. As a result, you too can now poke Shub-Internet by pinging _shub-internet.ims.disa.mil_. See also kremvax. - ESR] [April 1999: shub-internet.ims.disa.mil is no more, alas. But Shub-Internet lives o^$#$*^ - ESR] sidecar n. 1. Syn. slap on the side. Esp. used of add-ons for the late and unlamented IBM PCjr. 2. The IBM PC compatibility box that could be bolted onto the side of an Amiga. Designed and produced by Commodore, it broke all of the company's own design rules. If it worked with any other peripherals, it was by magic. 3. More generally, any of various devices designed to be connected to the expansion slot on the left side of the Amiga 500 (and later, 600 & 1200), which included a hard drive controller, a hard drive, and additional memory. = SIG /sig/ n. (also common as a prefix in combining forms) A Special Interest Group, in one of several technical areas, sponsored by the Association for Computing Machinery; well-known ones include SIGPLAN (the Special Interest Group on Programming Languages), SIGARCH (the Special Interest Group for Computer Architecture) and SIGGRAPH (the Special Interest Group for Computer Graphics). Hackers, not surprisingly, like to overextend this naming convention to less formal associations like SIGBEER (at ACM conferences) and SIGFOOD (at University of Illinois). = sig block /sig blok/ n. [Unix; often written `.sig' there] Short for `signature', used specifically to refer to the electronic signature block that most Unix mail- and news-posting software will automagically append to outgoing mail and news. The composition of one's sig can be quite an art form, including an ASCII logo or one's choice of witty sayings (see sig quote, fool file); but many consider large sigs a waste of bandwidth, and it has been observed that the size of one's sig block is usually inversely proportional to one's longevity and level of prestige on the net. See also doubled sig. sig quote /sig kwoht/ n. [Usenet] A maxim, quote, proverb, joke, or slogan embedded in one's sig block and intended to convey something of one's philosophical stance, pet peeves, or sense of humor. "Calm down, it's only ones and zeroes." sig virus n. A parasitic meme embedded in a sig block. There was a meme plague or fad for these on Usenet in late 1991. Most were equivalents of "I am a .sig virus. Please reproduce me in your .sig block.". Of course, the .sig virus's memetic hook is the giggle value of going along with the gag; this, however, was a self-limiting phenomenon as more and more people picked up on the idea. There were creative variants on it; some people stuck `sig virus antibody' texts in their sigs, and there was at least one instance of a sig virus eater. signal-to-noise ratio [from analog electronics] n. Used by hackers in a generalization of its technical meaning. `Signal' refers to useful information conveyed by some communications medium, and `noise' to anything else on that medium. Hence a low ratio implies that it is not worth paying attention to the medium in question. Figures for such metaphorical ratios are never given. The term is most often applied to Usenet newsgroups during flame wars. Compare bandwidth. See also coefficient of X, lost in the noise. silicon n. Hardware, esp. ICs or microprocessor-based computer systems (compare iron). Contrasted with software. See also sandbender. = silly walk vi. [from Monty Python's Flying Circus] 1. A ridiculous procedure required to accomplish a task. Like grovel, but more random and humorous. "I had to silly-walk through half the /usr directories to find the maps file." 2. Syn. fandango on core. silo n. The FIFO input-character buffer in an RS-232 line card. So called from DEC terminology used on DH and DZ line cards for the VAX and PDP-11, presumably because it was a storage space for fungible stuff that went in at the top and came out at the bottom. Silver Book n. Jensen and Wirth's infamous "Pascal User Manual and Report", so called because of the silver cover of the widely distributed Springer-Verlag second edition of 1978 (ISBN 0-387-90144-2). See book titles, Pascal. since time T equals minus infinity adv. A long time ago; for as long as anyone can remember; at the time that some particular frob was first designed. Usually the word `time' is omitted. See also time T; contrast epoch. S = sitename /si:t'naym/ n. [Unix/Internet] The unique electronic name of a computer system, used to identify it in UUCP mail, Usenet, or other forms of electronic information interchange. The folklore interest of sitenames stems from the creativity and humor they often display. Interpreting a sitename is not unlike interpreting a vanity license plate; one has to mentally unpack it, allowing for mono-case and length restrictions and the lack of whitespace. Hacker tradition deprecates dull, institutional-sounding names in favor of punchy, humorous, and clever coinages (except that it is considered appropriate for the official public gateway machine of an organization to bear the organization's name or acronym). Mythological references, cartoon characters, animal names, and allusions to SF or fantasy literature are probably the most popular sources for sitenames (in roughly descending order). The obligatory comment when discussing these is Harris's Lament: "All the good ones are taken!" See also network address. S = skrog v. Syn. scrog. = skulker n. Syn. prowler. = slab [Apple] 1. n. A continuous horizontal line of pixels, all with the same color. 2. vi. To paint a slab on an output device. Apple's QuickDraw, like most other professional-level graphics systems, renders polygons and lines not with Bresenham's algorithm, but by calculating `slab points' for each scan line on the screen in succession, and then slabbing in the actual image pixels. slack n. 1. Space allocated to a disk file but not actually used to store useful information. The techspeak equivalent is `internal fragmentation'. Antonym: hole. 2. In the theology of the Church of the SubGenius, a mystical substance or quality that is the prerequisite of all human happiness. Since Unix files are stored compactly, except for the unavoidable wastage in the last block or fragment, it might be said that "Unix has no slack". See ha ha only serious. slap on the side n. (also called a sidecar, or abbreviated `SOTS'.) A type of external expansion hardware marketed by computer manufacturers (e.g., Commodore for the Amiga 500/1000 series and IBM for the hideous failure called `PCjr'). Various SOTS boxes provided necessities such as memory, hard drive controllers, and conventional expansion slots. slash n. Common name for the slant (`/', ASCII 0101111) character. See ASCII for other synonyms. = slashdot effect n. 1. Also spelled "/. effect"; what is said to have happened when a website being virtually unreachable because too many people are hitting it after the site was mentioned in an interesting article on the popular Slashdot news service. The term is quite widely used by /. readers, including variants like "That site has been slashdotted again!" 2. In a perhaps inevitable generation, the term is being used to describe any similar effect from being listed on a popular site. This would better be described as a flash crowd. sleep vi. 1. [techspeak] To relinquish a claim (of a process on a multitasking system) for service; to indicate to the scheduler that a process may be deactivated until some given event occurs or a specified time delay elapses. 2. In jargon, used very similarly to v. block; also in `sleep on', syn. with `block on'. Often used to indicate that the speaker has relinquished a demand for resources until some (possibly unspecified) external event: "They can't get the fix I've been asking for into the next release, so I'm going to sleep on it until the release, then start hassling them again." = slim n. A small, derivative change (e.g., to code). slop n. 1. A one-sided fudge factor, that is, an allowance for error but in only one of two directions. For example, if you need a piece of wire 10 feet long and have to guess when you cut it, you make very sure to cut it too long, by a large amount if necessary, rather than too short by even a little bit, because you can always cut off the slop but you can't paste it back on again. When discrete quantities are involved, slop is often introduced to avoid the possibility of being on the losing side of a fencepost error. 2. The percentage of `extra' code generated by a compiler over the size of equivalent assembler code produced by hand-hacking; i.e., the space (or maybe time) you lose because you didn't do it yourself. This number is often used as a measure of the goodness of a compiler; slop below 5% is very good, and 10% is usually acceptable. With modern compiler technology, esp. on RISC machines, the compiler's slop may actually be negative; that is, humans may be unable to generate code as good. This is one of the reasons assembler programming is no longer common. slopsucker /slop'suhk-r/ n. A lowest-priority task that waits around until everything else has `had its fill' of machine resources. Only when the machine would otherwise be idle is the task allowed to `suck up the slop'. Also called a `hungry puppy' or `bottom feeder'. One common variety of slopsucker hunts for large prime numbers. Compare background. Slowlaris /slo'-lahr-is/ n. [Usenet; poss. from the variety of prosimian called a "slow loris". The variant `Slowlartus' is also common, related to LART] Common hackish term for Solaris, Sun's System VR4 version of UNIX that came out of the standardization wars of the early 1990s. So named because especially on older hardware, responsiveness was much less crisp than under the preceding SunOS. Early releases of Solaris (that is, Solaris 2, as some marketroids at Sun retroactively rechristened SunOS as Solaris 1) were quite buggy, and Sun was forced by customer demand to support SunOS for quite some time. Newer versions are acknowledged to be among the best commercial UNIX variants in 1998, but still lose single-processor benchmarks to Sparc Linux. Compare AIDX, HP-SUX, Nominal Semidestructor, Telerat, sun-stools. slurp vt. To read a large data file entirely into core before working on it. This may be contrasted with the strategy of reading a small piece at a time, processing it, and then reading the next piece. "This program slurps in a 1K-by-1K matrix and does an FFT." See also sponge. smart adj. Said of a program that does the Right Thing in a wide variety of complicated circumstances. There is a difference between calling a program smart and calling it intelligent; in particular, there do not exist any intelligent programs (yet -- see AI-complete). Compare robust (smart programs can be brittle). smart terminal n. 1. A terminal that has enough computing capability to render graphics or to offload some kind of front-end processing from the computer it talks to. The development of workstations and personal computers has made this term and the product it describes semi-obsolescent, but one may still hear variants of the phrase `act like a smart terminal' used to describe the behavior of workstations or PCs with respect to programs that execute almost entirely out of a remote server's storage, using local devices as displays. 2. obs. Any terminal with an addressable cursor; the opposite of a glass tty. Today, a terminal with merely an addressable cursor, but with none of the more-powerful features mentioned in sense 1, is called a dumb terminal. There is a classic quote from Rob Pike (inventor of the blit terminal): "A smart terminal is not a smartass terminal, but rather a terminal you can educate." This illustrates a common design problem: The attempt to make peripherals (or anything else) intelligent sometimes results in finicky, rigid `special features' that become just so much dead weight if you try to use the device in any way the designer didn't anticipate. Flexibility and programmability, on the other hand, are really smart. Compare hook. smash case vi. To lose or obliterate the uppercase/lowercase distinction in text input. "MS-DOS will automatically smash case in the names of all the files you create." Compare fold case. smash the stack n. [C programming] To corrupt the execution stack by writing past the end of a local array or other data structure. Code that smashes the stack can cause a return from the routine to jump to a random address, resulting in some of the most insidious data-dependent bugs known to mankind. Variants include `trash' the stack, scribble the stack, mangle the stack; the term **mung the stack is not used, as this is never done intentionally. See spam; see also aliasing bug, fandango on core, memory leak, memory smash, precedence lossage, overrun screw. smiley n. See emoticon. smoke vi. 1. To crash or blow up, usually spectacularly. "The new version smoked, just like the last one." Used for both hardware (where it often describes an actual physical event), and software (where it's merely colorful). 2. [from automotive slang] To be conspicuously fast. "That processor really smokes." Compare magic smoke. smoke and mirrors n. Marketing deceptions. The term is mainstream in this general sense. Among hackers it's strongly associated with bogus demos and crocked benchmarks (see also MIPS, machoflops). "They claim their new box cranks 50 MIPS for under $5000, but didn't specify the instruction mix -- sounds like smoke and mirrors to me." The phrase, popularized by newspaper columnist Jimmy Breslin c.1975, has been said to derive from carnie slang for magic acts and `freak show' displays that depend on `trompe l'oeil' effects, but also calls to mind the fierce Aztec god Tezcatlipoca (lit. "Smoking Mirror") for whom the hearts of huge numbers of human sacrificial victims were regularly cut out. Upon hearing about a rigged demo or yet another round of fantasy-based marketing promises, hackers often feel analogously disheartened. See also stealth manager. smoke test n. 1. A rudimentary form of testing applied to electronic equipment following repair or reconfiguration, in which power is applied and the tester checks for sparks, smoke, or other dramatic signs of fundamental failure. See magic smoke. 2. By extension, the first run of a piece of software after construction or a critical change. See and compare reality check. There is an interesting semi-parallel to this term among typographers and printers: When new typefaces are being punch-cut by hand, a `smoke test' (hold the letter in candle smoke, then press it onto paper) is used to check out new dies. smoking clover n. [ITS] A display hack originally due to Bill Gosper. Many convergent lines are drawn on a color monitor in such a way that every pixel struck has its color incremented. The lines all have one endpoint in the middle of the screen; the other endpoints are spaced one pixel apart around the perimeter of a large square. The color map is then repeatedly rotated. This results in a striking, rainbow-hued, shimmering four-leaf clover. Gosper joked about keeping it hidden from the FDA (the U.S.'s Food and Drug Administration) lest its hallucinogenic properties cause it to be banned. smoot /smoot/ n. [MIT] A unit of length equal five feet seven inches. The length of the Harvard Bridge in Boston is famously 364.4 smoots plus or minus an ear (the ear stands for epsilon). This legend began with a fraternity prank in 1958 during which the body length of Oliver Smoot (class of '62) was actually used to measure out that distance. It is commemorated by smoot marks that MIT students repaint every few years; the tradition even survived the demolition and rebuilding of the bridge in the late 1980s. The Boston police have been known to use smoot markers to indicate accident locations on the bridge. = SMOP /S-M-O-P/ n. [Simple (or Small) Matter of Programming] 1. A piece of code, not yet written, whose anticipated length is significantly greater than its complexity. Used to refer to a program that could obviously be written, but is not worth the trouble. Also used ironically to imply that a difficult problem can be easily solved because a program can be written to do it; the irony is that it is very clear that writing such a program will be a great deal of work. "It's easy to enhance a FORTRAN compiler to compile COBOL as well; it's just an SMOP." 2. Often used ironically by the intended victim when a suggestion for a program is made which seems easy to the suggester, but is obviously (to the victim) a lot of work. smurf /smerf/ n. 1. [from the _soc.motss_ newsgroup on Usenet, after some obnoxiously gooey cartoon characters] A newsgroup regular with a habitual style that is irreverent, silly, and _cute_. Like many other hackish terms for people, this one may be praise or insult depending on who uses it. In general, being referred to as a smurf is probably not going to make your day unless you've previously adopted the label yourself in a spirit of irony. Compare old fart. 2. [techspeak] A ping packet with a forged source address sent to some other network's broadcast address. All the machines on the destination network will send a ping response to the forged source address (the victim). This both overloads the victim's network and hides the location of the attacker. = SNAFU principle /sna'foo prin'si-pl/ n. [from a WWII Army acronym for `Situation Normal, All Fucked Up'] "True communication is possible only between equals, because inferiors are more consistently rewarded for telling their superiors pleasant lies than for telling the truth." -- a central tenet of Discordianism, often invoked by hackers to explain why authoritarian hierarchies screw up so reliably and systematically. The effect of the SNAFU principle is a progressive disconnection of decision-makers from reality. This lightly adapted version of a fable dating back to the early 1960s illustrates the phenomenon perfectly: In the beginning was the plan, and then the specification; And the plan was without form, and the specification was void. And darkness was on the faces of the implementors thereof; And they spake unto their leader, saying: "It is a crock of shit, and smells as of a sewer." And the leader took pity on them, and spoke to the project leader: "It is a crock of excrement, and none may abide the odor thereof." And the project leader spake unto his section head, saying: "It is a container of excrement, and it is very strong, such that none may abide it." The section head then hurried to his department manager, and informed him thus: "It is a vessel of fertilizer, and none may abide its strength." The department manager carried these words to his general manager, and spoke unto him saying: "It containeth that which aideth the growth of plants, and it is very strong." And so it was that the general manager rejoiced and delivered the good news unto the Vice President. "It promoteth growth, and it is very powerful." The Vice President rushed to the President's side, and joyously exclaimed: "This powerful new software product will promote the growth of the company!" And the President looked upon the product, and saw that it was very good. After the subsequent and inevitable disaster, the suits protect themselves by saying "I was misinformed!", and the implementors are demoted or fired. Compare Conway's Law. snail vt. To snail-mail something. "Snail me a copy of those graphics, will you?" = snail-mail n. Paper mail, as opposed to electronic. Sometimes written as the single word `SnailMail'. One's postal address is, correspondingly, a `snail address'. Derives from earlier coinage `USnail' (from `U.S. Mail'), for which there have even been parody posters and stamps made. Also (less commonly) called `P-mail', from `paper mail' or `physical mail'. Oppose email. snap v. To replace a pointer to a pointer with a direct pointer; to replace an old address with the forwarding address found there. If you telephone the main number for an institution and ask for a particular person by name, the operator may tell you that person's extension before connecting you, in the hopes that you will `snap your pointer' and dial direct next time. The underlying metaphor may be that of a rubber band stretched through a number of intermediate points; if you remove all the thumbtacks in the middle, it snaps into a straight line from first to last. See chase pointers. Often, the behavior of a trampoline is to perform an error check once and then snap the pointer that invoked it so as henceforth to bypass the trampoline (and its one-shot error check). In this context one also speaks of `snapping links'. For example, in a LISP implementation, a function interface trampoline might check to make sure that the caller is passing the correct number of arguments; if it is, and if the caller and the callee are both compiled, then snapping the link allows that particular path to use a direct procedure-call instruction with no further overhead. snarf /snarf/ vt. 1. To grab, esp. to grab a large document or file for the purpose of using it with or without the author's permission. See also BLT. 2. [in the Unix community] To fetch a file or set of files across a network. See also blast. This term was mainstream in the late 1960s, meaning `to eat piggishly'. It may still have this connotation in context. "He's in the snarfing phase of hacking -- FTPing megs of stuff a day." 3. To acquire, with little concern for legal forms or _politesse_ (but not quite by stealing). "They were giving away samples, so I snarfed a bunch of them." 4. Syn. for slurp. "This program starts by snarfing the entire database into core, then...." 5. [GEnie] To spray food or programming fluids due to laughing at the wrong moment. "I was drinking coffee, and when I read your post I snarfed all over my desk." "If I keep reading this topic, I think I'll have to snarf-proof my computer with a keyboard condom." [This sense appears to be widespread among mundane teenagers --ESR] snarf & barf /snarf'n-barf`/ n. Under a WIMP environment, the act of grabbing a region of text and then stuffing the contents of that region into another region (or the same one) to avoid retyping a command line. In the late 1960s, this was a mainstream expression for an `eat now, regret it later' cheap-restaurant expedition. snarf down v. To snarf, with the connotation of absorbing, processing, or understanding. "I'll snarf down the latest version of the nethack user's guide -- it's been a while since I played last and I don't know what's changed recently." snark n. [Lewis Carroll, via the Michigan Terminal System] 1. A system failure. When a user's process bombed, the operator would get the message "Help, Help, Snark in MTS!" 2. More generally, any kind of unexplained or threatening event on a computer (especially if it might be a boojum). Often used to refer to an event or a log file entry that might indicate an attempted security violation. See snivitz. 3. UUCP name of _snark.thyrsus.com_, home site of the Jargon File versions from 2.*.* on (i.e., this lexicon). = sneaker n. An individual hired to break into places in order to test their security; analogous to tiger team. Compare samurai. = sneakernet /snee'ker-net/ n. Term used (generally with ironic intent) for transfer of electronic information by physically carrying tape, disks, or some other media from one machine to another. "Never underestimate the bandwidth of a station wagon filled with magtape, or a 747 filled with CD-ROMs." Also called `Tennis-Net', `Armpit-Net', `Floppy-Net' or `Shoenet'; in the 1990s, `Nike network' after a well-known sneaker brand. sniff v.,n. 1. To watch IP packets traversing a local network. Most often in the phrase `packet sniffer', a program for doing same. 2.Synonym for poll. = snivitz /sniv'itz/ n. A hiccup in hardware or software; a small, transient problem of unknown origin (less serious than a snark). Compare glitch. = 'Snooze /snooz/ [FidoNet] n. Fidonews, the weekly official on-line newsletter of FidoNet. As the editorial policy of Fidonews is "anything that arrives, we print", there are often large articles completely unrelated to FidoNet, which in turn tend to elicit flamage in subsequent issues. SO /S-O/ n. 1. (also `S.O.') Abbrev. for Significant Other, almost invariably written abbreviated and pronounced /S-O/ by hackers. Used to refer to one's primary relationship, esp. a live-in to whom one is not married. See MOTAS, MOTOS, MOTSS. 2. [techspeak] The Shift Out control character in ASCII (Control-N, 0001110). social engineering n. Term used among crackers and samurai for cracking techniques that rely on weaknesses in wetware rather than software; the aim is to trick people into revealing passwords or other information that compromises a target system's security. Classic scams include phoning up a mark who has the required information and posing as a field service tech or a fellow employee with an urgent access problem. See also the tiger team story in the patch entry. social science number n. // [IBM] A statistic that is content-free, or nearly so. A measure derived via methods of questionable validity from data of a dubious and vague nature. Predictively, having a social science number in hand is seldom much better than nothing, and can be considerably worse. As a rule, management loves them. See also numbers, math-out, pretty pictures. sock puppet n. [Usenet: from the act of placing a sock over your hand and talking to it and pretending it's talking back] In Usenet parlance, a pseudo through which the puppeteer posts follow-ups to their own original message to give the appearance that a number of people support the views held in the original message. sodium substrate n. Syn salt substrate. soft boot n. See boot. softcopy /soft'kop-ee/ n. [by analogy with `hardcopy'] A machine-readable form of corresponding hardcopy. See bits, machinable. software bloat n. The results of second-system effect or creeping featuritis. Commonly cited examples include ls(1), X, BSD, Missed'em-five, and OS/2. software hoarding n. Pejorative term employed by members and adherents of the GNU project to describe the act of holding software proprietary, keeping it under trade secret or license terms which prohibit free redistribution and modification. Used primarily in Free Software Foundation propaganda. For a summary of related issues, see GNU. software laser n. An optical laser works by bouncing photons back and forth between two mirrors, one totally reflective and one partially reflective. If the lasing material (usually a crystal) has the right properties, photons scattering off the atoms in the crystal will excite cascades of more photons, all in lockstep. Eventually the beam will escape through the partially-reflective mirror. One kind of sorcerer's apprentice mode involving bounce messages can produce closely analogous results, with a cascade of messages escaping to flood nearby systems. By mid-1993 there had been at least two publicized incidents of this kind. software rot n. Term used to describe the tendency of software that has not been used in a while to lose; such failure may be semi-humorously ascribed to bit rot. More commonly, `software rot' strikes when a program's assumptions become out of date. If the design was insufficiently robust, this may cause it to fail in mysterious ways. Syn. `code rot'. See also link rot. For example, owing to endemic shortsightedness in the design of COBOL programs, a good number of them succumbed to software rot when their 2-digit year counters underwent wrap around at the beginning of the year 2000. Actually, related lossages often afflict centenarians who have to deal with computer software designed by unimaginative clods. One such incident became the focus of a minor public flap in 1990, when a gentleman born in 1889 applied for a driver's license renewal in Raleigh, North Carolina. The new system refused to issue the card, probably because with 2-digit years the ages 101 and 1 cannot be distinguished. Historical note: Software rot in an even funnier sense than the mythical one was a real problem on early research computers (e.g., the R1; see grind crank). If a program that depended on a peculiar instruction hadn't been run in quite a while, the user might discover that the opcodes no longer did the same things they once did. ("Hey, so-and-so needs an instruction to do such-and-such. We can snarf this opcode, right? No one uses it.") Another classic example of this sprang from the time an MIT hacker found a simple way to double the speed of the unconditional jump instruction on a PDP-6, so he patched the hardware. Unfortunately, this broke some fragile timing software in a music-playing program, throwing its output out of tune. This was fixed by adding a defensive initialization routine to compare the speed of a timing loop with the real-time clock; in other words, it figured out how fast the PDP-6 was that day, and corrected appropriately. Compare bit rot. softwarily /soft-weir'i-lee/ adv. In a way pertaining to software. "The system is softwarily unreliable." The adjective **`softwary' is not used. See hardwarily. softy n. [IBM] Hardware hackers' term for a software expert who is largely ignorant of the mysteries of hardware. = some random X adj. Used to indicate a member of class X, with the implication that Xs are interchangeable. "I think some random cracker tripped over the guest timeout last night." See also J. Random. sorcerer's apprentice mode n. [from Goethe's "Der Zauberlehrling" via Paul Dukas's "L'apprenti sorcier" the film "Fantasia"] A bug in a protocol where, under some circumstances, the receipt of a message causes multiple messages to be sent, each of which, when received, triggers the same bug. Used esp. of such behavior caused by bounce message loops in email software. Compare broadcast storm, network meltdown, software laser, ARMM. SOS /S-O-S/ n.,obs. An infamously losing text editor. Once, back in the 1960s, when a text editor was needed for the PDP-6, a hacker crufted together a quick-and-dirty `stopgap editor' to be used until a better one was written. Unfortunately, the old one was never really discarded when new ones came along. SOS is a descendant (`Son of Stopgap') of that editor, and many PDP-10 users gained the dubious pleasure of its acquaintance. Since then other programs similar in style to SOS have been written, notably the early font editor BILOS /bye'lohs/, the Brother-In-Law Of Stopgap (the alternate expansion `Bastard Issue, Loins of Stopgap' has been proposed). source n. [very common] In reference to software, `source' is invariably shorthand for `source code', the preferred human-readable and human-modifiable form of the program. This is as opposed to object code, the derived binary executable form of a program. This shorthand readily takes derivative forms; one may speak of "the sources of a system" or of "having source". source of all good bits n. A person from whom (or a place from which) useful information may be obtained. If you need to know about a program, a guru might be the source of all good bits. The title is often applied to a particularly competent secretary. space-cadet keyboard n. A now-legendary device used on MIT LISP machines, which inspired several still-current jargon terms and influenced the design of EMACS. It was equipped with no fewer than seven shift keys: four keys for bucky bits (`control', `meta', `hyper', and `super') and three like regular shift keys, called `shift', `top', and `front'. Many keys had three symbols on them: a letter and a symbol on the top, and a Greek letter on the front. For example, the `L' key had an `L' and a two-way arrow on the top, and the Greek letter lambda on the front. By pressing this key with the right hand while playing an appropriate `chord' with the left hand on the shift keys, you could get the following results: L lowercase l shift-L uppercase L front-L lowercase lambda front-shift-L uppercase lambda top-L two-way arrow (front and shift are ignored) And of course each of these might also be typed with any combination of the control, meta, hyper, and super keys. On this keyboard, you could type over 8000 different characters! This allowed the user to type very complicated mathematical text, and also to have thousands of single-character commands at his disposal. Many hackers were actually willing to memorize the command meanings of that many characters if it reduced typing time (this attitude obviously shaped the interface of EMACS). Other hackers, however, thought having that many bucky bits was overkill, and objected that such a keyboard can require three or four hands to operate. See bucky bits, cokebottle, double bucky, meta bit, quadruple bucky. Note: early versions of this entry incorrectly identified the space-cadet keyboard with the `Knight keyboard'. Though both were designed by Tom Knight, the latter term was properly applied only to a keyboard used for ITS on the PDP-10 and modeled on the Stanford keyboard (as described under bucky bits). The true space-cadet keyboard evolved from the first Knight keyboard. spaceship operator n. The glyph <=>, so-called apparently because in the low-resolution constant-width font used on many terminals it vaguely resembles a flying saucer. Perl uses this to denote the signum-of-difference operation. SPACEWAR n. A space-combat simulation game, inspired by E. E. "Doc" Smith's "Lensman" books, in which two spaceships duel around a central sun, shooting torpedoes at each other and jumping through hyperspace. This game was first implemented on the PDP-1 at MIT in 1962. In 1968-69, a descendant of the game motivated Ken Thompson to build, in his spare time on a scavenged PDP-7, the operating system that became Unix. Less than nine years after that, SPACEWAR was commercialized as one of the first video games; descendants are still feeping in video arcades everywhere. spaghetti code n. Code with a complex and tangled control structure, esp. one using many GOTOs, exceptions, or other `unstructured' branching constructs. Pejorative. The synonym `kangaroo code' has been reported, doubtless because such code has so many jumps in it. spaghetti inheritance n. [encountered among users of object-oriented languages that use inheritance, such as Smalltalk] A convoluted class-subclass graph, often resulting from carelessly deriving subclasses from other classes just for the sake of reusing their code. Coined in a (successful) attempt to discourage such practice, through guilt-by-association with spaghetti code. spam vt.,vi.,n. [from "Monty Python's Flying Circus"] 1. To crash a program by overrunning a fixed-size buffer with excessively large input data. See also buffer overflow, overrun screw, smash the stack. 2. To cause a newsgroup to be flooded with irrelevant or inappropriate messages. You can spam a newsgroup with as little as one well- (or ill-) planned message (e.g. asking "What do you think of abortion?" on _soc.women_). This is often done with cross-posting (e.g. any message which is crossposted to _alt.rush-limbaugh_ and _alt.politics.homosexuality_ will almost inevitably spam both groups). This overlaps with troll behavior; the latter more specific term has become more common. 3. To send many identical or nearly-identical messages separately to a large number of Usenet newsgroups. This is more specifically called `ECP', Excessive Cross-Posting. This is one sure way to infuriate nearly everyone on the Net. See also velveeta and jello. 4. To bombard a newsgroup with multiple copies of a message. This is more specifically called `EMP', Excessive Multi-Posting. 5. To mass-mail unrequested identical or nearly-identical email messages, particularly those containing advertising. Especially used when the mail addresses have been culled from network traffic or databases without the consent of the recipients. Synonyms include UCE, UBE. 6. Any large, annoying, quantity of output. For instance, someone on IRC who walks away from their screen and comes back to find 200 lines of text might say "Oh no, spam". The later definitions have become much more prevalent as the Internet has opened up to non-techies, and to most people senses 3 4 and 5 are now primary. All three behaviors are considered abuse of the net, and are almost universally grounds for termination of the originator's email account or network connection. In these senses the term `spam' has gone mainstream, though without its original sense or folkloric freight - there is apparently a widespread myth among lusers that "spamming" is what happens when you dump cans of Spam into a revolving fan. spam bait n. Email addresses included in, or comprising the entirety of, a usenet message so that spammers mining a newsgroup with an address harvester will collect them. These addresses can be people who have offended or annoyed the poster, or who are included so that a spammer will spam an official, thereby causing himself trouble. One particularly effective form of spam bait is the address of a teergrube. spamblock /spam'blok/ n. [poss. by analogy to sunblock] Text inserted in an email address to render it invalid and thus useless to spammers. For example, the address `jrandom@hacker.org' might be transformed to `jrandom@NOSPAM.hacker.org'. Adding spamblock to an address is often referred to as `munging' it (see munge)-. This evasion tactic depends on the fact that most spammers collect names with some sort of address harvester on volumes too high to de-mung by hand, but individual humans reading an email message can readily spot and remove a spamblock in the from address. Note: This is not actually a very effective tactic, and may already be passing out of use in early 1999 after about two years of life. In both mail and news, it's essentially impossible to keep a smart address harvester from mining out the addresses in the message header and trace lines. Therefore the only people who can be protected are third parties mentioned by email address in the message - not a common enough case to interest spammers. spamhaus spam'hows n. Pejorative term for an internet service provider that permits or even encourages spam mailings from its systems. The plural is `spamhausen'. There is a web page devoted to tracking spamhausen. The most notorious of the spamhausen was Sanford Wallace's Cyber Promotions Inc., shut down by a lawsuit on 16 October 1997. The anniversary of the shutdown is celebrated on Usenet as Spam Freedom Day, but lesser imitators of the Spamford still infest various murky corners of the net. Since prosecution of spammers became routine under the junk-fax laws and statues specifically targeting spam, spamhausen have declined in relative importance; today, hit-and-run attacks by spammers using relay rape and throwaway accounts on reputable ISPs seem to account for most of the flow. S = spamvertize v. To advertise using spam. Pejorative. spangle n. [UK] The singular of bells and whistles. See also spungle. spawn n.,vi. 1. [techspeak] In UNIX parlance, to create a child process from within a process. Technically this is a `fork'; the term `spawn' is a bit more general and is used for threads (lightweight processes) as well as traditional heavyweight processes. 2. In gaming, meant to indicate where (`spawn-point') and when a player comes to life (or `re-spawns') after being killed. Opposite of frag. = special-case vt. To write unique code to handle input to or situations arising in a program that are somehow distinguished from normal processing. This would be used for processing of mode switches or interrupt characters in an interactive interface (as opposed, say, to text entry or normal commands), or for processing of hidden flags in the input of a batch program or filter. speedometer n. A pattern of lights displayed on a linear set of LEDs (today) or nixie tubes (yesterday, on ancient mainframes). The pattern is shifted left every N times the operating system goes through its main loop. A swiftly moving pattern indicates that the system is mostly idle; the speedometer slows down as the system becomes overloaded. The speedometer on Sun Microsystems hardware bounces back and forth like the eyes on one of the Cylons from the wretched "Battlestar Galactica" TV series. Historical note: One computer, the GE 600 (later Honeywell 6000) actually had an analog speedometer on the front panel, calibrated in instructions executed per second. spell n. Syn. incantation. = spelling flame n. // [Usenet] A posting ostentatiously correcting a previous article's spelling as a way of casting scorn on the point the article was trying to make, instead of actually responding to that point (compare dictionary flame). Of course, people who are more than usually slovenly spellers are prone to think any correction is a spelling flame. It's an amusing comment on human nature that spelling flames themselves often contain spelling errors. spider The Web-walking part of a search engine that collects pages for indexing in the search engine's database. Also called a bot. The best-known spider is Scooter, the web-walker for the Alta Vista search engine. = spider food n. Keywords embedded (usually invisibly) into a web page to attract search engines (spiders). The intended result of including spider food in one's web page is to insure that the page appears high on the list of matching entries to a search engine query. There are right and wrong ways to do this; the right way is a discreet `meta keywords' tag, the wrong way is to embed many repeats of a keyword in comments (and many search engines now detect and ignore the latter). spiffy /spi'fee/ adj. 1. Said of programs having a pretty, clever, or exceptionally well-designed interface. "Have you seen the spiffy X version of empire yet?" 2. Said sarcastically of a program that is perceived to have little more than a flashy interface going for it. Which meaning should be drawn depends delicately on tone of voice and context. This word was common mainstream slang during the 1940s, in a sense close to 1. = spike v. To defeat a selection mechanism by introducing a (sometimes temporary) device that forces a specific result. The word is used in several industries; telephone engineers refer to spiking a relay by inserting a pin to hold the relay in either the closed or open state, and railroaders refer to spiking a track switch so that it cannot be moved. In programming environments it normally refers to a temporary change, usually for testing purposes (as opposed to a permanent change, which would be called hardwired). = spin vi. Equivalent to buzz. More common among C and Unix programmers. See the discussion of `spinlock' under busy-wait. = spl /S-P-L/ [abbrev, from Set Priority Level] The way traditional Unix kernels implement mutual exclusion by running code at high interrupt levels. Used in jargon to describe the act of tuning in or tuning out ordinary communication. Classically, spl levels run from 1 to 7; "Fred's at spl 6 today" would mean that he is very hard to interrupt. "Wait till I finish this; I'll spl down then." See also interrupts locked out. splash screen n. [Mac users] Syn. banner, sense 3. splat n. 1. Name used in many places (DEC, IBM, and others) for the asterisk (*) character (ASCII 0101010). This may derive from the `squashed-bug' appearance of the asterisk on many early line printers. 2. [MIT] Name used by some people for the # character (ASCII 0100011). 3. The feature key on a Mac (same as alt, sense 2). 4. obs. Name used by some people for the Stanford/ITS extended ASCII circle-x character. This character is also called `blobby' and `frob', among other names; it is sometimes used by mathematicians as a notation for `tensor product'. 5. obs. Name for the semi-mythical Stanford extended ASCII circle-plus character. See also ASCII. = splat out v. [Usenet] To partially obscure a potentially provocative word by substituting splat characters for some of its letters (usually, but not always, the vowels). The purpose is not to make the word unrecognizable but to make it a mention rather than a use, so that no flamewar ensues. Words often splatted out include N*z* (see Godwin's Law), *v*l*t**n (anywhere fundamentalists might be lurking), *b*rt**n, and g*n c*ntr*l. Compare UN*X. spod n. [UK] 1. A lower form of life found on talker systems and MUDs. The spod has few friends in RL and uses talkers instead, finding communication easier and preferable over the net. He has all the negative traits of the computer geek without having any interest in computers per se. Lacking any knowledge of or interest in how networks work, and considering his access a God-given right, he is a major irritant to sysadmins, clogging up lines in order to reach new MUDs, following passed-on instructions on how to sneak his way onto Internet ("Wow! It's in America!") and complaining when he is not allowed to use busy routes. A true spod will start any conversation with "Are you male or female?" (and follow it up with "Got any good numbers/IDs/passwords?") and will not talk to someone physically present in the same terminal room until they log onto the same machine that he is using and enter talk mode. Compare newbie, tourist, weenie, twink, terminal junkie, warez d00dz. 2. A backronym for "Sole Purpose, Obtain a Degree"; according to some self-described spods, this term is used by indifferent students to condemn their harder-working fellows. Compare the defiant adoption of the term `geek' in the mid-1990s by people who would previously have been stigmatized by it (see computer geek). 3. [obs.] An ordinary person; a random. This is the meaning with which the term was coined, but the inventor informs us he has himself accepted sense 1. = spoiler n. [Usenet] 1. A remark which reveals important plot elements from books or movies, thus denying the reader (of the article) the proper suspense when reading the book or watching the movie. 2. Any remark which telegraphs the solution of a problem or puzzle, thus denying the reader the pleasure of working out the correct answer (see also interesting). Either sense readily forms compounds like `total spoiler', `quasi-spoiler' and even `pseudo-spoiler'. By convention, articles which are spoilers in either sense should contain the word `spoiler' in the Subject: line, or guarantee via various tricks that the answer appears only after several screens-full of warning, or conceal the sensitive information via rot13, spoiler space or some combination of these techniques. spoiler space [also `spoiler spoo'] A screenful of blank lines (and, often, form-feeds) deliberately inserted in a message following a spoiler warning, so the actual spoiler can't be seen without hitting a key. sponge n. [Unix] A special case of a filter that reads its entire input before writing any output; the canonical example is a sort utility. Unlike most filters, a sponge can conveniently overwrite the input file with the output data stream. If a file system has versioning (as ITS did and VMS does now) the sponge/filter distinction loses its usefulness, because directing filter output would just write a new version. See also slurp. = spoof vi. To capture, alter, and retransmit a communication stream in a way that misleads the recipient. As used by hackers, refers especially to altering TCP/IP packet source addresses or other packet-header data in order to masquerade as a trusted machine. This term has become very widespread and is borderline techspeak. = spool vi. [from early IBM `Simultaneous Peripheral Operation On-Line', but is widely thought to be a backronym] To send files to some device or program (a `spooler') that queues them up and does something useful with them later. Without qualification, the spooler is the `print spooler' controlling output of jobs to a printer; but the term has been used in connection with other peripherals (especially plotters and graphics devices) and occasionally even for input devices. See also demon. = spool file n. Any file to which data is spooled to await the next stage of processing. Especially used in circumstances where spooling the data copes with a mismatch between speeds in two devices or pieces of software. For example, when you send mail under Unix, it's typically copied to a spool file to await a transport demon's attentions. This is borderline techspeak. spungle n. [Durham, UK; portmanteau, spangle + bungle] A spangle of no actual usefulness. Example: Roger the Bent Paperclip in Microsoft Word '98. A spungle's only virtue is that it looks pretty, unless you find creeping featurism ugly. square tape n. Mainframe magnetic tape cartridges for use with IBM 3480 or compatible tape drives; or QIC tapes used on workstations and micros. The term comes from the square (actually rectangular) shape of the cartridges; contrast round tape. squirrelcide n. [common on Usenet's _comp.risks_ newsgroup.] (alt. `squirrelicide') What all too frequently happens when a squirrel decides to exercise its species's unfortunate penchant for shorting out power lines with their little furry bodies. Result: one dead squirrel, one down computer installation. In this situation, the computer system is said to have been squirrelcided. stack n. The set of things a person has to do in the future. One speaks of the next project to be attacked as having risen to the top of the stack. "I'm afraid I've got real work to do, so this'll have to be pushed way down on my stack." "I haven't done it yet because every time I pop my stack something new gets pushed." If you are interrupted several times in the middle of a conversation, "My stack overflowed" means "I forget what we were talking about." The implication is that more items were pushed onto the stack than could be remembered, so the least recent items were lost. The usual physical example of a stack is to be found in a cafeteria: a pile of plates or trays sitting on a spring in a well, so that when you put one on the top they all sink down, and when you take one off the top the rest spring up a bit. See also push and pop. At MIT, PDL used to be a more common synonym for stack in all these contexts, and this may still be true. Everywhere else stack seems to be the preferred term. Knuth ("The Art of Computer Programming", second edition, vol. 1, p. 236) says: Many people who realized the importance of stacks and queues independently have given other names to these structures: stacks have been called push-down lists, reversion storages, cellars, nesting stores, piles, last-in-first-out ("LIFO") lists, and even yo-yo lists! stack puke n. Some processor architectures are said to `puke their guts onto the stack' to save their internal state during exception processing. The Motorola 68020, for example, regurgitates up to 92 bytes on a bus fault. On a pipelined machine, this can take a while. stale pointer bug n. Synonym for aliasing bug used esp. among microcomputer hackers. star out v. [University of York, England] To replace a user's encrypted password in /etc/passwd with a single asterisk. Under Unix this is not a legal encryption of any password; hence the user is not permitted to log in. In general, accounts like adm, news, and daemon are permanently "starred out"; occasionally a real user might have the this inflicted upon him/her as a punishment, e.g. "Graham was starred out for playing Omega in working hours". Also occasionally known as The Order Of The Gold Star in this context. "Don't do that, or you'll be awarded the Order of the Gold Star..." Compare disusered. state n. 1. Condition, situation. "What's the state of your latest hack?" "It's winning away." "The system tried to read and write the disk simultaneously and got into a totally wedged state." The standard question "What's your state?" means "What are you doing?" or "What are you about to do?" Typical answers are "about to gronk out", or "hungry". Another standard question is "What's the state of the world?", meaning "What's new?" or "What's going on?". The more terse and humorous way of asking these questions would be "State-p?". Another way of phrasing the first question under sense 1 would be "state-p latest hack?". 2. Information being maintained in non-permanent memory (electronic or human). stealth manager n. [Corporate DP] A manager that appears out of nowhere, promises undeliverable software to unknown end users, and vanishes before the programming staff realizes what has happened. See smoke and mirrors. steam-powered adj. Old-fashioned or underpowered; archaic. This term does not have a strong negative loading and may even be used semi-affectionately for something that clanks and wheezes a lot but hangs in there doing the job. STFW imp. /S-T-F-W/ [Usenet] Commmon abbreviation for "Search The Fucking Web", a suggestion that what you're asking for is a query better handled by a search engine than a human being. Usage is common and exactly parallel to both senses of RTFM. stiffy n. 3.5-inch microfloppies, so called because their jackets are more rigid than those of the 5.25-inch and the (now totally obsolete) 8-inch floppy. Elsewhere this might be called a `firmy'. For some odd reason, several sources have taken the trouble to inform us that this term is widespread in South Africa. stir-fried random n. (alt. `stir-fried mumble') Term used for the best dish of many of those hackers who can cook. Consists of random fresh veggies and meat wokked with random spices. Tasty and economical. See random, great-wall, ravs, laser chicken, oriental food; see also mumble. stomp on vt. To inadvertently overwrite something important, usually automatically. "All the work I did this weekend got stomped on last night by the nightly server script." Compare scribble, mangle, trash, scrog, roach. Stone Age n.,adj. 1. In computer folklore, an ill-defined period from ENIAC (ca. 1943) to the mid-1950s; the great age of electromechanical dinosaurs. Sometimes used for the entire period up to 1960-61 (see Iron Age); however, it is funnier and more descriptive to characterize the latter period in terms of a `Bronze Age' era of transistor-logic, pre-ferrite-core machines with drum or CRT mass storage (as opposed to just mercury delay lines and/or relays). See also Iron Age. 2. More generally, a pejorative for any crufty, ancient piece of hardware or software technology. Note that this is used even by people who were there for the Stone Age (sense 1). stone knives and bearskins n. [from the Star Trek Classic episode "The City on the Edge of Forever"] A term traditionally used to describe (and deprecate) computing environments that are grotesquely primitive in light of what is known about good ways to design things. As in "Don't get too used to the facilities here. Once you leave SAIL it's stone knives and bearskins as far as the eye can see". Compare steam-powered. stoppage /sto'p*j/ n. Extreme lossage that renders something (usually something vital) completely unusable. "The recent system stoppage was caused by a fried transformer." S = store n. [prob. from techspeak `main store'] In some varieties of Commonwealth hackish, the preferred synonym for core. Thus, `bringing a program into store' means not that one is returning shrink-wrapped software but that a program is being swapped in. = strided /stri:'d*d/ adj. [scientific computing] Said of a sequence of memory reads and writes to addresses, each of which is separated from the last by a constant interval called the `stride length'. These can be a worst-case access pattern for the standard memory-caching schemes when the stride length is a multiple of the cache line size. Strided references are often generated by loops through an array, and (if your data is large enough that access-time is significant) it can be worthwhile to tune for better locality by inverting double loops or by partially unrolling the outer loop of a loop nest. This usage is borderline techspeak; the related term `memory stride' is definitely techspeak. = stroke n. Common name for the slant (`/', ASCII 0101111) character. See ASCII for other synonyms. = strudel n. Common (spoken) name for the at-sign (`@', ASCII 1000000) character. See ASCII for other synonyms. = stubroutine /stuhb'roo-teen/ n. [contraction of `stub subroutine'] Tiny, often vacuous placeholder for a subroutine that is to be written or fleshed out later. studly adj. Impressive; powerful. Said of code and designs which exhibit both complexity and a virtuoso flair. Has connotations similar to hairy but is more positive in tone. Often in the emphatic `most studly' or as noun-form `studliness'. "Smail 3.0's configuration parser is most studly." = studlycaps /stuhd'lee-kaps/ n. A hackish form of silliness similar to BiCapitalization for trademarks, but applied randomly and to arbitrary text rather than to trademarks. ThE oRigiN and SigNificaNce of thIs pRacTicE iS oBscuRe. stunning adj. Mind-bogglingly stupid. Usually used in sarcasm. "You want to code what in ADA? That's a ... stunning idea!" S = stupid-sort n. Syn. bogo-sort. Stupids n. Term used by samurai for the suits who employ them; succinctly expresses an attitude at least as common, though usually better disguised, among other subcultures of hackers. There may be intended reference here to an SF story originally published in 1952 but much anthologized since, Mark Clifton's "Star, Bright". In it, a super-genius child classifies humans into a very few `Brights' like herself, a huge majority of `Stupids', and a minority of `Tweens', the merely ordinary geniuses. Sturgeon's Law prov. "Ninety percent of everything is crap". Derived from a quote by science fiction author Theodore Sturgeon, who once said, "Sure, 90% of science fiction is crud. That's because 90% of everything is crud." Oddly, when Sturgeon's Law is cited, the final word is almost invariably changed to `crap'. Compare Hanlon's Razor, Ninety-Ninety Rule. Though this maxim originated in SF fandom, most hackers recognize it and are all too aware of its truth. sucking mud adj. [Applied Data Research] (also `pumping mud') Crashed or wedged. Usually said of a machine that provides some service to a network, such as a file server. This Dallas regionalism derives from the East Texas oilfield lament, "Shut 'er down, Ma, she's a-suckin' mud". Often used as a query. "We are going to reconfigure the network, are you ready to suck mud?" sufficiently small adj. Syn. suitably small. suit n. 1. Ugly and uncomfortable `business clothing' often worn by non-hackers. Invariably worn with a `tie', a strangulation device that partially cuts off the blood supply to the brain. It is thought that this explains much about the behavior of suit-wearers. Compare droid. 2. A person who habitually wears suits, as distinct from a techie or hacker. See pointy-haired, burble, management, Stupids, SNAFU principle, PHB, and brain-damaged. suitable win n. See win. suitably small adj. [perverted from mathematical jargon] An expression used ironically to characterize unquantifiable behavior that differs from expected or required behavior. For example, suppose a newly created program came up with a correct full-screen display, and one publicly exclaimed: "It works!" Then, if the program dumped core on the first mouse click, one might add: "Well, for suitably small values of `works'." Compare the characterization of pi under random numbers. Sun n. Sun Microsystems. Hackers remember that the name was originally an acronym, Stanford University Network. Sun started out around 1980 with some hardware hackers (mainly) from Stanford talking to some software hackers (mainly) from UC Berkeley; Sun's original technology concept married a clever board design based on the Motorola 68000 to BSD Unix. Sun went on to lead the worstation industry through the 1980s, and for years afterwards remained an engineering-driven company and a good place for hackers to work. Though Sun drifted away from its techie origins after 1990 and has since made some strategic moves that disappointed and annoyed many hackers (especially by maintaining proprietary control of Java and rejecting Linux), it's still considered within the family in much the same way DEC was in the 1970s and early 1980s. = sun lounge n. [UK] The room where all the Sun workstations live. The humor in this term comes from the fact that it's also in mainstream use to describe a solarium, and all those Sun workstations clustered together give off an amazing amount of heat. sun-stools n. Unflattering hackerism for SunTools, a pre-X windowing environment notorious in its day for size, slowness, and misfeatures. X, however, is larger and (some claim) slower; see second-system effect. sunspots n. 1. Notional cause of an odd error. "Why did the program suddenly turn the screen blue?" "Sunspots, I guess." 2. Also the cause of bit rot -- from the myth that sunspots will increase cosmic rays, which can flip single bits in memory. See also phase of the moon. super source quench n. A special packet designed to shut up an Internet host. The Internet Protocol (IP) has a control message called Source Quench that asks a host to transmit more slowly on a particular connection to avoid congestion. It also has a Redirect control message intended to instruct a host to send certain packets to a different local router. A "super source quench" is actually a redirect control packet, forged to look like it came from a local router, that instructs a host to send all packets to its own local loopback address. This will effectively tie many Internet hosts up in knots. Compare Godzillagram, breath-of-life packet. superloser n. [Unix] A superuser with no clue - someone with root privileges on a Unix system and no idea what he/she is doing, the moral equivalent of a three-year-old with an unsafetied Uzi. Anyone who thinks this is an uncommon situation reckons without the territorial urges of management. superprogrammer n. A prolific programmer; one who can code exceedingly well and quickly. Not all hackers are superprogrammers, but many are. (Productivity can vary from one programmer to another by three orders of magnitude. For example, one programmer might be able to write an average of 3 lines of working code in one day, while another, with the proper tools, might be able to write 3,000. This range is astonishing; it is matched in very few other areas of human endeavor.) The term `superprogrammer' is more commonly used within such places as IBM than in the hacker community. It tends to stress naive measures of productivity and to underweight creativity, ingenuity, and getting the job done -- and to sidestep the question of whether the 3,000 lines of code do more or less useful work than three lines that do the Right Thing. Hackers tend to prefer the terms hacker and wizard. superuser n. [Unix] Syn. root, avatar. This usage has spread to non-Unix environments; the superuser is any account with all wheel bits on. A more specific term than wheel. support n. After-sale handholding; something many software vendors promise but few deliver. To hackers, most support people are useless -- because by the time a hacker calls support he or she will usually know the software and the relevant manuals better than the support people (sadly, this is not a joke or exaggeration). A hacker's idea of `support' is a tête-à-tête with the software's designer. surf v. [from the `surf' idiom for rapidly flipping TV channels] To traverse the Internet in search of interesting stuff, used esp. if one is doing so with a World Wide Web browser. It is also common to speak of `surfing in' to a particular resource. Hackers adopted this term early, but many have stopped using it since it went completely mainstream around 1995. The passive, couch-potato connotations that go with TV channel surfing were never pleasant, and hearing non-hackers wax enthusiastic about "surfing the net" tends to make hackers feel a bit as though their home is being overrun by ignorami. Suzie COBOL /soo'zee koh'bol/ 1. [IBM: prob. from Frank Zappa's `Suzy Creamcheese'] n. A coder straight out of training school who knows everything except the value of comments in plain English. Also (fashionable among personkind wishing to avoid accusations of sexism) `Sammy Cobol' or (in some non-IBM circles) `Cobol Charlie'. 2. [proposed] Meta-name for any code grinder, analogous to J. Random Hacker. swab /swob/ [From the mnemonic for the PDP-11 `SWAp Byte' instruction, as immortalized in the dd(1) option conv=swab (see dd)] 1. vt. To solve the NUXI problem by swapping bytes in a file. 2. n. The program in V7 Unix used to perform this action, or anything functionally equivalent to it. See also big-endian, little-endian, middle-endian, bytesexual. swap vt. 1. [techspeak] To move information from a fast-access memory to a slow-access memory (`swap out'), or vice versa (`swap in'). Often refers specifically to the use of disks as `virtual memory'. As pieces of data or program are needed, they are swapped into core for processing; when they are no longer needed they may be swapped out again. 2. The jargon use of these terms analogizes people's short-term memories with core. Cramming for an exam might be spoken of as swapping in. If you temporarily forget someone's name, but then remember it, your excuse is that it was swapped out. To `keep something swapped in' means to keep it fresh in your memory: "I reread the TECO manual every few months to keep it swapped in." If someone interrupts you just as you got a good idea, you might say "Wait a moment while I swap this out", implying that a piece of paper is your extra-somatic memory and that if you don't swap the idea out by writing it down it will get overwritten and lost as you talk. Compare page in, page out. = swap space n. Storage space, especially temporary storage space used during a move or reconfiguration. "I'm just using that corner of the machine room for swap space." swapped in n. See swap. See also page in. swapped out n. See swap. See also page out. swizzle v. To convert external names, array indices, or references within a data structure into address pointers when the data structure is brought into main memory from external storage (also called `pointer swizzling'); this may be done for speed in chasing references or to simplify code (e.g., by turning lots of name lookups into pointer dereferences). The converse operation is sometimes termed `unswizzling'. See also snap. sync /sink/ n., vi. (var. `synch') 1. To synchronize, to bring into synchronization. 2. [techspeak] To force all pending I/O to the disk; see flush, sense 2. 3. More generally, to force a number of competing processes or agents to a state that would be `safe' if the system were to crash; thus, to checkpoint (in the database-theory sense). syntactic salt n. The opposite of syntactic sugar, a feature designed to make it harder to write bad code. Specifically, syntactic salt is a hoop the programmer must jump through just to prove that he knows what's going on, rather than to express a program action. Some programmers consider required type declarations to be syntactic salt. A requirement to write end if, end while, end do, etc. to terminate the last block controlled by a control construct (as opposed to just end) would definitely be syntactic salt. Syntactic salt is like the real thing in that it tends to raise hackers' blood pressures in an unhealthy way. Compare candygrammar. syntactic sugar n. [coined by Peter Landin] Features added to a language or other formalism to make it `sweeter' for humans, features which do not affect the expressiveness of the formalism (compare chrome). Used esp. when there is an obvious and trivial translation of the `sugar' feature into other constructs already present in the notation. C's a[i] notation is syntactic sugar for *(a + i). "Syntactic sugar causes cancer of the semicolon." -- Alan Perlis. The variants `syntactic saccharin' and `syntactic syrup' are also recorded. These denote something even more gratuitous, in that syntactic sugar serves a purpose (making something more acceptable to humans), but syntactic saccharin or syrup serve no purpose at all. Compare candygrammar, syntactic salt. sys-frog /sis'frog/ n. [the PLATO system] Playful variant of `sysprog', which is in turn short for `systems programmer'. S = sysadmin /sis'ad-min/ n. Common contraction of `system admin'; see admin. S = sysape /sys'ayp/ n. A rather derogatory term for a computer operator; a play on sysop common at sites that use the banana hierarchy of problem complexity (see one-banana problem). = sysop /sis'op/ n. [esp. in the BBS world] The operator (and usually the owner) of a bulletin-board system. A common neophyte mistake on FidoNet is to address a message to `sysop' in an international echo, thus sending it to hundreds of sysops around the world. = system n. 1. The supervisor program or OS on a computer. 2. The entire computer system, including input/output devices, the supervisor program or OS, and possibly other software. 3. Any large-scale program. 4. Any method or algorithm. 5. `System hacker': one who hacks the system (in senses 1 and 2 only; for sense 3 one mentions the particular program: e.g., `LISP hacker') systems jock n. See jock, sense 2. system mangler n. Humorous synonym for `system manager', poss. from the fact that one major IBM OS had a root account called SYSMANGR. Refers specifically to a systems programmer in charge of administration, software maintenance, and updates at some site. Unlike admin, this term emphasizes the technical end of the skills involved. SysVile /sis-vi:l'/ n. See Missed'em-five. = T = T: tail recursion: talk mode: talker system: tall card: tanked: TANSTAAFL: tape monkey: tar and feather: tarball: tardegy: taste: tayste: TCB: TCP/IP: TechRef: TECO: tee: teergrube: teledildonics: Telerat: TELNET: ten-finger interface: tense: tentacle: tenured graduate student: tera-: teraflop club: terminak: terminal brain death: terminal illness: terminal junkie: terpri: test: TeX: text: thanks in advance: That's not a bug that's a feature!: the literature: the network: the X that can be Y is not the true X: theology: theory: thinko: This can't happen: This time for sure!: thrash: thread: three-finger salute: throwaway account: thud: thumb: thundering herd problem: thunk: tick: tick-list features: tickle a bug: tiger team: time bomb: time sink: time T: times-or-divided-by: TINC: Tinkerbell program: TINLC: tip of the ice-cube: tired iron: tits on a keyboard: TLA: (TM): TMRC: TMRCie: TMTOWTDI: to a first approximation: to a zeroth approximation: toad: toast: toaster: toeprint: toggle: tool: toolsmith: toor: topic drift: topic group: TOPS-10: TOPS-20: tourist: tourist information: touristic: toy: toy language: toy problem: toy program: trampoline: trap: trap door: trash: trawl: tree-killer: treeware: trit: trivial: troff: troglodyte: troglodyte mode: Trojan horse: troll: Troll-O-Meter: tron: true-hacker: tty: tube: tube time: tunafish: tune: turbo nerd: Turing tar-pit: turist: Tux: tweak: tweeter: TWENEX: twiddle: twiddle: twilight zone: twink: twirling baton: two pi: two-to-the-N: twonkie: T /T/ 1. [from LISP terminology for `true'] Yes. Used in reply to a question (particularly one asked using The -P convention). In LISP, the constant T means `true', among other things. Some Lisp hackers use `T' and `NIL' instead of `Yes' and `No' almost reflexively. This sometimes causes misunderstandings. When a waiter or flight attendant asks whether a hacker wants coffee, he may absently respond `T', meaning that he wants coffee; but of course he will be brought a cup of tea instead. Fortunately, most hackers (particularly those who frequent Chinese restaurants) like tea at least as well as coffee -- so it is not that big a problem. 2. See time T (also since time T equals minus infinity). 3. [techspeak] In transaction-processing circles, an abbreviation for the noun `transaction'. 4. [Purdue] Alternate spelling of tee. 5. A dialect of LISP developed at Yale. (There is an intended allusion to NIL, "New Implementation of Lisp", another dialect of Lisp developed for the VAX) tail recursion n. If you aren't sick of it already, see tail recursion. talk mode n. A feature supported by Unix, ITS, and some other OSes that allows two or more logged-in users to set up a real-time on-line conversation. It combines the immediacy of talking with all the precision (and verbosity) that written language entails. It is difficult to communicate inflection, though conventions have arisen for some of these (see the section on writing style in the Prependices for details). Talk mode has a special set of jargon words, used to save typing, which are not used orally. Some of these are identical to (and probably derived from) Morse-code jargon used by ham-radio amateurs since the 1920s. AFAIAC as far as I am concerned AFAIK as far as I know BCNU be seeing you BTW by the way BYE? are you ready to unlink? (this is the standard way to end a talk-mode conversation; the other person types BYE to confirm, or else continues the conversation) CUL see you later ENQ? are you busy? (expects ACK or NAK in return) FOO? are you there? (often used on unexpected links, meaning also "Sorry if I butted in ..." (linker) or "What's up?" (linkee)) FWIW for what it's worth FYI for your information FYA for your amusement GA go ahead (used when two people have tried to type simultaneously; this cedes the right to type to the other) GRMBL grumble (expresses disquiet or disagreement) HELLOP hello? (an instance of the `-P' convention) IIRC if I recall correctly JAM just a minute (equivalent to SEC....) MIN same as JAM NIL no (see NIL) NP no problem O over to you OO over and out / another form of "over to you" (from x/y as "x over y") \ lambda (used in discussing LISPy things) OBTW oh, by the way OTOH on the other hand R U THERE? are you there? SEC wait a second (sometimes written SEC...) SYN Are you busy? (expects ACK, SYN|ACK, or RST in return; this is modeled on the TCP/IP handshake sequence) T yes (see the main entry for T) TNX thanks TNX 1.0E6 thanks a million (humorous) TNXE6 another form of "thanks a million" WRT with regard to, or with respect to. WTF the universal interrogative particle; WTF knows what it means? WTH what the hell? <double newline> When the typing party has finished, he/she types two newlines to signal that he/she is done; this leaves a blank line between `speeches' in the conversation, making it easier to reread the preceding text. <name>: When three or more terminals are linked, it is conventional for each typist to prepend his/her login name or handle and a colon (or a hyphen) to each line to indicate who is typing (some conferencing facilities do this automatically). The login name is often shortened to a unique prefix (possibly a single letter) during a very long conversation. /\/\/\ A giggle or chuckle. On a MUD, this usually means `earthquake fault'. Most of the above sub-jargon is used at both Stanford and MIT. Several of these expressions are also common in email, esp. FYI, FYA, BTW, BCNU, WTF, and CUL. A few other abbreviations have been reported from commercial networks, such as GEnie and CompuServe, where on-line `live' chat including more than two people is common and usually involves a more `social' context, notably the following: <g> grin <gd&r> grinning, ducking, and running BBL be back later BRB be right back HHOJ ha ha only joking HHOK ha ha only kidding HHOS ha ha only serious IMHO in my humble opinion (see IMHO) LOL laughing out loud NHOH Never Heard of Him/Her (often used in initgame) ROTF rolling on the floor ROTFL rolling on the floor laughing AFK away from keyboard b4 before CU l8tr see you later MORF male or female? TTFN ta-ta for now TTYL talk to you later OIC oh, I see rehi hello again Most of these are not used at universities or in the Unix world, though ROTF and TTFN have gained some currency there and IMHO is common; conversely, most of the people who know these are unfamiliar with FOO?, BCNU, HELLOP, NIL, and T. The MUD community uses a mixture of Usenet/Internet emoticons, a few of the more natural of the old-style talk-mode abbrevs, and some of the `social' list above; specifically, MUD respondents report use of BBL, BRB, LOL, b4, BTW, WTF, TTFN, and WTH. The use of `rehi' is also common; in fact, mudders are fond of re- compounds and will frequently `rehug' or `rebonk' (see bonk/oif) people. The word `re' by itself is taken as `regreet'. In general, though, MUDders express a preference for typing things out in full rather than using abbreviations; this may be due to the relative youth of the MUD cultures, which tend to include many touch typists and to assume high-speed links. The following uses specific to MUDs are reported: CU l8er see you later (mutant of CU l8tr) FOAD fuck off and die (use of this is generally OTT) OTT over the top (excessive, uncalled for) ppl abbrev for "people" THX thanks (mutant of TNX; clearly this comes in batches of 1138 (the Lucasian K)). UOK? are you OK? Some B1FFisms (notably the variant spelling d00d) appear to be passing into wider use among some subgroups of MUDders. One final note on talk mode style: neophytes, when in talk mode, often seem to think they must produce letter-perfect prose because they are typing rather than speaking. This is not the best approach. It can be very frustrating to wait while your partner pauses to think of a word, or repeatedly makes the same spelling error and backs up to fix it. It is usually best just to leave typographical errors behind and plunge forward, unless severe confusion may result; in that case it is often fastest just to type "xxx" and start over from before the mistake. See also hakspek, emoticon. talker system n. British hackerism for software that enables real-time chat or talk mode. tall card n. A PC/AT-size expansion card (these can be larger than IBM PC or XT cards because the AT case is bigger). See also short card. When IBM introduced the PS/2 model 30 (its last gasp at supporting the ISA) they made the case lower and many industry-standard tall cards wouldn't fit; this was felt to be a reincarnation of the connector conspiracy, done with less style. tanked adj. Same as down, used primarily by Unix hackers. See also hosed. Popularized as a synonym for `drunk' by Steve Dallas in the late lamented "Bloom County" comic strip. T = TANSTAAFL /tan'stah-fl/ [acronym, from Robert Heinlein's classic "The Moon is a Harsh Mistress".] "There Ain't No Such Thing As A Free Lunch", often invoked when someone is balking at the prospect of using an unpleasantly heavyweight technique, or at the poor quality of some piece of software, or at the signal-to-noise ratio of unmoderated Usenet newsgroups. "What? Don't tell me I have to implement a database back end to get my address book program to work!" "Well, TANSTAAFL you know." This phrase owes some of its popularity to the high concentration of science-fiction fans and political libertarians in hackerdom (see Appendix B for discussion). tape monkey n. A junior system administrator, one who might plausibly be assigned to do physical swapping of tapes and subsequent storage. When a backup needs to be restored, one might holler "Tape monkey!" (Compare one-banana problem) Also used to dismiss jobs not worthy of a highly trained sysadmin's ineffable talents: "Cable up her PC? You must be joking - I'm no tape monkey." tar and feather vi. [from Unix tar(1)] To create a transportable archive from a group of files by first sticking them together with tar(1) (the Tape ARchiver) and then compressing the result (see compress). The latter action is dubbed `feathering' partly for euphony and (if only for contrived effect) by analogy to what you do with an airplane propeller to decrease wind resistance, or with an oar to reduce water resistance; smaller files, after all, slip through comm links more easily. Compare the more common tarball. tarball n. [very common; prob. based on the "tar baby" in the Uncle Remus folk tales] An archive, created with the Unix tar(1) utility, containing myriad related files. "Here, I'll just ftp you a tarball of the whole project." Tarballs have been the standard way to ship around source-code distributions since the mid-1980s; in retrospect it seems odd that this term did not enter common usage until the late 1990s. = tardegy n. [deliberate mangling of `tragedy'] An incident in which someone who clearly deserves to be selected out of the gene pool on grounds of extreme stupidity meets with a messy end. Coined on the Darwin list, which is dedicated to chronicling such incidents; but almost all hackers would instantly recognize the intention of the term and laugh. = taste [primarily MIT] n. 1. The quality in a program that tends to be inversely proportional to the number of features, hacks, and kluges programmed into it. Also `tasty', `tasteful', `tastefulness'. "This feature comes in N tasty flavors." Although `tasty' and `flavorful' are essentially synonyms, `taste' and flavor are not. Taste refers to sound judgment on the part of the creator; a program or feature can exhibit taste but cannot have taste. On the other hand, a feature can have flavor. Also, flavor has the additional meaning of `kind' or `variety' not shared by `taste'. The marked sense of flavor is more popular than `taste', though both are widely used. See also elegant. 2. Alt. sp. of tayste. = tayste /tayst/ n. Two bits; also as taste. Syn. crumb, quarter. See nybble. = TCB /T-C-B/ n. [IBM] 1. Trouble Came Back. An intermittent or difficult-to-reproduce problem that has failed to respond to neglect or shotgun debugging. Compare heisenbug. Not to be confused with: 2. Trusted Computing Base, an `official' jargon term from the Orange Book. TCP/IP /T'C-P I'P/ n. 1. [Transmission Control Protocol/Internet Protocol] The wide-area-networking protocol that makes the Internet work, and the only one most hackers can speak the name of without laughing or retching. Unlike such allegedly `standard' competitors such as X.25, DECnet, and the ISO 7-layer stack, TCP/IP evolved primarily by actually being used, rather than being handed down from on high by a vendor or a heavily-politicized standards committee. Consequently, it (a) works, (b) actually promotes cheap cross-platform connectivity, and (c) annoys the hell out of corporate and governmental empire-builders everywhere. Hackers value all three of these properties. See creationism. 2. [Amateur Packet Radio] Formerly expanded as "The Crap Phil Is Pushing". The reference is to Phil Karn, KA9Q, and the context was an ongoing technical/political war between the majority of sites still running AX.25 and the TCP/IP relays. TCP/IP won. = TechRef /tek'ref/ n. [MS-DOS] The original "IBM PC Technical Reference Manual", including the BIOS listing and complete schematics for the PC. The only PC documentation in the original-issue package that was considered serious by real hackers. = TECO /tee'koh/ n.,v. obs. 1. [originally an acronym for `[paper] Tape Editor and COrrector'; later, `Text Editor and COrrector'] n. A text editor developed at MIT and modified by just about everybody. With all the dialects included, TECO may have been the most prolific editor in use before EMACS, to which it was directly ancestral. Noted for its powerful programming-language-like features and its unspeakably hairy syntax. It is literally the case that every string of characters is a valid TECO program (though probably not a useful one); one common game used to be mentally working out what the TECO commands corresponding to human names did. 2. vt. Originally, to edit using the TECO editor in one of its infinite variations (see below). 3. vt.,obs. To edit even when TECO is not the editor being used! This usage is rare and now primarily historical. As an example of TECO's obscurity, here is a TECO program that takes a list of names such as: Loser, J. Random Quux, The Great Dick, Moby sorts them alphabetically according to surname, and then puts the surname last, removing the comma, to produce the following: Moby Dick J. Random Loser The Great Quux The program is [1 J^P$L$$ J <.-Z; .,(S,$ -D .)FX1 @F^B $K :L I $ G1 L>$$ (where ^B means `Control-B' (ASCII 0000010) and $ is actually an alt or escape (ASCII 0011011) character). In fact, this very program was used to produce the second, sorted list from the first list. The first hack at it had a bug: GLS (the author) had accidentally omitted the @ in front of F^B, which as anyone can see is clearly the Wrong Thing. It worked fine the second time. There is no space to describe all the features of TECO, but it may be of interest that ^P means `sort' and J<.-Z; ... L> is an idiomatic series of commands for `do once for every line'. In mid-1991, TECO is pretty much one with the dust of history, having been replaced in the affections of hackerdom by EMACS. Descendants of an early (and somewhat lobotomized) version adopted by DEC can still be found lurking on VMS and a couple of crufty PDP-11 operating systems, however, and ports of the more advanced MIT versions remain the focus of some antiquarian interest. See also retrocomputing, write-only language. tee n.,vt. [Purdue] A carbon copy of an electronic transmission. "Oh, you're sending him the bits to that? Slap on a tee for me." From the Unix command tee(1), itself named after a pipe fitting (see plumbing). Can also mean `save one for me', as in "Tee a slice for me!" Also spelled `T'. = teergrube /teer'groob/ n. [German for `tar pit'] A trap set to punish spammers who use an address harvester; a mail server deliberately set up to be really, really slow. To activate it, scatter addresses that look like users on the teergrube's host in places where the address harvester will be trolling (one popular way is to embed the fake address in a Usenet sig block next to a human-readable warning not to send mail to it). The address harvester will dutifully collect the address. When the spammer tries to mailbomb it, his mailer will get stuck. teledildonics /tel`*-dil-do'-niks/ n. Sex in a computer simulated virtual reality, esp. computer-mediated sexual interaction between the VR presences of two humans. This practice is not yet possible except in the rather limited form of erotic conversation on MUDs and the like. The term, however, is widely recognized in the VR community as a ha ha only serious projection of things to come. "When we can sustain a multi-sensory surround good enough for teledildonics, then we'll know we're getting somewhere." See also hot chat. Telerat /tel'*-rat/ n. obs. Unflattering hackerism for `Teleray', a now-extinct line of extremely losing terminals. Compare AIDX, Macintrash Nominal Semidestructor, ScumOS, sun-stools, HP-SUX, Slowlaris. TELNET /tel'net/ vt. (also commonly lowercased as `telnet') To communicate with another Internet host using the TELNET (RFC 854) protocol (usually using a program of the same name). TOPS-10 people used the word IMPCOM, since that was the program name for them. Sometimes abbreviated to TN /T-N/. "I usually TN over to SAIL just to read the AP News." ten-finger interface n. The interface between two networks that cannot be directly connected for security reasons; refers to the practice of placing two terminals side by side and having an operator read from one and type into the other. tense adj. Of programs, very clever and efficient. A tense piece of code often got that way because it was highly bummed, but sometimes it was just based on a great idea. A comment in a clever routine by Mike Kazar, once a grad-student hacker at CMU: "This routine is so tense it will bring tears to your eyes." A tense programmer is one who produces tense code. tentacle n. A covert pseudo, sense 1. An artificial identity created in cyberspace for nefarious and deceptive purposes. The implication is that a single person may have multiple tentacles. This term was originally floated in some paranoid ravings on the cypherpunks list (see cypherpunk), and adopted in a spirit of irony by other, saner members. It has since shown up, used seriously, in the documentation for some remailer software, and is now (1994) widely recognized on the net. tenured graduate student n. One who has been in graduate school for 10 years (the usual maximum is 5 or 6): a `ten-yeared' student (get it?). Actually, this term may be used of any grad student beginning in his seventh year. Students don't really get tenure, of course, the way professors do, but a tenth-year graduate student has probably been around the university longer than any untenured professor. tera- /te'r*/ pref. [SI] See quantifiers. = teraflop club /te'r*-flop kluhb/ n. [FLOP = Floating Point Operation] A mythical association of people who consume outrageous amounts of computer time in order to produce a few simple pictures of glass balls with intricate ray-tracing techniques. Caltech professor James Kajiya is said to have been the founder. Compare Knights of the Lambda Calculus. terminak /ter'mi-nak`/ n. [Caltech, ca. 1979] Any malfunctioning computer terminal. A common failure mode of Lear-Siegler ADM 3a terminals caused the `L' key to produce the `K' code instead; complaints about this tended to look like "Terminak #3 has a bad keyboard. Pkease fix." Compare dread high-bit disease, frogging; see also AIDX, Nominal Semidestructor, ScumOS, sun-stools, Telerat, HP-SUX, Slowlaris. T = terminal brain death n. The extreme form of terminal illness (sense 1). What someone who has obviously been hacking continuously for far too long is said to be suffering from. terminal illness n. 1. Syn. raster burn. 2. The `burn-in' condition your CRT tends to get if you don't have a screen saver. terminal junkie n. [UK] A wannabee or early larval stage hacker who spends most of his or her time wandering the directory tree and writing noddy programs just to get a fix of computer time. Variants include `terminal jockey', `console junkie', and console jockey. The term `console jockey' seems to imply more expertise than the other three (possibly because of the exalted status of the console relative to an ordinary terminal). See also twink, read-only user. Appropriately, this term was used in the works of William S. Burroughs to describe a heroin addict with an unlimited supply. terpri /ter'pree/ vi. [from LISP 1.5 (and later, MacLISP)] To output a newline. Now rare as jargon, though still used as techspeak in Common LISP. It is a contraction of `TERminate PRInt line', named for the fact that, on some early OSes and hardware, no characters would be printed until a complete line was formed, so this operation terminated the line and emitted the output. = test n. 1. Real users bashing on a prototype long enough to get thoroughly acquainted with it, with careful monitoring and followup of the results. 2. Some bored random user trying a couple of the simpler features with a developer looking over his or her shoulder, ready to pounce on mistakes. Judging by the quality of most software, the second definition is far more prevalent. See also demo. TeX /tekh/ n. An extremely powerful macro-based text formatter written by Donald E. Knuth, very popular in the computer-science community (it is good enough to have displaced Unix troff, the other favored formatter, even at many Unix installations). TeX fans insist on the correct (guttural) pronunciation, and the correct spelling (all caps, squished together, with the E depressed below the baseline; the mixed-case `TeX' is considered an acceptable kluge on ASCII-only devices). Fans like to proliferate names from the word `TeX' -- such as TeXnician (TeX user), TeXhacker (TeX programmer), TeXmaster (competent TeX programmer), TeXhax, and TeXnique. See also CrApTeX. Knuth began TeX because he had become annoyed at the declining quality of the typesetting in volumes I-III of his monumental "Art of Computer Programming" (see Knuth, also bible). In a manifestation of the typical hackish urge to solve the problem at hand once and for all, he began to design his own typesetting language. He thought he would finish it on his sabbatical in 1978; he was wrong by only about 8 years. The language was finally frozen around 1985, but volume IV of "The Art of Computer Programming" is not expected to appear until 2002. The impact and influence of TeX's design has been such that nobody minds this very much. Many grand hackish projects have started as a bit of toolsmithing on the way to something else; Knuth's diversion was simply on a grander scale than most. TeX has also been a noteworthy example of free, shared, but high-quality software. Knuth offers a monetary awards to anyone who found and reported bugs dating from before the 1989 code freeze; as the years wore on and the few remaining bugs were fixed (and new ones even harder to find), the bribe went up. Though well-written, TeX is so large (and so full of cutting edge technique) that it is said to have unearthed at least one bug in every Pascal system it has been compiled with. text n. 1. [techspeak] Executable code, esp. a `pure code' portion shared between multiple instances of a program running in a multitasking OS. Compare English. 2. Textual material in the mainstream sense; data in ordinary ASCII or EBCDIC representation (see flat-ASCII). "Those are text files; you can review them using the editor." These two contradictory senses confuse hackers, too. thanks in advance [Usenet] Conventional net.politeness ending a posted request for information or assistance. Sometimes written `advTHANKSance' or `aTdHvAaNnKcSe' or abbreviated `TIA'. See net.-, netiquette. That's not a bug, that's a feature! The canonical first parry in a debate about a purported bug. The complainant, if unconvinced, is likely to retort that the bug is then at best a misfeature. See also feature. T = the literature n. Computer-science journals and other publications, vaguely gestured at to answer a question that the speaker believes is trivial. Thus, one might answer an annoying question by saying "It's in the literature." Oppose Knuth, which has no connotation of triviality. the network n. 1. Historicaslly, the union of all the major noncommercial, academic, and hacker-oriented networks, such as Internet, the pre-1990 ARPANET, NSFnet, BITNET, and the virtual UUCP and Usenet `networks', plus the corporate in-house networks and commercial time-sharing services (such as CompuServe, GEnie and AOL) that gateway to them. A site is generally considered `on the network' if it can be reached through some combination of Internet-style (@-sign) and UUCP (bang-path) addresses. See Internet, bang path, Internet address, network address. 2. Following the mass-culture discovery of the Internet in 1994 and subsequent proliferation of cheap TCP/IP connections, "the network" is increasingly synonymous with the Internet itself (as it was before the second wave of wide-area computer networking began around 1980). 3. A fictional conspiracy of libertarian hacker-subversives and anti-authoritarian monkeywrenchers described in Robert Anton Wilson's novel "Schrödinger's Cat", to which many hackers have subsequently decided they belong (this is an example of ha ha only serious). In sense 1, `the network' is often abbreviated to `the net'. "Are you on the net?" is a frequent question when hackers first meet face to face, and "See you on the net!" is a frequent goodbye. the X that can be Y is not the true X Yet another instance of hackerdom's peculiar attraction to mystical references -- a common humorous way of making exclusive statements about a class of things. The template is from the "Tao te Ching": "The Tao which can be spoken of is not the true Tao." The implication is often that the X is a mystery accessible only to the enlightened. See the trampoline entry for an example, and compare has the X nature. theology n. 1. Ironically or humorously used to refer to religious issues. 2. Technical fine points of an abstruse nature, esp. those where the resolution is of theoretical interest but is relatively marginal with respect to actual use of a design or system. Used esp. around software issues with a heavy AI or language-design component, such as the smart-data vs. smart-programs dispute in AI. T = theory n. The consensus, idea, plan, story, or set of rules that is currently being used to inform a behavior. This usage is a generalization and (deliberate) abuse of the technical meaning. "What's the theory on fixing this TECO loss?" "What's the theory on dinner tonight?" ("Chinatown, I guess.") "What's the current theory on letting lusers on during the day?" "The theory behind this change is to fix the following well-known screw...." thinko /thing'koh/ n. [by analogy with `typo'] A momentary, correctable glitch in mental processing, especially one involving recall of information learned by rote; a bubble in the stream of consciousness. Syn. braino; see also brain fart. Compare mouso. = This can't happen Less clipped variant of can't happen. This time, for sure! excl. Ritual affirmation frequently uttered during protracted debugging sessions involving numerous small obstacles (e.g., attempts to bring up a UUCP connection). For the proper effect, this must be uttered in a fruity imitation of Bullwinkle J. Moose. Also heard: "Hey, Rocky! Watch me pull a rabbit out of my hat!" The canonical response is, of course, "But that trick never works!" See hacker humor. thrash vi. To move wildly or violently, without accomplishing anything useful. Paging or swapping systems that are overloaded waste most of their time moving data into and out of core (rather than performing useful computation) and are therefore said to thrash. Someone who keeps changing his mind (esp. about what to work on next) is said to be thrashing. A person frantically trying to execute too many tasks at once (and not spending enough time on any single task) may also be described as thrashing. Compare multitask. thread n. [Usenet, GEnie, CompuServe] Common abbreviation of `topic thread', a more or less continuous chain of postings on a single topic. To `follow a thread' is to read a series of Usenet postings sharing a common subject or (more correctly) which are connected by Reference headers. The better newsreaders can present news in thread order automatically. Not to be confused with the techspeak sense of `thread', e.g. a lightweight process. Interestingly, this is far from a neologism. The OED says: "That which connects the successive points in anything, esp. a narrative, train of thought, or the like; the sequence of events or ideas continuing throughout the whole course of anything;" Citations are given going back to 1642! = three-finger salute n. Syn. Vulcan nerve pinch. throwaway account n. 1. An inexpensive Internet account purchased on a legitimate ISP for the the sole purpose of spewing spam. 2. An inexpensive Internet account obtained for the sole purpose of doing something which requires a valid email address but being able to ignore spam since the user will not look at the account again. thud n. 1. Yet another metasyntactic variable (see foo). It is reported that at CMU from the mid-1970s the canonical series of these was `foo', `bar', `thud', `blat'. 2. Rare term for the hash character, `#' (ASCII 0100011). See ASCII for other synonyms. thumb n. The slider on a window-system scrollbar. So called because moving it allows you to browse through the contents of a text window in a way analogous to thumbing through a book. thundering herd problem Scheduler thrashing. This can happen under Unix when you have a number of processes that are waiting on a single event. When that event (a connection to the web server, say) happens, every process which could possibly handle the event is awakened. In the end, only one of those processes will actually be able to do the work, but, in the meantime, all the others wake up and contend for CPU time before being put back to sleep. Thus the system thrashes briefly while a herd of processes thunders through. If this starts to happen many times per second, the performance impact can be significant. thunk /thuhnk/ n. 1. [obs.]"A piece of coding which provides an address", according to P. Z. Ingerman, who invented thunks in 1961 as a way of binding actual parameters to their formal definitions in Algol-60 procedure calls. If a procedure is called with an expression in the place of a formal parameter, the compiler generates a thunk which computes the expression and leaves the address of the result in some standard location. 2. Later generalized into: an expression, frozen together with its environment, for later evaluation if and when needed (similar to what in techspeak is called a `closure'). The process of unfreezing these thunks is called `forcing'. 3. A stubroutine, in an overlay programming environment, that loads and jumps to the correct overlay. Compare trampoline. 4. People and activities scheduled in a thunklike manner. "It occurred to me the other day that I am rather accurately modeled by a thunk -- I frequently need to be forced to completion." -- paraphrased from a plan file. Historical note: There are a couple of onomatopoeic myths circulating about the origin of this term. The most common is that it is the sound made by data hitting the stack; another holds that the sound is that of the data hitting an accumulator. Yet another suggests that it is the sound of the expression being unfrozen at argument-evaluation time. In fact, according to the inventors, it was coined after they realized (in the wee hours after hours of discussion) that the type of an argument in Algol-60 could be figured out in advance with a little compile-time thought, simplifying the evaluation machinery. In other words, it had `already been thought of'; thus it was christened a `thunk', which is "the past tense of `think' at two in the morning". tick n. 1. A jiffy (sense 1). 2. In simulations, the discrete unit of time that passes between iterations of the simulation mechanism. In AI applications, this amount of time is often left unspecified, since the only constraint of interest is the ordering of events. This sort of AI simulation is often pejoratively referred to as `tick-tick-tick' simulation, especially when the issue of simultaneity of events with long, independent chains of causes is handwaved. 3. In the FORTH language, a single quote character. tick-list features n. [Acorn Computers] Features in software or hardware that customers insist on but never use (calculators in desktop TSRs and that sort of thing). The American equivalent would be `checklist features', but this jargon sense of the phrase has not been reported. tickle a bug vt. To cause a normally hidden bug to manifest itself through some known series of inputs or operations. "You can tickle the bug in the Paradise VGA card's highlight handling by trying to set bright yellow reverse video." tiger team n. [U.S. military jargon] 1. Originally, a team (of sneakers) whose purpose is to penetrate security, and thus test security measures. These people are paid professionals who do hacker-type tricks, e.g., leave cardboard signs saying "bomb" in critical defense installations, hand-lettered notes saying "Your codebooks have been stolen" (they usually haven't been) inside safes, etc. After a successful penetration, some high-ranking security type shows up the next morning for a `security review' and finds the sign, note, etc., and all hell breaks loose. Serious successes of tiger teams sometimes lead to early retirement for base commanders and security officers (see the patch entry for an example). 2. Recently, and more generally, any official inspection team or special firefighting group called in to look at a problem. A subset of tiger teams are professional crackers, testing the security of military computer installations by attempting remote attacks via networks or supposedly `secure' comm channels. Some of their escapades, if declassified, would probably rank among the greatest hacks of all times. The term has been adopted in commercial computer-security circles in this more specific sense. time bomb n. A subspecies of logic bomb that is triggered by reaching some preset time, either once or periodically. There are numerous legends about time bombs set up by programmers in their employers' machines, to go off if the programmer is fired or laid off and is not present to perform the appropriate suppressing action periodically. Interestingly, the only such incident for which we have been pointed to documentary evidence took place in the Soviet Union in 1986! A disgruntled programmer at the Volga Automobile Plant (where the Fiat clones called Ladas were manufactured) planted a time bomb which, a week after he'd left on vacation, stopped the entire main assembly line for a day. The case attracted lots of attention in the Soviet Union because it was the first cracking case to make it to court there. The perpetrator got a suspended sentence of 3 years in jail and was barred from future work as a programmer. time sink n. [poss. by analogy with `heat sink' or `current sink'] A project that consumes unbounded amounts of time. time T /ti:m T/ n. 1. An unspecified but usually well-understood time, often used in conjunction with a later time T+1. "We'll meet on campus at time T or at Louie's at time T+1" means, in the context of going out for dinner: "We can meet on campus and go to Louie's, or we can meet at Louie's itself a bit later." (Louie's was a Chinese restaurant in Palo Alto that was a favorite with hackers.) Had the number 30 been used instead of the number 1, it would have implied that the travel time from campus to Louie's is 30 minutes; whatever time T is (and that hasn't been decided on yet), you can meet half an hour later at Louie's than you could on campus and end up eating at the same time. See also since time T equals minus infinity. times-or-divided-by quant. [by analogy with `plus-or-minus'] Term occasionally used when describing the uncertainty associated with a scheduling estimate, for either humorous or brutally honest effect. For a software project, the scheduling uncertainty factor is usually at least 2. TINC // [Usenet] Abbreviation: "There Is No Cabal". See backbone cabal and NANA, but note that this abbreviation did not enter use until long after the dispersal of the backbone cabal. Tinkerbell program n. [Great Britain] A monitoring program used to scan incoming network calls and generate alerts when calls are received from particular sites, or when logins are attempted using certain IDs. Named after `Project Tinkerbell', an experimental phone-tapping program developed by British Telecom in the early 1980s. TINLC // Abbreviation: "There Is No Lumber Cartel". See Lumber Cartel. TINLC is a takeoff on TINC. tip of the ice-cube n. // [IBM] The visible part of something small and insignificant. Used as an ironic comment in situations where `tip of the iceberg' might be appropriate if the subject were at all important. = tired iron n. [IBM] Hardware that is perfectly functional but far enough behind the state of the art to have been superseded by new products, presumably with sufficient improvement in bang-per-buck that the old stuff is starting to look a bit like a dinosaur. tits on a keyboard n. Small bumps on certain keycaps to keep touch-typists registered. Usually on the 5 of a numeric keypad, and on the F and J of a QWERTY keyboard; but older Macs, perverse as usual, had them on the D and K keys (this changed in 1999). TLA /T-L-A/ n. [Three-Letter Acronym] 1. Self-describing abbreviation for a species with which computing terminology is infested. 2. Any confusing acronym. Examples include MCA, FTP, SNA, CPU, MMU, SCCS, DMU, FPU, NNTP, TLA. People who like this looser usage argue that not all TLAs have three letters, just as not all four-letter words have four letters. One also hears of `ETLA' (Extended Three-Letter Acronym, pronounced /ee tee el ay/) being used to describe four-letter acronyms. The term `SFLA' (Stupid Four-Letter Acronym) has also been reported. See also YABA. The self-effacing phrase "TDM TLA" (Too Damn Many...) is often used to bemoan the plethora of TLAs in use. In 1989, a random of the journalistic persuasion asked hacker Paul Boutin "What do you think will be the biggest problem in computing in the 90s?" Paul's straight-faced response: "There are only 17,000 three-letter acronyms." (To be exact, there are 26^3 = 17,576.) There is probably some karmic justice in the fact that Paul Boutin subsequently became a journalist. (TM) // [Usenet] ASCII rendition of the trademark-superscript symbol appended to phrases that the author feels should be recorded for posterity, perhaps in future editions of this lexicon. Sometimes used ironically as a form of protest against the recent spate of software and algorithm patents and `look and feel' lawsuits. See also UN*X. TMRC /tmerk'/ n. The Tech Model Railroad Club at MIT, one of the wellsprings of hacker culture. The 1959 "Dictionary of the TMRC Language" compiled by Peter Samson included several terms that became basics of the hackish vocabulary (see esp. foo, mung, and frob). By 1962, TMRC's legendary layout was already a marvel of complexity and has grown in the years since. All the features described here were still present when the old layout was decomissioned in 1998 just before the demolition of MIT Building 20, and will almost certainly be retained when the old layout is rebuilt (expected in 2003). The control system alone featured about 1200 relays. There were scram switches located at numerous places around the room that could be thwacked if something undesirable was about to occur, such as a train going full-bore at an obstruction. Another feature of the system was a digital clock on the dispatch board, which was itself something of a wonder in those bygone days before cheap LEDs and seven-segment displays. When someone hit a scram switch the clock stopped and the display was replaced with the word `FOO'; at TMRC the scram switches are therefore called `foo switches'. Steven Levy, in his book "Hackers" (see the Bibliography in Appendix C), gives a stimulating account of those early years. TMRC's Signals and Power Committee included many of the early PDP-1 hackers and the people who later became the core of the MIT AI Lab staff. Thirty years later that connection is still very much alive, and this lexicon accordingly includes a number of entries from a recent revision of the TMRC dictionary. TMRC has a web page at http://web.mit.edu/tmrc/www/. TMRCie /tmerk'ee/, n. [MIT] A denizen of TMRC. TMTOWTDI /tim-toh'-dee/ There's More Than One Way To Do It. This abbreviation of the official motto of Perl is frequently used on newsgroups and mailing lists related to that language. to a first approximation adj. 1. [techspeak] When one is doing certain numerical computations, an approximate solution may be computed by any of several heuristic methods, then refined to a final value. By using the starting point of a first approximation of the answer, one can write an algorithm that converges more quickly to the correct result. 2. In jargon, a preface to any comment that indicates that the comment is only approximately true. The remark "To a first approximation, I feel good" might indicate that deeper questioning would reveal that not all is perfect (e.g., a nagging cough still remains after an illness). to a zeroth approximation [from `to a first approximation'] A really sloppy approximation; a wild guess. Compare social science number. toad vt. [MUD] 1. Notionally, to change a MUD player into a toad. 2. To permanently and totally exile a player from the MUD. A very serious action, which can only be done by a MUD wizard; often involves a lot of debate among the other characters first. See also frog, FOD. toast 1. n. Any completely inoperable system or component, esp. one that has just crashed and burned: "Uh, oh ... I think the serial board is toast." 2. vt. To cause a system to crash accidentally, especially in a manner that requires manual rebooting. "Rick just toasted the firewall machine again." Compare fried. = toaster n. 1. The archetypal really stupid application for an embedded microprocessor controller; often used in comments that imply that a scheme is inappropriate technology (but see elevator controller). "DWIM for an assembler? That'd be as silly as running Unix on your toaster!" 2. A very, very dumb computer. "You could run this program on any dumb toaster." See bitty box, Get a real computer!, toy, beige toaster. 3. A Macintosh, esp. the Classic Mac. Some hold that this is implied by sense 2. 4. A peripheral device. "I bought my box without toasters, but since then I've added two boards and a second disk drive." 5. A specialized computer used as an appliance. See web toaster, video toaster. = toeprint n. A footprint of especially small size. T = toggle vt. To change a bit from whatever state it is in to the other state; to change from 1 to 0 or from 0 to 1. This comes from `toggle switches', such as standard light switches, though the word `toggle' actually refers to the mechanism that keeps the switch in the position to which it is flipped rather than to the fact that the switch has two positions. There are four things you can do to a bit: set it (force it to be 1), clear (or zero) it, leave it alone, or toggle it. (Mathematically, one would say that there are four distinct boolean-valued functions of one boolean argument, but saying that is much less fun than talking about toggling bits.) = tool 1. n. A program used primarily to create, manipulate, modify, or analyze other programs, such as a compiler or an editor or a cross-referencing program. Oppose app, operating system. 2. [Unix] An application program with a simple, `transparent' (typically text-stream) interface designed specifically to be used in programmed combination with other tools (see filter, plumbing). 3. [MIT: general to students there] vi. To work; to study (connotes tedium). The TMRC Dictionary defined this as "to set one's brain to the grindstone". See hack. 4. n. [MIT] A student who studies too much and hacks too little. (MIT's student humor magazine rejoices in the name "Tool and Die".) toolsmith n. The software equivalent of a tool-and-die specialist; one who specializes in making the tools with which other programmers create applications. Many hackers consider this more fun than applications per se; to understand why, see uninteresting. Jon Bentley, in the "Bumper-Sticker Computer Science" chapter of his book "More Programming Pearls", quotes Dick Sites from DEC as saying "I'd rather write programs to write programs than write programs". toor n. The Bourne-Again Super-user. An alternate account with UID of 0, created on Unix machines where the root user has an inconvenient choice of shell. Compare avatar. = topic drift n. Term used on GEnie, Usenet and other electronic fora to describe the tendency of a thread to drift away from the original subject of discussion (and thus, from the Subject header of the originating message), or the results of that tendency. The header in each post can be changed to keep current with the posts, but usually isn't due to forgetfulness or laziness. A single post may often result in several posts each responding to a different point in the original. Some subthreads will actually be in response to some off-the-cuff side comment, possibly degenerating into a flame war, or just as often evolving into a separate discussion. Hence, discussions aren't really so much threads as they are trees. Except that they don't really have leaves, or multiple branching roots; usually some lines of discussion will just sort of die off after everyone gets tired of them. This could take anywhere from hours to weeks, or even longer. The term `topic drift' is often used in gentle reminders that the discussion has strayed off any useful track. "I think we started with a question about Niven's last book, but we've ended up discussing the sexual habits of the common marmoset. Now that's topic drift!" topic group n. Syn. forum. TOPS-10 /tops-ten/ n. DEC's proprietary OS for the fabled PDP-10 machines, long a favorite of hackers but now effectively extinct. A fountain of hacker folklore; see Appendix A. See also ITS, TOPS-20, TWENEX, VMS, operating system. TOPS-10 was sometimes called BOTS-10 (from `bottoms-ten') as a comment on the inappropriateness of describing it as the top of anything. = TOPS-20 /tops-twen'tee/ n. See TWENEX. tourist n. 1. [ITS] A guest on the system, especially one who generally logs in over a network from a remote location for comm mode, email, games, and other trivial purposes. One step below luser. ITS hackers often used to spell this turist, perhaps by some sort of tenuous analogy with luser (this usage may also have expressed the ITS culture's penchant for six-letterisms, and-or been some sort of tribute to Alan Turing). Compare twink, lurker, read-only user. 2. [IRC] An IRC user who goes from channel to channel without saying anything; see channel hopping. tourist information n. Information in an on-line display that is not immediately useful, but contributes to a viewer's gestalt of what's going on with the software or hardware behind it. Whether a given piece of info falls in this category depends partly on what the user is looking for at any given time. The `bytes free' information at the bottom of an MS-DOS dir display is tourist information; so (most of the time) is the TIME information in a Unix ps(1) display. touristic adj. Having the quality of a tourist. Often used as a pejorative, as in `losing touristic scum'. Often spelled `turistic' or `turistik', so that phrase might be more properly rendered `lusing turistic scum'. toy n. A computer system; always used with qualifiers. 1. `nice toy': One that supports the speaker's hacking style adequately. 2. `just a toy': A machine that yields insufficient computrons for the speaker's preferred uses. This is not condemnatory, as is bitty box; toys can at least be fun. It is also strongly conditioned by one's expectations; Cray XMP users sometimes consider the Cray-1 a `toy', and certainly all RISC boxes and mainframes are toys by their standards. See also Get a real computer!. toy language n. A language useful for instructional purposes or as a proof-of-concept for some aspect of computer-science theory, but inadequate for general-purpose programming. Bad Things can result when a toy language is promoted as a general purpose solution for programming (see bondage-and-discipline language); the classic example is Pascal. Several moderately well-known formalisms for conceptual tasks such as programming Turing machines also qualify as toy languages in a less negative sense. See also MFTL. toy problem n. [AI] A deliberately oversimplified case of a challenging problem used to investigate, prototype, or test algorithms for a real problem. Sometimes used pejoratively. See also gedanken, toy program. toy program n. 1. One that can be readily comprehended; hence, a trivial program (compare noddy). 2. One for which the effort of initial coding dominates the costs through its life cycle. See also noddy. trampoline n. An incredibly hairy technique, found in some HLL and program-overlay implementations (e.g., on the Macintosh), that involves on-the-fly generation of small executable (and, likely as not, self-modifying) code objects to do indirection between code sections. Under BSD and possibly in other Unixes, trampoline code is used to transfer control from the kernel back to user mode when a signal (which has had a handler installed) is sent to a process. hese pieces of live data are called `trampolines'. Trampolines are notoriously difficult to understand in action; in fact, it is said by those who use this term that the trampoline that doesn't bend your brain is not the true trampoline. See also snap. trap 1. n. A program interrupt, usually an interrupt caused by some exceptional situation in the user program. In most cases, the OS performs some action, then returns control to the program. 2. vi. To cause a trap. "These instructions trap to the monitor." Also used transitively to indicate the cause of the trap. "The monitor traps all input/output instructions." This term is associated with assembler programming (`interrupt' or `exception' is more common among HLL programmers) and appears to be fading into history among programmers as the role of assembler continues to shrink. However, it is still important to computer architects and systems hackers (see system, sense 1), who use it to distinguish deterministically repeatable exceptions from timing-dependent ones (such as I/O interrupts). trap door n. (alt. `trapdoor') 1. Syn. back door -- a Bad Thing. 2. [techspeak] A `trap-door function' is one which is easy to compute but very difficult to compute the inverse of. Such functions are Good Things with important applications in cryptography, specifically in the construction of public-key cryptosystems. trash vt. To destroy the contents of (said of a data structure). The most common of the family of near-synonyms including mung, mangle, and scribble. = trawl v. To sift through large volumes of data (e.g., Usenet postings, FTP archives, or the Jargon File) looking for something of interest. = tree-killer n. [Sun] 1. A printer. 2. A person who wastes paper. This epithet should be interpreted in a broad sense; `wasting paper' includes the production of spiffy but content-free documents. Thus, most suits are tree-killers. The negative loading of this term may reflect the epithet `tree-killer' applied by Treebeard the Ent to the Orcs in J.R.R. Tolkien's "Lord of the Rings" (see also elvish, elder days). treeware /tree'weir/ n. Printouts, books, and other information media made from pulped dead trees. Compare tree-killer, see documentation. T = trit /trit/ n. [by analogy with `bit'] One base-3 digit; the amount of information conveyed by a selection among one of three equally likely outcomes (see also bit). Trits arise, for example, in the context of a flag that should actually be able to assume three values -- such as yes, no, or unknown. Trits are sometimes jokingly called `3-state bits'. A trit may be semi-seriously referred to as `a bit and a half', although it is linearly equivalent to 1.5849625 bits (that is, log2(3) bits). trivial adj. 1. Too simple to bother detailing. 2. Not worth the speaker's time. 3. Complex, but solvable by methods so well known that anyone not utterly cretinous would have thought of them already. 4. Any problem one has already solved (some claim that hackish `trivial' usually evaluates to `I've seen it before'). Hackers' notions of triviality may be quite at variance with those of non-hackers. See nontrivial, uninteresting. The physicist Richard Feynman, who had the hacker nature to an amazing degree (see his essay "Los Alamos From Below" in "Surely You're Joking, Mr. Feynman!"), defined `trivial theorem' as "one that has already been proved". = troff /T'rof/ or /trof/ n. [Unix] The gray eminence of Unix text processing; a formatting and phototypesetting program, written originally in PDP-11 assembler and then in barely-structured early C by the late Joseph Ossanna, modeled after the earlier ROFF which was in turn modeled after the Multics and CTSS program RUNOFF by Jerome Saltzer (that name came from the expression "to run off a copy"). A companion program, nroff, formats output for terminals and line printers. In 1979, Brian Kernighan modified troff so that it could drive phototypesetters other than the Graphic Systems CAT. His paper describing that work ("A Typesetter-independent troff," AT&T CSTR #97) explains troff's durability. After discussing the program's "obvious deficiencies -- a rebarbative input syntax, mysterious and undocumented properties in some areas, and a voracious appetite for computer resources" and noting the ugliness and extreme hairiness of the code and internals, Kernighan concludes: None of these remarks should be taken as denigrating Ossanna's accomplishment with TROFF. It has proven a remarkably robust tool, taking unbelievable abuse from a variety of preprocessors and being forced into uses that were never conceived of in the original design, all with considerable grace under fire. The success of TeX and desktop publishing systems have reduced troff's relative importance, but this tribute perfectly captures the strengths that secured troff a place in hacker folklore; indeed, it could be taken more generally as an indication of those qualities of good programs that, in the long run, hackers most admire. troglodyte n. [Commodore] 1. A hacker who never leaves his cubicle. The term `gnoll' (from Dungeons & Dragons) is also reported. 2. A curmudgeon attached to an obsolescent computing environment. The combination `ITS troglodyte' was flung around some during the Usenet and email wringle-wrangle attending the 2.x.x revision of the Jargon File; at least one of the people it was intended to describe adopted it with pride. troglodyte mode n. [Rice University] Programming with the lights turned off, sunglasses on, and the terminal inverted (black on white) because you've been up for so many days straight that your eyes hurt (see raster burn). Loud music blaring from a stereo stacked in the corner is optional but recommended. See larval stage, hack mode. Trojan horse n. [coined by MIT-hacker-turned-NSA-spook Dan Edwards] A malicious, security-breaking program that is disguised as something benign, such as a directory lister, archiver, game, or (in one notorious 1990 case on the Mac) a program to find and destroy viruses! See back door, virus, worm, phage, mockingbird. troll v.,n. 1. [From the Usenet group _alt.folklore.urban_] To utter a posting on Usenet designed to attract predictable responses or flames; or, the post itself. Derives from the phrase "trolling for newbies" which in turn comes from mainstream "trolling", a style of fishing in which one trails bait through a likely spot hoping for a bite. The well-constructed troll is a post that induces lots of newbies and flamers to make themselves look even more clueless than they already do, while subtly conveying to the more savvy and experienced that it is in fact a deliberate troll. If you don't fall for the joke, you get to be in on it. See also YHBT. 2. An individual who chronically trolls in sense 1; regularly posts specious arguments, flames or personal attacks to a newsgroup, discussion list, or in email for no other purpose than to annoy someone or disrupt a discussion. Trolls are recognizable by the fact that the have no real interest in learning about the topic at hand - they simply want to utter flame bait. Like the ugly creatures they are named after, they exhibit no redeeming characteristics, and as such, they are recognized as a lower form of life on the net, as in, "Oh, ignore him, he's just a troll." 3. [Berkeley] Computer lab monitor. A popular campus job for CS students. Duties include helping newbies and ensuring that lab policies are followed. Probably so-called because it involves lurking in dark cavelike corners. Some people claim that the troll (sense 1) is properly a narrower category than flame bait, that a troll is categorized by containing some assertion that is wrong but not overtly controversial. See also Troll-O-Meter. The use of `troll' in either sense is a live metaphor that readily produces elaborations and combining forms. For example, one not infrequently sees the warning "Do not feed the troll" as part of a followup to troll postings. = Troll-O-Meter n. Common Usenet jargon for a notional instrument used to measure the quality of a Usenet troll. "Come on, everyone! If the above doesn't set off the Troll-O-Meter, we're going to have to get him to run around with a big blinking sign saying `I am a troll, I'm only in it for the controversy and flames' and shooting random gobs of Jell-O(tm) at us before the point is proven." Mentions of the Troll-O-Meter are often accompanied by an ASCII picture of an arrow pointing at a numeric scale. Compare bogometer. tron v. [NRL, CMU; prob. fr. the movie "Tron"] To become inaccessible except via email or talk(1), especially when one is normally available via telephone or in person. Frequently used in the past tense, as in: "Ran seems to have tronned on us this week" or "Gee, Ran, glad you were able to un-tron yourself". One may also speak of `tron mode'; compare spod. Note that many dialects of BASIC have a TRON/TROFF command pair that enables/disables line number tracing; this has no obvious relationship to the slang usage. true-hacker n. [analogy with `trufan' from SF fandom] One who exemplifies the primary values of hacker culture, esp. competence and helpfulness to other hackers. A high compliment. "He spent 6 hours helping me bring up UUCP and netnews on my FOOBAR 4000 last week -- manifestly the act of a true-hacker." Compare demigod, oppose munchkin. tty /T-T-Y/, /tit'ee/ n. The latter pronunciation was primarily ITS, but some Unix people say it this way as well; this pronunciation is not considered to have sexual undertones. 1. A terminal of the teletype variety, characterized by a noisy mechanical printer, a very limited character set, and poor print quality. Usage: antiquated (like the TTYs themselves). See also bit-paired keyboard. 2. [especially Unix] Any terminal at all; sometimes used to refer to the particular terminal controlling a given job. 3. [Unix] Any serial port, whether or not the device connected to it is a terminal; so called because under Unix such devices have names of the form tty*. Ambiguity between senses 2 and 3 is common but seldom bothersome. tube 1. n. A CRT terminal. Never used in the mainstream sense of TV; real hackers don't watch TV, except for Loony Toons, Rocky & Bullwinkle, Trek Classic, the Simpsons, and the occasional cheesy old swashbuckler movie. 2. [IBM] To send a copy of something to someone else's terminal. "Tube me that note?" tube time n. Time spent at a terminal or console. More inclusive than hacking time; commonly used in discussions of what parts of one's environment one uses most heavily. "I find I'm spending too much of my tube time reading mail since I started this revision." tunafish n. In hackish lore, refers to the mutated punchline of an age-old joke to be found at the bottom of the manual pages of tunefs(8) in the original BSD 4.2 distribution. The joke was removed in later releases once commercial sites started using 4.2, but apparently restored on the 4.4BSD tape and in {Net,Free,Open}BSD. Tunefs relates to the `tuning' of file-system parameters for optimum performance, and at the bottom of a few pages of wizardly inscriptions was a `BUGS' section consisting of the line "You can tune a file system, but you can't tunafish". Variants of this can be seen in other BSD versions, though it has been excised from some versions by humorless management droids. The [nt]roff source for SunOS 4.1.1 contains a comment apparently designed to prevent this: "Take this out and a Unix Demon will dog your steps from now until the time_t's wrap around." [It has since been pointed out that indeed you can tunafish. Usually at a canning factory... --ESR] T = tune vt. [from automotive or musical usage] To optimize a program or system for a particular environment, esp. by adjusting numerical parameters designed as hooks for tuning, e.g., by changing #define lines in C. One may `tune for time' (fastest execution), `tune for space' (least memory use), or `tune for configuration' (most efficient use of hardware). See bum, hot spot, hand-hacking. turbo nerd n. See computer geek. Turing tar-pit n. 1. A place where anything is possible but nothing of interest is practical. Alan Turing helped lay the foundations of computer science by showing that all machines and languages capable of expressing a certain very primitive set of operations are logically equivalent in the kinds of computations they can carry out, and in principle have capabilities that differ only in speed from those of the most powerful and elegantly designed computers. However, no machine or language exactly matching Turing's primitive set has ever been built (other than possibly as a classroom exercise), because it would be horribly slow and far too painful to use. A `Turing tar-pit' is any computer language or other tool that shares this property. That is, it's theoretically universal -- but in practice, the harder you struggle to get any real work done, the deeper its inadequacies suck you in. Compare bondage-and-discipline language. 2. The perennial holy wars over whether language A or B is the "most powerful". turist /too'rist/ n. Var. sp. of tourist, q.v. Also in adjectival form, `turistic'. Poss. influenced by luser and `Turing'. = Tux Tux the Penguin is the official emblem of Linux, This eventuated after a logo contest in 1996, during which Linus Torvalds endorsed the idea of a penguin logo in a couple of famously funny postings. Linus explained that he was once bitten by a killer penguin in Australia and has felt a special affinity for the species ever since. (Linus has since admitted that he was also thinking of Feathers McGraw, the evil-genius penguin jewel thief who appeared in a Wallace & Grommit feature cartoon, "The Wrong Trousers".) Larry Ewing designed the official Tux logo. It has proved a wise choice, amenable to hundreds of recognizable variations used as emblems of Linux-related projects, products, and user groups. In fact, Tux has spawned an entire mythology, of which the Gospel According to Tux and the mock-epic poem "Tuxowolf" are among the best-known examples. There is a `real' Tux - a black-footed penguin resident at the Bristol Zoo. Several friends of Linux bought a zoo sponsorship for Linus as a birthday present in 1996. tweak vt. 1. To change slightly, usually in reference to a value. Also used synonymously with twiddle. If a program is almost correct, rather than figure out the precise problem you might just keep tweaking it until it works. See frobnicate and fudge factor; also see shotgun debugging. 2. To tune or bum a program; preferred usage in the U.K. = tweeter n. [University of Waterloo] Syn. perf, chad (sense 1). This term (like woofer) has been in use at Waterloo since 1972 but is elsewhere unknown. In audio jargon, the word refers to the treble speaker(s) on a hi-fi. = TWENEX /twe'neks/ n. The TOPS-20 operating system by DEC -- the second proprietary OS for the PDP-10 -- preferred by most PDP-10 hackers over TOPS-10 (that is, by those who were not ITS or WAITS partisans). TOPS-20 began in 1969 as Bolt, Beranek & Newman's TENEX operating system using special paging hardware. By the early 1970s, almost all of the systems on the ARPANET ran TENEX. DEC purchased the rights to TENEX from BBN and began work to make it their own. The first in-house code name for the operating system was VIROS (VIRtual memory Operating System); when customers started asking questions, the name was changed to SNARK so DEC could truthfully deny that there was any project called VIROS. When the name SNARK became known, the name was briefly reversed to become KRANS; this was quickly abandoned when someone objected that `krans' meant `funeral wreath' in Swedish (though some Swedish speakers have since said it means simply `wreath'; this part of the story may be apocryphal). Ultimately DEC picked TOPS-20 as the name of the operating system, and it was as TOPS-20 that it was marketed. The hacker community, mindful of its origins, quickly dubbed it TWENEX (a contraction of `twenty TENEX'), even though by this point very little of the original TENEX code remained (analogously to the differences between AT&T V6 Unix and BSD). DEC people cringed when they heard "TWENEX", but the term caught on nevertheless (the written abbreviation `20x' was also used). TWENEX was successful and very popular; in fact, there was a period in the early 1980s when it commanded as fervent a culture of partisans as Unix or ITS -- but DEC's decision to scrap all the internal rivals to the VAX architecture and its relatively stodgy VMS OS killed the DEC-20 and put a sad end to TWENEX's brief day in the sun. DEC attempted to convince TOPS-20 users to convert to VMS, but instead, by the late 1980s, most of the TOPS-20 hackers had migrated to Unix. T = twiddle n. 1. Tilde (ASCII 1111110, ~). Also called `squiggle', `sqiggle' (sic -- pronounced /skig'l/), and `twaddle', but twiddle is the most common term. 2. A small and insignificant change to a program. Usually fixes one bug and generates several new ones (see also shotgun debugging). 3. vt. To change something in a small way. Bits, for example, are often twiddled. Twiddling a switch or knobs implies much less sense of purpose than toggling or tweaking it; see frobnicate. To speak of twiddling a bit connotes aimlessness, and at best doesn't specify what you're doing to the bit; `toggling a bit' has a more specific meaning (see bit twiddling, toggle). 4. Uncommon name for the twirling baton prompt. = twilight zone n. // [IRC] Notionally, the area of cyberspace where IRC operators live. An op is said to have a "connection to the twilight zone". twink /twink/ n. 1. [Berkeley] A clue-repellant user; the next step beyond a clueless one. 2. [UCSC] A read-only user. Also reported on the Usenet group _soc.motss_; may derive from gay slang for a cute young thing with nothing upstairs (compare mainstream `chick'). = twirling baton n. [PLATO] The overstrike sequence -/|\-/|\- which produces an animated twirling baton. If you output it with a single backspace between characters, the baton spins in place. If you output the sequence BS SP between characters, the baton spins from left to right. If you output BS SP BS BS between characters, the baton spins from right to left. This is also occasionally called a twiddle prompt. The twirling baton was a popular component of animated signature files on the pioneering PLATO educational timesharing system. The archie Internet service is perhaps the best-known baton program today; it uses the twirling baton as an idler indicating that the program is working on a query. The twirling baton is also used as a boot progress indicator on several BSD variants of Unix; if it stops you're probably going to have a long and trying day. two pi quant. The number of years it takes to finish one's thesis. Occurs in stories in the following form: "He started on his thesis; 2 pi years later..." = two-to-the-N quant. An amount much larger than N but smaller than infinity. "I have 2-to-the-N things to do before I can go out for lunch" means you probably won't show up. twonkie /twon'kee/ n. The software equivalent of a Twinkie (a variety of sugar-loaded junk food, or (in gay slang with a small t) the male equivalent of `chick'); a useless `feature' added to look sexy and placate a marketroid (compare Saturday-night special). The term may also be related to "The Twonky", title menace of a classic SF short story by Lewis Padgett (Henry Kuttner and C. L. Moore), first published in the September 1942 "Astounding Science Fiction" and subsequently much anthologized. = U = u-: UBD: UBE: UCE: UDP: UN*X: undefined external reference: under the hood: undocumented feature: uninteresting: Unix: Unix brain damage: Unix conspiracy: Unix weenie: unixism: unswizzle: unwind the stack: unwind-protect: up: upload: upthread: urchin: URL: Usenet: Usenet Death Penalty: user: user-friendly: user-obsequious: userland: USG Unix: UTSL: UUCPNET: u- pref. Written shorthand for micro-; techspeak when applied to metric units, jargon when used otherwise. Derived from the Greek letter "mu", the first letter of "micro" (and which letter looks a lot like the English letter "u"). UBD /U-B-D/ n. [abbreviation for `User Brain Damage'] An abbreviation used to close out trouble reports obviously due to utter cluelessness on the user's part. Compare pilot error; oppose PBD; see also brain-damaged. UBE // n. [abbrev., Unsoliclited Bulk Email] A widespread, more formal term for email spam. Compare UCE. The UBE term recognizes that spam is uttered by nonprofit and advocacy groups whose motives are not commercial. UCE n. [abbrev., Unsolicited Commercial Email] A widespread, more formal term for email spam. Compare UBE, which may be superseding it. UDP /U-D-P/ v.,n. [Usenet] Abbreviation for Usenet Death Penalty. Common (probably now more so than the full form), and frequently verbed. Compare IDP. UN*X n. Used to refer to the Unix operating system (a trademark of AT&T, then of Novell, then of SCO, and then of Caldera) in writing, but avoiding the need for the ugly (TM) typography. Also used to refer to any or all varieties of Unixoid operating systems. Ironically, lawyers now say that the requirement for the trademark postfix has no legal force, but the asterisk usage is entrenched anyhow. It has been suggested that there may be a psychological connection to practice in certain religions (especially Judaism) in which the name of the deity is never written out in full, e.g., `YHWH' or `G-d' is used. See also glob and splat out. undefined external reference excl. [Unix] A message from Unix's linker. Used in speech to flag loose ends or dangling references in an argument or discussion. under the hood adj. [hot-rodder talk] 1. Used to introduce the underlying implementation of a product (hardware, software, or idea). Implies that the implementation is not intuitively obvious from the appearance, but the speaker is about to enable the listener to grok it. "Let's now look under the hood to see how ...." 2. Can also imply that the implementation is much simpler than the appearance would indicate: "Under the hood, we are just fork/execing the shell." 3. Inside a chassis, as in "Under the hood, this baby has a 40MHz 68030!" undocumented feature n. See feature. uninteresting adj. 1. Said of a problem that, although nontrivial, can be solved simply by throwing sufficient resources at it. 2. Also said of problems for which a solution would neither advance the state of the art nor be fun to design and code. Hackers regard uninteresting problems as intolerable wastes of time, to be solved (if at all) by lesser mortals. Real hackers (see toolsmith) generalize uninteresting problems enough to make them interesting and solve them -- thus solving the original problem as a special case (and, it must be admitted, occasionally turning a molehill into a mountain, or a mountain into a tectonic plate). See WOMBAT, SMOP; compare toy problem, oppose interesting. Unix /yoo'niks/ n. [In the authors' words, "A weak pun on Multics"; very early on it was `UNICS'] (also `UNIX') An interactive time-sharing system invented in 1969 by Ken Thompson after Bell Labs left the Multics project, originally so he could play games on his scavenged PDP-7. Dennis Ritchie, the inventor of C, is considered a co-author of the system. The turning point in Unix's history came when it was reimplemented almost entirely in C during 1972-1974, making it the first source-portable OS. Unix subsequently underwent mutations and expansions at the hands of many different people, resulting in a uniquely flexible and developer-friendly environment. By 1991, Unix had become the most widely used multiuser general-purpose operating system in the world - and since 1996 the variiant called Linux has been at the cutting edge of the open source movement. Many people consider the success of Unix the most important victory yet of hackerdom over industry opposition (but see Unix weenie and Unix conspiracy for an opposing point of view). See Version 7, BSD, USG Unix, Linux. Some people are confused over whether this word is appropriately `UNIX' or `Unix'; both forms are common, and used interchangeably. Dennis Ritchie says that the `UNIX' spelling originally happened in CACM's 1974 paper "The UNIX Time-Sharing System" because "we had a new typesetter and troff had just been invented and we were intoxicated by being able to produce small caps." Later, dmr tried to get the spelling changed to `Unix' in a couple of Bell Labs papers, on the grounds that the word is not acronymic. He failed, and eventually (his words) "wimped out" on the issue. So, while the trademark today is `UNIX', both capitalizations are grounded in ancient usage; the Jargon File uses `Unix' in deference to dmr's wishes. Unix brain damage n. Something that has to be done to break a network program (typically a mailer) on a non-Unix system so that it will interoperate with Unix systems. The hack may qualify as `Unix brain damage' if the program conforms to published standards and the Unix program in question does not. Unix brain damage happens because it is much easier for other (minority) systems to change their ways to match non-conforming behavior than it is to change all the hundreds of thousands of Unix systems out there. An example of Unix brain damage is a kluge in a mail server to recognize bare line feed (the Unix newline) as an equivalent form to the Internet standard newline, which is a carriage return followed by a line feed. Such things can make even a hardened jock weep. Unix conspiracy n. [ITS] According to a conspiracy theory long popular among ITS and TOPS-20 fans, Unix's growth is the result of a plot, hatched during the 1970s at Bell Labs, whose intent was to hobble AT&T's competitors by making them dependent upon a system whose future evolution was to be under AT&T's control. This would be accomplished by disseminating an operating system that is apparently inexpensive and easily portable, but also relatively unreliable and insecure (so as to require continuing upgrades from AT&T). This theory was lent a substantial impetus in 1984 by the paper referenced in the back door entry. In this view, Unix was designed to be one of the first computer viruses (see virus) -- but a virus spread to computers indirectly by people and market forces, rather than directly through disks and networks. Adherents of this `Unix virus' theory like to cite the fact that the well-known quotation "Unix is snake oil" was uttered by DEC president Kenneth Olsen shortly before DEC began actively promoting its own family of Unix workstations. (Olsen now claims to have been misquoted.) [If there was ever such a conspiracy, it got thoroughly out of the plotters' control after 1990. AT&T sold its UNIX operation to Novell around the same time Linux and other free-UNIX distributions were beginning to make noise. --ESR] Unix weenie n. [ITS] 1. A derogatory play on `Unix wizard', common among hackers who use Unix by necessity but would prefer alternatives. The implication is that although the person in question may consider mastery of Unix arcana to be a wizardly skill, the only real skill involved is the ability to tolerate (and the bad taste to wallow in) the incoherence and needless complexity that is alleged to infest many Unix programs. "This shell script tries to parse its arguments in 69 bletcherous ways. It must have been written by a real Unix weenie." 2. A derogatory term for anyone who engages in uncritical praise of Unix. Often appearing in the context "stupid Unix weenie". See Weenix, Unix conspiracy. See also weenie. unixism n. A piece of code or a coding technique that depends on the protected multi-tasking environment with relatively low process-spawn overhead that exists on virtual-memory Unix systems. Common unixisms include: gratuitous use of fork(2); the assumption that certain undocumented but well-known features of Unix libraries such as stdio(3) are supported elsewhere; reliance on obscure side-effects of system calls (use of sleep(2) with a 0 argument to clue the scheduler that you're willing to give up your time-slice, for example); the assumption that freshly allocated memory is zeroed; and the assumption that fragmentation problems won't arise from never free()ing memory. Compare vaxocentrism; see also New Jersey. unswizzle v. See swizzle. unwind the stack vi. 1. [techspeak] During the execution of a procedural language, one is said to `unwind the stack' from a called procedure up to a caller when one discards the stack frame and any number of frames above it, popping back up to the level of the given caller. In C this is done with longjmp/setjmp, in LISP or C++ with throw/catch. See also smash the stack. 2. People can unwind the stack as well, by quickly dealing with a bunch of problems: "Oh heck, let's do lunch. Just a second while I unwind my stack." unwind-protect n. [MIT: from the name of a LISP operator] A task you must remember to perform before you leave a place or finish a project. "I have an unwind-protect to call my advisor." up adj. 1. Working, in order. "The down escalator is up." Oppose down. 2. `bring up': vt. To create a working version and start it. "They brought up a down system." 3. `come up' vi. To become ready for production use. upload /uhp'lohd/ v. 1. [techspeak] To transfer programs or data over a digital communications link from a system near you (espercially a smaller or peripheral `client' system) to one further away from you (especially a larger or central `host' system). A transfer in the other direction is, of course, called a download 2. [speculatively] To move the essential patterns and algorithms that make up one's mind from one's brain into a computer. Those who are convinced that such patterns and algorithms capture the complete essence of the self view this prospect with pleasant anticipation. = upthread adv. Earlier in the discussion (see thread), i.e., `above'. "As Joe pointed out upthread, ..." See also followup. U = urchin n. See munchkin. = URL /U-R-L/ or /erl/ n. Uniform Resource Locator, an address widget that identifies a document or resource on the World Wide Web. This entry is here primarily to record the fact that the term is commonly pronounced both /erl/, and /U-R-L/ (the latter predominates in more formal contexts). Usenet /yoos'net/ or /yooz'net/ n. [from `Users' Network'; the original spelling was USENET, but the mixed-case form is now widely preferred] A distributed bboard (bulletin board) system supported mainly by Unix machines. Originally implemented in 1979-1980 by Steve Bellovin, Jim Ellis, Tom Truscott, and Steve Daniel at Duke University, it has swiftly grown to become international in scope and is now probably the largest decentralized information utility in existence. As of early 1996, it hosts over 10,000 newsgroups and an average of over 500 megabytes (the equivalent of several thousand paper pages) of new technical articles, news, discussion, chatter, and flamage every day (and that leaves out the graphics...). By the year the Internet hit the mainstream (1994) the original UUCP transport for Usenet was fading out of use (see UUCPNET) - almost all Usenet connections were over Internet links. A lot of newbies and journalists began to refer to "Internet newsgroups" as though Usenet was and always had been just another Internet service. This ignorance greatly annoys experienced Usenetters. Usenet Death Penalty [Usenet] A sanction against sites that habitually spew Usenet spam. This can be either passive or active. A passive UDP refers to the dropping of all postings by a particular domain so as to inhibit propagation. An active UDP refers to third-party cancellation of all postings by the UDPed domain. A partial UDP is one which applies only to certain newsgroups or hierarchies in Usenet. Compare Internet Death Penalty, with which this term is sometimes confused. user n. 1. Someone doing `real work' with the computer, using it as a means rather than an end. Someone who pays to use a computer. See real user. 2. A programmer who will believe anything you tell him. One who asks silly questions. [GLS observes: This is slightly unfair. It is true that users ask questions (of necessity). Sometimes they are thoughtful or deep. Very often they are annoying or downright stupid, apparently because the user failed to think for two seconds or look in the documentation before bothering the maintainer.] See luser. 3. Someone who uses a program from the outside, however skillfully, without getting into the internals of the program. One who reports bugs instead of just going ahead and fixing them. The general theory behind this term is that there are two classes of people who work with a program: there are implementors (hackers) and lusers. The users are looked down on by hackers to some extent because they don't understand the full ramifications of the system in all its glory. (The few users who do are known as `real winners'.) The term is a relative one: a skilled hacker may be a user with respect to some program he himself does not hack. A LISP hacker might be one who maintains LISP or one who uses LISP (but with the skill of a hacker). A LISP user is one who uses LISP, whether skillfully or not. Thus there is some overlap between the two terms; the subtle distinctions must be resolved by context. user-friendly adj. Programmer-hostile. Generally used by hackers in a critical tone, to describe systems that hold the user's hand so obsessively that they make it painful for the more experienced and knowledgeable to get any work done. See menuitis, drool-proof paper, Macintrash, user-obsequious. user-obsequious adj. Emphatic form of user-friendly. Connotes a system so verbose, inflexible, and determinedly simple-minded that it is nearly unusable. "Design a system any fool can use and only a fool will want to use it." See WIMP environment, Macintrash. userland n. Anywhere outside the kernel. "That code belongs in userland." This term has been in common use among Linux kernel hackers since at leat 1997, and seems to have originated in that community. U = USG Unix /U-S-G yoo'niks/ n.,obs. Refers to AT&T Unix commercial versions after Version 7, especially System III and System V releases 1, 2, and 3. So called because during most of the lifespan of those versions AT&T's support crew was called the `Unix Support Group', but it is applied to version that pre- and post-dated the USG group but were of the same lineage. This term is now historical. See BSD, Unix. UTSL // n. [Unix] On-line acronym for `Use the Source, Luke' (a pun on Obi-Wan Kenobi's "Use the Force, Luke!" in "Star Wars") -- analogous to RTFS (sense 1), but more polite. This is a common way of suggesting that someone would be better off reading the source code that supports whatever feature is causing confusion, rather than making yet another futile pass through the manuals, or broadcasting questions on Usenet that haven't attracted wizards to answer them. Once upon a time in elder days, everyone running Unix had source. After 1978, AT&T's policy tightened up, so this objurgation was in theory appropriately directed only at associates of some outfit with a Unix source license. In practice, bootlegs of Unix source code (made precisely for reference purposes) were so ubiquitous that one could utter it at almost anyone on the network without concern. Nowadays, free Unix clones have become widely enough distributed that anyone can read source legally. The most widely distributed is certainly Linux, with variants of the NET/2 and 4.4BSD distributions running second. Cheap commercial Unixes with source such as BSD/OS are accelerating this trend. UUCPNET n. obs. The store-and-forward network consisting of all the world's connected Unix machines (and others running some clone of the UUCP (Unix-to-Unix CoPy) software). Any machine reachable only via a bang path is on UUCPNET. This term has been rendered obsolescent by the spread of cheap Internet connections in the 1990s; the few remaining UUCP links are essentially slow channels to the Internet rather than an autonomous network. See network address. = V = V7: vadding: vanilla: vanity domain: vannevar: vaporware: var: vaston: VAX: VAXectomy: VAXen: vaxherd: vaxism: vaxocentrism: vdiff: veeblefester: velveeta: ventilator card: Venus flytrap: verbage: verbiage: Version 7: vgrep: vi: video toaster: videotex: virgin: virtual: virtual beer: virtual Friday: virtual reality: virtual shredder: virus: visionary: VMS: voice: voice-net: voodoo programming: VR: Vulcan nerve pinch: vulture capitalist: = V7 /V'sev'en/ n. See Version 7. vadding /vad'ing/ n. [from VAD, a permutation of ADV (i.e., ADVENT), used to avoid a particular admin's continual search-and-destroy sweeps for the game] A leisure-time activity of certain hackers involving the covert exploration of the `secret' parts of large buildings -- basements, roofs, freight elevators, maintenance crawlways, steam tunnels, and the like. A few go so far as to learn locksmithing in order to synthesize vadding keys. The verb is `to vad' (compare phreaking; see also hack, sense 9). This term dates from the late 1970s, before which such activity was simply called `hacking'; the older usage is still prevalent at MIT. The most extreme and dangerous form of vadding is `elevator rodeo', a.k.a. `elevator surfing', a sport played by wrasslin' down a thousand-pound elevator car with a 3-foot piece of string, and then exploiting this mastery in various stimulating ways (such as elevator hopping, shaft exploration, rat-racing, and the ever-popular drop experiments). Kids, don't try this at home! See also hobbit (sense 2). vanilla adj. [from the default flavor of ice cream in the U.S.] Ordinary flavor, standard. When used of food, very often does not mean that the food is flavored with vanilla extract! For example, `vanilla wonton soup' means ordinary wonton soup, as opposed to hot-and-sour wonton soup. Applied to hardware and software, as in "Vanilla Version 7 Unix can't run on a vanilla 11/34." Also used to orthogonalize chip nomenclature; for instance, a 74V00 means what TI calls a 7400, as distinct from a 74LS00, etc. This word differs from canonical in that the latter means `default', whereas vanilla simply means `ordinary'. For example, when hackers go on a great-wall, hot-and-sour soup is the canonical soup to get (because that is what most of them usually order) even though it isn't the vanilla (wonton) soup. vanity domain n. [common; from `vanity plate' as in car license plate] An Internet domain, particularly in the .com or .org top-level domains, apparently created for no reason other than boosting the creator's ego. vannevar /van'*-var/ n. A bogus technological prediction or a foredoomed engineering concept, esp. one that fails by implicitly assuming that technologies develop linearly, incrementally, and in isolation from one another when in fact the learning curve tends to be highly nonlinear, revolutions are common, and competition is the rule. The prototype was Vannevar Bush's prediction of `electronic brains' the size of the Empire State Building with a Niagara-Falls-equivalent cooling system for their tubes and relays, a prediction made at a time when the semiconductor effect had already been demonstrated. Other famous vannevars have included magnetic-bubble memory, LISP machines, videotex, and a paper from the late 1970s that computed a purported ultimate limit on areal density for ICs that was in fact less than the routine densities of 5 years later. V = vaporware /vay'pr-weir/ n. Products announced far in advance of any release (which may or may not actually take place). See also brochureware. var /veir/ or /var/ n. Short for `variable'. Compare arg, param. vaston n. [Durham, UK] The unit of `load average'. A measure of how much work a computer is doing. A meter displaying this as a function of time is known as a `vastometer'. First used during a computing practical in December 1996. = VAX /vaks/ n. 1. [from Virtual Address eXtension] The most successful minicomputer design in industry history, possibly excepting its immediate ancestor, the PDP-11. Between its release in 1978 and its eclipse by killer micros after about 1986, the VAX was probably the hacker's favorite machine of them all, esp. after the 1982 release of 4.2 BSD Unix (see BSD). Esp. noted for its large, assembler-programmer-friendly instruction set -- an asset that became a liability after the RISC revolution. 2. A major brand of vacuum cleaner in Britain. Cited here because its sales pitch, "Nothing sucks like a VAX!" became a sort of battle-cry of RISC partisans. It is even sometimes claimed that DEC actually entered a cross-licensing deal with the vacuum-Vax people that allowed them to market VAX computers in the U.K. in return for not challenging the vacuum cleaner trademark in the U.S. A rival brand actually pioneered the slogan: its original form was "Nothing sucks like Electrolux". It has apparently become a classic example (used in advertising textbooks) of the perils of not knowing the local idiom. But in 1996, the press manager of Electrolux AB, while confirming that the company used this slogan in the late 1960s, also tells us that their marketing people were fully aware of the possible double entendre and intended it to gain attention. And gain attention it did - the VAX-vacuum-cleaner people thought the slogan a sufficiently good idea to copy it. Several British hackers report that VAX's promotions used it in 1986-1987, and we have one report from a New Zealander that the infamous slogan surfaced there in TV ads for the product in 1992. VAXectomy /vak-sek't*-mee/ n. [by analogy with `vasectomy'] A VAX removal. DEC's Microvaxen, especially, are much slower than newer RISC-based workstations such as the SPARC. Thus, if one knows one has a replacement coming, VAX removal can be cause for celebration. VAXen /vak'sn/ n. [from `oxen', perhaps influenced by `vixen'] (alt. `vaxen') The plural canonically used among hackers for the DEC VAX computers. "Our installation has four PDP-10s and twenty vaxen." See boxen. = vaxherd /vaks'herd/ n. obs. [from `oxherd'] A VAX operator. The image is reinforced because VAXen actually did tend to come in herds, technically known as `clusters'. vaxism /vak'sizm/ n. A piece of code that exhibits vaxocentrism in critical areas. Compare PC-ism, unixism. = vaxocentrism /vak`soh-sen'trizm/ n. [analogy with `ethnocentrism'] A notional disease said to afflict C programmers who persist in coding according to certain assumptions that are valid (esp. under Unix) on VAXen but false elsewhere. Among these are: The assumption that dereferencing a null pointer is safe because it is all bits 0, and location 0 is readable and 0. Problem: this may instead cause an illegal-address trap on non-VAXen, and even on VAXen under OSes other than BSD Unix. Usually this is an implicit assumption of sloppy code (forgetting to check the pointer before using it), rather than deliberate exploitation of a misfeature. The assumption that characters are signed. The assumption that a pointer to any one type can freely be cast into a pointer to any other type. A stronger form of this is the assumption that all pointers are the same size and format, which means you don't have to worry about getting the casts or types correct in calls. Problem: this fails on word-oriented machines or others with multiple pointer formats. The assumption that the parameters of a routine are stored in memory, on a stack, contiguously, and in strictly ascending or descending order. Problem: this fails on many RISC architectures. The assumption that pointer and integer types are the same size, and that pointers can be stuffed into integer variables (and vice-versa) and drawn back out without being truncated or mangled. Problem: this fails on segmented architectures or word-oriented machines with funny pointer formats. The assumption that a data type of any size may begin at any byte address in memory (for example, that you can freely construct and dereference a pointer to a word- or greater-sized object at an odd char address). Problem: this fails on many (esp. RISC) architectures better optimized for HLL execution speed, and can cause an illegal address fault or bus error. The (related) assumption that there is no padding at the end of types and that in an array you can thus step right from the last byte of a previous component to the first byte of the next one. This is not only machine- but compiler-dependent. The assumption that memory address space is globally flat and that the array reference foo[-1] is necessarily valid. Problem: this fails at 0, or other places on segment-addressed machines like Intel chips (yes, segmentation is universally considered a brain-damaged way to design machines (see moby), but that is a separate issue). The assumption that objects can be arbitrarily large with no special considerations. Problem: this fails on segmented architectures and under non-virtual-addressing environments. The assumption that the stack can be as large as memory. Problem: this fails on segmented architectures or almost anything else without virtual addressing and a paged stack. The assumption that bits and addressable units within an object are ordered in the same way and that this order is a constant of nature. Problem: this fails on big-endian machines. The assumption that it is meaningful to compare pointers to different objects not located within the same array, or to objects of different types. Problem: the former fails on segmented architectures, the latter on word-oriented machines or others with multiple pointer formats. The assumption that an int is 32 bits, or (nearly equivalently) the assumption that sizeof(int) == sizeof(long). Problem: this fails on PDP-11s, 286-based systems and even on 386 and 68000 systems under some compilers (and on 64-bit systems like the Alpha, of course). The assumption that argv[] is writable. Problem: this fails in many embedded-systems C environments and even under a few flavors of Unix. Note that a programmer can validly be accused of vaxocentrism even if he or she has never seen a VAX. Some of these assumptions (esp. 2-5) were valid on the PDP-11, the original C machine, and became endemic years before the VAX. The terms `vaxocentricity' and `all-the-world's-a-VAX syndrome' have been used synonymously. vdiff /vee'dif/ v.,n. Visual diff. The operation of finding differences between two files by eyeball search. The term `optical diff' has also been reported, and is sometimes more specifically used for the act of superimposing two nearly identical printouts on one another and holding them up to a light to spot differences. Though this method is poor for detecting omissions in the `rear' file, it can also be used with printouts of graphics, a claim few if any diff programs can make. See diff. = veeblefester /vee'b*l-fes`tr/ n. [from the "Born Loser" comix via Commodore; prob. originally from "Mad" Magazine's `Veeblefetzer' parodies beginning in #15, 1954] Any obnoxious person engaged in the (alleged) professions of marketing or management. Antonym of hacker. Compare suit, marketroid. velveeta n. [Usenet: by analogy with spam. The trade name Velveeta is attached in the U.S. to a particularly nasty processed-cheese spread.] Also knows as ECP; a message that is excessively cross-posted, as opposed to spam which is too frequently posted. This term is widely recognized but not commonly used; most people refer to both kinds of abuse as spam. Compare jello. ventilator card n. Syn. lace card. Venus flytrap n. [after the insect-eating plant] See firewall machine. verbage /ver'b*j/ n. A deliberate misspelling and mispronunciation of verbiage that assimilates it to the word `garbage'. Compare content-free. More pejorative than `verbiage'. = verbiage n. When the context involves a software or hardware system, this refers to documentation. This term borrows the connotations of mainstream `verbiage' to suggest that the documentation is of marginal utility and that the motives behind its production have little to do with the ostensible subject. V = Version 7 alt. V7 /vee' se'vn/ n. The first widely distributed version of Unix, released unsupported by Bell Labs in 1978. The term is used adjectivally to describe Unix features and programs that date from that release, and are thus guaranteed to be present and portable in all Unix versions (this was the standard gauge of portability before the POSIX and IEEE 1003 standards). Note that this usage does not derive from the release being the "seventh version of Unix"; research Unix at Bell Labs has traditionally been numbered according to the edition of the associated documentation. Indeed, only the widely-distributed Sixth and Seventh Editions are widely known as V[67]; the OS that might today be known as `V10' is instead known in full as "Tenth Edition Research Unix" or just "Tenth Edition" for short. For this reason, "V7" is often read by cognoscenti as "Seventh Edition". See BSD, USG Unix, Unix. Some old-timers impatient with commercialization and kernel bloat still maintain that V7 was the Last True Unix. vgrep /vee'grep/ v.,n. Visual grep. The operation of finding patterns in a file optically rather than digitally (also called an `optical grep'). See grep; compare vdiff. = vi /V-I/, not /vi:/ and never /siks/ n. [from `Visual Interface'] A screen editor crufted together by Bill Joy for an early BSD release. Became the _de facto_ standard Unix editor and a nearly undisputed hacker favorite outside of MIT until the rise of EMACS after about 1984. Tends to frustrate new users no end, as it will neither take commands while expecting input text nor vice versa, and the default setup on older versions provides no indication of which mode the editor is in (years ago, a correspondent reported that he has often heard the editor's name pronounced /vi:l/; there is now a vi clone named `vile'). Nevertheless vi (and variants such as vim and elvis) is still widely used (about half the respondents in a 1991 Usenet poll preferred it), and even EMACS fans often resort to it as a mail editor and for small editing jobs (mainly because it starts up faster than the bulkier versions of EMACS). See holy wars. video toaster n. Historically, an Amiga fitted with a particular line of special video effects hardware from NewTek - long a popular platform at special-effects and video production houses. More generally, any computer system designed specifically for video production and manipulation. Compare web toaster and see toaster. videotex n. obs. An electronic service offering people the privilege of paying to read the weather on their television screens instead of having somebody read it to them for free while they brush their teeth. The idea bombed everywhere it wasn't government-subsidized, because by the time videotex was practical the installed base of personal computers could hook up to timesharing services and do the things for which videotex might have been worthwhile better and cheaper. Videotex planners badly overestimated both the appeal of getting information from a computer and the cost of local intelligence at the user's end. Like the gorilla arm effect, this has been a cautionary tale to hackers ever since. See also vannevar. V = virgin adj. Unused; pristine; in a known initial state. "Let's bring up a virgin system and see if it crashes again." (Esp. useful after contracting a virus through SEX.) Also, by extension, buffers and the like within a program that have not yet been used. V = virtual adj. [via the technical term `virtual memory', prob. from the term `virtual image' in optics] 1. Common alternative to logical; often used to refer to the artificial objects (like addressable virtual memory larger than physical memory) simulated by a computer system as a convenient way to manage access to shared resources. 2. Simulated; performing the functions of something that isn't really there. An imaginative child's doll may be a virtual playmate. Oppose real. virtual beer n. Praise or thanks. Used universally in the Linux community. Originally this term signified cash, after a famous incident in which some some Britishers who wanted to buy Linus a beer and sent him money to Finland to do so. virtual Friday n. (also `logical Friday') The last day before an extended weekend, if that day is not a `real' Friday. For example, the U.S. holiday Thanksgiving is always on a Thursday. The next day is often also a holiday or taken as an extra day off, in which case Wednesday of that week is a virtual Friday (and Thursday is a virtual Saturday, as is Friday). There are also `virtual Mondays' that are actually Tuesdays, after the three-day weekends associated with many national holidays in the U.S. virtual reality n. 1. Computer simulations that use 3-D graphics and devices such as the Dataglove to allow the user to interact with the simulation. See cyberspace. 2. A form of network interaction incorporating aspects of role-playing games, interactive theater, improvisational comedy, and `true confessions' magazines. In a virtual reality forum (such as Usenet's _alt.callahans_ newsgroup or the MUD experiments on Internet), interaction between the participants is written like a shared novel complete with scenery, `foreground characters' that may be personae utterly unlike the people who write them, and common `background characters' manipulable by all parties. The one iron law is that you may not write irreversible changes to a character without the consent of the person who `owns' it. Otherwise anything goes. See bamf, cyberspace, teledildonics. virtual shredder n. The jargonic equivalent of the bit bucket at shops using IBM's VM/CMS operating system. VM/CMS officially supports a whole bestiary of virtual card readers, virtual printers, and other phantom devices; these are used to supply some of the same capabilities Unix gets from pipes and I/O redirection. virus n. [from the obvious analogy with biological viruses, via SF] A cracker program that searches out other programs and `infects' them by embedding a copy of itself in them, so that they become Trojan horses. When these programs are executed, the embedded virus is executed too, thus propagating the `infection'. This normally happens invisibly to the user. Unlike a worm, a virus cannot infect other computers without assistance. It is propagated by vectors such as humans trading programs with their friends (see SEX). The virus may do nothing but propagate itself and then allow the program to run normally. Usually, however, after propagating silently for a while, it starts doing things like writing cute messages on the terminal or playing strange tricks with the display (some viruses include nice display hacks). Many nasty viruses, written by particularly perversely minded crackers, do irreversible damage, like nuking all the user's files. In the 1990s, viruses became a serious problem, especially among Windows users; the lack of security on these machines enables viruses to spread easily, even infecting the operating system (Unix machines, by contrast, are immune to such attacks). The production of special anti-virus software has become an industry, and a number of exaggerated media reports have caused outbreaks of near hysteria among users; many lusers tend to blame everything that doesn't work as they had expected on virus attacks. Accordingly, this sense of `virus' has passed not only into techspeak but into also popular usage (where it is often incorrectly used to denote a worm or even a Trojan horse). See phage; compare back door; see also Unix conspiracy. = visionary n. 1. One who hacks vision, in the sense of an Artificial Intelligence researcher working on the problem of getting computers to `see' things using TV cameras. (There isn't any problem in sending information from a TV camera to a computer. The problem is, how can the computer be programmed to make use of the camera information? See SMOP, AI-complete.) 2. [IBM] One who reads the outside literature. At IBM, apparently, such a penchant is viewed with awe and wonder. VMS /V-M-S/ n. DEC's proprietary operating system for its VAX minicomputer; one of the seven or so environments that loom largest in hacker folklore. Many Unix fans generously concede that VMS would probably be the hacker's favorite commercial OS if Unix didn't exist; though true, this makes VMS fans furious. One major hacker gripe with VMS concerns its slowness -- thus the following limerick: There once was a system called VMS Of cycles by no means abstemious. It's chock-full of hacks And runs on a VAX And makes my poor stomach all squeamious. --- The Great Quux See also VAX, TOPS-10, TOPS-20, Unix, runic. voice vt. To phone someone, as opposed to emailing them or connecting in talk mode. "I'm busy now; I'll voice you later." voice-net n. Hackish way of referring to the telephone system, analogizing it to a digital network. Usenet sig blocks not uncommonly include the sender's phone next to a "Voice:" or "Voice-Net:" header; common variants of this are "Voicenet" and "V-Net". Compare paper-net, snail-mail. voodoo programming n. [from George Bush's "voodoo economics"] 1. The use by guess or cookbook of an obscure or hairy system, feature, or algorithm that one does not truly understand. The implication is that the technique may not work, and if it doesn't, one will never know why. Almost synonymous with black magic, except that black magic typically isn't documented and nobody understands it. Compare magic, deep magic, heavy wizardry, rain dance, cargo cult programming, wave a dead chicken. 2. Things programmers do that they know shouldn't work but they try anyway, and which sometimes actually work, such as recompiling everything. VR // [MUD] n. On-line abbrev for virtual reality, as opposed to RL. Vulcan nerve pinch n. [from the old "Star Trek" TV series via Commodore Amiga hackers] The keyboard combination that forces a soft-boot or jump to ROM monitor (on machines that support such a feature). On PC clones this is Ctrl-Alt-Del; on Suns, L1-A; on Macintoshes, it is <Cmd>-<Power switch> or <CMD>-<CTRL>-<POWER>! Also called three-finger salute. Compare quadruple bucky. vulture capitalist n. Pejorative hackerism for `venture capitalist', deriving from the common practice of pushing contracts that deprive inventors of control over their own innovations and most of the money they ought to have made from them. = W = W2K bug: wabbit: WAITS: waldo: walk: walk off the end of: walking drives: wall: wall follower: wall time: wall wart: wallpaper: wango: wank: wannabee: war dialer: -ware: warez: warez d00dz: warez kiddies: warlording: warm boot: wart: washing machine: washing software: water MIPS: wave a dead chicken: weasel: web pointer: web toaster: webify: webmaster: web ring: wedged: wedgie: wedgitude: weeble: weeds: weenie: Weenix: well-behaved: well-connected: wetware: whack: whack-a-mole: whacker: whales: whalesong: What's a spline?: wheel: wheel bit: wheel of reincarnation: wheel wars: White Book: whitelist: whizzy: wibble: WIBNI: widget: wiggles: WIMP environment: win: win big: win win: Winchester: windoid: window shopping: Windoze: winged comments: winkey: winnage: winner: winnitude: Wintel: wired: wirehead: wirewater: wish list: within delta of: within epsilon of: wizard: Wizard Book: wizard hat: wizard mode: wizardly: wok-on-the-wall: womb box: WOMBAT: womble: wonky: woofer: workaround: working as designed: worm: wormhole: wound around the axle: wrap around: write-only code: write-only language: write-only memory: Wrong Thing: wugga wugga: wumpus: WYSIAYG: WYSIWYG: W2K bug [from `Y2K bug' for the Year 2000 problem] The upcoming deployment of Microsoft's Windows 2000 operating system, which hackers generally expect will be among the worst train wrecks in the history of software engineering. Such is the power of Microsoft marketing, however, that it is also expected this will not become obvious until it has incurred hundreds of millions of dollars in downtime and lost opportunity costs. W = wabbit /wab'it/ n. [almost certainly from Elmer Fudd's immortal line "You wascawwy wabbit!"] 1. A legendary early hack reported on a System/360 at RPI and elsewhere around 1978; this may have descended (if only by inspiration) from a hack called RABBITS reported from 1969 on a Burroughs 5500 at the University of Washington Computer Center. The program would make two copies of itself every time it was run, eventually crashing the system. 2. By extension, any hack that includes infinite self-replication but is not a virus or worm. See fork bomb and rabbit job, see also cookie monster. = WAITS /wayts/ n. The mutant cousin of TOPS-10 used on a handful of systems at SAIL up to 1990. There was never an `official' expansion of WAITS (the name itself having been arrived at by a rather sideways process), but it was frequently glossed as `West-coast Alternative to ITS'. Though WAITS was less visible than ITS, there was frequent exchange of people and ideas between the two communities, and innovations pioneered at WAITS exerted enormous indirect influence. The early screen modes of EMACS, for example, were directly inspired by WAITS's `E' editor -- one of a family of editors that were the first to do `real-time editing', in which the editing commands were invisible and where one typed text at the point of insertion/overwriting. The modern style of multi-region windowing is said to have originated there, and WAITS alumni at XEROX PARC and elsewhere played major roles in the developments that led to the XEROX Star, the Macintosh, and the Sun workstations. Also invented there were bucky bits -- thus, the ALT key on every IBM PC is a WAITS legacy. One WAITS feature very notable in pre-Web days was a news-wire interface that allowed WAITS hackers to read, store, and filter AP and UPI dispatches from their terminals; the system also featured a still-unusual level of support for what is now called `multimedia' computing, allowing analog audio and video signals to be switched to programming terminals. = waldo /wol'doh/ n. [From Robert A. Heinlein's story "Waldo"] 1. A mechanical agent, such as a gripper arm, controlled by a human limb. When these were developed for the nuclear industry in the mid-1940s they were named after the invention described by Heinlein in the story, which he wrote in 1942. Now known by the more generic term `telefactoring', this technology is of intense interest to NASA for tasks like space station maintenance. 2. At Harvard (particularly by Tom Cheatham and students), this is used instead of foobar as a metasyntactic variable and general nonsense word. See foo, bar, foobar, quux. walk n.,vt. Traversal of a data structure, especially an array or linked-list data structure in core. See also codewalker, silly walk, clobber. walk off the end of vt. To run past the end of an array, list, or medium after stepping through it -- a good way to land in trouble. Often the result of an off-by-one error. Compare clobber, roach, smash the stack. walking drives n. An occasional failure mode of magnetic-disk drives back in the days when they were huge, clunky washing machines. Those old dinosaur parts carried terrific angular momentum; the combination of a misaligned spindle or worn bearings and stick-slip interactions with the floor could cause them to `walk' across a room, lurching alternate corners forward a couple of millimeters at a time. There is a legend about a drive that walked over to the only door to the computer room and jammed it shut; the staff had to cut a hole in the wall in order to get at it! Walking could also be induced by certain patterns of drive access (a fast seek across the whole width of the disk, followed by a slow seek in the other direction). Some bands of old-time hackers figured out how to induce disk-accessing patterns that would do this to particular drive models and held disk-drive races. wall interj. [WPI] 1. An indication of confusion, usually spoken with a quizzical tone: "Wall??" 2. A request for further explication. Compare octal forty. 3. [Unix, from `write all'] v. To send a message to everyone currently logged in, esp. with the wall(8) utility. It is said that sense 1 came from the idiom `like talking to a blank wall'. It was originally used in situations where, after you had carefully answered a question, the questioner stared at you blankly, clearly having understood nothing that was explained. You would then throw out a "Hello, wall?" to elicit some sort of response from the questioner. Later, confused questioners began voicing "Wall?" themselves. wall follower n. A person or algorithm that compensates for lack of sophistication or native stupidity by efficiently following some simple procedure shown to have been effective in the past. Used of an algorithm, this is not necessarily pejorative; it recalls `Harvey Wallbanger', the winning robot in an early AI contest (named, of course, after the cocktail). Harvey successfully solved mazes by keeping a `finger' on one wall and running till it came out the other end. This was inelegant, but it was mathematically guaranteed to work on simply-connected mazes -- and, in fact, Harvey outperformed more sophisticated robots that tried to `learn' each maze by building an internal representation of it. Used of humans, the term is pejorative and implies an uncreative, bureaucratic, by-the-book mentality. See also code grinder; compare droid. wall time n. (also `wall clock time') 1. `Real world' time (what the clock on the wall shows), as opposed to the system clock's idea of time. 2. The real running time of a program, as opposed to the number of ticks required to execute it (on a timesharing system these always differ, as no one program gets all the ticks, and on multiprocessor systems with good thread support one may get more processor time than real time). wall wart n. A small power-supply brick with integral male plug, designed to plug directly into a wall outlet; called a `wart' because when installed on a power strip it tends to block up at least one more socket than it uses.. These are frequently associated with modems and other small electronic devices which would become unacceptably bulky or hot if they had power supplies on board (there are other reasons as well having to do with the cost of UL certification). wallpaper n. 1. A file containing a listing (e.g., assembly listing) or a transcript, esp. a file containing a transcript of all or part of a login session. (The idea was that the paper for such listings was essentially good only for wallpaper, as evidenced at Stanford, where it was used to cover windows.) Now rare, esp. since other systems have developed other terms for it (e.g., PHOTO on TWENEX). However, the Unix world doesn't have an equivalent term, so perhaps wallpaper will take hold there. The term probably originated on ITS, where the commands to begin and end transcript files were :WALBEG and :WALEND, with default file WALL PAPER (the space was a path delimiter). 2. The background pattern used on graphical workstations (this is techspeak under the `Windows' graphical user interface to MS-DOS). 3. `wallpaper file' n. The file that contains the wallpaper information before it is actually printed on paper. (Even if you don't intend ever to produce a real paper copy of the file, it is still called a wallpaper file.) wango /wang'goh/ n. Random bit-level grovelling going on in a system during some unspecified operation. Often used in combination with mumble. For example: "You start with the `.o' file, run it through this postprocessor that does mumble-wango -- and it comes out a snazzy object-oriented executable." = wank /wangk/ n.,v.,adj. [Columbia University: prob. by mutation from Commonwealth slang v. `wank', to masturbate] Used much as hack is elsewhere, as a noun denoting a clever technique or person or the result of such cleverness. May describe (negatively) the act of hacking for hacking's sake ("Quit wanking, let's go get supper!") or (more positively) a wizard. Adj. `wanky' describes something particularly clever (a person, program, or algorithm). Conversations can also get wanky when there are too many wanks involved. This excess wankiness is signalled by an overload of the `wankometer' (compare bogometer). When the wankometer overloads, the conversation's subject must be changed, or all non-wanks will leave. Compare `neep-neeping' (under neep-neep). Usage: U.S. only. In Britain and the Commonwealth this word is extremely rude and is best avoided unless one intends to give offense. Adjectival `wanky' is less offensive and simply means `stupid' or `broken' (this is mainstream in Great Britain). wannabee /won'*-bee/ n. (also, more plausibly, spelled `wannabe') [from a term recently used to describe Madonna fans who dress, talk, and act like their idol; prob. originally from biker slang] A would-be hacker. The connotations of this term differ sharply depending on the age and exposure of the subject. Used of a person who is in or might be entering larval stage, it is semi-approving; such wannabees can be annoying but most hackers remember that they, too, were once such creatures. When used of any professional programmer, CS academic, writer, or suit, it is derogatory, implying that said person is trying to cuddle up to the hacker mystique but doesn't, fundamentally, have a prayer of understanding what it is all about. Overuse of terms from this lexicon is often an indication of the wannabee nature. Compare newbie. Historical note: The wannabee phenomenon has a slightly different flavor now (1993) than it did ten or fifteen years ago. When the people who are now hackerdom's tribal elders were in larval stage, the process of becoming a hacker was largely unconscious and unaffected by models known in popular culture -- communities formed spontaneously around people who, as individuals, felt irresistibly drawn to do hackerly things, and what wannabees experienced was a fairly pure, skill-focused desire to become similarly wizardly. Those days of innocence are gone forever; society's adaptation to the advent of the microcomputer after 1980 included the elevation of the hacker as a new kind of folk hero, and the result is that some people semi-consciously set out to be hackers and borrow hackish prestige by fitting the popular image of hackers. Fortunately, to do this really well, one has to actually become a wizard. Nevertheless, old-time hackers tend to share a poorly articulated disquiet about the change; among other things, it gives them mixed feelings about the effects of public compendia of lore like this one. W = war dialer n. A cracking tool, a program that calls a given list or range of phone numbers and records those which answer with handshake tones (and so might be entry points to computer or telecommunications systems). Some of these programs have become quite sophisticated, and can now detect modem, fax, or PBX tones and log each one separately. The war dialer is one of the most important tools in the phreaker's kit. These programs evolved from early demon dialers. -ware suff. [from `software'] Commonly used to form jargon terms for classes of software. For examples, see annoyware, careware, crippleware, crudware, freeware, fritterware, guiltware, liveware, meatware, payware, psychedelicware, shareware, shelfware, vaporware, wetware. = warez /weirz/ n. Widely used in cracker subcultures to denote cracked version of commercial software, that is versions from which copy-protection has been stripped. Hackers recognize this term but don't use it themselves. See warez d00dz, courier, leech, elite. warez d00dz /weirz doodz/ n. A substantial subculture of crackers refer to themselves as `warez d00dz'; there is evidently some connection with B1FF here. As `Ozone Pilot', one former warez d00d, wrote: Warez d00dz get illegal copies of copyrighted software. If it has copy protection on it, they break the protection so the software can be copied. Then they distribute it around the world via several gateways. Warez d00dz form badass group names like RAZOR and the like. They put up boards that distribute the latest ware, or pirate program. The whole point of the Warez sub-culture is to get the pirate program released and distributed before any other group. I know, I know. But don't ask, and it won't hurt as much. This is how they prove their poweress [sic]. It gives them the right to say, "I released King's Quest IVXIX before you so obviously my testicles are larger." Again don't ask... The studly thing to do if one is a warez d00d, it appears, is emit `0-day warez', that is copies of commercial software copied and cracked on the same day as its retail release. Warez d00ds also hoard software in a big way, collecting untold megabytes of arcade-style games, pornographic JPGs, and applications they'll never use onto their hard disks. As Ozone Pilot acutely observes: [BELONG] is the only word you will need to know. Warez d00dz want to belong. They have been shunned by everyone, and thus turn to cyberspace for acceptance. That is why they always start groups like TGW, FLT, USA and the like. Structure makes them happy. [...] Warez d00dz will never have a handle like "Pink Daisy" because warez d00dz are insecure. Only someone who is very secure with a good dose of self-esteem can stand up to the cries of fag and girlie-man. More likely you will find warez d00dz with handles like: Doctor Death, Deranged Lunatic, Hellraiser, Mad Prince, Dreamdevil, The Unknown, Renegade Chemist, Terminator, and Twin Turbo. They like to sound badass when they can hide behind their terminals. More likely, if you were given a sample of 100 people, the person whose handle is Hellraiser is the last person you'd associate with the name. The contrast with Internet hackers is stark and instructive. See cracker, wannabee, handle, elite, courier, leech; compare weenie, spod. warez kiddies n. Even more derogatory way of referring to warez d00dz; refers to the fact that most warez d00dz are around the age of puberty. Compare script kiddies. warlording v. [from the Usenet group _alt.fan.warlord_] The act of excoriating a bloated, ugly, or derivative sig block. Common grounds for warlording include the presence of a signature rendered in a BUAF, over-used or cliched sig quotes, ugly ASCII art, or simply excessive size. The original `Warlord' was a B1FF-like newbie c.1991 who featured in his sig a particularly large and obnoxious ASCII graphic resembling the sword of Conan the Barbarian in the 1981 John Milius movie; the group name _alt.fan.warlord_ was sarcasm, and the characteristic mode of warlording is devastatingly sarcastic praise. warm boot n. See boot. wart n. A small, crocky feature that sticks out of an otherwise clean design. Something conspicuous for localized ugliness, especially a special-case exception to a general rule. For example, in some versions of csh(1), single quotes literalize every character inside them except !. In ANSI C, the ?? syntax used for obtaining ASCII characters in a foreign environment is a wart. See also miswart. washing machine n. 1. Old-style 14-inch hard disks in floor-standing cabinets. So called because of the size of the cabinet and the `top-loading' access to the media packs -- and, of course, they were always set on `spin cycle'. The washing-machine idiom transcends language barriers; it is even used in Russian hacker jargon. See also walking drives. The thick channel cables connecting these were called `bit hoses' (see hose, sense 3). 2. [CMU] A machine used exclusively for washing software. CMU has clusters of these. washing software n. The process of recompiling a software distribution (used more often when the recompilation is occuring from scratch) to pick up and merge together all of the various changes that have been made to the source. water MIPS n. (see MIPS, sense 2) Large, water-cooled machines of either today's ECL-supercomputer flavor or yesterday's traditional mainframe type. wave a dead chicken v. To perform a ritual in the direction of crashed software or hardware that one believes to be futile but is nevertheless necessary so that others are satisfied that an appropriate degree of effort has been expended. "I'll wave a dead chicken over the source code, but I really think we've run into an OS bug." Compare voodoo programming, rain dance; see also casting the runes. weasel n. [Cambridge] A naive user, one who deliberately or accidentally does things that are stupid or ill-advised. Roughly synonymous with loser. W = web pointer n. A World Wide Web URL. See also hotlink, which has slightly different connotations. web toaster n. A small specialized computer, shipped with no monitor or keyboard or any other external peripherals, pre-configured to be controlled through an Ethernet port and function as a WWW server. Products of this kind (for example the Cobalt Qube) are often about the size of a toaster. See toaster; compare video toaster. webify n. To put a piece of (possibly already existing) material on the WWW. Frequently used for papers ("Why don't you webify all your publications?") or for demos ("They webified their 6.866 final project"). This term seems to have been (rather logically) independently invented multiple times in the early 1990s. = webmaster n. [WWW: from postmaster] The person at a site providing World Wide Web information who is responsible for maintaining the public pages and keeping the Web server running and properly configured. web ring n. Two or more web sites connected by prominent links between sites sharing a common interest or theme. Usually such cliques have the topology of a ring, in order to make it easy for visitors to navigate through all of them. wedged adj. 1. To be stuck, incapable of proceeding without help. This is different from having crashed. If the system has crashed, it has become totally non-functioning. If the system is wedged, it is trying to do something but cannot make progress; it may be capable of doing a few things, but not be fully operational. For example, a process may become wedged if it deadlocks with another (but not all instances of wedging are deadlocks). See also gronk, locked up, hosed, hung (wedged is more severe than hung). 2. Often refers to humans suffering misconceptions. "He's totally wedged -- he's convinced that he can levitate through meditation." 3. [Unix] Specifically used to describe the state of a TTY left in a losing state by abort of a screen-oriented program or one that has messed with the line discipline in some obscure way. There is some dispute over the origin of this term. It is usually thought to derive from a common description of recto-cranial inversion; however, it may actually have originated with older `hot-press' printing technology in which physical type elements were locked into type frames with wedges driven in by mallets. Once this had been done, no changes in the typesetting for that page could be made. = wedgie n. [Fairchild] A bug. Prob. related to wedged. = wedgitude /wedj'i-t[y]ood/ n. The quality or state of being wedged. weeble /weeb'l/ interj. [Cambridge] Used to denote frustration, usually at amazing stupidity. "I stuck the disk in upside down." "Weeble...." Compare gurfle. = weeds n. 1. Refers to development projects or algorithms that have no possible relevance or practical application. Comes from `off in the weeds'. Used in phrases like "lexical analysis for microcode is serious weeds...." 2. At CDC/ETA before its demise, the phrase `go off in the weeds' was equivalent to IBM's branch to Fishkill and mainstream hackerdom's jump off into never-never land. = weenie n. 1. [on BBSes] Any of a species of luser resembling a less amusing version of B1FF that infests many BBS systems. The typical weenie is a teenage boy with poor social skills travelling under a grandiose handle derived from fantasy or heavy-metal rock lyrics. Among sysops, `the weenie problem' refers to the marginally literate and profanity-laden flamage weenies tend to spew all over a newly-discovered BBS. Compare spod, computer geek, terminal junkie, warez d00dz. 2. [Among hackers] When used with a qualifier (for example, as in Unix weenie, VMS weenie, IBM weenie) this can be either an insult or a term of praise, depending on context, tone of voice, and whether or not it is applied by a person who considers him or herself to be the same sort of weenie. Implies that the weenie has put a major investment of time, effort, and concentration into the area indicated; whether this is good or bad depends on the hearer's judgment of how the speaker feels about that area. See also bigot. 3. The semicolon character, ; (ASCII 0111011). W = Weenix /wee'niks/ n. 1. [ITS] A derogatory term for Unix, derived from Unix weenie. According to one noted ex-ITSer, it is "the operating system preferred by Unix Weenies: typified by poor modularity, poor reliability, hard file deletion, no file version numbers, case sensitivity everywhere, and users who believe that these are all advantages". (Some ITS fans behave as though they believe Unix stole a future that rightfully belonged to them. See ITS, sense 2.) 2. [Brown University] A Unix-like OS developed for tutorial purposes at Brown University. See http://www.cs.brown.edu/courses/cs167/weenix.html. Named independently of the ITS usage. well-behaved adj. 1. [primarily MS-DOS] Said of software conforming to system interface guidelines and standards. Well-behaved software uses the operating system to do chores such as keyboard input, allocating memory and drawing graphics. Oppose ill-behaved. 2. Software that does its job quietly and without counterintuitive effects. Esp. said of software having an interface spec sufficiently simple and well-defined that it can be used as a tool by other software. See cat. 3. Said of an algorithm that doesn't crash or blow up, even when given pathological input. Implies that the stability of the algorithm is intrinsic, which makes this somewhat different from bulletproof. well-connected adj. Said of a computer installation, asserts that it has reliable email links with the network and/or that it relays a large fraction of available Usenet newsgroups. `Well-known' can be almost synonymous, but also implies that the site's name is familiar to many (due perhaps to an archive service or active Usenet users). wetware /wet'weir/ n. [prob. from the novels of Rudy Rucker] 1. The human nervous system, as opposed to computer hardware or software. "Wetware has 7 plus or minus 2 temporary registers." 2. Human beings (programmers, operators, administrators) attached to a computer system, as opposed to the system's hardware or software. See liveware, meatware. whack v. According to arch-hacker James Gosling (designer of NeWS, GOSMACS and Java), to "...modify a program with no idea whatsoever how it works." (See whacker.) It is actually possible to do this in nontrivial circumstances if the change is small and well-defined and you are very good at glarking things from context. As a trivial example, it is relatively easy to change all stderr writes to stdout writes in a piece of C filter code which remains otherwise mysterious. = whack-a-mole n. [from the carnival game which involves quickly and repeatedly hitting the heads of mechanical moles with a mallet as they pop up from their holes.] 1. The practice of repeatedly causing spammers' throwaway accounts and drop boxes to be terminated. 2. After sense 1 became established in the mid-1990s the term passed into more generalized use, and now is commonly found in such combinations as `whack-a-mole windows'; the obnoxious pop-ip advertisement windows spawned in flocks when you surg to sites like Geocities or Tripod. whacker n. [University of Maryland: from hacker] 1. A person, similar to a hacker, who enjoys exploring the details of programmable systems and how to stretch their capabilities. Whereas a hacker tends to produce great hacks, a whacker only ends up whacking the system or program in question. Whackers are often quite egotistical and eager to claim wizard status, regardless of the views of their peers. 2. A person who is good at programming quickly, though rather poorly and ineptly. = whales n. See like kicking dead whales down the beach. whalesong n. The peculiar clicking and whooshing sounds made by a PEP modem such as the Telebit Trailblazer as it tries to synchronize with another PEP modem for their special high-speed mode. This sound isn't anything like the normal two-tone handshake between conventional V-series modems and is instantly recognizable to anyone who has heard it more than once. It sounds, in fact, very much like whale songs. This noise is also called "the moose call" or "moose tones". What's a spline? [XEROX PARC] This phrase expands to: "You have just used a term that I've heard for a year and a half, and I feel I should know, but don't. My curiosity has finally overcome my guilt." The PARC lexicon adds "Moral: don't hesitate to ask questions, even if they seem obvious." wheel n. [from slang `big wheel' for a powerful person] A person who has an active wheel bit. "We need to find a wheel to unwedge the hung tape drives." (See wedged, sense 1.) The traditional name of security group zero in BSD (to which the major system-internal users like root belong) is `wheel'. Some vendors have expanded on this usage, modifying Unix so that only members of group `wheel' can go root. wheel bit n. A privilege bit that allows the possessor to perform some restricted operation on a timesharing system, such as read or write any file on the system regardless of protections, change or look at any address in the running monitor, crash or reload the system, and kill or create jobs and user accounts. The term was invented on the TENEX operating system, and carried over to TOPS-20, XEROX-IFS, and others. The state of being in a privileged logon is sometimes called `wheel mode'. This term entered the Unix culture from TWENEX in the mid-1980s and has been gaining popularity there (esp. at university sites). See also root. wheel of reincarnation [coined in a paper by T. H. Myer and I.E. Sutherland "On the Design of Display Processors", Comm. ACM, Vol. 11, no. 6, June 1968)] Term used to refer to a well-known effect whereby function in a computing system family is migrated out to special-purpose peripheral hardware for speed, then the peripheral evolves toward more computing power as it does its job, then somebody notices that it is inefficient to support two asymmetrical processors in the architecture and folds the function back into the main CPU, at which point the cycle begins again. Several iterations of this cycle have been observed in graphics-processor design, and at least one or two in communications and floating-point processors. Also known as `the Wheel of Life', `the Wheel of Samsara', and other variations of the basic Hindu/Buddhist theological idea. See also blitter, bit bang. wheel wars n. [Stanford University] A period in larval stage during which student hackers hassle each other by attempting to log each other out of the system, delete each other's files, and otherwise wreak havoc, usually at the expense of the lesser users. White Book n. 1. Syn. K&R. 2. Adobe's fourth book in the PostScript series, describing the previously-secret format of Type 1 fonts; "Adobe Type 1 Font Format, version 1.1", (Addison-Wesley, 1990, ISBN 0-201-57044-0). See also Red Book, Green Book, Blue Book. whitelist n. The opposite of a blacklist. That is, instead of being an explicit list of people who are banned, it's an explicit list of people who are to be admitted. Hackers use this especially of lists of email addresses that are explicitly enabled to get past strict anti-spam filters. whizzy adj. (alt. `wizzy') [Sun] Describes a cuspy program; one that is feature-rich and well presented. = wibble [UK, perh. originally from the first "Roger Irrelevant" strip in "VIZ" comics, spread via "Your Sinclair magazine in the 1980s and early 1990s"] 1. n.,v. Commonly used to describe chatter, content-free remarks or other essentially meaningless contributions to threads in newsgroups. "Oh, rspence is wibbling again". 2. [UK IRC] An explicit on-line no-op equivalent to humma. 3. One of the preferred metasyntactic variables in the UK, forming a series with wobble, wubble, and flob (attributed to the hilarious historical comedy "Blackadder"). 4. A pronounciation of the letters "www", as seen in URLs; i.e., www.foo.com may be pronounced "wibble dot foo dot com" (compare dub dub dub). The ancestral sense of this word is reported to have been "My brain is packing it in now. I give up. Tilt! Tilt! Tilt!" = WIBNI // n. [Bell Labs: Wouldn't It Be Nice If] What most requirements documents and specifications consist entirely of. Compare IWBNI. = widget n. 1. A meta-thing. Used to stand for a real object in didactic examples (especially database tutorials). Legend has it that the original widgets were holders for buggy whips. "But suppose the parts list for a widget has 52 entries...." 2. [poss. evoking `window gadget'] A user interface object in X graphical user interfaces. wiggles n. [scientific computation] In solving partial differential equations by finite difference and similar methods, wiggles are sawtooth (up-down-up-down) oscillations at the shortest wavelength representable on the grid. If an algorithm is unstable, this is often the most unstable waveform, so it grows to dominate the solution. Alternatively, stable (though inaccurate) wiggles can be generated near a discontinuity by a Gibbs phenomenon. = WIMP environment n. [acronym: `Window, Icon, Menu, Pointing device (or Pull-down menu)'] A graphical-user-interface environment such as X or the Macintosh interface, esp. as described by a hacker who prefers command-line interfaces for their superior flexibility and extensibility. However, it is also used without negative connotations; one must pay attention to voice tone and other signals to interpret correctly. See menuitis, user-obsequious. win [MIT; now common everywhere] 1. vi. To succeed. A program wins if no unexpected conditions arise, or (especially) if it sufficiently robust to take exceptions in stride. 2. n. Success, or a specific instance thereof. A pleasing outcome. "So it turned out I could use a lexer generator instead of hand-coding my own pattern recognizer. What a win!" Emphatic forms: `moby win', `super win', `hyper-win' (often used interjectively as a reply). For some reason `suitable win' is also common at MIT, usually in reference to a satisfactory solution to a problem. Oppose lose; see also big win, which isn't quite just an intensification of `win'. win big vi. To experience serendipity. "I went shopping and won big; there was a 2-for-1 sale." See big win. W = win win excl. Expresses pleasure at a win. W = Winchester n. Informal generic term for sealed-enclosure magnetic-disk drives in which the read-write head planes over the disk surface on an air cushion. There is a legend that the name arose because the original 1973 engineering prototype for what later became the IBM 3340 featured two 30-megabyte volumes; 30-30 became `Winchester' when somebody noticed the similarity to the common term for a famous Winchester rifle (in the latter, the first 30 referred to caliber and the second to the grain weight of the charge). (It is sometimes incorrectly claimed that Winchester was the laboratory in which the technology was developed.) windoid n. In the Macintosh world, a style of window with much less adornment (smaller or missing title bar, zoom box, etc, etc) than a standard window. window shopping n. [US Geological Survey] Among users of WIMP environments like X or the Macintosh, extended experimentation with new window colors, fonts, and icon shapes. This activity can take up hours of what might otherwise have been productive working time. "I spent the afternoon window shopping until I found the coolest shade of green for my active window borders -- now they perfectly match my medium slate blue background." Serious window shoppers will spend their days with bitmap editors, creating new and different icons and background patterns for all to see. Also: `window dressing', the act of applying new fonts, colors, etc. See fritterware, compare macdink. Windoze /win'dohz/ n. See Microsloth Windows. winged comments n. Comments set on the same line as code, as opposed to boxed comments. In C, for example: d = sqrt(x*x + y*y); /* distance from origin */ Generally these refer only to the action(s) taken on that line. winkey n. (alt. `winkey face') See emoticon. = winnage /win'*j/ n. The situation when a lossage is corrected, or when something is winning. = winner 1. n. An unexpectedly good situation, program, programmer, or person. 2. `real winner': Often sarcastic, but also used as high praise (see also the note under user). "He's a real winner -- never reports a bug till he can duplicate it and send in an example." = winnitude /win'*-t[y]ood/ n. The quality of winning (as opposed to winnage, which is the result of winning). "Guess what? They tweaked the microcode and now the LISP interpreter runs twice as fast as it used to." "That's really great! Boy, what winnitude!" "Yup. I'll probably get a half-hour's winnage on the next run of my program." Perhaps curiously, the obvious antonym `lossitude' is rare. Wintel n. Microsoft Windows plus Intel - the tacit alliance that dominated desktop computing in the 1990s. Now (1999) possibly on the verge of breaking up under pressure from Linux; see Lintel. = wired n. See hardwired. = wirehead /wi:r'hed/ n. [prob. from SF slang for an electrical-brain-stimulation addict] 1. A hardware hacker, especially one who concentrates on communications hardware. 2. An expert in local-area networks. A wirehead can be a network software wizard too, but will always have the ability to deal with network hardware, down to the smallest component. Wireheads are known for their ability to lash up an Ethernet terminator from spare resistors, for example. W = wirewater n. Syn. programming fluid. This melds the mainstream slang adjective `wired' (stimulated, up, hyperactive) with `firewater'; however, it refers to caffeinacious rather than alcoholic beverages. wish list n. A list of desired features or bug fixes that probably won't get done for a long time, usually because the person responsible for the code is too busy or can't think of a clean way to do it. "OK, I'll add automatic filename completion to the wish list for the new interface." Compare tick-list features. within delta of adj. See delta. within epsilon of adj. See epsilon. wizard n. 1. Transitively, a person who knows how a complex piece of software or hardware works (that is, who groks it); esp. someone who can find and fix bugs quickly in an emergency. Someone is a hacker if he or she has general hacking ability, but is a wizard with respect to something only if he or she has specific detailed knowledge of that thing. A good hacker could become a wizard for something given the time to study it. 2. The term `wizard' is also used intransitively of someone who has extremely high-level hacking or problem-solving ability. 3. A person who is permitted to do things forbidden to ordinary people; one who has wheel privileges on a system. 4. A Unix expert, esp. a Unix systems programmer. This usage is well enough established that `Unix Wizard' is a recognized job title at some corporations and to most headhunters. See guru, lord high fixer. See also deep magic, heavy wizardry, incantation, magic, mutter, rain dance, voodoo programming, wave a dead chicken. W = Wizard Book n. "Structure and Interpretation of Computer Programs" (Hal Abelson, Jerry Sussman and Julie Sussman; MIT Press, 1984, 1996; ISBN 0-262-01153-0), an excellent computer science text used in introductory courses at MIT. So called because of the wizard on the jacket. One of the bibles of the LISP/Scheme world. Also, less commonly, known as the Purple Book. wizard hat n. [also, after Terry Pratchett, `pointy hat'] Notional headgear worn by whoever is the wizard in a particular context. The implication is that it's a transferable role. "Talk to Alice, she's wearing the TCP/IP wizard hat while Bob is on vacation." This metaphor is sufficiently live that one may actually see hackers miming the act of putting on, taking off, or transferring a phantom hat. Compare patch pumpkin. wizard mode n. [from rogue] A special access mode of a program or system, usually passworded, that permits some users godlike privileges. Generally not used for operating systems themselves (`root mode' or `wheel mode' would be used instead). This term is often used with respect to games that have editable state. wizardly adj. Pertaining to wizards. A wizardly feature is one that only a wizard could understand or use properly. wok-on-the-wall n. A small microwave dish antenna used for cross-campus private network circuits, from the obvious resemblance between a microwave dish and the Chinese culinary utensil. womb box n. 1. [TMRC] Storage space for equipment. 2. [proposed] A variety of hard-shell equipment case with heavy interior padding and/or shaped carrier cutouts in a foam-rubber matrix; mundanely called a `flight case'. Used for delicate test equipment, electronics, and musical instruments. WOMBAT /wom'bat/ adj. [acronym: Waste Of Money, Brains, And Time] Applied to problems which are both profoundly uninteresting in themselves and unlikely to benefit anyone interesting even if solved. Often used in fanciful constructions such as `wrestling with a wombat'. See also crawling horror, SMOP. Also note the rather different usage as a metasyntactic variable in Commonwealth Hackish. Users of the PDP-11 database program DATATRIEVE adopted the wombat as their notional mascot; the program's help file responded to "HELP WOMBAT" with factual information about Real World wombats. = womble n. [Unisys UK: from British animated characters] A user who has great difficulty in communicating their requirements and/or in using the resulting software. Extreme case of luser. An especially senior or high-ranking womble is referred to as Great-Uncle Bulgaria. = wonky /wong'kee/ adj. [from Australian slang] Yet another approximate synonym for broken. Specifically connotes a malfunction that produces behavior seen as crazy, humorous, or amusingly perverse. "That was the day the printer's font logic went wonky and everybody's listings came out in Tengwar." Also in `wonked out'. See funky, demented, bozotic. = woofer n. [University of Waterloo] Some varieties of wide paper for printers have a perforation 8.5 inches from the left margin that allows the excess on the right-hand side to be torn off when the print format is 80 columns or less wide. The right-hand excess may be called `woofer'. This term (like tweeter) has been in use at Waterloo since 1972, but is elsewhere unknown. In audio jargon, the word refers to the bass speaker(s) on a hi-fi. workaround n. 1. A temporary kluge used to bypass, mask, or otherwise avoid a bug or misfeature in some system. Theoretically, workarounds are always replaced by fixes; in practice, customers often find themselves living with workarounds for long periods of time. "The code died on NUL characters in the input, so I fixed it to interpret them as spaces." "That's not a fix, that's a workaround!" 2. A procedure to be employed by the user in order to do what some currently non-working feature should do. Hypothetical example: "Using META-F7 crashes the 4.43 build of Weemax, but as a workaround you can type CTRL-R, then SHIFT-F5, and delete the remaining cruft by hand." working as designed adj. [IBM] 1. In conformance to a wrong or inappropriate specification; useful, but misdesigned. 2. Frequently used as a sardonic comment on a program's utility. 3. Unfortunately also used as a bogus reason for not accepting a criticism or suggestion. At IBM, this sense is used in official documents! See BAD. worm n. [from `tapeworm' in John Brunner's novel "The Shockwave Rider", via XEROX PARC] A program that propagates itself over a network, reproducing itself as it goes. Compare virus. Nowadays the term has negative connotations, as it is assumed that only crackers write worms. Perhaps the best-known example was Robert T. Morris's Great Worm of 1988, a `benign' one that got out of control and hogged hundreds of Suns and VAXen across the U.S. See also cracker, RTM, Trojan horse, ice. wormhole /werm'hohl/ n. [from the `wormhole' singularities hypothesized in some versions of General Relativity theory] 1. [n.,obs.] A location in a monitor which contains the address of a routine, with the specific intent of making it easy to substitute a different routine. This term is now obsolescent; modern operating systems use clusters of wormholes extensively (for modularization of I/O handling in particular, as in the Unix device-driver organization) but the preferred techspeak for these clusters is `device tables', `jump tables' or `capability tables'. 2. [Amateur Packet Radio] A network path using a commercial satellite link to join two or more amateur VHF networks. So called because traffic routed through a wormhole leaves and re-enters the amateur network over great distances with usually little clue in the message routing header as to how it got from one relay to the other. Compare gopher hole (sense 2). W = wound around the axle adj. In an infinite loop. Often used by older computer types. wrap around vi. (also n. `wraparound' and v. shorthand `wrap') 1. [techspeak] The action of a counter that starts over at zero or at `minus infinity' (see infinity) after its maximum value has been reached, and continues incrementing, either because it is programmed to do so or because of an overflow (as when a car's odometer starts over at 0). 2. To change phase gradually and continuously by maintaining a steady wake-sleep cycle somewhat longer than 24 hours, e.g., living six long (28-hour) days in a week (or, equivalently, sleeping at the rate of 10 microhertz). This sense is also called phase-wrapping. write-only code n. [a play on `read-only memory'] Code so arcane, complex, or ill-structured that it cannot be modified or even comprehended by anyone but its author, and possibly not even by him/her. A Bad Thing. write-only language n. A language with syntax (or semantics) sufficiently dense and bizarre that any routine of significant size is automatically write-only code. A sobriquet applied occasionally to C and often to APL, though INTERCAL and TECO certainly deserve it more. See also Befunge. write-only memory n. The obvious antonym to `read-only memory'. Out of frustration with the long and seemingly useless chain of approvals required of component specifications, during which no actual checking seemed to occur, an engineer at Signetics once created a specification for a write-only memory and included it with a bunch of other specifications to be approved. This inclusion came to the attention of Signetics management only when regular customers started calling and asking for pricing information. Signetics published a corrected edition of the data book and requested the return of the `erroneous' ones. Later, in 1972, Signetics bought a double-page spread in "Electronics" magazine's April issue and used the spec as an April Fools' Day joke. Instead of the more conventional characteristic curves, the 25120 "fully encoded, 9046 x N, Random Access, write-only-memory" data sheet included diagrams of "bit capacity vs. Temp.", "Iff vs. Vff", "Number of pins remaining vs. number of socket insertions", and "AQL vs. selling price". The 25120 required a 6.3 VAC VFF supply, a +10V VCC, and VDD of 0V, +/- 2%. Wrong Thing n. A design, action, or decision that is clearly incorrect or inappropriate. Often capitalized; always emphasized in speech as if capitalized. The opposite of the Right Thing; more generally, anything that is not the Right Thing. In cases where `the good is the enemy of the best', the merely good -- although good -- is nevertheless the Wrong Thing. "In C, the default is for module-level declarations to be visible everywhere, rather than just within the module. This is clearly the Wrong Thing." wugga wugga /wuh'g* wuh'g*/ n. Imaginary sound that a computer program makes as it labors with a tedious or difficult task.grind (sense 4). wumpus /wuhm'p*s/ n. The central monster (and, in many versions, the name) of a famous family of very early computer games called "Hunt The Wumpus'. The original was invented in 1970 (several years before ADVENT) by Gregory Yob. The wumpus lived somewhere in a cave with the topology of an dodecahedron's edge/vertex graph (later versions supported other topologies, including an icosahedron and Möbius strip). The player started somewhere at random in the cave with five `crooked arrows'; these could be shot through up to three connected rooms, and would kill the wumpus on a hit (later versions introduced the wounded wumpus, which got very angry). Unfortunately for players, the movement necessary to map the maze was made hazardous not merely by the wumpus (which would eat you if you stepped on him) but also by bottomless pits and colonies of super bats that would pick you up and drop you at a random location (later versions added `anaerobic termites' that ate arrows, bat migrations, and earthquakes that randomly changed pit locations). This game appears to have been the first to use a non-random graph-structured map (as opposed to a rectangular grid like the even older Star Trek games). In this respect, as in the dungeon-like setting and its terse, amusing messages, it prefigured ADVENT and Zork and was directly ancestral to the latter (Zork acknowledged this heritage by including a super-bat colony). A C emulation of the original Basic game is available at the Retrocomputing Museum, http://www.ccil.org/retro. = WYSIAYG /wiz'ee-ayg/ adj. Describes a user interface under which "What You See Is All You Get"; an unhappy variant of WYSIWYG. Visual, `point-and-shoot'-style interfaces tend to have easy initial learning curves, but also to lack depth; they often frustrate advanced users who would be better served by a command-style interface. When this happens, the frustrated user has a WYSIAYG problem. This term is most often used of editors, word processors, and document formatting programs. WYSIWYG `desktop publishing' programs, for example, are a clear win for creating small documents with lots of fonts and graphics in them, especially things like newsletters and presentation slides. When typesetting book-length manuscripts, on the other hand, scale changes the nature of the task; one quickly runs into WYSIAYG limitations, and the increased power and flexibility of a command-driven formatter like TeX or Unix's troff becomes not just desirable but a necessity. Compare YAFIYGI. = WYSIWYG /wiz'ee-wig/ adj. [Traced to Flip Wilson's "Geraldine" character c.1970] Describes a user interface under which "What You See Is What You Get", as opposed to one that uses more-or-less obscure commands that do not result in immediate visual feedback. True WYSIWYG in environments supporting multiple fonts or graphics is a a rarely-attained ideal; there are variants of this term to express real-world manifestations including WYSIAWYG (What You See Is Almost What You Get) and WYSIMOLWYG (What You See Is More or Less What You Get). All these can be mildly derogatory, as they are often used to refer to dumbed-down user-friendly interfaces targeted at non-programmers; a hacker has no fear of obscure commands (compare WYSIAYG). On the other hand, EMACS was one of the very first WYSIWYG editors, replacing (actually, at first overlaying) the extremely obscure, command-based TECO. See also WIMP environment. [Oddly enough, WYSIWYG has already made it into the OED, in lower case yet. --ESR] = X = X: XEROX PARC: XOFF: XON: xor: xref: XXX: xyzzy: = X /X/ n. 1. Used in various speech and writing contexts (also in lowercase) in roughly its algebraic sense of `unknown within a set defined by context' (compare N). Thus, the abbreviation 680x0 stands for 68000, 68010, 68020, 68030, or 68040, and 80x86 stands for 80186, 80286, 80386, 80486, 80586 or 80686 (note that a Unix hacker might write these as 680[0-6]0 and 80[1-6]86 or 680?0 and 80?86 respectively; see glob). 2. [after the name of an earlier window system called `W'] An over-sized, over-featured, over-engineered and incredibly over-complicated window system developed at MIT and widely used on Unix systems. XEROX PARC /zee'roks park'/ n. The famed Palo Alto Research Center. For more than a decade, from the early 1970s into the mid-1980s, PARC yielded an astonishing volume of groundbreaking hardware and software innovations. The modern mice, windows, and icons style of software interface was invented there. So was the laser printer and the local-area network; and PARC's series of D machines anticipated the powerful personal computers of the 1980s by a decade. Sadly, the prophets at PARC were without honor in their own company, so much so that it became a standard joke to describe PARC as a place that specialized in developing brilliant ideas for everyone else. The stunning shortsightedness and obtusity of XEROX's top-level suits has been well anatomized in "Fumbling The Future: How XEROX Invented, Then Ignored, the First Personal Computer" by Douglas K. Smith and Robert C. Alexander (William Morrow & Co., 1988, ISBN 0-688-09511-9). XOFF /X-of/ n. Syn. control-S. XON /X-on/ n. Syn. control-Q. xor /X'or/, /kzor/ conj. Exclusive or. `A xor B' means `A or B, but not both'. "I want to get cherry pie xor a banana split." This derives from the technical use of the term as a function on truth-values that is true if exactly one of its two arguments is true. xref /X'ref/ v.,n. Hackish standard abbreviation for `cross-reference'. XXX /X-X-X/ n. A marker that attention is needed. Commonly used in program comments to indicate areas that are kluged up or need to be. Some hackers liken `XXX' to the notional heavy-porn movie rating. Compare FIXME. xyzzy /X-Y-Z-Z-Y/, /X-Y-ziz'ee/, /ziz'ee/, or /ik-ziz'ee/ adj. [from the ADVENT game] The canonical `magic word'. This comes from ADVENT, in which the idea is to explore an underground cave with many rooms and to collect the treasures you find there. If you type `xyzzy' at the appropriate time, you can move instantly between two otherwise distant points. If, therefore, you encounter some bit of magic, you might remark on this quite succinctly by saying simply "Xyzzy!" "Ordinarily you can't look at someone else's screen if he has protected it, but if you type quadruple-bucky-clear the system will let you do it anyway." "Xyzzy!" It's traditional for xyzzy to be an Easter egg in games with text interfaces. Xyzzy has actually been implemented as an undocumented no-op command on several OSes; in Data General's AOS/VS, for example, it would typically respond "Nothing happens", just as ADVENT did if the magic was invoked at the wrong spot or before a player had performed the action that enabled the word. In more recent 32-bit versions, by the way, AOS/VS responds "Twice as much happens". Early versions of the popular `minesweeper' game under Microsoft Windows had a cheat mode triggered by the command `xyzzy<enter><right-shift>' that turns the top-left pixel of the screen different colors depending on whether or not the cursor is over a bomb. This feature temporarily diasappeared in Windows 98, but reappeared in Windows 2000. The following passage from "The Wonderful Wizard of Oz" by L. Frank Baum, suggesting a possible pre-ADVENT origin, has recently come to light: "Ziz-zy, zuz-zy, zik!" said Dorothy, who was now standing on both feet. This ended the saying of the charm, and they heard a great chattering and flapping of wings, as the band of Winged Monkeys flew up to them. = Y = YA-: YABA: YAFIYGI: YAUN: Yellow Book: yellow card: yellow wire: Yet Another: YHBT: YKYBHTLW: YMMV: You are not expected to understand this: You know you've been hacking too long when: Your mileage may vary: Yow!: yoyo mode: Yu-Shiang Whole Fish: = YA- abbrev. [Yet Another] In hackish acronyms this almost invariably expands to Yet Another, following the precedent set by Unix yacc(1) (Yet Another Compiler-Compiler). See YABA. YABA /ya'b*/ n. [Cambridge] Yet Another Bloody Acronym. Whenever some program is being named, someone invariably suggests that it be given a name that is acronymic. The response from those with a trace of originality is to remark ironically that the proposed name would then be `YABA-compatible'. Also used in response to questions like "What is WYSIWYG?" See also TLA. YAFIYGI /yaf'ee-y*-gee/ adj. [coined in response to WYSIWYG] Describes the command-oriented ed/vi/nroff/TeX style of word processing or other user interface, the opposite of WYSIWYG. Stands for "You asked for it, you got it", because what you actually asked for is often not apparent until long after it is too late to do anything about it. Used to denote perversity ("Real Programmers use YAFIYGI tools...and like it!") or, less often, a necessary tradeoff ("Only a YAFIYGI tool can have full programmable flexibility in its interface."). This precise sense of "You asked for it, you got it" seems to have first appeared in Ed Post's classic parody "Real Programmers don't use Pascal" (see Real Programmers); the acronym is a more recent invention. YAUN /yawn/ n. [Acronym for `Yet Another Unix Nerd'] Reported from the San Diego Computer Society (predominantly a microcomputer users' group) as a good-natured punning insult aimed at Unix zealots. = Yellow Book n. The print version of this Jargon File; "The New Hacker's Dictionary" from MIT Press; The book includes essentially all the material the File, plus a Foreword by Guy L. Steele Jr. and a Preface by Eric S. Raymond. Most importantly, the book version is nicely typeset and includes almost all of the infamous Crunchly cartoons by the Great Quux, each attached to an appropriate entry. The first edition (1991, ISBN 0-262-68069-6) corresponded to the Jargon File version 2.9.6. The second edition (1993, ISBN 0-262-68079-3) corresponded to the Jargon File 3.0.0. The third (1996, ISBN 0-262-68092-0) corresponded to 4.0.0. yellow card n. See green card. yellow wire n. [IBM] Repair wires used when connectors (especially ribbon connectors) got broken due to some schlemiel pinching them, or to reconnect cut traces after the FE mistakenly cut one. Compare blue wire, purple wire, red wire. Yet Another adj. [From Unix's yacc(1), `Yet Another Compiler-Compiler', a LALR parser generator] 1. Of your own work: A humorous allusion often used in titles to acknowledge that the topic is not original, though the content is. As in `Yet Another AI Group' or `Yet Another Simulated Annealing Algorithm'. 2. Of others' work: Describes something of which there are already far too many. See also YA-, YABA, YAUN. YHBT // [Usenet: very common] Abbreviation: You Have Been Trolled (see troll, sense 1). Especially used in "YHBT. YHL. HAND.", which is widely understood to expand to "You Have Been Trolled. You Have Lost. Have A Nice Day". You are quite likely to see this if you respond incautiously to a flame-provoking post that was obviously floated as sucker bait. YKYBHTLW // abbrev. Abbreviation of `You know you've been hacking too long when...', which became established on the Usenet group _alt.folklore.computers_ during extended discussion of the indicated entry in the Jargon File. YMMV // cav. Abbreviation for Your mileage may vary common on Usenet. You are not expected to understand this [Unix] cav. The canonical comment describing something magic or too complicated to bother explaining properly. From an infamous comment in the context-switching code of the V6 Unix kernel. Dennis Ritchie has explained this in detail. You know you've been hacking too long when The set-up line for a genre of one-liners told by hackers about themselves. These include the following: not only do you check your email more often than your paper mail, but you remember your network address faster than your postal one. your SO kisses you on the neck and the first thing you think is "Uh, oh, priority interrupt." you go to balance your checkbook and discover that you're doing it in octal. your computers have a higher street value than your car. in your universe, `round numbers' are powers of 2, not 10. more than once, you have woken up recalling a dream in some programming language. you realize you have never seen half of your best friends. A list list of these can be found by searching for this phrase on the web. [An early version of this entry said "All but one of these have been reliably reported as hacker traits (some of them quite often). Even hackers may have trouble spotting the ringer." The ringer was balancing one's checkbook in octal, which I made up out of whole cloth. Although more respondents picked that one out as fiction than any of the others, I also received multiple independent reports of its actually happening, most famously to Grace Hopper while she was working with BINAC in 1949. --ESR] Your mileage may vary cav. [from the standard disclaimer attached to EPA mileage ratings by American car manufacturers] 1. A ritual warning often found in Unix freeware distributions. Translates roughly as "Hey, I tried to write this portably, but who knows what'll happen on your system?" 2. More generally, a qualifier attached to advice. "I find that sending flowers works well, but your mileage may vary." Yow! /yow/ interj. [from "Zippy the Pinhead" comix] A favored hacker expression of humorous surprise or emphasis. "Yow! Check out what happens when you twiddle the foo option on this display hack!" Compare gurfle. yoyo mode n. The state in which the system is said to be when it rapidly alternates several times between being up and being down. Interestingly (and perhaps not by coincidence), many hardware vendors give out free yoyos at Usenix exhibits. Sun Microsystems gave out logoized yoyos at SIGPLAN '88. Tourists staying at one of Atlanta's most respectable hotels were subsequently treated to the sight of 200 of the country's top computer scientists testing yo-yo algorithms in the lobby. Yu-Shiang Whole Fish /yoo-shyang hohl fish/ n. obs. The character gamma (extended SAIL ASCII 0001001), which with a loop in its tail looks like a little fish swimming down the page. The term is actually the name of a Chinese dish in which a fish is cooked whole (not parsed) and covered with Yu-Shiang (or Yu-Hsiang) sauce. Usage: primarily by people on the MIT LISP Machine, which could display this character on the screen. Tends to elicit incredulity from people who hear about it second-hand. = Z = zap: zapped: Zawinski's Law: zbeba: zen: zero: zero-content: Zero-One-Infinity Rule: zeroth: zigamorph: zip: zipperhead: zombie: zorch: Zork: zorkmid: zap 1. n. Spiciness. 2. vt. To make food spicy. 3. vt. To make someone `suffer' by making his food spicy. (Most hackers love spicy food. Hot-and-sour soup is considered wimpy unless it makes you wipe your nose for the rest of the meal.) See zapped. 4. vt. To modify, usually to correct; esp. used when the action is performed with a debugger or binary patching tool. Also implies surgical precision. "Zap the debug level to 6 and run it again." In the IBM mainframe world, binary patches are applied to programs or to the OS with a program called `superzap', whose file name is `IMASPZAP' (possibly contrived from I M A SuPerZAP). 5. vt. To erase or reset. 6. To fry a chip with static electricity. "Uh oh -- I think that lightning strike may have zapped the disk controller." zapped adj. Spicy. This term is used to distinguish between food that is hot (in temperature) and food that is spicy-hot. For example, the Chinese appetizer Bon Bon Chicken is a kind of chicken salad that is cold but zapped; by contrast, vanilla wonton soup is hot but not zapped. See also oriental food, laser chicken. See zap, senses 1 and 2. = Zawinski's Law "Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can." Coined by Jamie Zawinski (who called it the "Law of Software Envelopment") to express his belief that all truly useful programs experience pressure to evolve into toolkits and application platforms (the mailer thing, he says, is just a side effect of that). It is commonly cited, though with widely varying degrees of accuracy. zbeba n. [USENET] The word `moron' in rot13. Used to describe newbies who are behaving with especial cluelessness. = zen vt. To figure out something by meditation or by a sudden flash of enlightenment. Originally applied to bugs, but occasionally applied to problems of life in general. "How'd you figure out the buffer allocation problem?" "Oh, I zenned it." Contrast grok, which connotes a time-extended version of zenning a system. Compare hack mode. See also guru. = zero vt. 1. To set to 0. Usually said of small pieces of data, such as bits or words (esp. in the construction `zero out'). 2. To erase; to discard all data from. Said of disks and directories, where `zeroing' need not involve actually writing zeroes throughout the area being zeroed. One may speak of something being `logically zeroed' rather than being `physically zeroed'. See scribble. zero-content adj. Syn. content-free. Zero-One-Infinity Rule prov. "Allow none of foo, one of foo, or any number of foo." A rule of thumb for software design, which instructs one to not place random limits on the number of instances of a given entity (such as: windows in a window system, letters in an OS's filenames, etc.). Specifically, one should either disallow the entity entirely, allow exactly one instance (an "exception"), or allow as many as the user wants - address space and memory permitting. The logic behind this rule is that there are often situations where it makes clear sense to allow one of something instead of none. However, if one decides to go further and allow N (for N > 1), then why not N+1? And if N+1, then why not N+2, and so on? Once above 1, there's no excuse not to allow any N; hence, infinity. Many hackers recall in this connection Isaac Asimov's SF novel "The Gods Themselves" in which a character announces that the number 2 is impossible - if you're going to believe in more than one universe, you might as well believe in an infinite number of them. zeroth /zee'rohth/ adj. First. Among software designers, comes from C's and LISP's 0-based indexing of arrays. Hardware people also tend to start counting at 0 instead of 1; this is natural since, e.g., the 256 states of 8 bits correspond to the binary numbers 0, 1, ..., 255 and the digital devices known as `counters' count in this way. Hackers and computer scientists often like to call the first chapter of a publication `Chapter 0', especially if it is of an introductory nature (one of the classic instances was in the First Edition of K&R). In recent years this trait has also been observed among many pure mathematicians (who have an independent tradition of numbering from 0). Zero-based numbering tends to reduce fencepost errors, though it cannot eliminate them entirely. = zigamorph /zig'*-morf/ n. 1. Hex FF (11111111) when used as a delimiter or fence character. Usage: primarily at IBM shops. 2. [proposed] n. The Unicode non-character U+FFFF (1111111111111111), a character code which is not assigned to any character, and so is usable as end-of-string. (Unicode is a 16-bit character code intended to cover all of the world's writing systems, including Latin, Greek, Cyrillic, Chinese, hiragana, katakana, Devanagari, Thai, Laotian and many other scripts - support for elvish is planned for a future release). zip vt. [primarily MS-DOS] To create a compressed archive from a group of files using PKWare's PKZIP or a compatible archiver. Its use is spreading now that portable implementations of the algorithm have been written. Commonly used as follows: "I'll zip it up and send it to you." See tar and feather. zipperhead n. [IBM] A person with a closed mind. zombie n. [Unix] A process that has died but has not yet relinquished its process table slot (because the parent process hasn't executed a wait(2) for it yet). These can be seen in ps(1) listings occasionally. Compare orphan. = zorch /zorch/ 1. [TMRC] v. To attack with an inverse heat sink. 2. [TMRC] v. To travel, with v approaching c [that is, with velocity approaching lightspeed --ESR]. 3. [MIT] v. To propel something very quickly. "The new comm software is very fast; it really zorches files through the network." 4. [MIT] n. Influence. Brownie points. Good karma. The intangible and fuzzy currency in which favors are measured. "I'd rather not ask him for that just yet; I think I've used up my quota of zorch with him for the week." 5. [MIT] n. Energy, drive, or ability. "I think I'll punt that change for now; I've been up for 30 hours and I've run out of zorch." 6. [MIT] v. To flunk an exam or course. = Zork /zork/ n. The second of the great early experiments in computer fantasy gaming; see ADVENT. Originally written on MIT-DM during 1977-1979, later distributed with BSD Unix (as a patched, sourceless RT-11 FORTRAN binary; see retrocomputing) and commercialized as `The Zork Trilogy' by Infocom. The FORTRAN source was later rewritten for portability and released to Usenet under the name "Dungeon". Both FORTRAN "Dungeon" and translated C versions are available at many FTP sites. See also grue. = zorkmid /zork'mid/ n. The canonical unit of currency in hacker-written games. This originated in Zork but has spread to nethack and is referred to in several other games. (Lexicon Entries End Here) Hacker Folklore This appendix contains several legends and fables that illuminate the meaning of various entries in the lexicon. The Meaning of Hack: ...and three famous ones TV Typewriters: A Tale of Hackish Ingenuity A Story About Magic: By Guy Steele Some AI Koans: Wit and Wisdom of the Masters OS and JEDGAR: Intrigue and mayhem under ITS The Story of Mel: One of hackerdom's great myths The Meaning of `Hack' "The word hack doesn't really have 69 different meanings", according to MIT hacker Phil Agre. "In fact, hack has only one meaning, an extremely subtle and profound one which defies articulation. Which connotation is implied by a given use of the word depends in similarly profound ways on the context. Similar remarks apply to a couple of other hacker words, most notably random." Hacking might be characterized as `an appropriate application of ingenuity'. Whether the result is a quick-and-dirty patchwork job or a carefully crafted work of art, you have to admire the cleverness that went into it. An important secondary meaning of hack is `a creative practical joke'. This kind of hack is easier to explain to non-hackers than the programming kind. Of course, some hacks have both natures; see the lexicon entries for pseudo and kgbvax. But here are some examples of pure practical jokes that illustrate the hacking spirit: In 1961, students from Caltech (California Institute of Technology, in Pasadena) hacked the Rose Bowl football game. One student posed as a reporter and `interviewed' the director of the University of Washington card stunts (such stunts involve people in the stands who hold up colored cards to make pictures). The reporter learned exactly how the stunts were operated, and also that the director would be out to dinner later. While the director was eating, the students (who called themselves the `Fiendish Fourteen') picked a lock and stole a blank direction sheet for the card stunts. They then had a printer run off 2300 copies of the blank. The next day they picked the lock again and stole the master plans for the stunts -- large sheets of graph paper colored in with the stunt pictures. Using these as a guide, they made new instructions for three of the stunts on the duplicated blanks. Finally, they broke in once more, replacing the stolen master plans and substituting the stack of diddled instruction sheets for the original set. The result was that three of the pictures were totally different. Instead of `WASHINGTON', the word ``CALTECH' was flashed. Another stunt showed the word `HUSKIES', the Washington nickname, but spelled it backwards. And what was supposed to have been a picture of a husky instead showed a beaver. (Both Caltech and MIT use the beaver -- nature's engineer -- as a mascot.) After the game, the Washington faculty athletic representative said: "Some thought it ingenious; others were indignant." The Washington student body president remarked: "No hard feelings, but at the time it was unbelievable. We were amazed." This is now considered a classic hack, particularly because revising the direction sheets constituted a form of programming. Here is another classic hack: On November 20, 1982, MIT hacked the Harvard-Yale football game. Just after Harvard's second touchdown against Yale, in the first quarter, a small black ball popped up out of the ground at the 40-yard line, and grew bigger, and bigger, and bigger. The letters `MIT' appeared all over the ball. As the players and officials stood around gawking, the ball grew to six feet in diameter and then burst with a bang and a cloud of white smoke. The "Boston Globe" later reported: "If you want to know the truth, MIT won The Game." The prank had taken weeks of careful planning by members of MIT's Delta Kappa Epsilon fraternity. The device consisted of a weather balloon, a hydraulic ram powered by Freon gas to lift it out of the ground, and a vacuum-cleaner motor to inflate it. They made eight separate expeditions to Harvard Stadium between 1 and 5 A.M., locating an unused 110-volt circuit in the stadium and running buried wires from the stadium circuit to the 40-yard line, where they buried the balloon device. When the time came to activate the device, two fraternity members had merely to flip a circuit breaker and push a plug into an outlet. This stunt had all the earmarks of a perfect hack: surprise, publicity, the ingenious use of technology, safety, and harmlessness. The use of manual control allowed the prank to be timed so as not to disrupt the game (it was set off between plays, so the outcome of the game would not be unduly affected). The perpetrators had even thoughtfully attached a note to the balloon explaining that the device was not dangerous and contained no explosives. Harvard president Derek Bok commented: "They have an awful lot of clever people down there at MIT, and they did it again." President Paul E. Gray of MIT said: "There is absolutely no truth to the rumor that I had anything to do with it, but I wish there were." The hacks above are verifiable history; they can be proved to have happened. Many other classic-hack stories from MIT and elsewhere, though retold as history, have the characteristics of what Jan Brunvand has called `urban folklore' (see FOAF). Perhaps the best known of these is the legend of the infamous trolley-car hack, an alleged incident in which engineering students are said to have welded a trolley car to its tracks with thermite. Numerous versions of this have been recorded from the 1940s to the present, most set at MIT but at least one very detailed version set at CMU. Brian Leibowitz has researched MIT hacks both real and mythical extensively; the interested reader is referred to his delightful pictorial compendium "The Journal of the Institute for Hacks, Tomfoolery, and Pranks" (MIT Museum, 1990; ISBN 0-917027-03-5). The Institute has a World Wide Web page at http://hacks.mit.edu/Hacks/Gallery.html. There is rumored to be a sequel entitled "Is This The Way To Baker Street?". The Caltech Alumni Association has published two similar books titled "Legends of Caltech" and "More Legends of Caltech". Finally, here is a story about one of the classic computer hacks. Back in the mid-1970s, several of the system support staff at Motorola discovered a relatively simple way to crack system security on the Xerox CP-V timesharing system. Through a simple programming strategy, it was possible for a user program to trick the system into running a portion of the program in `master mode' (supervisor state), in which memory protection does not apply. The program could then poke a large value into its `privilege level' byte (normally write-protected) and could then proceed to bypass all levels of security within the file-management system, patch the system monitor, and do numerous other interesting things. In short, the barn door was wide open. Motorola quite properly reported this problem to Xerox via an official `level 1 SIDR' (a bug report with an intended urgency of `needs to be fixed yesterday'). Because the text of each SIDR was entered into a database that could be viewed by quite a number of people, Motorola followed the approved procedure: they simply reported the problem as `Security SIDR', and attached all of the necessary documentation, ways-to-reproduce, etc. The CP-V people at Xerox sat on their thumbs; they either didn't realize the severity of the problem, or didn't assign the necessary operating-system-staff resources to develop and distribute an official patch. Months passed. The Motorola guys pestered their Xerox field-support rep, to no avail. Finally they decided to take direct action, to demonstrate to Xerox management just how easily the system could be cracked and just how thoroughly the security safeguards could be subverted. They dug around in the operating-system listings and devised a thoroughly devilish set of patches. These patches were then incorporated into a pair of programs called `Robin Hood' and `Friar Tuck'. Robin Hood and Friar Tuck were designed to run as `ghost jobs' (daemons, in Unix terminology); they would use the existing loophole to subvert system security, install the necessary patches, and then keep an eye on one another's statuses in order to keep the system operator (in effect, the superuser) from aborting them. One fine day, the system operator on the main CP-V software development system in El Segundo was surprised by a number of unusual phenomena. These included the following: Tape drives would rewind and dismount their tapes in the middle of a job. Disk drives would seek back and forth so rapidly that they would attempt to walk across the floor (see walking drives). The card-punch output device would occasionally start up of itself and punch a lace card. These would usually jam in the punch. The console would print snide and insulting messages from Robin Hood to Friar Tuck, or vice versa. The Xerox card reader had two output stackers; it could be instructed to stack into A, stack into B, or stack into A (unless a card was unreadable, in which case the bad card was placed into stacker B). One of the patches installed by the ghosts added some code to the card-reader driver... after reading a card, it would flip over to the opposite stacker. As a result, card decks would divide themselves in half when they were read, leaving the operator to recollate them manually. Naturally, the operator called in the operating-system developers. They found the bandit ghost jobs running, and gunned them... and were once again surprised. When Robin Hood was gunned, the following sequence of events took place: !X id1 id1: Friar Tuck... I am under attack! Pray save me! id1: Off (aborted) id2: Fear not, friend Robin! I shall rout the Sheriff of Nottingham's men! id1: Thank you, my good fellow! Each ghost-job would detect the fact that the other had been killed, and would start a new copy of the recently slain program within a few milliseconds. The only way to kill both ghosts was to kill them simultaneously (very difficult) or to deliberately crash the system. Finally, the system programmers did the latter -- only to find that the bandits appeared once again when the system rebooted! It turned out that these two programs had patched the boot-time OS image (the kernel file, in Unix terms) and had added themselves to the list of programs that were to be started at boot time (this is similar to the way MS-DOS viruses propagate). The Robin Hood and Friar Tuck ghosts were finally eradicated when the system staff rebooted the system from a clean boot-tape and reinstalled the monitor. Not long thereafter, Xerox released a patch for this problem. It is alleged that Xerox filed a complaint with Motorola's management about the merry-prankster actions of the two employees in question. It is not recorded that any serious disciplinary action was taken against either of them. A TV Typewriters A Tale of Hackish Ingenuity Here is a true story about a glass tty: One day an MIT hacker was in a motorcycle accident and broke his leg. He had to stay in the hospital quite a while, and got restless because he couldn't hack. Two of his friends therefore took a terminal and a modem for it to the hospital, so that he could use the computer by telephone from his hospital bed. Now this happened some years before the spread of home computers, and computer terminals were not a familiar sight to the average person. When the two friends got to the hospital, a guard stopped them and asked what they were carrying. They explained that they wanted to take a computer terminal to their friend who was a patient. The guard got out his list of things that patients were permitted to have in their rooms: TV, radio, electric razor, typewriter, tape player, ... no computer terminals. Computer terminals weren't on the list, so the guard wouldn't let it in. Rules are rules, you know. (This guard was clearly a droid.) Fair enough, said the two friends, and they left again. They were frustrated, of course, because they knew that the terminal was as harmless as a TV or anything else on the list... which gave them an idea. The next day they returned, and the same thing happened: a guard stopped them and asked what they were carrying. They said: "This is a TV typewriter!" The guard was skeptical, so they plugged it in and demonstrated it. "See? You just type on the keyboard and what you type shows up on the TV screen." Now the guard didn't stop to think about how utterly useless a typewriter would be that didn't produce any paper copies of what you typed; but this was clearly a TV typewriter, no doubt about it. So he checked his list: "A TV is all right, a typewriter is all right ... okay, take it on in!" [Historical note: Many years ago, "Popular Electronics" published solder-it-yourself plans for a TV typewriter. Despite the essential uselessness of the device, it was an enormously popular project. Steve Ciarcia, the man behind "Byte" magazine's "Circuit Cellar" feature, resurrected this ghost in one of his books of the early 1980s. He ascribed its popularity (no doubt correctly) to the feeling of power the builder could achieve by being able to decide himself what would be shown on the TV. --ESR] [Antihistorical note: On September 23rd, 1992, the L.A. Times ran the following bit in Steve Harvey's `Only in L.A.' column: It must have been borrowed from a museum: Solomon Waters of Altadena, a 6-year-old first-grader, came home from his first day of school and excitedly told his mother how he had written on "a machine that looks like a computer-but without the TV screen." She asked him if it could have been a "typewriter." "Yeah! Yeah!" he said. "That's what it was called." I have since investigated this matter and determined that many of today's teenagers have never seen a slide rule, either.... - ESR] A A Story About `Magic' Some years ago, I (GLS) was snooping around in the cabinets that housed the MIT AI Lab's PDP-10, and noticed a little switch glued to the frame of one cabinet. It was obviously a homebrew job, added by one of the lab's hardware hackers (no one knows who). You don't touch an unknown switch on a computer without knowing what it does, because you might crash the computer. The switch was labeled in a most unhelpful way. It had two positions, and scrawled in pencil on the metal switch body were the words `magic' and `more magic'. The switch was in the `more magic' position. I called another hacker over to look at it. He had never seen the switch before either. Closer examination revealed that the switch had only one wire running to it! The other end of the wire did disappear into the maze of wires inside the computer, but it's a basic fact of electricity that a switch can't do anything unless there are two wires connected to it. This switch had a wire connected on one side and no wire on its other side. It was clear that this switch was someone's idea of a silly joke. Convinced by our reasoning that the switch was inoperative, we flipped it. The computer instantly crashed. Imagine our utter astonishment. We wrote it off as coincidence, but nevertheless restored the switch to the `more magic' position before reviving the computer. A year later, I told this story to yet another hacker, David Moon as I recall. He clearly doubted my sanity, or suspected me of a supernatural belief in the power of this switch, or perhaps thought I was fooling him with a bogus saga. To prove it to him, I showed him the very switch, still glued to the cabinet frame with only one wire connected to it, still in the `more magic' position. We scrutinized the switch and its lone connection, and found that the other end of the wire, though connected to the computer wiring, was connected to a ground pin. That clearly made the switch doubly useless: not only was it electrically nonoperative, but it was connected to a place that couldn't affect anything anyway. So we flipped the switch. The computer promptly crashed. This time we ran for Richard Greenblatt, a long-time MIT hacker, who was close at hand. He had never noticed the switch before, either. He inspected it, concluded it was useless, got some diagonal cutters and diked it out. We then revived the computer and it has run fine ever since. We still don't know how the switch crashed the machine. There is a theory that some circuit near the ground pin was marginal, and flipping the switch changed the electrical capacitance enough to upset the circuit as millionth-of-a-second pulses went through it. But we'll never know for sure; all we can really say is that the switch was magic. I still have that switch in my basement. Maybe I'm silly, but I usually keep it set on `more magic'. 1994: Another explanation of this story has since been offered. Note that the switch body was metal. Suppose that the non-connected side of the switch was connected to the switch body (usually the body is connected to a separate earth lug, but there are exceptions). The body is connected to the computer case, which is, presumably, grounded. Now the circuit ground within the machine isn't necessarily at the same potential as the case ground, so flipping the switch connected the circuit ground to the case ground, causing a voltage drop/jump which reset the machine. This was probably discovered by someone who found out the hard way that there was a potential difference between the two, and who then wired in the switch as a joke. Some AI Koans These are some of the funniest examples of a genre of jokes told at the MIT AI Lab about various noted hackers. The original koans were composed by Danny Hillis, who would later found Connection Machines, Inc. In reading these, it is at least useful to know that Minsky, Sussman, and Drescher are AI researchers of note, that Tom Knight was one of the Lisp machine's principal designers, and that David Moon wrote much of Lisp Machine Lisp. * * * A novice was trying to fix a broken Lisp machine by turning the power off and on. Knight, seeing what the student was doing, spoke sternly: "You cannot fix a machine by just power-cycling it with no understanding of what is going wrong." Knight turned the machine off and on. The machine worked. * * * One day a student came to Moon and said: "I understand how to make a better garbage collector. We must keep a reference count of the pointers to each cons." Moon patiently told the student the following story: "One day a student came to Moon and said: `I understand how to make a better garbage collector... [Ed. note: Pure reference-count garbage collectors have problems with circular structures that point to themselves.] * * * In the days when Sussman was a novice, Minsky once came to him as he sat hacking at the PDP-6. "What are you doing?", asked Minsky. "I am training a randomly wired neural net to play Tic-Tac-Toe" Sussman replied. "Why is the net wired randomly?", asked Minsky. "I do not want it to have any preconceptions of how to play", Sussman said. Minsky then shut his eyes. "Why do you close your eyes?", Sussman asked his teacher. "So that the room will be empty." At that moment, Sussman was enlightened. * * * A disciple of another sect once came to Drescher as he was eating his morning meal. "I would like to give you this personality test", said the outsider, "because I want you to be happy." Drescher took the paper that was offered him and put it into the toaster, saying: "I wish the toaster to be happy, too." OS and JEDGAR This story says a lot about the ITS ethos. On the ITS system there was a program that allowed you to see what was being printed on someone else's terminal. It spied on the other guy's output by examining the insides of the monitor system. The output spy program was called OS. Throughout the rest of the computer science world (and at IBM too) OS means `operating system', but among old-time ITS hackers it almost always meant `output spy'. OS could work because ITS purposely had very little in the way of `protection' that prevented one user from trespassing on another's areas. Fair is fair, however. There was another program that would automatically notify you if anyone started to spy on your output. It worked in exactly the same way, by looking at the insides of the operating system to see if anyone else was looking at the insides that had to do with your output. This `counterspy' program was called JEDGAR (a six-letterism pronounced as two syllables: /jed'gr/), in honor of the former head of the FBI. But there's more. JEDGAR would ask the user for `license to kill'. If the user said yes, then JEDGAR would actually gun the job of the luser who was spying. Unfortunately, people found that this made life too violent, especially when tourists learned about it. One of the systems hackers solved the problem by replacing JEDGAR with another program that only pretended to do its job. It took a long time to do this, because every copy of JEDGAR had to be patched. To this day no one knows how many people never figured out that JEDGAR had been defanged. Interestingly, there is still a security module named JEDGAR alive as of late 1994 -- in the Unisys MCP for large systems. It is unknown to us whether the name is tribute or independent invention. The Story of Mel This was posted to Usenet by its author, Ed Nather (utastro!nather), on May 21, 1983. A recent article devoted to the macho side of programming made the bald and unvarnished statement: Real Programmers write in FORTRAN. Maybe they do now, in this decadent era of Lite beer, hand calculators, and ``user-friendly'' software but back in the Good Old Days, when the term ``software'' sounded funny and Real Computers were made out of drums and vacuum tubes, Real Programmers wrote in machine code. Not FORTRAN. Not RATFOR. Not, even, assembly language. Machine Code. Raw, unadorned, inscrutable hexadecimal numbers. Directly. Lest a whole new generation of programmers grow up in ignorance of this glorious past, I feel duty-bound to describe, as best I can through the generation gap, how a Real Programmer wrote code. I'll call him Mel, because that was his name. I first met Mel when I went to work for Royal McBee Computer Corp., a now-defunct subsidiary of the typewriter company. The firm manufactured the LGP-30, a small, cheap (by the standards of the day) drum-memory computer, and had just started to manufacture the RPC-4000, a much-improved, bigger, better, faster --- drum-memory computer. Cores cost too much, and weren't here to stay, anyway. (That's why you haven't heard of the company, or the computer.) I had been hired to write a FORTRAN compiler for this new marvel and Mel was my guide to its wonders. Mel didn't approve of compilers. ``If a program can't rewrite its own code'', he asked, ``what good is it?'' Mel had written, in hexadecimal, the most popular computer program the company owned. It ran on the LGP-30 and played blackjack with potential customers at computer shows. Its effect was always dramatic. The LGP-30 booth was packed at every show, and the IBM salesmen stood around talking to each other. Whether or not this actually sold computers was a question we never discussed. Mel's job was to re-write the blackjack program for the RPC-4000. (Port? What does that mean?) The new computer had a one-plus-one addressing scheme, in which each machine instruction, in addition to the operation code and the address of the needed operand, had a second address that indicated where, on the revolving drum, the next instruction was located. In modern parlance, every single instruction was followed by a GO TO! Put that in Pascal's pipe and smoke it. Mel loved the RPC-4000 because he could optimize his code: that is, locate instructions on the drum so that just as one finished its job, the next would be just arriving at the ``read head'' and available for immediate execution. There was a program to do that job, an ``optimizing assembler'', but Mel refused to use it. ``You never know where it's going to put things'', he explained, ``so you'd have to use separate constants''. It was a long time before I understood that remark. Since Mel knew the numerical value of every operation code, and assigned his own drum addresses, every instruction he wrote could also be considered a numerical constant. He could pick up an earlier ``add'' instruction, say, and multiply by it, if it had the right numeric value. His code was not easy for someone else to modify. I compared Mel's hand-optimized programs with the same code massaged by the optimizing assembler program, and Mel's always ran faster. That was because the ``top-down'' method of program design hadn't been invented yet, and Mel wouldn't have used it anyway. He wrote the innermost parts of his program loops first, so they would get first choice of the optimum address locations on the drum. The optimizing assembler wasn't smart enough to do it that way. Mel never wrote time-delay loops, either, even when the balky Flexowriter required a delay between output characters to work right. He just located instructions on the drum so each successive one was just past the read head when it was needed; the drum had to execute another complete revolution to find the next instruction. He coined an unforgettable term for this procedure. Although ``optimum'' is an absolute term, like ``unique'', it became common verbal practice to make it relative: ``not quite optimum'' or ``less optimum'' or ``not very optimum''. Mel called the maximum time-delay locations the ``most pessimum''. After he finished the blackjack program and got it to run (``Even the initializer is optimized'', he said proudly), he got a Change Request from the sales department. The program used an elegant (optimized) random number generator to shuffle the ``cards'' and deal from the ``deck'', and some of the salesmen felt it was too fair, since sometimes the customers lost. They wanted Mel to modify the program so, at the setting of a sense switch on the console, they could change the odds and let the customer win. Mel balked. He felt this was patently dishonest, which it was, and that it impinged on his personal integrity as a programmer, which it did, so he refused to do it. The Head Salesman talked to Mel, as did the Big Boss and, at the boss's urging, a few Fellow Programmers. Mel finally gave in and wrote the code, but he got the test backwards, and, when the sense switch was turned on, the program would cheat, winning every time. Mel was delighted with this, claiming his subconscious was uncontrollably ethical, and adamantly refused to fix it. After Mel had left the company for greener pa$ture$, the Big Boss asked me to look at the code and see if I could find the test and reverse it. Somewhat reluctantly, I agreed to look. Tracking Mel's code was a real adventure. I have often felt that programming is an art form, whose real value can only be appreciated by another versed in the same arcane art; there are lovely gems and brilliant coups hidden from human view and admiration, sometimes forever, by the very nature of the process. You can learn a lot about an individual just by reading through his code, even in hexadecimal. Mel was, I think, an unsung genius. Perhaps my greatest shock came when I found an innocent loop that had no test in it. No test. None. Common sense said it had to be a closed loop, where the program would circle, forever, endlessly. Program control passed right through it, however, and safely out the other side. It took me two weeks to figure it out. The RPC-4000 computer had a really modern facility called an index register. It allowed the programmer to write a program loop that used an indexed instruction inside; each time through, the number in the index register was added to the address of that instruction, so it would refer to the next datum in a series. He had only to increment the index register each time through. Mel never used it. Instead, he would pull the instruction into a machine register, add one to its address, and store it back. He would then execute the modified instruction right from the register. The loop was written so this additional execution time was taken into account --- just as this instruction finished, the next one was right under the drum's read head, ready to go. But the loop had no test in it. The vital clue came when I noticed the index register bit, the bit that lay between the address and the operation code in the instruction word, was turned on --- yet Mel never used the index register, leaving it zero all the time. When the light went on it nearly blinded me. He had located the data he was working on near the top of memory --- the largest locations the instructions could address --- so, after the last datum was handled, incrementing the instruction address would make it overflow. The carry would add one to the operation code, changing it to the next one in the instruction set: a jump instruction. Sure enough, the next program instruction was in address location zero, and the program went happily on its way. I haven't kept in touch with Mel, so I don't know if he ever gave in to the flood of change that has washed over programming techniques since those long-gone days. I like to think he didn't. In any event, I was impressed enough that I quit looking for the offending test, telling the Big Boss I couldn't find it. He didn't seem surprised. When I left the company, the blackjack program would still cheat if you turned on the right sense switch, and I think that's how it should be. I didn't feel comfortable hacking up the code of a Real Programmer. This is one of hackerdom's great heroic epics, free verse or no. In a few spare images it captures more about the esthetics and psychology of hacking than all the scholarly volumes on the subject put together. For an opposing point of view, see the entry for Real Programmer. [1992 postscript -- the author writes: "The original submission to the net was not in free verse, nor any approximation to it -- it was straight prose style, in non-justified paragraphs. In bouncing around the net it apparently got modified into the `free verse' form now popular. In other words, it got hacked on the net. That seems appropriate, somehow." The author adds that he likes the `free-verse' version better...] [1999 update: Mel's last name is now known. The manual for the LGP-30 refers to "Mel Kaye of Royal McBee who did the bulk of the programming [...] of the ACT 1 system".] A Portrait of J. Random Hacker This profile reflects detailed comments on an earlier `trial balloon' version from about a hundred Usenet respondents. Where comparatives are used, the implicit `other' is a randomly selected segment of the non-hacker population of the same size as hackerdom. An important point: Except in some relatively minor respects such as slang vocabulary, hackers don't get to be the way they are by imitating each other. Rather, it seems to be the case that the combination of personality traits that makes a hacker so conditions one's outlook on life that one tends to end up being like other hackers whether one wants to or not (much as bizarrely detailed similarities in behavior and preferences are found in genetic twins raised separately). General Appearance: Dress: Reading Habits: Other Interests: Physical Activity and Sports: Education: Things Hackers Detest and Avoid: Food: Politics: Gender and Ethnicity: Religion: Ceremonial Chemicals: Communication Style: Geographical Distribution: Sexual Habits: Personality Characteristics: Weaknesses of the Hacker Personality: Miscellaneous: General Appearance Intelligent. Scruffy. Intense. Abstracted. Surprisingly for a sedentary profession, more hackers run to skinny than fat; both extremes are more common than elsewhere. Tans are rare. Dress Casual, vaguely post-hippie; T-shirts, jeans, running shoes, Birkenstocks (or bare feet). Long hair, beards, and moustaches are common. High incidence of tie-dye and intellectual or humorous `slogan' T-shirts (only rarely computer related; that would be too obvious). A substantial minority prefers `outdoorsy' clothing -- hiking boots ("in case a mountain should suddenly spring up in the machine room", as one famous parody put it), khakis, lumberjack or chamois shirts, and the like. Very few actually fit the "National Lampoon" Nerd stereotype, though it lingers on at MIT and may have been more common before 1975. At least since the late Seventies backpacks have been more common than briefcases, and the hacker `look' has been more whole-earth than whole-polyester. Hackers dress for comfort, function, and minimal maintenance hassles rather than for appearance (some, perhaps unfortunately, take this to extremes and neglect personal hygiene). They have a very low tolerance of suits and other `business' attire; in fact, it is not uncommon for hackers to quit a job rather than conform to a dress code. Female hackers almost never wear visible makeup, and many use none at all. Reading Habits Omnivorous, but usually includes lots of science and science fiction. The typical hacker household might subscribe to "Analog", "Scientific American", "Whole-Earth Review", and "Smithsonian" (most hackers ignore "Wired" and other self-consciously `cyberpunk' magazines, considering them wannabee fodder). Hackers often have a reading range that astonishes liberal arts people but tend not to talk about it as much. Many hackers spend as much of their spare time reading as the average American burns up watching TV, and often keep shelves and shelves of well-thumbed books in their homes. Other Interests Some hobbies are widely shared and recognized as going with the culture: science fiction, music, medievalism (in the active form practiced by the Society for Creative Anachronism and similar organizations), chess, go, backgammon, wargames, and intellectual games of all kinds. (Role-playing games such as Dungeons and Dragons used to be extremely popular among hackers but they lost a bit of their luster as they moved into the mainstream and became heavily commercialized. More recently, "Magic: The Gathering" has been widely popular among hackers.) Logic puzzles. Ham radio. Other interests that seem to correlate less strongly but positively with hackerdom include linguistics and theater teching. Physical Activity and Sports Many (perhaps even most) hackers don't follow or do sports at all and are determinedly anti-physical. Among those who do, interest in spectator sports is low to non-existent; sports are something one does, not something one watches on TV. Further, hackers avoid most team sports like the plague. Volleyball was long a notable exception, perhaps because it's non-contact and relatively friendly; Ultimate Frisbee has become quite popular for similar reasons. Hacker sports are almost always primarily self-competitive ones involving concentration, stamina, and micromotor skills: martial arts, bicycling, auto racing, kite flying, hiking, rock climbing, aviation, target-shooting, sailing, caving, juggling, skiing, skating, skydiving, scuba diving. Hackers' delight in techno-toys also tends to draw them towards hobbies with nifty complicated equipment that they can tinker with. The popularity of martial arts in the hacker culture deserves special mention. Many observers have noted it, and the connection has grown noticeably stronger over time. In the 1970s, many hackers admired martial arts disciplines from a distance, sensing a compatible ideal in their exaltation of skill through rigorous self-discipline and concentration. As martial arts became increasingly mainstreamed in the U.S. and other western countries, hackers moved from admiring to doing in large numbers. In 1997, for example, your humble editor recalls sitting down with five strangers at the first Perl conference and discovering that four of us were in active training in some sort of martial art - and, what is more interesting, nobody at the table found this particularly odd. Today (2000), martial arts seems to have become established as the hacker exercise form of choice, and the martial-arts culture combining skill-centered elitism with a willingness to let anybody join seems a stronger parallel to hacker behavior than ever. Common usages in hacker slang un-ironically analogize programming to kung fu (thus, one hears talk of "code-fu" or in reference to specific skills like "HTML-fu"). Albeit with slightly more irony, today's hackers readily analogize assimilation into the hacker culture with the plot of a Jet Li movie: the aspiring newbie studies with masters of the tradition, develops his art through deep meditation, ventures forth to perform heroic feats of hacking, and eventually becomes a master who trains the next generation of newbies. Education Nearly all hackers past their teens are either college-degreed or self-educated to an equivalent level. The self-taught hacker is often considered (at least by other hackers) to be better-motivated, and may be more respected, than his school-shaped counterpart. Academic areas from which people often gravitate into hackerdom include (besides the obvious computer science and electrical engineering) physics, mathematics, linguistics, and philosophy. Things Hackers Detest and Avoid IBM mainframes. All the works of Microsoft. Smurfs, Ewoks, and other forms of offensive cuteness. Bureaucracies. Stupid people. Easy listening music. Television (with occasional exceptions for cartoons, movies, and good SF like "Star Trek" classic or Babylon 5). Business suits. Dishonesty. Incompetence. Boredom. COBOL. BASIC. Character-based menu interfaces. Food Ethnic. Spicy. Oriental, esp. Chinese and most esp. Szechuan, Hunan, and Mandarin (hackers consider Cantonese vaguely _déclassé_). Hackers prefer the exotic; for example, the Japanese-food fans among them will eat with gusto such delicacies as fugu (poisonous pufferfish) and whale. Thai food has experienced flurries of popularity. Where available, high-quality Jewish delicatessen food is much esteemed. A visible minority of Southwestern and Pacific Coast hackers prefers Mexican. For those all-night hacks, pizza and microwaved burritos are big. Interestingly, though the mainstream culture has tended to think of hackers as incorrigible junk-food junkies, many have at least mildly health-foodist attitudes and are fairly discriminating about what they eat. This may be generational; anecdotal evidence suggests that the stereotype was more on the mark before the early 1980s. Politics Vaguely liberal-moderate, except for the strong libertarian contingent which rejects conventional left-right politics entirely. The only safe generalization is that hackers tend to be rather anti-authoritarian; thus, both conventional conservatism and `hard' leftism are rare. Hackers are far more likely than most non-hackers to either (a) be aggressively apolitical or (b) entertain peculiar or idiosyncratic political ideas and actually try to live by them day-to-day. Gender and Ethnicity Hackerdom is still predominantly male. However, the percentage of women is clearly higher than the low-single-digit range typical for technical professions, and female hackers are generally respected and dealt with as equals. In the U.S., hackerdom is predominantly Caucasian with strong minorities of Jews (East Coast) and Orientals (West Coast). The Jewish contingent has exerted a particularly pervasive cultural influence (see Food, above, and note that several common jargon terms are obviously mutated Yiddish). The ethnic distribution of hackers is understood by them to be a function of which ethnic groups tend to seek and value education. Racial and ethnic prejudice is notably uncommon and tends to be met with freezing contempt. When asked, hackers often ascribe their culture's gender- and color-blindness to a positive effect of text-only network channels, and this is doubtless a powerful influence. Also, the ties many hackers have to AI research and SF literature may have helped them to develop an idea of personhood that is inclusive rather than exclusive -- after all, if one's imagination readily grants full human rights to future AI programs, robots, dolphins, and extraterrestrial aliens, mere color and gender can't seem very important any more. Religion Agnostic. Atheist. Non-observant Jewish. Neo-pagan. Very commonly, three or more of these are combined in the same person. Conventional faith-holding Christianity is rare though not unknown. Even hackers who identify with a religious affiliation tend to be relaxed about it, hostile to organized religion in general and all forms of religious bigotry in particular. Many enjoy `parody' religions such as Discordianism and the Church of the SubGenius. Also, many hackers are influenced to varying degrees by Zen Buddhism or (less commonly) Taoism, and blend them easily with their `native' religions. There is a definite strain of mystical, almost Gnostic sensibility that shows up even among those hackers not actively involved with neo-paganism, Discordianism, or Zen. Hacker folklore that pays homage to `wizards' and speaks of incantations and demons has too much psychological truthfulness about it to be entirely a joke. Ceremonial Chemicals Most hackers don't smoke tobacco, and use alcohol in moderation if at all. However, there has been something of a trend towards exotic beers since about 1995, especially among younger Linux hackers apparently influenced by Linus Torvalds's fondness for Guiness. Limited use of non-addictive psychedelic drugs, such as cannabis, LSD, psilocybin, nitrous oxide, etc., used to be relatively common and is still regarded with more tolerance than in the mainstream culture. Use of `downers' and opiates, on the other hand, appears to be particularly rare; hackers seem in general to dislike drugs that make them stupid. But on the gripping hand, many hackers regularly wire up on caffeine and/or sugar for all-night hacking runs. Communication Style See the discussions of speech and writing styles near the beginning of this File. Though hackers often have poor person-to-person communication skills, they are as a rule quite sensitive to nuances of language and very precise in their use of it. They are often better at writing than at speaking. Geographical Distribution In the United States, hackerdom revolves on a Bay Area-to-Boston axis; about half of the hard core seems to live within a hundred miles of Cambridge (Massachusetts) or Berkeley (California), although there are significant contingents in Los Angeles, in the Pacific Northwest, and around Washington DC. Hackers tend to cluster around large cities, especially `university towns' such as the Raleigh-Durham area in North Carolina or Princeton, New Jersey (this may simply reflect the fact that many are students or ex-students living near their alma maters). Sexual Habits Hackerdom easily tolerates a much wider range of sexual and lifestyle variation than the mainstream culture. It includes a relatively large gay and bisexual contingent. Hackers are somewhat more likely to live in polygynous or polyandrous relationships, practice open marriage, or live in communes or group houses. In this, as in general appearance, hackerdom semi-consciously maintains `counterculture' values. Personality Characteristics The most obvious common `personality' characteristics of hackers are high intelligence, consuming curiosity, and facility with intellectual abstractions. Also, most hackers are `neophiles', stimulated by and appreciative of novelty (especially intellectual novelty). Most are also relatively individualistic and anti-conformist. Although high general intelligence is common among hackers, it is not the _sine qua non_ one might expect. Another trait is probably even more important: the ability to mentally absorb, retain, and reference large amounts of `meaningless' detail, trusting to later experience to give it context and meaning. A person of merely average analytical intelligence who has this trait can become an effective hacker, but a creative genius who lacks it will swiftly find himself outdistanced by people who routinely upload the contents of thick reference manuals into their brains. [During the production of the first book version of this document, for example, I learned most of the rather complex typesetting language TeX over about four working days, mainly by inhaling Knuth's 477-page manual. My editor's flabbergasted reaction to this genuinely surprised me, because years of associating with hackers have conditioned me to consider such performances routine and to be expected. --ESR] Contrary to stereotype, hackers are not usually intellectually narrow; they tend to be interested in any subject that can provide mental stimulation, and can often discourse knowledgeably and even interestingly on any number of obscure subjects -- if you can get them to talk at all, as opposed to, say, going back to their hacking. It is noticeable (and contrary to many outsiders' expectations) that the better a hacker is at hacking, the more likely he or she is to have outside interests at which he or she is more than merely competent. Hackers are `control freaks' in a way that has nothing to do with the usual coercive or authoritarian connotations of the term. In the same way that children delight in making model trains go forward and back by moving a switch, hackers love making complicated things like computers do nifty stuff for them. But it has to be their nifty stuff. They don't like tedium, nondeterminism, or most of the fussy, boring, ill-defined little tasks that go with maintaining a normal existence. Accordingly, they tend to be careful and orderly in their intellectual lives and chaotic elsewhere. Their code will be beautiful, even if their desks are buried in 3 feet of crap. Hackers are generally only very weakly motivated by conventional rewards such as social approval or money. They tend to be attracted by challenges and excited by interesting toys, and to judge the interest of work or other activities in terms of the challenges offered and the toys they get to play with. In terms of Myers-Briggs and equivalent psychometric systems, hackerdom appears to concentrate the relatively rare INTJ and INTP types; that is, introverted, intuitive, and thinker types (as opposed to the extroverted-sensate personalities that predominate in the mainstream culture). ENT[JP] types are also concentrated among hackers but are in a minority. B Weaknesses of the Hacker Personality Hackers have relatively little ability to identify emotionally with other people. This may be because hackers generally aren't much like `other people'. Unsurprisingly, hackers also tend towards self-absorption, intellectual arrogance, and impatience with people and tasks perceived to be wasting their time. As cynical as hackers sometimes wax about the amount of idiocy in the world, they tend by reflex to assume that everyone is as rational, `cool', and imaginative as they consider themselves. This bias often contributes to weakness in communication skills. Hackers tend to be especially poor at confrontation and negotiation. Because of their passionate embrace of (what they consider to be) the Right Thing, hackers can be unfortunately intolerant and bigoted on technical issues, in marked contrast to their general spirit of camaraderie and tolerance of alternative viewpoints otherwise. Old-time ITS partisans look down on the ever-growing hordes of Unix hackers; Unix aficionados despise VMS and MS-DOS; and hackers who are used to conventional command-line user interfaces loudly loathe mouse-and-menu based systems such as the Macintosh. Hackers who don't indulge in Usenet consider it a huge waste of time and bandwidth; fans of old adventure games such as ADVENT and Zork consider MUDs to be glorified chat systems devoid of atmosphere or interesting puzzles; hackers who are willing to devote endless hours to Usenet or MUDs consider IRC to be a real waste of time; IRCies think MUDs might be okay if there weren't all those silly puzzles in the way. And, of course, there are the perennial holy wars -- EMACS vs. vi, big-endian vs. little-endian, RISC vs. CISC, etc., etc., etc. As in society at large, the intensity and duration of these debates is usually inversely proportional to the number of objective, factual arguments available to buttress any position. As a result of all the above traits, many hackers have difficulty maintaining stable relationships. At worst, they can produce the classic computer geek: withdrawn, relationally incompetent, sexually frustrated, and desperately unhappy when not submerged in his or her craft. Fortunately, this extreme is far less common than mainstream folklore paints it -- but almost all hackers will recognize something of themselves in the unflattering paragraphs above. Hackers are often monumentally disorganized and sloppy about dealing with the physical world. Bills don't get paid on time, clutter piles up to incredible heights in homes and offices, and minor maintenance tasks get deferred indefinitely. 1994-95's fad behavioral disease was a syndrome called Attention Deficit Disorder (ADD), supposedly characterized by (among other things) a combination of short attention span with an ability to `hyperfocus' imaginatively on interesting tasks. In 1998-1999 another syndrome that is said to overlap with many hacker traits entered popular awareness: Asperger's syndrome (AS). This disorder is also sometimes called `high-function autism', though researchers are divided on whether AS is in fact a mild form of autism or a distinct syndrome with a different etiology. AS patients exhibit mild to severe deficits in interpreting facial and body-language cues and in modeling or empathizing with others' emotions. Though some AS patients exhibit mild retardation, others compensate for their deficits with high intelligence and analytical ability, and frequently seek out technical fields where problem-solving abilities are at a premium and people skills are relatively unimportant. Both syndromes are thought to relate to abnormalities in neurotransmitter chemistry, especially the brain's processing of serotonin. Many hackers have noticed that mainstream culture has shown a tendency to pathologize and medicalize normal variations in personality, especially those variations that make life more complicated for authority figures and conformists. Thus, hackers aware of the issue tend to be among those questioning whether ADD and AS actually exist; and if so whether they are really `diseases' rather than extremes of a normal genetic variation like having freckles or being able to taste DPT. In either case, they have a sneaking tendency to wonder if these syndromes are over-diagnosed and over-treated. After all, people in authority will always be inconvenienced by schoolchildren or workers or citizens who are prickly, intelligent individualists - thus, any social system that depends on authority relationships will tend to helpfully ostracize and therapize and drug such `abnormal' people until they are properly docile and stupid and `well-socialized'. So hackers tend to believe they have good reason for skepticism about clinical explanations of the hacker personality. That being said, most would also concede that some hacker traits coincide with indicators for ADD and AS - the status of caffeeine as a hacker beverage of choice may be connected to the fact that it bonds to the same neural receptors as Ritalin, the drug most commonly prescribed for ADD. It is probably true that boosters of both would find a rather higher rate of clinical ADD among hackers than the supposedly mainstream-normal 3-5% (AS is rarer and there are not yet good estimates of incidence as of 2000). Miscellaneous Hackers are more likely to have cats than dogs (in fact, it is widely grokked that cats have the hacker nature). Many drive incredibly decrepit heaps and forget to wash them; richer ones drive spiffy Porsches and RX-7s and then forget to have them washed. Almost all hackers have terribly bad handwriting, and often fall into the habit of block-printing everything like junior draftsmen. Helping Hacker Culture Grow If you enjoyed the Jargon File, please help the culture that created it grow and flourish. Here are several ways you can help: • If you are a writer or journalist, don't say or write hacker when you mean cracker. If you work with writers or journalists, educate them on this issue and push them to do the right thing. If you catch a newspaper or magazine abusing the work `hacker', write them and straighten them out (this appendix includes a model letter). • If you're a techie or computer hobbyist, get involved with one of the free Unixes. Toss out that lame Microsoft OS, or confine it to one disk partition and put Linux or FreeBSD or NetBSD on the other one. And the next time your friend or boss is thinking about some proprietary software `solution' that costs more than it's worth, be ready to blow the competition away with open-source software running over a Unix. • Contribute to organizations like the Free Software Foundation that promote the production of high-quality free and open-source software. You can reach the Free Software Foundation at _gnu@gnu.org_, by phone at +1-617-542-5942, or by snail-mail at 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA. • Support the League for Programming Freedom, which opposes over-broad software patents that constantly threaten to blow up in hackers' faces, preventing them from developing innovative software for tomorrow's needs. You can reach the League for Programming Freedom at _lpf@uunet.uu.net_. by phone at +1 617 621 7084, or by snail-mail at 1 Kendall Square #143, P.O.Box 9171, Cambridge, Massachusetts 02139 USA. • Join the continuing fight against Internet censorship, visit the Center for Democracy and Technology Home Page at http://www.cdt.org. • If you do nothing else, please help fight government attempts to seize political control of Internet content and restrict strong cryptography. The so-called `Communications Decency Act' was declared unconstitutional by the Supreme Court, but U.S. cryptography policy still infringes our First Amendment rights. Surf to the Center for Democracy and technology's home page at http://www.cdt.org to see what you can do to help fight censorship of the net. Here's the text of a letter RMS wrote to the Wall Street Journal to complain about their policy of using "hacker" only in a pejorative sense. We hear that most major newspapers have the same policy. If you'd like to help change this situation, send your favorite newspaper the same letter - or, better yet, write your own letter. Dear Editor: This letter is not meant for publication, although you can publish it if you wish. It is meant specifically for you, the editor, not the public. I am a hacker. That is to say, I enjoy playing with computers -- working with, learning about, and writing clever computer programs. I am not a cracker; I don't make a practice of breaking computer security. There's nothing shameful about the hacking I do. But when I tell people I am a hacker, people think I'm admitting something naughty -- because newspapers such as yours misuse the word "hacker", giving the impression that it means "security breaker" and nothing else. You are giving hackers a bad name. The saddest thing is that this problem is perpetuated deliberately. Your reporters know the difference between "hacker" and "security breaker". They know how to make the distinction, but you don't let them! You insist on using "hacker" pejoratively. When reporters try to use another word, you change it. When reporters try to explain the other meanings, you cut it. Of course, you have a reason. You say that readers have become used to your insulting usage of "hacker", so that you cannot change it now. Well, you can't undo past mistakes today; but that is no excuse to repeat them tomorrow. If I were what you call a "hacker", at this point I would threaten to crack your computer and crash it. But I am a hacker, not a cracker. I don't do that kind of thing! I have enough computers to play with at home and at work; I don't need yours. Besides, it's not my way to respond to insults with violence. My response is this letter. You owe hackers an apology; but more than that, you owe us ordinary respect. Sincerely, etc. Bibliography Here are some other books you can read to help you understand the hacker mindset. Escher, Bach: An Eternal Golden BraidGödel, Escher, Bach: An Eternal Golden Braid Douglas Hofstadter Basic Books, 1979 ISBN 0-394-74502-7 This book reads like an intellectual Grand Tour of hacker preoccupations. Music, mathematical logic, programming, speculations on the nature of intelligence, biology, and Zen are woven into a brilliant tapestry themed on the concept of encoded self-reference. The perfect left-brain companion to "Illuminatus". Illuminatus! I. "The Eye in the Pyramid" II. "The Golden Apple" III. "Leviathan". Robert Shea and Robert Anton Wilson Dell, 1988 ISBN 0-440-53981-1 This work of alleged fiction is an incredible berserko-surrealist rollercoaster of world-girdling conspiracies, intelligent dolphins, the fall of Atlantis, who really killed JFK, sex, drugs, rock'n'roll, and the Cosmic Giggle Factor. First published in three volumes, but there is now a one-volume trade paperback, carried by most chain bookstores under SF. The perfect right-brain companion to Hofstadter's "Gödel, Escher, Bach". See Eris, Discordianism, random numbers, Church of the SubGenius. The Hitchhiker's Guide to the Galaxy Douglas Adams Pocket Books, 1981 ISBN 0-671-46149-4 This `Monty Python in Space' spoof of SF genre traditions has been popular among hackers ever since the original British radio show. Read it if only to learn about Vogons (see bogon) and the significance of the number 42 (see random numbers) -- and why the winningest chess program of 1990 was called `Deep Thought'. The Tao of Programming James Geoffrey Infobooks, 1987 ISBN 0-931137-07-1 This gentle, funny spoof of the "Tao Te Ching" contains much that is illuminating about the hacker way of thought. "When you have learned to snatch the error code from the trap frame, it will be time for you to leave." Hackers Steven Levy Anchor/Doubleday 1984 ISBN 0-385-19195-2 Levy's book is at its best in describing the early MIT hackers at the Model Railroad Club and the early days of the microcomputer revolution. He never understood Unix or the networks, though, and his enshrinement of Richard Stallman as "the last true hacker" turns out (thankfully) to have been quite misleading. Despite being a bit dated and containing some minor errors (many fixed in the paperback edition), this remains a useful and stimulating book that captures the feel of several important hacker subcultures. The Computer Contradictionary Stan Kelly-Bootle MIT Press, 1995 ISBN 0-262-61112-0 This pastiche of Ambrose Bierce's famous work is similar in format to the Jargon File (and quotes several entries from TNHD-2) but somewhat different in tone and intent. It is more satirical and less anthropological, and is largely a product of the author's literate and quirky imagination. For example, it defines `computer science' as "a study akin to numerology and astrology, but lacking the precision of the former and the success of the latter" and `implementation' as "The fruitless struggle by the talented and underpaid to fulfill promises made by the rich and ignorant"; `flowchart' becomes "to obfuscate a problem with esoteric cartoons". Revised and expanded from "The Devil's DP Dictionary", McGraw-Hill 1981, ISBN 0-07-034022-6; that work had some stylistic influence on TNHD-1. The Devouring Fungus: Tales from the Computer Age Karla Jennings Norton, 1990 ISBN 0-393-30732-8 The author of this pioneering compendium knits together a great deal of computer- and hacker-related folklore with good writing and a few well-chosen cartoons. She has a keen eye for the human aspects of the lore and is very good at illuminating the psychology and evolution of hackerdom. Unfortunately, a number of small errors and awkwardnesses suggest that she didn't have the final manuscript checked over by a native speaker; the glossary in the back is particularly embarrassing, and at least one classic tale (the Magic Switch story, retold here under A Story About Magic in Appendix A is given in incomplete and badly mangled form. Nevertheless, this book is a win overall and can be enjoyed by hacker and non-hacker alike. The Soul of a New Machine Tracy Kidder Little, Brown, 1981 (paperback: Avon, 1982 ISBN 0-380-59931-7) This book (a 1982 Pulitzer Prize winner) documents the adventure of the design of a new Data General computer, the MV-8000 Eagle. It is an amazingly well-done portrait of the hacker mindset -- although largely the hardware hacker -- done by a complete outsider. It is a bit thin in spots, but with enough technical information to be entertaining to the serious hacker while providing non-technical people a view of what day-to-day life can be like -- the fun, the excitement, the disasters. During one period, when the microcode and logic were glitching at the nanosecond level, one of the overworked engineers departed the company, leaving behind a note on his terminal as his letter of resignation: "I am going to a commune in Vermont and will deal with no unit of time shorter than a season." Life with UNIX: a Guide for Everyone Don Libes and Sandy Ressler Prentice-Hall, 1989 ISBN 0-13-536657-7 The authors of this book set out to tell you all the things about Unix that tutorials and technical books won't. The result is gossipy, funny, opinionated, downright weird in spots, and invaluable. Along the way they expose you to enough of Unix's history, folklore and humor to qualify as a first-class source for these things. Because so much of today's hackerdom is involved with Unix, this in turn illuminates many of its in-jokes and preoccupations. True Names ... and Other Dangers Vernor Vinge Baen Books, 1987 ISBN 0-671-65363-6 Hacker demigod Richard Stallman used to say that the title story of this book "expresses the spirit of hacking best". Until the subject of the next entry came out, it was hard to even nominate another contender. The other stories in this collection are also fine work by an author who has since won multiple Hugos and is one of today's very best practitioners of hard SF. Snow Crash Neal Stephenson Bantam, 1992 ISBN 0-553-56261-4 Stephenson's epic, comic cyberpunk novel is deeply knowing about the hacker psychology and its foibles in a way no other author of fiction has ever even approached. His imagination, his grasp of the relevant technical details, and his ability to communicate the excitement of hacking and its results are astonishing, delightful, and (so far) unsurpassed. Cyberpunk: Outlaws and Hackers on the Computer Frontier Katie Hafner & John Markoff Simon & Schuster 1991 ISBN 0-671-68322-5 This book gathers narratives about the careers of three notorious crackers into a clear-eyed but sympathetic portrait of hackerdom's dark side. The principals are Kevin Mitnick, "Pengo" and "Hagbard" of the Chaos Computer Club, and Robert T. Morris (see RTM, sense 2) . Markoff and Hafner focus as much on their psychologies and motivations as on the details of their exploits, but don't slight the latter. The result is a balanced and fascinating account, particularly useful when read immediately before or after Cliff Stoll's The Cuckoo's Egg. It is especially instructive to compare RTM, a true hacker who blundered, with the sociopathic phone-freak Mitnick and the alienated, drug-addled crackers who made the Chaos Club notorious. The gulf between wizard and wannabee has seldom been made more obvious. Technobabble John Barry MIT Press 1991 ISBN 0-262-02333-4 Barry's book takes a critical and humorous look at the `technobabble' of acronyms, neologisms, hyperbole, and metaphor spawned by the computer industry. Though he discusses some of the same mechanisms of jargon formation that occur in hackish, most of what he chronicles is actually suit-speak -- the obfuscatory language of press releases, marketroids, and Silicon Valley CEOs rather than the playful jargon of hackers (most of whom wouldn't be caught dead uttering the kind of pompous, passive-voiced word salad he deplores). The Cuckoo's Egg Clifford Stoll Doubleday 1989 ISBN 0-385-24946-2 Clifford Stoll's absorbing tale of how he tracked Markus Hess and the Chaos Club cracking ring nicely illustrates the difference between `hacker' and `cracker'. Stoll's portrait of himself, his lady Martha, and his friends at Berkeley and on the Internet paints a marvelously vivid picture of how hackers and the people around them like to live and how they think. #===================== THE JARGON FILE ENDS HERE ====================# *** END OF THE PROJECT GUTENBERG EBOOK THE JARGON FILE, VERSION 4.2.2, 20 AUG 2000 *** Updated editions will replace the previous one—the old editions will be renamed. Creating the works from print editions not protected by U.S. copyright law means that no one owns a United States copyright in these works, so the Foundation (and you!) can copy and distribute it in the United States without permission and without paying copyright royalties. Special rules, set forth in the General Terms of Use part of this license, apply to copying and distributing Project Gutenberg™ electronic works to protect the PROJECT GUTENBERG™ concept and trademark. Project Gutenberg is a registered trademark, and may not be used if you charge for an eBook, except by following the terms of the trademark license, including paying royalties for use of the Project Gutenberg trademark. If you do not charge anything for copies of this eBook, complying with the trademark license is very easy. You may use this eBook for nearly any purpose such as creation of derivative works, reports, performances and research. Project Gutenberg eBooks may be modified and printed and given away—you may do practically ANYTHING in the United States with eBooks not protected by U.S. copyright law. Redistribution is subject to the trademark license, especially commercial redistribution. START: FULL LICENSE THE FULL PROJECT GUTENBERG LICENSE PLEASE READ THIS BEFORE YOU DISTRIBUTE OR USE THIS WORK To protect the Project Gutenberg™ mission of promoting the free distribution of electronic works, by using or distributing this work (or any other work associated in any way with the phrase “Project Gutenberg”), you agree to comply with all the terms of the Full Project Gutenberg™ License available with this file or online at www.gutenberg.org/license. Section 1. General Terms of Use and Redistributing Project Gutenberg™ electronic works 1.A. By reading or using any part of this Project Gutenberg™ electronic work, you indicate that you have read, understand, agree to and accept all the terms of this license and intellectual property (trademark/copyright) agreement. If you do not agree to abide by all the terms of this agreement, you must cease using and return or destroy all copies of Project Gutenberg™ electronic works in your possession. If you paid a fee for obtaining a copy of or access to a Project Gutenberg™ electronic work and you do not agree to be bound by the terms of this agreement, you may obtain a refund from the person or entity to whom you paid the fee as set forth in paragraph 1.E.8. 1.B. “Project Gutenberg” is a registered trademark. It may only be used on or associated in any way with an electronic work by people who agree to be bound by the terms of this agreement. There are a few things that you can do with most Project Gutenberg™ electronic works even without complying with the full terms of this agreement. See paragraph 1.C below. There are a lot of things you can do with Project Gutenberg™ electronic works if you follow the terms of this agreement and help preserve free future access to Project Gutenberg™ electronic works. See paragraph 1.E below. 1.C. The Project Gutenberg Literary Archive Foundation (“the Foundation” or PGLAF), owns a compilation copyright in the collection of Project Gutenberg™ electronic works. Nearly all the individual works in the collection are in the public domain in the United States. If an individual work is unprotected by copyright law in the United States and you are located in the United States, we do not claim a right to prevent you from copying, distributing, performing, displaying or creating derivative works based on the work as long as all references to Project Gutenberg are removed. Of course, we hope that you will support the Project Gutenberg™ mission of promoting free access to electronic works by freely sharing Project Gutenberg™ works in compliance with the terms of this agreement for keeping the Project Gutenberg™ name associated with the work. You can easily comply with the terms of this agreement by keeping this work in the same format with its attached full Project Gutenberg™ License when you share it without charge with others. 1.D. The copyright laws of the place where you are located also govern what you can do with this work. Copyright laws in most countries are in a constant state of change. If you are outside the United States, check the laws of your country in addition to the terms of this agreement before downloading, copying, displaying, performing, distributing or creating derivative works based on this work or any other Project Gutenberg™ work. The Foundation makes no representations concerning the copyright status of any work in any country other than the United States. 1.E. Unless you have removed all references to Project Gutenberg: 1.E.1. The following sentence, with active links to, or other immediate access to, the full Project Gutenberg™ License must appear prominently whenever any copy of a Project Gutenberg™ work (any work on which the phrase “Project Gutenberg” appears, or with which the phrase “Project Gutenberg” is associated) is accessed, displayed, performed, viewed, copied or distributed: This eBook is for the use of anyone anywhere in the United States and most other parts of the world at no cost and with almost no restrictions whatsoever. You may copy it, give it away or re-use it under the terms of the Project Gutenberg License included with this eBook or online at www.gutenberg.org. If you are not located in the United States, you will have to check the laws of the country where you are located before using this eBook. 1.E.2. If an individual Project Gutenberg™ electronic work is derived from texts not protected by U.S. copyright law (does not contain a notice indicating that it is posted with permission of the copyright holder), the work can be copied and distributed to anyone in the United States without paying any fees or charges. If you are redistributing or providing access to a work with the phrase “Project Gutenberg” associated with or appearing on the work, you must comply either with the requirements of paragraphs 1.E.1 through 1.E.7 or obtain permission for the use of the work and the Project Gutenberg™ trademark as set forth in paragraphs 1.E.8 or 1.E.9. 1.E.3. If an individual Project Gutenberg™ electronic work is posted with the permission of the copyright holder, your use and distribution must comply with both paragraphs 1.E.1 through 1.E.7 and any additional terms imposed by the copyright holder. Additional terms will be linked to the Project Gutenberg™ License for all works posted with the permission of the copyright holder found at the beginning of this work. 1.E.4. Do not unlink or detach or remove the full Project Gutenberg™ License terms from this work, or any files containing a part of this work or any other work associated with Project Gutenberg™. 1.E.5. Do not copy, display, perform, distribute or redistribute this electronic work, or any part of this electronic work, without prominently displaying the sentence set forth in paragraph 1.E.1 with active links or immediate access to the full terms of the Project Gutenberg™ License. 1.E.6. You may convert to and distribute this work in any binary, compressed, marked up, nonproprietary or proprietary form, including any word processing or hypertext form. However, if you provide access to or distribute copies of a Project Gutenberg™ work in a format other than “Plain Vanilla ASCII” or other format used in the official version posted on the official Project Gutenberg™ website (www.gutenberg.org), you must, at no additional cost, fee or expense to the user, provide a copy, a means of exporting a copy, or a means of obtaining a copy upon request, of the work in its original “Plain Vanilla ASCII” or other form. Any alternate format must include the full Project Gutenberg™ License as specified in paragraph 1.E.1. 1.E.7. Do not charge a fee for access to, viewing, displaying, performing, copying or distributing any Project Gutenberg™ works unless you comply with paragraph 1.E.8 or 1.E.9. 1.E.8. You may charge a reasonable fee for copies of or providing access to or distributing Project Gutenberg™ electronic works provided that: • You pay a royalty fee of 20% of the gross profits you derive from the use of Project Gutenberg™ works calculated using the method you already use to calculate your applicable taxes. The fee is owed to the owner of the Project Gutenberg™ trademark, but he has agreed to donate royalties under this paragraph to the Project Gutenberg Literary Archive Foundation. Royalty payments must be paid within 60 days following each date on which you prepare (or are legally required to prepare) your periodic tax returns. Royalty payments should be clearly marked as such and sent to the Project Gutenberg Literary Archive Foundation at the address specified in Section 4, “Information about donations to the Project Gutenberg Literary Archive Foundation.” • You provide a full refund of any money paid by a user who notifies you in writing (or by e-mail) within 30 days of receipt that s/he does not agree to the terms of the full Project Gutenberg™ License. You must require such a user to return or destroy all copies of the works possessed in a physical medium and discontinue all use of and all access to other copies of Project Gutenberg™ works. • You provide, in accordance with paragraph 1.F.3, a full refund of any money paid for a work or a replacement copy, if a defect in the electronic work is discovered and reported to you within 90 days of receipt of the work. • You comply with all other terms of this agreement for free distribution of Project Gutenberg™ works. 1.E.9. If you wish to charge a fee or distribute a Project Gutenberg™ electronic work or group of works on different terms than are set forth in this agreement, you must obtain permission in writing from the Project Gutenberg Literary Archive Foundation, the manager of the Project Gutenberg™ trademark. Contact the Foundation as set forth in Section 3 below. 1.F. 1.F.1. Project Gutenberg volunteers and employees expend considerable effort to identify, do copyright research on, transcribe and proofread works not protected by U.S. copyright law in creating the Project Gutenberg™ collection. Despite these efforts, Project Gutenberg™ electronic works, and the medium on which they may be stored, may contain “Defects,” such as, but not limited to, incomplete, inaccurate or corrupt data, transcription errors, a copyright or other intellectual property infringement, a defective or damaged disk or other medium, a computer virus, or computer codes that damage or cannot be read by your equipment. 1.F.2. LIMITED WARRANTY, DISCLAIMER OF DAMAGES - Except for the “Right of Replacement or Refund” described in paragraph 1.F.3, the Project Gutenberg Literary Archive Foundation, the owner of the Project Gutenberg™ trademark, and any other party distributing a Project Gutenberg™ electronic work under this agreement, disclaim all liability to you for damages, costs and expenses, including legal fees. YOU AGREE THAT YOU HAVE NO REMEDIES FOR NEGLIGENCE, STRICT LIABILITY, BREACH OF WARRANTY OR BREACH OF CONTRACT EXCEPT THOSE PROVIDED IN PARAGRAPH 1.F.3. YOU AGREE THAT THE FOUNDATION, THE TRADEMARK OWNER, AND ANY DISTRIBUTOR UNDER THIS AGREEMENT WILL NOT BE LIABLE TO YOU FOR ACTUAL, DIRECT, INDIRECT, CONSEQUENTIAL, PUNITIVE OR INCIDENTAL DAMAGES EVEN IF YOU GIVE NOTICE OF THE POSSIBILITY OF SUCH DAMAGE. 1.F.3. LIMITED RIGHT OF REPLACEMENT OR REFUND - If you discover a defect in this electronic work within 90 days of receiving it, you can receive a refund of the money (if any) you paid for it by sending a written explanation to the person you received the work from. If you received the work on a physical medium, you must return the medium with your written explanation. The person or entity that provided you with the defective work may elect to provide a replacement copy in lieu of a refund. If you received the work electronically, the person or entity providing it to you may choose to give you a second opportunity to receive the work electronically in lieu of a refund. If the second copy is also defective, you may demand a refund in writing without further opportunities to fix the problem. 1.F.4. Except for the limited right of replacement or refund set forth in paragraph 1.F.3, this work is provided to you ‘AS-IS’, WITH NO OTHER WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PURPOSE. 1.F.5. Some states do not allow disclaimers of certain implied warranties or the exclusion or limitation of certain types of damages. If any disclaimer or limitation set forth in this agreement violates the law of the state applicable to this agreement, the agreement shall be interpreted to make the maximum disclaimer or limitation permitted by the applicable state law. The invalidity or unenforceability of any provision of this agreement shall not void the remaining provisions. 1.F.6. INDEMNITY - You agree to indemnify and hold the Foundation, the trademark owner, any agent or employee of the Foundation, anyone providing copies of Project Gutenberg™ electronic works in accordance with this agreement, and any volunteers associated with the production, promotion and distribution of Project Gutenberg™ electronic works, harmless from all liability, costs and expenses, including legal fees, that arise directly or indirectly from any of the following which you do or cause to occur: (a) distribution of this or any Project Gutenberg™ work, (b) alteration, modification, or additions or deletions to any Project Gutenberg™ work, and (c) any Defect you cause. Section 2. Information about the Mission of Project Gutenberg™ Project Gutenberg™ is synonymous with the free distribution of electronic works in formats readable by the widest variety of computers including obsolete, old, middle-aged and new computers. It exists because of the efforts of hundreds of volunteers and donations from people in all walks of life. Volunteers and financial support to provide volunteers with the assistance they need are critical to reaching Project Gutenberg™’s goals and ensuring that the Project Gutenberg™ collection will remain freely available for generations to come. In 2001, the Project Gutenberg Literary Archive Foundation was created to provide a secure and permanent future for Project Gutenberg™ and future generations. To learn more about the Project Gutenberg Literary Archive Foundation and how your efforts and donations can help, see Sections 3 and 4 and the Foundation information page at www.gutenberg.org. Section 3. Information about the Project Gutenberg Literary Archive Foundation The Project Gutenberg Literary Archive Foundation is a non-profit 501(c)(3) educational corporation organized under the laws of the state of Mississippi and granted tax exempt status by the Internal Revenue Service. The Foundation’s EIN or federal tax identification number is 64-6221541. Contributions to the Project Gutenberg Literary Archive Foundation are tax deductible to the full extent permitted by U.S. federal laws and your state’s laws. The Foundation’s business office is located at 809 North 1500 West, Salt Lake City, UT 84116, (801) 596-1887. Email contact links and up to date contact information can be found at the Foundation’s website and official page at www.gutenberg.org/contact Section 4. Information about Donations to the Project Gutenberg Literary Archive Foundation Project Gutenberg™ depends upon and cannot survive without widespread public support and donations to carry out its mission of increasing the number of public domain and licensed works that can be freely distributed in machine-readable form accessible by the widest array of equipment including outdated equipment. Many small donations ($1 to $5,000) are particularly important to maintaining tax exempt status with the IRS. The Foundation is committed to complying with the laws regulating charities and charitable donations in all 50 states of the United States. Compliance requirements are not uniform and it takes a considerable effort, much paperwork and many fees to meet and keep up with these requirements. We do not solicit donations in locations where we have not received written confirmation of compliance. To SEND DONATIONS or determine the status of compliance for any particular state visit www.gutenberg.org/donate. While we cannot and do not solicit contributions from states where we have not met the solicitation requirements, we know of no prohibition against accepting unsolicited donations from donors in such states who approach us with offers to donate. International donations are gratefully accepted, but we cannot make any statements concerning tax treatment of donations received from outside the United States. U.S. laws alone swamp our small staff. Please check the Project Gutenberg web pages for current donation methods and addresses. Donations are accepted in a number of other ways including checks, online payments and credit card donations. To donate, please visit: www.gutenberg.org/donate. Section 5. General Information About Project Gutenberg™ electronic works Professor Michael S. Hart was the originator of the Project Gutenberg™ concept of a library of electronic works that could be freely shared with anyone. For forty years, he produced and distributed Project Gutenberg™ eBooks with only a loose network of volunteer support. Project Gutenberg™ eBooks are often created from several printed editions, all of which are confirmed as not protected by copyright in the U.S. unless a copyright notice is included. Thus, we do not necessarily keep eBooks in compliance with any particular paper edition. Most people start at our website which has the main PG search facility: www.gutenberg.org. This website includes information about Project Gutenberg™, including how to make donations to the Project Gutenberg Literary Archive Foundation, how to help produce our new eBooks, and how to subscribe to our email newsletter to hear about new eBooks. The Project Gutenberg eBook of The Internet and Languages [around the year 2000] This ebook is for the use of anyone anywhere in the United States and most other parts of the world at no cost and with almost no restrictions whatsoever. You may copy it, give it away or re-use it under the terms of the Project Gutenberg License included with this ebook or online at www.gutenberg.org. If you are not located in the United States, you will have to check the laws of the country where you are located before using this eBook. *** This is a COPYRIGHTED Project Gutenberg eBook. Details Below. *** *** Please follow the copyright guidelines in this file. *** Title: The Internet and Languages [around the year 2000] Author: Marie Lebert Release date: November 8, 2009 [eBook #30422] Language: English Credits: Produced by Al Haines *** START OF THE PROJECT GUTENBERG EBOOK THE INTERNET AND LANGUAGES [AROUND THE YEAR 2000] *** Produced by Al Haines THE INTERNET AND LANGUAGES [around the year 2000] MARIE LEBERT NEF, University of Toronto, 2009 Copyright © 2009 Marie Lebert. All rights reserved. TABLE Introduction "Language nations" online Towards a "linguistic democracy" Encoding: from ASCII to Unicode First multilingual projects Online language dictionaries Learning languages online Minority languages on the web Multilingual encyclopedias Localization and internationalization Machine translation Chronology Websites INTRODUCTION It is true that the internet transcends the limitations of time, distances and borders, but what about languages? Non-English-speaking internet users reached 50% in July 2000. # "Language Nations" "Because the internet has no national boundaries, the organization of users is bounded by other criteria driven by the medium itself. In terms of multilingualism, you have virtual communities, for example, of what I call 'Language Nations'... all those people on the internet wherever they may be, for whom a given language is their native language. Thus, the Spanish Language nation includes not only Spanish and Latin American users, but millions of Hispanic users in the U.S., as well as odd places like Spanish-speaking Morocco." (Randy Hobler, consultant in internet marketing for translation products and services, September 1998) # "Linguistic Democracy" "Whereas 'mother-tongue education' was deemed a human right for every child in the world by a UNESCO report in the early 1950s, 'mother- tongue surfing' may very well be the Information Age equivalent. If the internet is to truly become the Global Network that it is promoted as being, then all users, regardless of language background, should have access to it. To keep the internet as the preserve of those who, by historical accident, practical necessity, or political privilege, happen to know English, is unfair to those who don't." (Brian King, director of the WorldWide Language Institute, September 1998) # A medium for the world "It is very important to be able to communicate in various languages. I would even say this is mandatory, because the information given on the internet is meant for the whole world, so why wouldn't we get this information in our language or in the language we wish? Worldwide information, but no broad choice for languages, this would be quite a contradiction, wouldn't it?" (Maria Victoria Marinetti, teacher in Spanish and translator, August 1999) # Good software "When software gets good enough for people to chat or talk on the web in real time in different languages, then we will see a whole new world appear before us. Scientists, political activists, businesses and many more groups will be able to communicate immediately without having to go through mediators or translators." (Tim McKenna, writer and philosopher, October 2000) *** Unless specified otherwise, quotations are excerpts from NEF interviews. Many thanks to all those who are quoted in this book, and who kindly answered questions about multilingualism over the years. Most interviews are available online <http://www.etudes- francaises.net/entretiens/>. This book is also available in French, with a different text. Both versions are available online <http://www.etudes-francaises.net/entretiens/multi.htm>. The author, whose mother tongue is French, is responsible for any remaining mistakes in English. Marie Lebert is a researcher and editor specializing in technology for books, other media, and languages. Her books are published by NEF (Net des études françaises / Net of French Studies), University of Toronto, Canada, and are freely available online <http://www.etudes- francaises.net>. "LANGUAGE NATIONS" ONLINE = [Quote] Randy Hobler, a consultant in internet marketing for Globalink, a company specializing in language translation software and services, wrote in September 1998: "Because the internet has no national boundaries, the organization of users is bounded by other criteria driven by the medium itself. In terms of multilingualism, you have virtual communities, for example, of what I call 'Language Nations'... all those people on the internet wherever they may be, for whom a given language is their native language. Thus, the Spanish Language nation includes not only Spanish and Latin American users, but millions of Hispanic users in the U.S., as well as odd places like Spanish-speaking Morocco." = [Text] At first, the internet was nearly 100% English. A network was set up by the Pentagon in 1969, before spreading to U.S. governmental agencies and universities from 1974 onwards, after Vinton Cerf and Bob Kahn invented TCP/IP (transmission control protocol / internet protocol). After the creation of the World Wide Web in 1989-90 by Tim Berners-Lee at the European Laboratory for Particle Physics (CERN) in Geneva, Switzerland, and the distribution of the first browser Mosaic, the ancestor of Netscape, from November 1993 onwards, the internet really took off, first in the U.S. and Canada, then worldwide. Why did the internet spread in North America first? The U.S. and Canada were leading the way in computer science and communication technology, and a connection to the internet, mainly through a phone line at the time, was much cheaper than in most countries. In Europe, avid internet users needed to navigate the web at night, when phone rates by the minute were cheaper, to cut their expenses. In 1998, some French, Italian and German users were so fed up with the high rates that they launched a movement to boycott the internet one day per week, for internet providers and phone companies to set up a special monthly rate for them. This paid off, and providers began to offer monthly "internet rates". In the 1990s, the percentage of English decreased from nearly 100% to 80%. People from all over the world began to have access to the internet, and to post more and more webpages in their own languages. The first major study about language distribution on the web was run by Babel, a joint initiative from Alis Technologies, a company specializing in language translation services, and the Internet Society. The results were published in June 1997 on a webpage named "Web Languages Hit Parade". The main languages were English with 82.3%, German with 4.0%, Japanese with 1.6%, French with 1.5%, Spanish with 1.1%, Swedish with 1.1%, and Italian with 1.0%. In "Web Embraces Language Translation", an article published in ZDNN (ZDNetwork News) on 21 July 1998, Martha L. Stone explained: "This year, the number of new non-English websites is expected to outpace the growth of new sites in English, as the cyber world truly becomes a 'World Wide Web'." According to Global Reach, a branch of Euro-Marketing Associates, an international marketing consultancy, there were 56 million non-English- speaking users in July 1998, with 22.4% Spanish-speaking users, 12.3% Japanese-speaking users, 14% German-speaking users, and 10% French- speaking users. But 80% of all webpages were still in English, whereas only 6% of the world population was speaking English as a native language, while 16% was speaking Spanish as a native language. 15% of Europe's half a billion population spoke English as a first language, 28% didn't speak English at all, and 32% were using the web in English. Jean-Pierre Cloutier was the editor of "Chroniques de Cybérie", a weekly French-language online report of internet news. He wrote in August 1999: "We passed a milestone this summer. Now more than half the users of the internet live outside the United States. Next year, more than half of all users will be non English-speaking, compared with only 5% five years ago. Isn't that great? (...) The web is going to grow in non-English-speaking regions. So we have to take into account the technical aspects of the medium if we want to reach these 'new' users. I think it is a pity there are so few translations of important documents and essays published on the web - from English into other languages and vice versa. (...) In the same way, the recent spreading of the internet in new regions raises questions which would be good to read about. When will Spanish-speaking communication theorists and those speaking other languages be translated?" Will the web hold as many languages as the ones spoken on our planet? This will be quite a challenge, with the 6,700 languages listed in "The Ethnologue: Languages of the World", an authoritative catalog published by SIL International (SIL: Summer Institute of Linguistics) and freely available on the web since the mid-1990s. The year 2000 was a turning point for a multilingual internet, regarding its users. Non English-speaking users reached 50% in summer 2000. According to Global Reach, they were 52.5% in summer 2001, 57% in December 2001, 59.8% in April 2002, 64.4% in September 2003 (including 34.9% non-English-speaking Europeans and 29.4% Asians), and 64.2% in March 2004 (including 37.9% non-English-speaking Europeans and 33% Asians). Despite the so-called English-language hegemony some non-English- speaking intellectuals were complaining about, without doing much to promote their own language, the internet was also a good medium for minority languages, as stated by Caoimhín Ó Donnaíle. Caoimhín has taught computing at the Institute Sabhal Mór Ostaig, on the Island of Skye (Scotland). He has also created and maintained the college website, as the main site worldwide with information on Scottish Gaelic, with a bilingual (English, Gaelic) list of European minority languages. He wrote in May 2001: "Students do everything by computer, use Gaelic spell-checking, a Gaelic online terminology database. There are more hits on our website. There is more use of sound. Gaelic radio (both Scottish and Irish) is now available continuously worldwide via the internet. A major project has been the translation of the Opera web-browser into Gaelic - the first software of this size available in Gaelic." TOWARDS A "LINGUISTIC DEMOCRACY" = [Quote] Brian King, director of the WorldWide Language Institute (WWLI), brought up the concept of "linguistic democracy" in September 1998: "Whereas 'mother-tongue education' was deemed a human right for every child in the world by a UNESCO report in the early 1950s, 'mother- tongue surfing' may very well be the Information Age equivalent. If the internet is to truly become the Global Network that it is promoted as being, then all users, regardless of language background, should have access to it. To keep the internet as the preserve of those who, by historical accident, practical necessity, or political privilege, happen to know English, is unfair to those who don't." = [Text] Yoshi Mikami, a computer scientist at Asia Info Network in Fujisawa (Japan), launched in December 1995 the website "The Languages of the World by Computers and the Internet", also known as the Logos Home Page or Kotoba Home Page. (The website was updated until September 2001.) Yoshi was also the co-author (with Kenji Sekine and Nobutoshi Kohara) of "The Multilingual Web Guide" (Japanese edition), a print book published by O'Reilly Japan in August 1997, and translated in 1998 into English, French and German. Yoshi Mikami explained in December 1998: "My native tongue is Japanese. Because I had my graduate education in the U.S. and worked in the computer business, I became bilingual in Japanese and American English. I was always interested in languages and different cultures, so I learned some Russian, French and Chinese along the way. In late 1995, I created on the web 'The Languages of the World by Computers and the Internet' and tried to summarize there the brief history, linguistic and phonetic features, writing system and computer processing aspects for each of the six major languages of the world, in English and Japanese. As I gained more experience, I invited my two associates to help me write a book on viewing, understanding and creating multilingual webpages, which was published in August 1997 as 'The Multilingual Web Guide', in a Japanese edition, the world's first book on such a subject." Yoshi added in the same email interview: "Thousands of years ago, in Egypt, China and elsewhere, people were more concerned about communicating their laws and thoughts not in just one language, but in several. In our modern world, most nation states have each adopted one language for their own use. I predict greater use of different languages and multilingual pages on the internet, not a simple gravitation to American English, and also more creative use of multilingual computer translation. 99% of the websites created in Japan are written in Japanese." Robert Ware launched his website OneLook Dictionaries in April 1996 as a "fast finder" in hundreds of online dictionaries. On September 2, 1998, the fast finder could "browse" 2,058,544 words in 425 dictionaries covering various topics: business, computer/internet, medical, miscellaneous, religion, science, sports, technology, general, and slang. OneLook Dictionaries was provided as a free service by the company Study Technologies, in Englewood, Colorado. Robert Ware explained in September 1998: "On the personal side, I was almost entirely in contact with people who spoke one language and did not have much incentive to expand language abilities. Being in contact with the entire world has a way of changing that. And changing it for the better! (...) I have been slow to start including non-English dictionaries (partly because I am monolingual). But you will now find a few included." In the same email interview, Robert wrote about a personal experience showing the internet could promote both a common language and multilingualism: "In 1994, I was working for a college and trying to install a software package on a particular type of computer. I located a person who was working on the same problem and we began exchanging email. Suddenly, it hit me... the software was written only 30 miles away but I was getting help from a person half way around the world. Distance and geography no longer mattered! OK, this is great! But what is it leading to? I am only able to communicate in English but, fortunately, the other person could use English as well as German which was his mother tongue. The internet has removed one barrier (distance) but with that comes the barrier of language. It seems that the internet is moving people in two quite different directions at the same time. The internet (initially based on English) is connecting people all around the world. This is further promoting a common language for people to use for communication. But it is also creating contact between people of different languages and creates a greater interest in multilingualism. A common language is great but in no way replaces this need. So the internet promotes both a common language *and* multilingualism. The good news is that it helps provide solutions. The increased interest and need is creating incentives for people around the world to create improved language courses and other assistance, and the internet is providing fast and inexpensive opportunities to make them available." The internet could also be a tool to develop a "cultural identity". During the Symposium on Multimedia Convergence organized by the International Labor Office (ILO) in January 1997, Shinji Matsumoto, general secretary of the Musicians' Union of Japan (MUJ), explained: "Japan is quite receptive to foreign culture and foreign technology. (...) Foreign culture is pouring into Japan and, in fact, the domestic market is being dominated by foreign products. Despite this, when it comes to preserving and further developing Japanese culture, there has been insufficient support from the government. (...) With the development of information networks, the earth is getting smaller and it is wonderful to be able to make cultural exchanges across vast distances and to deepen mutual understanding among people. We have to remember to respect national cultures and social systems." December 1997 was a turning point for a plurilingual web. AltaVista, a leading search engine, was the first website to launch a free translation software called Babel Fish (or AltaVista Translation), which could translate up to three pages from English into French, German, Italian, Portuguese or Spanish, and vice versa. Non-English- speaking users were thrilled. The software was developed by Systran, a pioneer company specializing in machine translation. Later on, other translation software was developed by Alis Technologies, Globalink, Lernout & Hauspie, Softissimo, Wordfast and Trados, with free and/or paid versions available on the web. Brian King, director of the WorldWide Language Institute (WWLI), brought up the concept of "linguistic democracy" in September 1998: "Whereas 'mother-tongue education' was deemed a human right for every child in the world by a UNESCO report in the early 1950s, 'mother- tongue surfing' may very well be the Information Age equivalent. If the internet is to truly become the Global Network that it is promoted as being, then all users, regardless of language background, should have access to it. To keep the internet as the preserve of those who, by historical accident, practical necessity, or political privilege, happen to know English, is unfair to those who don't." Geoffrey Kingscott was the managing director of Praetorius, a language consultancy in applied languages. He wrote in September 1998: "Because the salient characteristics of the web are the multiplicity of site generators and the cheapness of message generation, as the web matures it will in fact promote multilingualism. The fact that the web originated in the USA means that it is still predominantly in English but this is only a temporary phenomenon. If I may explain this further, when we relied on the print and audiovisual (film, television, radio, video, cassettes) media, we had to depend on the information or entertainment we wanted to receive being brought to us by agents (publishers, television and radio stations, cassette and video producers) who have to subsist in a commercial world or -- as in the case of public service broadcasting -- under severe budgetary restraints. That means that the size of the customer-base is all- important, and determines the degree to which languages other than the ubiquitous English can be accommodated. These constraints disappear with the web. To give only a minor example from our own experience, we publish the print version of Language Today [a magazine for linguists, published by Praetorius] only in English, the common denominator of our readers. When we use an article which was originally in a language other than English, or report an interview which was conducted in a language other than English, we translate into English and publish only the English version. This is because the number of pages we can print is constrained, governed by our customer-base (advertisers and subscribers). But for our web edition we also give the original version." Founder of Euro-Marketing Associates and its virtual branch Global Reach, Bill Dunlap was championing the assets of e-commerce in Europe among his fellow compatriots in the U.S. Bill wrote in December 1998: "There are so few people in the U.S. interested in communicating in many languages -- most Americans are still under the delusion that the rest of the world speaks English. However, here in Europe (I'm writing from France), the countries are small enough so that an international perspective has been necessary for centuries." As the internet quickly spread worldwide, more and more people in the U.S. realized that, although English may stay the main international language for exchanges of all kinds, people did prefer to read information in their own language. To reach as large an audience as possible, companies and organizations needed to offer bilingual, trilingual, even multilingual websites, while adapting their content to a given audience. Thus the need of both localization and internationalization, which became a major trend in the following years, not only in the U.S. but in many countries, with companies setting up bilingual websites, in their language and in English, to reach a wider audience, and get more clients. Brian King, director of the WorldWide Language Institute (WWLI), explained in September 1998: "As well as the appropriate technology being available so that the non-English speaker can go, there is the impact of 'electronic commerce' as a major force that may make multilingualism the most natural path for cyberspace. A pull from non- English-speaking computer users and a push from technology companies competing for global markets has made localization a fast growing area in software and hardware development." In 1998, the European Network in Language and Speech (ELSNET) was a network of more than 100 European academic and industrial institutions. ELSNET members intended to build multilingual speech and natural language systems with coverage of both spoken and written language. Steven Krauwer, coordinator of ELSNET, explained in September 1998: "As a European citizen I think that multilingualism on the web is absolutely essential, as in the long run I don't think that it is a healthy situation when only those who have a reasonable command of English can fully exploit the benefits of the web. As a researcher (specialized in machine translation) I see multilingualism as a major challenge: how can we ensure that all information on the web is accessible to everybody, irrespective of language differences." Steven added in August 1999: "I've become more and more convinced we should be careful not to address the multilinguality problem in isolation. I've just returned from a wonderful summer vacation in France, and even if my knowledge of French is modest (to put it mildly), it's surprising to see that I still manage to communicate successfully by combining my poor French with gestures, facial expressions, visual clues and diagrams. I think the web (as opposed to old-fashioned text-only email) offers excellent opportunities to exploit the fact that transmission of information via different channels (or modalities) can still work, even if the process is only partially successful for each of the channels in isolation." What practical solutions would he suggest for a truly multilingual web? "At the author end: better education of web authors to use combinations of modalities to make communication more effective across language barriers (and not just for cosmetic reasons). At the server end: more translation facilities à la AltaVista (quality not impressive, but always better than nothing). At the browser end: more integrated translation facilities (especially for the smaller languages), and more quick integrated dictionary lookup facilities." Linguistic pluralism and diversity are everybody's business, as explained in a petition launched by the European Committee for the Respect of Cultures and Languages in Europe (ECRCLE) "for a humanist and multilingual Europe, rich of its cultural diversity": "Linguistic pluralism and diversity are not obstacles to the free circulation of men, ideas, goods and services, as would like to suggest some objective allies, consciously or not, of the dominant language and culture. Indeed, standardization and hegemony are the obstacles to the free blossoming of individuals, societies and the information economy, the main source of tomorrow's jobs. On the contrary, the respect for languages is the last hope for Europe to get closer to the citizens, an objective always claimed and almost never put into practice. The Union must therefore give up privileging the language of one group." The full text of the petition was available in the eleven official languages of the European Union. Among other things, the petition asked the revisors of the Treaty of the European Union to include the respect of national cultures and languages in the text of the treaty, and the national governments to "teach the youth at least two, and preferably three foreign European languages; encourage the national audiovisual and musical industries; and favour the diffusion of European works." Henk Slettenhaar is a professor in communication technology at Webster University in Geneva, Switzerland. Henk is a trilingual European. He is Dutch, he teaches computer science in English, and he is fluent in French as a resident in neighboring France. He has regularly insisted on the need of bilingual websites, in the original language and in English. He wrote in December 1998: "I see multilingualism as a very important issue. Local communities which are on the web should use the local language first and foremost for their information. If they want to be able to present their information to the world community as well, their information should be in English as well. I see a real need for bilingual websites. (...) As far as languages are concerned, I am delighted that there are so many offerings in the original languages now. I much prefer to read the original with difficulty than to get a bad translation." Henk added in August 1999: "There are two main categories of websites in my opinion. The first one is the global outreach for business and information. Here the language is definitely English first, with local versions where appropriate. The second one is local information of all kinds in the most remote places. If the information is meant for people of an ethnic and/or language group, it should be in that language first, with perhaps a summary in English. We have seen lately how important these local websites are -- in Kosovo and Turkey, to mention just the most recent ones. People were able to get information about their relatives through these sites." Marcel Grangier was the head of the French Section of the Swiss Federal Government's Central Linguistic Services, which means he was in charge of organizing translations into French for the Swiss government. He wrote in January 1999: "We can see multilingualism on the internet as a happy and irreversible inevitability. So we have to laugh at the doomsayers who only complain about the supremacy of English. Such supremacy is not wrong in itself, because it is mainly based on statistics (more PCs per inhabitant, more people speaking English, etc.). The answer is not to 'fight' English, much less whine about it, but to build more sites in other languages. As a translation service, we also recommend that websites be multilingual. The increasing number of languages on the internet is inevitable and can only boost multicultural exchanges. For this to happen in the best possible circumstances, we still need to develop tools to improve compatibility. Fully coping with accents and other characters is only one example of what can be done." Alain Bron, a consultant in information systems and a writer, wrote in January 1999: "Different languages will still be used for a long time to come and this is healthy for the right to be different. The risk is of course an invasion of one language to the detriment of others, and with it the risk of cultural standardization. I think online services will gradually emerge to get around this problem. First, translators will be able to translate and comment on texts by request, but mainly sites with a large audience will provide different language versions, just as the audiovisual industry does now." Guy Antoine, founder of Windows on Haiti, a reference website about Haitian culture, wrote in November 1999: "It is true that for all intents and purposes English will continue to dominate the web. This is not so bad in my view, in spite of regional sentiments to the contrary, because we do need a common language to foster communications between people the world over. That being said, I do not adopt the doomsday view that other languages will just roll over in submission. Quite the contrary. The internet can serve, first of all, as a repository of useful information on minority languages that might otherwise vanish without leaving a trace. Beyond that, I believe that it provides an incentive for people to learn languages associated with the cultures about which they are attempting to gather information. One soon realizes that the language of a people is an essential and inextricable part of its culture. (...) From this standpoint, I have much less faith in mechanized tools of language translation, which render words and phrases but do a poor job of conveying the soul of a people. Who are the Haitian people, for instance, without "Kreyòl" (Creole for the non-initiated), the language that has evolved and bound various African tribes transplanted in Haiti during the slavery period? It is the most palpable exponent of commonality that defines us as a people. However, it is primarily a spoken language, not a widely written one. I see the web changing this situation more so than any traditional means of language dissemination. In Windows on Haiti, the primary language of the site is English, but one will equally find a center of lively discussion conducted in "Kreyòl". In addition, one will find documents related to Haiti in French, in the old colonial creole, and I am open to publishing others in Spanish and other languages. I do not offer any sort of translation, but multilingualism is alive and well at the site, and I predict that this will increasingly become the norm throughout the web." ENCODING: FROM ASCII TO UNICODE = [Quote] Brian King, director of the WorldWide Language Institute (WWLI), explained in September 1998: "The first step was for ASCII to become Extended ASCII. This meant that computers could begin to start recognizing the accents and symbols used in variants of the English alphabet -- mostly used by European languages. But only one language could be displayed on a page at a time. (...) The most recent development is Unicode. Although still evolving and only just being incorporated into the latest software, this new coding system translates each character into 16 bytes. Whereas 8-byte extended ASCII could only handle a maximum of 256 characters, Unicode can handle over 65,000 unique characters and therefore potentially accommodate all of the world's writing systems on the computer. So now the tools are more or less in place. They are still not perfect, but at last we can at least surf the web in Chinese, Japanese, Korean, and numerous other languages that don't use the Western alphabet. As the internet spreads to parts of the world where English is rarely used - such as China, for example, it is natural that Chinese, and not English, will be the preferred choice for interacting with it. For the majority of the users in China, their mother tongue will be the only choice." = Encoding in Project Gutenberg Used since the beginning of computing, ASCII (American Standard Code for Information Interchange) is a 7-bit coded character set for information interchange in English. It was published in 1968 by ANSI (American National Standards Institute), with an update in 1977 and 1986. The 7-bit plain ASCII, also called Plain Vanilla ASCII, is a set of 128 characters with 95 printable unaccented characters (A-Z, a-z, numbers, punctuation and basic symbols), i.e. the ones that are available on the English/American keyboard. With the use of other European languages, extensions of ASCII (also called ISO-8859 or ISO- Latin) were created as sets of 256 characters to add accented characters as found in French, Spanish and German, for example ISO 8859-1 (ISO-Latin-1) for French. Created by Michael Hart in July 1971, Project Gutenberg was the first information provider on the internet. Michael's purpose was to digitize as many literary texts as possible, and to offer them for free in a digital library open to anyone. Michael explained in August 1998: "We consider etext to be a new medium, with no real relationship to paper, other than presenting the same material, but I don't see how paper can possibly compete once people each find their own comfortable way to etexts, especially in schools." Whether digitized years ago or now, all Project Gutenberg books are created in 7-bit plain ASCII, called Plain Vanilla ASCII. When 8-bit ASCII is used for books with accented characters like French or German, Project Gutenberg also produces a 7-bit ASCII version with the accents stripped. (This doesn't apply for languages that are not "convertible" in ASCII, like Chinese, encoded in Big-5.) Project Gutenberg sees Plain Vanilla ASCII as the best format by far, and calls it "the lowest common denominator". It can be read, written, copied and printed by any simple text editor or word processor on any electronic device. It is the only format compatible with 99% of hardware and software. It can be used as it is or to create versions in many other formats. It will still be used while other formats will be obsolete, or are already obsolete, like formats of a few short-lived reading devices launched since 1999. It is the assurance collections will never be obsolete, and will survive future technological changes. The goal is to preserve the texts not only over decades but over centuries. Project Gutenberg also publishes ebooks in well-known formats like HTML, XML or RTF. There are Unicode files too. Any other format provided by volunteers (PDF, LIT, TeX and many others) is usually accepted, as long as they also supply an ASCII version where possible. Initially, the books were mostly in English. As the original Project Gutenberg is based in the United States, its first focus was the English-speaking community in the country and worldwide. In October 1997, Michael Hart expressed his intention to digitize ebooks in other languages. In early 1998, the catalog had a few titles in French (10 titles), German, Italian, Spanish and Latin. In July 1999, Michael wrote: "I am publishing in one new language per month right now, and will continue as long as possible." In the 2000s, multilingualism became a priority for Project Gutenberg, like internationalization, with Project Gutenberg Australia (created in August 2001), Project Gutenberg Europe (created in January 2004), Project Gutenberg Canada (created in July 2007), and others to come. The launching of Project Gutenberg Europe and Distributed Proofreaders Europe (DP Europe) by Project Rastko was an important step. Founded in 1997, Project Rastko is a non-governmental cultural and educational project. One of its goals is the online publishing of Serbian culture. It is part of the Balkans Cultural Network Initiative, a regional cultural network for the Balkan peninsula in south-eastern Europe. DP Europe has used the software of the original Distributed Proofreaders, launched in 2000 to share proofreading among a number of volunteers. Since the beginning, DP Europe has been a multilingual website, with its main pages translated into several European languages by volunteer translators. In April 2004, DP Europe was available in 12 languages. The long-term goal was 60 languages and 60 linguistic teams in the main European languages. DP Europe supports Unicode instead of ASCII, to be able to proofread ebooks in numerous languages. First published in January 1991, Unicode "provides a unique number for every character, no matter what the platform, no matter what the program, no matter what the language" (excerpt from the website). This double-byte platform-independent encoding provides a basis for the processing, storage and interchange of text data in any language, and any modern software and information technology protocols. Unicode is maintained by the Unicode Consortium, and is a component of the W3C (World Wide Web Consortium) specifications. In 2008, 50% of available documents on the internet were encoded in Unicode, with the other 50% encoded in ASCII. In the original Project Gutenberg in the U.S., there were ebooks in 25 languages in February 2004, in 42 languages in July 2005, including Sanskrit and the Mayan languages, and in 50 languages in December 2006. The ten top languages were English, French, German, Finnish, Dutch, Spanish, Chinese, Italian, Portuguese and Tagalog. [Many thanks to Russon Wooldridge and Mike Cook for revising previous versions of this section.] FIRST MULTILINGUAL PROJECTS = [Quote] Tyler Chambers, who created the Human-Languages Page and the Internet Dictionary Project, wrote in September 1998: "Online, my work has been with making language information available to more people through a couple of my web-based projects. While I'm not multilingual, nor even bilingual, myself, I see an importance to language and multilingualism that I see in very few other areas. The internet has allowed me to reach millions of people and help them find what they're looking for, something I'm glad to do. (...) Overall, I think that the web has been great for language awareness and cultural issues -- where else can you randomly browse for 20 minutes and run across three or more different languages with information you might potentially want to know?" = Travlang Travlang is a website dedicated to both travel and languages, created in 1994 by Michael C. Martin on his university's website when he was a student in physics. Travlang included one section called Foreign Languages for Travelers, with links to online tools to learn 60 languages. Another section, Translating Dictionaries, gave access to free dictionaries in a number of languages (Afrikaans, Czech, Danish, Dutch, Esperanto, Finnish, French, Frisian, German, Hungarian, Italian, Latin, Norwegian, Portuguese, Spanish). Other sections offered links to language dictionaries, translation services, language schools, and multilingual bookstores. In 1998, Travlang was still maintained by its founder, who had become a researcher in experimental physics at the Lawrence Berkeley National Laboratory, California. Michael C. Martin wrote in August 1998: "I think the web is an ideal place to bring different cultures and people together, and that includes being multilingual. Our Travlang site is so popular because of this, and people desire to feel in touch with other parts of the world. (...) The internet is really a great tool for communicating with people you wouldn't have the opportunity to interact with otherwise. I truly enjoy the global collaboration that has made our Foreign Languages for Travelers pages possible." Regarding the internet and languages in general, "I think computerized full-text translations will become more common, enabling a lot of basic communications with even more people. This will also help bring the internet more completely to the non- English speaking world." = The Human-Languages Page Created by Tyler Chambers in May 1994, the Human-Languages Page (H-LP) was a comprehensive catalog of 1,800 language-related internet resources in 100 languages. In September 1998, there were six subject listings and two category listings. The six subject listings were: languages and literature, schools and institutions, linguistics resources, products and services, organizations, jobs and internships. The two category listings were: dictionaries, and language lessons. Tyler Chambers' other language-related project was the Internet Dictionary Project (IDP), launched in 1995. As explained on the project's website in September 1998: "The Internet Dictionary Project's goal is to create royalty-free translating dictionaries through the help of the internet's citizens. This site allows individuals from all over the world to visit and assist in the translation of English words into other languages. The resulting lists of English words and their translated counterparts are then made available through this site to anyone, with no restrictions on their use. (...) The Internet Dictionary Project began in 1995 in an effort to provide a noticeably lacking resource to the internet community and to computing in general -- free translating dictionaries. Not only is it helpful to the online community to have access to dictionary searches at their fingertips via the World Wide Web, it also sponsors the growth of computer software which can benefit from such dictionaries -- from translating programs to spelling-checkers to language-education guides and more. By facilitating the creation of these dictionaries online by thousands of anonymous volunteers all over the internet, and by providing the results free-of-charge to anyone, the Internet Dictionary Project hopes to leave its mark on the internet and to inspire others to create projects which will benefit more than a corporation's gross income." Tyler wrote in an email interview in September 1998: "Multilingualism on the web was inevitable even before the medium 'took off', so to speak. 1994 was the year I was really introduced to the web, which was a little while after its christening but long before it was mainstream. That was also the year I began my first multilingual web project, and there was already a significant number of language-related resources online. This was back before Netscape even existed -- Mosaic was almost the only web browser, and webpages were little more than hyperlinked text documents. As browsers and users mature, I don't think there will be any currently spoken language that won't have a niche on the web, from Native American languages to Middle Eastern dialects, as well as a plethora of 'dead' languages that will have a chance to find a new audience with scholars and others alike online. To my knowledge, there are very few language types which are not currently online: browsers currently have the capability to display Roman characters, Asian languages, the Cyrillic alphabet, Greek, Turkish, and more. Accent Software has a product called 'Internet with an Accent' which claims to be able to display over 30 different language encodings. If there are currently any barriers to any particular language being on the web, they won't last long. (...) Online, my work has been with making language information available to more people through a couple of my web-based projects. While I'm not multilingual, nor even bilingual, myself, I see an importance to language and multilingualism that I see in very few other areas. The internet has allowed me to reach millions of people and help them find what they're looking for, something I'm glad to do. It has also made me somewhat of a celebrity, or at least a familiar name in certain circles -- I just found out that one of my web projects had a short mention in Time Magazine's Asia and International issues. Overall, I think that the web has been great for language awareness and cultural issues -- where else can you randomly browse for 20 minutes and run across three or more different languages with information you might potentially want to know? Communications mediums make the world smaller by bringing people closer together; I think that the web is the first (of mail, telegraph, telephone, radio, TV) to really cross national and cultural borders for the average person. Israel isn't thousands of miles away anymore, it's a few clicks away -- our world may now be small enough to fit inside a computer screen." How about the future? "I think that the future of the internet is even more multilingualism and cross-cultural exploration and understanding than we've already seen. But the internet will only be the medium by which this information is carried; like the paper on which a book is written, the internet itself adds very little to the content of information, but adds tremendously to its value in its ability to communicate that information. To say that the internet is spurring multilingualism is a bit of a misconception, in my opinion -- it is communication that is spurring multilingualism and cross-cultural exchange, the internet is only the latest mode of communication which has made its way down to the (more-or-less) common person. The internet has a long way to go before being ubiquitous around the world, but it, or some related progeny, likely will. Language will become even more important than it already is when the entire planet can communicate with everyone else (via the web, chat, games, e-mail, and whatever future applications haven't even been invented yet), but I don't know if this will lead to stronger language ties, or a consolidation of languages until only a few, or even just one remain. One thing I think is certain is that the internet will forever be a record of our diversity, including language diversity, even if that diversity fades away. And that's one of the things I love about the internet -- it's a global model of the saying 'it's not really gone as long as someone remembers it'. And people do remember." In spring 2001, the Human-Languages Page merged with the Languages Catalog, a section of the WWW Virtual Library, to become iLoveLanguages, In September 2003, iLoveLanguages provided an index of 2,000 linguistic resources in 100 languages. As for the Internet Dictionary Project, Tyler ran out of time to manage this project, and removed the ability to update the dictionaries in January 2007. People can still search the available dictionaries or download the archived files. = NetGlos Launched in 1995 by the WorldWide Language Institute (WWLI), an institute providing language instruction via the web, NetGlos (which stands for: Multilingual Glossary of Internet Terminology) has been compiled as a voluntary, collaborative project by a number of translators and other language professionals. In September 1998, NetGlos was available in the following languages: Chinese, Croatian, English, Dutch/Flemish, French, German, Greek, Hebrew, Italian, Maori, Norwegian, Portuguese, and Spanish. Brian King, director of the WorldWide Language Institute, wrote in September 1998 in an email interview: "Although English is still the most important language used on the web, and the internet in general, I believe that multilingualism is an inevitable part of the future direction of cyberspace. Here are some of the important developments that I see as making a multilingual web become a reality: 1. <Popularization of information technology.> Computer technology has traditionally been the sole domain of a 'techie' elite, fluent in both complex programming languages and in English -- the universal language of science and technology. Computers were never designed to handle writing systems that couldn't be translated into ASCII. There wasn't much room for anything other than the 26 letters of the English alphabet in a coding system that originally couldn't even recognize acute accents and umlauts -- not to mention non-alphabetic systems like Chinese. But tradition has been turned upside down. Technology has been popularized. GUIs (graphical user interfaces) like Windows and Macintosh have hastened the process (and indeed it's no secret that it was Microsoft's marketing strategy to use their operating system to make computers easy to use for the average person). These days this ease of use has spread beyond the PC to the virtual, networked space of the internet, so that now non-programmers can even insert Java applets into their webpages without understanding a single line of code. 2. <Competition for a chunk of the 'global market' by major industry players.> An extension of (local) popularization is the export of information technology around the world. Popularization has now occurred on a global scale and English is no longer necessarily the lingua franca of the user. Perhaps there is no true lingua franca, but only the individual languages of the users. One thing is certain -- it is no longer necessary to understand English to use a computer, nor it is necessary to have a degree in computer science. A pull from non- English-speaking computer users and a push from technology companies competing for global markets has made localization a fast growing area in software and hardware development. This development has not been as fast as it could have been. The first step was for ASCII to become Extended ASCII. This meant that computers could begin to start recognizing the accents and symbols used in variants of the English alphabet -- mostly used by European languages. But only one language could be displayed on a page at a time. 3. <Technological developments.> The most recent development is Unicode. Although still evolving and only just being incorporated into the latest software, this new coding system translates each character into 16 bytes. Whereas 8-byte Extended ASCII could only handle a maximum of 256 characters, Unicode can handle over 65,000 unique characters and therefore potentially accommodate all of the world's writing systems on the computer. So now the tools are more or less in place. They are still not perfect, but at last we can at least surf the web in Chinese, Japanese, Korean, and numerous other languages that don't use the Western alphabet. As the internet spreads to parts of the world where English is rarely used -- such as China, for example, it is natural that Chinese, and not English, will be the preferred choice for interacting with it. For the majority of the users in China, their mother tongue will be the only choice. There is a change-over period, of course. Much of the technical terminology on the web is still not translated into other languages. And as we found with our Multilingual Glossary of Internet Terminology -- known as NetGlos -- the translation of these terms is not always a simple process. Before a new term becomes accepted as the 'correct' one, there is a period of instability where a number of competing candidates are used. Often an English loan word becomes the starting point -- and in many cases the endpoint. But eventually a winner emerges that becomes codified into published technical dictionaries as well as the everyday interactions of the nontechnical user. The latest version of NetGlos is the Russian one and it should be available in a couple of weeks or so [at the end of September 1998]. It will no doubt be an excellent example of the ongoing, dynamic process of 'russification' of web terminology. 4. <Linguistic democracy.> Whereas 'mother-tongue education' was deemed a human right for every child in the world by a UNESCO report in the early '50s, 'mother-tongue surfing' may very well be the Information Age equivalent. If the internet is to truly become the Global Network that it is promoted as being, then all users, regardless of language background, should have access to it. To keep the internet as the preserve of those who, by historical accident, practical necessity, or political privilege, happen to know English, is unfair to those who don't. 5. <Electronic commerce.> Although a multilingual web may be desirable on moral and ethical grounds, such high ideals are not enough to make it other than a reality on a small-scale. As well as the appropriate technology being available so that the non-English speaker can go, there is the impact of 'electronic commerce' as a major force that may make multilingualism the most natural path for cyberspace. Sellers of products and services in the virtual global marketplace into which the internet is developing must be prepared to deal with a virtual world that is just as multilingual as the physical world. If they want to be successful, they had better make sure they are speaking the languages of their customers!" How about the future of the WorldWide Language Institute? "As a company that derives its very existence from the importance attached to languages, I believe the future will be an exciting and challenging one. But it will be impossible to be complacent about our successes and accomplishments. Technology is already changing at a frenetic pace. Lifelong learning is a strategy that we all must use if we are to stay ahead and be competitive. This is a difficult enough task in an English-speaking environment. If we add in the complexities of interacting in a multilingual/multicultural cyberspace, then the task becomes even more demanding. As well as competition, there is also the necessity for cooperation -- perhaps more so than ever before. The seeds of cooperation across the internet have certainly already been sown. Our NetGlos Project has depended on the goodwill of volunteer translators from Canada, U.S., Austria, Norway, Belgium, Israel, Portugal, Russia, Greece, Brazil, New Zealand and other countries. I think the hundreds of visitors we get coming to the NetGlos pages everyday is an excellent testimony to the success of these types of working relationships. I see the future depending even more on cooperative relationships -- although not necessarily on a volunteer basis." = Logos Logos is a global translation company with headquarters in Modena, Italy. In 1997, Logos had 200 in-house translators in Modena and 2,500 free-lance translators worldwide, who processed around 200 texts per day. The company made a bold move, and decided to put on the web the linguistic tools used by its translators, for the internet community to freely use them as well. The linguistic tools were the Logos Dictionary, a multilingual dictionary with 7 billion words (in fall 1998); the Logos Wordtheque, a multilingual library with 300 billion words extracted from translated novels, technical manuals and other texts; the Logos Linguistic Resources, a database of 500 glossaries; and the Logos Universal Conjugator, a database for verbs in 17 languages. When interviewed by Annie Kahn in December 1997 for the French daily Le Monde, Rodrigo Vergara, head of Logos, explained: "We wanted all our translators to have access to the same translation tools. So we made them available on the internet, and while we were at it we decided to make the site open to the public. This made us extremely popular, and also gave us a lot of exposure. This move has in fact attracted many customers, and also allowed us to widen our network of translators, thanks to contacts made in the wake of the initiative." In the same article, "Les mots pour le dire" (The Words to Tell it), Annie Kahn wrote: "The Logos site is much more than a mere dictionary or a collection of links to other online dictionaries. The cornerstone is the document search program, which processes a corpus of literary texts available free of charge on the web. If you search for the definition or the translation of a word ('didactique' [didactic], for example), you get not only the answer sought, but also a quote from one of the literary works containing the word (in our case, an essay by Voltaire). All it takes is a click on the mouse to access the whole text or even to order the book, including in foreign translations, thanks to a partnership agreement with the famous online bookstore Amazon.com. However, if no text containing the required word is found, the program acts as a search engine, sending the user to other web sources containing this word. In the case of certain words, you can even hear the pronunciation. If there is no translation currently available, the system calls on the public to contribute. Everyone can make suggestions, after which Logos translators check the suggested translations they receive." ONLINE LANGUAGE DICTIONARIES = [Quote] WordReference.com was created in 1999 by Michael Kellogg, who wrote on his project's website: "I started this site in 1999 in an effort to provide free online bilingual dictionaries and tools to the world for free on the internet. The site has grown gradually ever since to become one of the most-used online dictionaries, and the top online dictionary for its language pairs of English-Spanish, English-French, English-Italian, Spanish-French, and Spanish-Portuguese. Today, I am happy to continue working on improving the dictionaries, its tools and the language forums. I really do enjoy creating new features to make the site more and more useful." = From print versions The first online language dictionaries stemmed from print versions, with websites launched in the mid-1990s. On the website "Merriam-Webster Online: The Language Center", Merriam- Webster, a main publisher of English-language dictionaries, gave free access to online resources stemming from its print publications. The online resources were: Webster Dictionary, Webster Thesaurus, Webster's Third (a lexical landmark), Guide to International Business Communications, Vocabulary Builder (with interactive vocabulary quizzes), and the Barnhart Dictionary Companion (hot new words). The goal was also to help track down definitions, spellings, pronunciations, synonyms, vocabulary exercises, and other key facts about words and language. The "Dictionnaire Francophone en Ligne" was the web version of the "Dictionnaire Universel Francophone", published by Hachette, a major French publisher, and the University Agency for Francophony (AUF: Agence Universitaire de la Francophonie, also known as AUPELF-UREF). The dictionary included not only standard French but also the French- language words and expressions used worldwide. French is the official language of 49 states, with a number of them in Africa, and is spoken by 500 million people worldwide. The Agency of French-speaking Countries (Agence de la Francophonie), which has included the AUF, was founded in 1970 as an instrument of multilateral cooperation at the international level. As a side remark, English and French are the only official and/or cultural languages that are widely spread on five continents. = Directories of dictionaries Directories of dictionaries have been useful too, such as "Dictionnaires Électroniques" (Electronic Dictionaries), an online catalog of electronic dictionaries maintained by the French Section of the Swiss Federal Administration's Central Linguistic Services (SLC-f: Section Française des Services Linguistiques Centraux). The catalog included five main sections: abbreviations and acronyms, monolingual dictionaries, bilingual dictionaries, multilingual dictionaries, and geographical information. The catalog could also be searched by keywords. Marcel Grangier was the head of the French Section of Central Linguistic Services, which means he was in charge of organizing translation matters into French for the linguistic services of the Swiss government. He wrote in January 1999: "Our website was first conceived as an intranet service for translators in Switzerland, who often deal with the same kind of material as the Federal government's translators. Some parts of it are useful to any translators, wherever they are. The section "Dictionnaires Électroniques" is only one section of the website. Other sections deal with administration, law, the French language, and general information. The site also hosts the pages of the Conference of Translation Services of European States (COTSOES). (...) To work without the internet is simply impossible now. Apart from all the tools used (email, the electronic press, services for translators), the internet is for us a vital and endless source of information in what I'd call the 'non-structured sector' of the web. For example, when the answer to a translation problem can't be found on websites presenting information in an organized way, in most cases search engines allow us to find the missing link somewhere on the network." How about the future? "We can see multilingualism on the internet as a happy and irreversible inevitability. So we have to laugh at the doomsayers who only complain about the supremacy of English. Such supremacy isn't wrong in itself, because it is mainly based on statistics (more PCs per inhabitant, more people speaking English, etc.). The answer isn't to 'fight English', much less whine about it, but to build more sites in other languages. As a translation service, we also recommend that websites be multilingual. (...) The increasing number of languages on the internet is inevitable and can only boost multicultural exchanges. For this to happen in the best possible circumstances, we still need to develop tools to improve compatibility. Fully coping with accents and other characters is only one example of what can be done." The section "Dictionnaires Électroniques" was later transfered on the website of the Conference of Translation Services of European States (COTSOES), when COTSOES launched its own website. = The yourDictionary.com portal Robert Beard, a language teacher at Bucknell University, in Lewisburg, Pennsylvania, created the website "A Web of Online Dictionaries" (WOD) in 1995. In September 1998, the website provided an index of 800 online dictionaries in 150 languages, as well as specific sections: multilingual dictionaries, specialized English dictionaries, thesauri and other vocabulary aids, language identifiers and guessers, an index of dictionary indices, the Web of Online Grammars, and the Web of Linguistic Fun (i.e. linguistics for non-specialists). Robert Beard wrote in September 1998: "There was an initial fear that the web posed a threat to multilingualism on the web, since HTML and other programming languages are based on English and since there are simply more websites in English than any other language. However, my websites indicate that multilingualism is very much alive and the web may, in fact, serve as a vehicle for preserving many endangered languages. I now have links to dictionaries in 150 languages and grammars of 65 languages. Moreover, the new attention paid by browser developers to the different languages of the world will encourage even more websites in different languages." A few months later, Robert Beard co-founded a larger project, yourDictionary.com, that included his previous website and was launched in February 2000. He wrote in January 2000: "The new website is an index of 1,200+ dictionaries in more than 200 languages. Besides the WOD, the new website includes a word-of-the-day-feature, word games, a language chat room, the old 'Web of Online Grammars' (now expanded to include additional language resources), the 'Web of Linguistic Fun', multilingual dictionaries; specialized English dictionaries; thesauri and other vocabulary aids; language identifiers and guessers, and other features; dictionary indices. yourDictionary.com will hopefully be the premiere language portal and the largest language resource site on the web. It is now actively acquiring dictionaries and grammars of all languages with a particular focus on endangered languages. It is overseen by a blue ribbon panel of linguistic experts from all over the world. (...) Indeed, yourDictionary.com has lots of new ideas. We plan to work with the Endangered Language Fund in the U.S. and Britain to raise money for the Foundation's work and publish the results on our site. We will have language chatrooms and bulletin boards. There will be language games designed to entertain and teach fundamentals of linguistics. The Linguistic Fun page will become an online journal for short, interesting, yes, even entertaining, pieces on language that are based on sound linguistics by experts from all over the world." How about the future of the web? "The web will be an encyclopedia of the world by the world for the world. There will be no information or knowledge that anyone needs that will not be available. The major hindrance to international and interpersonal understanding, personal and institutional enhancement, will be removed. It would take a wilder imagination than mine to predict the effect of this development on the nature of humankind." = Terminological databases Some terminological databases are run by international organizations in their own field of expertise, with free online versions, for example ILOTERM maintained by the International Labor Organization (ILO), TERMITE (ITU Telecommunication Terminology Database) maintained by the International Telecommunication Union (ITU), WHOTERM (WHO Terminology Information System) maintained by the World Health Organization (WHO), and Eurodicautom maintained by the European Commission. ILOTERM is a quadrilingual (English, French, German, Spanish) terminology database maintained by the Terminology and Reference Unit of the Official Documentation Branch (OFFDOC) at the International Labor Office (ILO) in Geneva, Switzerland. As explained on its website, ILOTERM's primary purpose is to provide solutions, reflecting current usage, to terminological problems in the social and labor fields. Terms are entered in English with their French, Spanish and German equivalents. The database also includes records for the ILO structure and programs, official names of international institutions, national bodies and employers' and workers' organizations, and titles of international meetings. TERMITE (which stands for: Telecommunication Terminology Database) is maintained by the Terminology, References and Computer Aids to Translation Section of the Conference Department at the International Telecommunication Union (ITU) in Geneva, Switzerland. It is a quadrilingual (English, French, Spanish, Russian) terminological database built on the content of all ITU printed glossaries since 1980, and updated with recent entries. WHOTERM (which stands for: WHO Terminology Information System) is maintained by the World Health Organization (WHO) in Geneva, Switzerland. It has included: (a) the WHO General Dictionary Index (in English, with the French and Spanish equivalents); (b) three glossaries in English: Health for All, Programme Development and Management, and Health Promotion; (c) the WHO TermWatch, an awareness service from the Technical Terminology, reflecting the current WHO usage, but not necessarily terms officially approved by WHO, and links to health- related terminology. Eurodicautom, a multilingual terminological database maintained by the Translation Service of the European Commission, was initially developed to assist in-house translators. The free online version was used by European Union officials and by language professionals throughout the world. Its contents were available in the eleven official languages of the European Union (Danish, Dutch, English, Finnish, French, German, Greek, Italian, Portuguese, Spanish, Swedish), plus Latin. Eurodicautom covered "a broad spectrum of human knowledge", mainly relating to economy, science, technology and legislation in the European Union. In late 2003, the website announced the inclusion of the existing database into a larger terminological database that would also include databases from other official European institutions. The new terminological database would be available in more than 20 languages, because a number of Eastern European countries were expected to join the European Union in the near future, thus the need for more languages than the eleven original ones. The European Union went from 15 country members to 25 country members in May 2004, and 27 country members in January 2007. The website of IATE (Inter-Active Terminology for Europe) was launched in March 2007 as an eagerly awaited free service on the web, with 1.4 million entries in 24 languages. = Wikipedia Wikipedia was launched in January 2001 by Jimmy Wales and Larry Sanger (Larry resigned later on). It has quickly grown into the largest reference website on the internet, financed by donations, with no advertising. Its multilingual content is free and written collaboratively by people worldwide, who contribute under a pseudonym. Its website is a wiki, which means that anyone can edit, correct and improve information throughout the encyclopedia. The articles stay the property of their authors, and can be freely used according to the GFDL (GNU Free Documentation License). Wikipedia had 1.3 million articles (by 13,000 contributors) in 100 languages in December 2004, 6 million articles in 250 languages in December 2006, and 7 million articles in 192 languages in May 2007, including 1.8 million articles in English, 589,000 articles in German, 500,000 articles in French, 260,000 articles in Portuguese, and 236,000 articles in Spanish. In August 2009, Wikipedia was among the top five websites in the world, with a total of 330 million visitors a month. Wikipedia is hosted by the Wikimedia Foundation, founded in June 2003, which has run a number of other projects, beginning with Wiktionary (launched in December 2002) and Wikibooks (launched in June 2003), followed by Wikiquote, Wikisource (texts from public domain), Wikimedia Commons (multimedia), Wikispecies (animals and plants), Wikinews, Wikiversity (textbooks), and Wiki Search (search engine). LEARNING LANGUAGES ONLINE = [Quote] Robert Beard, a language teacher at Bucknell University, in Lewisburg, Pennsylvania, wrote in September 1998: "As a language teacher, the web represents a plethora of new resources produced by the target culture, new tools for delivering lessons (interactive Java and Shockwave exercises) and testing, which are available to students any time they have the time or interest -- 24 hours a day, 7 days a week. It is also an almost limitless publication outlet for my colleagues and I, not to mention my institution. (...) Ultimately all course materials, including lecture notes, exercises, moot and credit testing, grading, and interactive exercises will be far more effective in conveying concepts that we have not even dreamed of yet." = CTI Centre for Modern Languages Since its inception in 1989, the CTI (Computer in Teaching Initiative) Centre for Modern Languages, based in the Language Institute at the University of Hull, United Kingdom, aims to promote and encourage the use of computers in language learning and teaching. The CTI Centre provides information on how computer-assisted language learning (CALL) can be effectively integrated into existing courses. It offers support to language lecturers who are using computers in their teaching, or who wish to use them. June Thompson, manager of the CTI Centre, wrote in December 1998: "The internet has the potential to increase the use of foreign languages, and our organization certainly opposed any trend towards the dominance of English as the language of the internet. The use of the internet has brought an enormous new dimension to our work of supporting language teachers in their use of technology in teaching." How about the future? "I suspect that for some time to come, the use of internet-related activities for languages will continue to develop alongside other technology-related activities (e.g. use of CD-ROMs -- not all institutions have enough networked hardware). In the future I can envisage use of internet playing a much larger part, but only if such activities are pedagogy-driven. Our organization is closely associated with the WELL project which devotes itself to these issues." The WELL (Web Enhanced Language Learning) project was a project from EUROCALL (European Association for Computer-Assisted Language Learning). It ran from 1997 to 2000 in the United Kingdom to provide access to high-quality web resources in 12 languages. The resources were selected and described by subject experts, with information and examples on how to use them for teaching and learning. More generally, EUROCALL's goal is to promote the use of foreign languages within Europe, to provide a European focus for all aspects of the use of technology for language learning, and to enhance the quality, dissemination and efficiency of CALL materials. Another project of EUROCALL is CAPITAL (Computer-Assisted Pronunciation Investigation Teaching and Learning), run by a group of researchers and practitioners interested in using computers in this field. = LINGUIST List The LINGUIST List was founded by Anthony Rodriques Aristar in 1990 at the University of Western Australia, with 60 subscribers, before moving from Australia to Texas A&M University in 1991. In 1997, emails sent to the distribution list were also available on the list's own website, in the following sections: the profession (conferences, linguistic associations, programs), research and research support (papers, dissertation abstracts, projects, bibliographies, topics, texts), publications, pedagogy, language resources (languages, language families, dictionaries, regional information), and computer support (fonts and software). The LINGUIST List is a component of the WWW Virtual Library for linguistics. Helen Dry, moderator of the LINGUIST List, wrote in August 1998: "The LINGUIST List, which I moderate, has a policy of posting in any language, since it's a list for linguists. However, we discourage posting the same message in several languages, simply because of the burden extra messages put on our editorial staff. (We are not a bounce- back list, but a moderated one. So each message is organized into an issue with like messages by our student editors before it is posted.) Our experience has been that almost everyone chooses to post in English. But we do link to a translation facility that will present our pages in any of five languages; so a subscriber need not read LINGUIST in English unless s/he wishes to. We also try to have at least one student editor who is genuinely multilingual, so that readers can correspond with us in languages other than English." She added in July 1999: "We are beginning to collect some primary data. For example, we have searchable databases of dissertation abstracts relevant to linguistics, of information on graduate and undergraduate linguistics programs, and of professional information about individual linguists. The dissertation abstracts collection is, to my knowledge, the only freely available electronic compilation in existence." MINORITY LANGUAGES ON THE WEB = [Quote] Caoimhín Ó Donnaíle has taught computing -- through the Gaelic language -- at the Institute Sabhal Mór Ostaig, on the Island of Skye, in Scotland. He has also maintained the bilingual (English, Gaelic) college website, which is the main site worldwide with information on Scottish Gaelic. He wrote in May 2001: "Students do everything by computer, use Gaelic spell-checking, a Gaelic online terminology database. There are more hits on our website. There is more use of sound. Gaelic radio (both Scottish and Irish) is now available continuously worldwide via the internet. A major project has been the translation of the Opera web browser into Gaelic -- the first software of this size available in Gaelic." = The Ethnologue Published by SIL International (SIL was initially known as the Summer Institute of Linguistics), "The Ethnologue: Languages of the World" is an encyclopedic reference work cataloging all of the world's 6,909 known living languages. The 16th edition was published in 2009, in print and on the web. The Ethnologue has been an active research project for more than fifty years. Thousands of linguists have contributed to the Ethnologue worldwide. A new edition is published approximately every four years. The Ethnologue was founded in 1951 by Richard Pittman, who was motivated by the desire to share information on language development needs around the world with his colleagues at SIL International as well as with other language researchers. Richard Pittman was the editor of the 1st to 7th editions (1951-1969). Barbara Grimes was the editor of the 8th to 14th editions (1971-2000). She wrote in January 2000: "It is a catalog of the languages of the world, with information about where they are spoken, an estimate of the number of speakers, what language family they are in, alternate names, names of dialects, other socio-linguistic and demographic information, dates of published Bibles, a name index, a language family index, and language maps." In 1971, information was expanded from primarily minority languages to encompass all known languages of the world. Between 1967 and 1973, she completed an in-depth revision of the information on Africa, the Americas, the Pacific, and a few countries of Asia. During her years as editor, the number of identified languages grew from 4,493 to 6,809. The information recorded on each language expanded so that the published work more than tripled in size. In 2000, Raymond Gordon Jr. became the third editor of the Ethnologue and produced the 15th edition (2005). Shortly after the publication of the 15th edition, Paul Lewis became the editor, responsible for general oversight and research policy. He installed Conrad Hurd as managing editor, responsible for operations and database management, and Raymond Gordon as senior research editor, leading a team of regional and language-family focused research editors. In the Introduction of its latest edition (16th edition, 2009), the Ethnologue defines a language as such: "How one chooses to define a language depends on the purposes one has in identifying that language as distinct from another. Some base their definition on purely linguistic grounds. Others recognize that social, cultural, or political factors must also be taken into account. In addition, speakers themselves often have their own perspectives on what makes a particular language uniquely theirs. Those are frequently related to issues of heritage and identity much more than to the linguistic features of the language(s) in question." As explained in the Introduction, one feature of the database since its inception has been a system of three-letter language identifiers, that appeared in the publication itself from the 10th edition (1984) onwards. "In 1998, the International Organization for Standardization (ISO) adopted ISO 639-2, a standard for three-letter language identifiers. The standard is based on a convergence of ISO 639-1 (an earlier standard for two-letter language identifiers adopted in 1988) and of ANSI Z39.53 (also known as the MARC language codes, a set of three-letter identifiers developed within the library community and adopted as an American National Standard in 1987). The ISO 639-2 standard was insufficient for many purposes since it has identifiers for fewer than 400 individual languages. Thus in 2002, ISO TC37/SC2 formally invited SIL International to prepare a new standard that would reconcile the complete set of codes used in the Ethnologue with the codes already in use in the earlier ISO standard. In addition, codes developed by Linguist List to handle ancient and constructed languages were to be incorporated. The result, which was officially approved by the subscribing national standards bodies in 2006 and published in 2007, is a standard named ISO 639-3 that provides standardized three- letter codes for identifying nearly 7,500 languages (ISO 2007). SIL International was named as the registration authority for the ISO 639-3 standard inventory of language identifiers and administers the annual cycle for changes and updates. This edition of Ethnologue is the second to use the ISO 639-3 language identifiers. In the fifteenth edition they had the status of Draft International Standard. In this edition they are based on the standard as originally adopted plus the 2006 series of adopted change requests (released August 2007) and the 2007 series of adopted change requests (released January 2008). Information about the ISO 639-3 standard and procedures for requesting additions, deletions, and other modifications to the ISO 639-3 inventory of identified languages can be found at the ISO 639-3 website: http://www.sil.org/iso639-3." = Experiences Caoimhín Ó Donnaíle has taught computing - through the Gaelic language - at the Institute Sabhal Mór Ostaig, on the Island of Skye, in Scotland. He has also maintained the bilingual (English, Gaelic) college website, which is the main site worldwide with information on Scottish Gaelic, as well as the bilingual webpage European Minority Languages, a list of minority languages by alphabetic order and by language family. He wrote in May 2001: "There has been a great expansion in the use of information technology in our college. Far more computers, more computing staff, flat screens. Students do everything by computer, use Gaelic spell-checking, and a Gaelic online terminology database. There are more hits on our website. There is more use of sound. Gaelic radio (both Scottish and Irish) is now available continuously worldwide via the internet. A major project has been the translation of the Opera web browser into Gaelic -- the first software of this size available in Gaelic." How about the internet and endangered languages? "I would emphasize the point that as regards the future of endangered languages, the internet speeds everything up. If people don't care about preserving languages, the internet and accompanying globalization will greatly speed their demise. If people do care about preserving them, the internet will be a tremendous help." Guy Antoine is the founder of Windows on Haiti, a reference website about Haitian culture. He wrote in November 1999: "In Windows on Haiti, the primary language of the site is English, but one will equally find a center of lively discussion conducted in 'Kreyòl'. In addition, one will find documents related to Haiti in French, in the old colonial Creole, and I am open to publishing others in Spanish and other languages. I do not offer any sort of translation, but multilingualism is alive and well at the site, and I predict that this will increasingly become the norm throughout the web." Guy added in June 2001: "Kreyòl is the only national language of Haiti, and one of its two official languages, the other being French. It is hardly a minority language in the Caribbean context, since it is spoken by eight to ten million people. (...) I have taken the promotion of Kreyòl as a personal cause, since that language is the strongest of bonds uniting all Haitians, in spite of a small but disproportionately influential Haitian elite's disdainful attitude to adopting standards for the writing of Kreyòl and supporting the publication of books and official communications in that language. For instance, there was recently a two-week book event in Haiti's Capital and it was promoted as 'Livres en Folie' ('A mad feast for books'). Some 500 books from Haitian authors were on display, among which one could find perhaps 20 written in Kreyòl. This is within the context of France's major push to celebrate Francophony among its former colonies. This plays rather well in Haiti, but directly at the expense of Creolophony. What I have created in response to those attitudes are two discussion forums on my website, Windows on Haiti, held exclusively in Kreyòl. One is for general discussions on just about everything but obviously more focused on Haiti's current socio-political problems. The other is reserved only to debates of writing standards for Kreyòl. Those debates have been quite spirited and have met with the participation of a number of linguistic experts. The uniqueness of these forums is their non- academic nature." Robert Beard, co-founder of the yourDictionary.com portal, wrote in January 2000: "While English still dominates the web, the growth of monolingual non-English websites is gaining strength with the various solutions to the font problems. Languages that are endangered are primarily languages without writing systems at all (only 1/3 of the world's 6,000+ languages have writing systems). I still do not see the web contributing to the loss of language identity and still suspect it may, in the long run, contribute to strengthening it. More and more Native Americans, for example, are contacting linguists, asking them to write grammars of their language and help them put up dictionaries. For these people, the web is an affordable boon for cultural expression." LOCALIZATION AND INTERNATIONALIZATION = [Quote] Peter Raggett, deputy-head (and then head) of the Central Library at the OECD (Organization for Economic Cooperation and Development), wrote in August 1999: "I think it is incumbent on European organizations and businesses to try and offer websites in three or four languages if resources permit. In this age of globalization and electronic commerce, businesses are finding that they are doing business across many countries. Allowing French, German, Japanese speakers to easily read one's website as well as English speakers will give a business a competitive edge in the domain of electronic trading." = [Text] In 1999, the subtitle of Babel's website was: "Towards communicating on the internet in any language..." Babel was a joint project from Alis Technologies and the Internet Society to contribute to the internationalization of the internet. Babel offered a multilingual website (English, French, German, Italian, Portuguese, Spanish and Swedish), with information about the world's languages, and a typographical and linguistic glossary. "The Internet and Multilingualism" section gave information on how to develop a multilingual website, and how to code the "world's writing". Bill Dunlap, founder of Euro-Marketing Associates, a company based in San Francisco and Paris, launched the international marketing consultancy Global Reach as a methodology for U.S. companies to expand their internet presence into an international framework. This included translating a website into other languages, actively promoting it, and using local online banner advertising to increase local website traffic. Bill Dunlap explained in December 1998: "Promoting your website is at least as important as creating it, if not more important. You should be prepared to spend at least as much time and money in promoting your website as you did in creating it in the first place. With the Global Reach program, you can have it promoted in countries where English is not spoken, and achieve a wider audience... and more sales. There are many good reasons for taking the online international market seriously. Global Reach is a means for you to extend your website to many countries, speak to online visitors in their own language and reach online markets there. (...) Since 1981, when my professional life started, I've been involved with bringing American companies in Europe. This is very much an issue of language, since the products and their marketing have to be in the languages of Europe in order for them to be visible here. Since the web became popular in 1995 or so, I've turned these activities to their online dimension, and have come to champion European e-commerce among my fellow American compatriots. Most lately at Internet World in New York, I spoke about European e-commerce and how to use a website to address the various markets in Europe." Bill added in July 1999: "After a website's home page is available in several languages, the next step is the development of content in each language. A webmaster will notice which languages draw more visitors (and sales) than others, and these are the places to start in a multilingual web promotion campaign. At the same time, it is always good to increase the number of languages available on a website: just a home page translated into other languages would do for a start, before it becomes obvious that more should be done to develop a certain language branch on a website." The World Wide Web Consortium (W3C) was founded in October 1994 to develop interoperable technologies (specifications, guidelines, software, and tools) for the web, for example specifications for markup languages (HTML, XML, and others), and to act as a forum for information, commerce, communication and collective understanding. In 1998, the section Internationalization/Localization gave a definition of protocols used for internationalization/localization: HTML, base character set, new tags and attributes, HTTP, language negotiation, URLs & other identifiers including non-ASCII characters, etc. It also offered some help with creating a multilingual website. The Localisation Industry Standards Association (LISA) was created in the mid-1990s as a forum for "software publishers, hardware manufacturers, localization service vendors, and an increasing number of companies from related IT sectors." LISA has defined its mission as "promoting the localization and internationalization industry and providing a mechanism and services to enable companies to exchange and share information on the development of processes, tools, technologies and business models connected with localization, internationalization and related topics". Its website was first housed and maintained by the University of Geneva, Switzerland. Launched in January 1999 by the European Commission, the website HLTCentral (HLT: Human Language Technologies) gave a short definition of language engineering: "Through language engineering we can find ways of living comfortably with technology. Our knowledge of language can be used to develop systems that recognize speech and writing, understand text well enough to select information, translate between different languages, and generate speech as well as the printed world. By applying such technologies we have the ability to extend the current limits of our use of language. Language enabled products will become an essential and integral part of everyday life." MACHINE TRANSLATION = [Quote] Tim McKenna is an author who thinks and writes about the complexity of truth in a world of flux. He wrote in October 2000: "When software gets good enough for people to chat or talk on the web in real time in different languages, then we will see a whole new world appear before us. Scientists, political activists, businesses and many more groups will be able to communicate immediately without having to go through mediators or translators." = A definition Machine translation can be defined as the automated process of translating a text from one language to another language. MT analyzes the text in the source language and automatically generates the corresponding text in the target language. With the lack of any human intervention during the translation process, machine translation (MT) differs from computer-assisted translation (CAT), which involves some interaction between the translator and the computer. As explained on the website of SYSTRAN, a company specializing in translation software, "machine translation software translates one natural language into another natural language. MT takes into account the grammatical structure of each language and uses rules to transfer the grammatical structure of the source language (text to be translated) into the target language (translated text). MT cannot replace a human translator, nor is it intended to." The website of the European Association for Machine Translation (EAMT) gives the following definition: "Machine translation (MT) is the application of computers to the task of translating texts from one natural language to another. One of the very earliest pursuits in computer science, MT has proved to be an elusive goal, but today a number of systems are available which produce output which, if not perfect, is of sufficient quality to be useful for certain specific applications, usually in the domain of technical documentation. In addition, translation software packages which are designed primarily to assist the human translator in the production of translations are enjoying increasing popularity within professional translation organizations." Machine translation is the earliest type of natural language processing, as stated on the website of Globalink, a company offering language translation software and services: "From the very beginning, machine translation (MT) and natural language processing (NLP) have gone hand-in-hand with the evolution of modern computational technology. The development of the first general-purpose programmable computers during World War II was driven and accelerated by Allied cryptographic efforts to crack the German Enigma machine and other wartime codes. Following the war, the translation and analysis of natural language text provided a testbed for the newly emerging field of Information Theory. During the 1950s, research on Automatic Translation (known today as Machine Translation, or 'MT') took form in the sense of literal translation, more commonly known as word-for-word translations, without the use of any linguistic rules. The Russian project initiated at Georgetown University in the early 1950s represented the first systematic attempt to create a demonstrable machine translation system. Throughout the decade and into the 1960s, a number of similar university and government-funded research efforts took place in the United States and Europe. At the same time, rapid developments in the field of Theoretical Linguistics, culminating in the publication of Noam Chomsky's "Aspects of the Theory of Syntax" (1965), revolutionized the framework for the discussion and understanding of the phonology, morphology, syntax and semantics of human language. In 1966, the U.S. government-issued ALPAC (Automatic Language Processing Advisory Committee) report offered a prematurely negative assessment of the value and prospects of practical machine translation systems, effectively putting an end to funding and experimentation in the field for the next decade. It was not until the late 1970s, with the growth of computing and language technology, that serious efforts began once again. This period of renewed interest also saw the development of the Transfer model of machine translation and the emergence of the first commercial MT systems. While commercial ventures such as SYSTRAN and METAL began to demonstrate the viability, utility and demand for machine translation, these mainframe-bound systems also illustrated many of the problems in bringing MT products and services to market. High development cost, labor-intensive lexicography and linguistic implementation, slow progress in developing new language pairs, inaccessibility to the average user, and inability to scale easily to new platforms are all characteristics of these second- generation systems." As explained in August 1998 by Eduard Hovy, head of the Natural Language Group at USC/ISI (University of Southern California/Information Sciences Institute), machine translation implies "language-related applications/functionalities that are not translation, such as information retrieval (IR) and automated text summarization (SUM). You would not be able to find anything on the Web without IR! -- all the search engines (AltaVista, Yahoo!, etc.) are built upon IR technology. Similarly, though much newer, it is likely that many people will soon be using automated summarizers to condense (or at least, to extract the major contents of) single (long) documents or lots of (any length) ones together." = Experiences In December 1997, AltaVista, a leading search engine, was the first to launch a free translation software with Babel Fish -- also called AltaVista Translation --, which could translate webpages (up to three pages at the same time) from English into French, German, Italian, Portuguese or Spanish, and vice versa. The software was developed by SYSTRAN (an acronym for System Translation), a company specializing in machine translation software. SYSTRAN's headquarters are located in Soisy-sous-Montmorency, near Paris, France. Sales, marketing, and research and development are based in its subsidiary in La Jolla, California. This initiative was followed by other translation software developed by Alis Technologies, Globalink, Lernout & Hauspie, and Softissimo, with free and/or paid versions on the web. Based in Montreal, Quebec, Alis Technologies has specialized in development and marketing of language handling solutions and services, particularly language implementation in the information technology industry. Alis Translation Solutions (ATS) has offered applications in a number of languages, and tools and services to improve the quality of translations. Language Technology Solutions (LTS) has marketed advanced tools and services for language engineering and information technology (90 languages covered). Based in Ieper, Belgium, and Burlington, Massachusetts, Lernout & Hauspie (L&H) was a leader in advanced speech technology for commercial applications and products, with four core technologies: automatic speech recognition (ASR), text-to-speech (TTS), text-to-text (TTT), and digital speech compression (DSC). Its ASR, TTS and DSC technologies were licensed to companies in telecommunications, computers and multimedia, consumer electronics and automotive electronics. Its TTT translation services were provided to IT companies, and vertical and automation markets. The Machine Translation Group created by Lernout & Hauspie included L&H Language Technology, AppTek, AILogic, NeocorTech, and Globalink. Lernout & Hauspie was later bought by Nuance Communications. Globalink, a company created in 1990 in the U.S., focused on language translation software and services, i.e. customized translation solutions built around software products, online options, and professional translation services. The software products were available in Spanish, French, Portuguese, German, Italian and English, for individuals, small businesses, multinational corporations and governments, from a stand-alone product giving a fast draft translation to a full system managing professional translations. As explained on the company website in 1998, "with Globalink's translation applications, the computer uses three sets of data: the input text, the translation program and permanent knowledge sources (containing a dictionary of words and phrases of the source language), and information about the concepts evoked by the dictionary and rules for sentence development. These rules are in the form of linguistic rules for syntax and grammar, and some are algorithms governing verb conjugation, syntax adjustment, gender and number agreement and word re-ordering. Once the user has selected the text and set the machine translation process in motion, the program begins to match words of the input text with those stored in its dictionary. Once a match is found, the application brings up a complete record that includes information on possible meanings of the word and its contextual relationship to other words that occur in the same sentence. The time required for the translation depends on the length of the text. A three-page, 750-word document takes about three minutes to render a first draft translation." At the headquarters of the World Health Organization (WHO) in Geneva, Switzerland, the Computer-assisted Translation and Terminology Unit (CTT) has been a pioneer since 1997 in assessing technical options for using computer-assisted translation (CAT) systems based on translation memory (TM). With such systems, translators can access previous translations from portions of the text; accept, reject or modify them; and add the new translation to the memory, thus enriching it for future reference. By archiving the daily output, the translator helps in building an extensive translation memory and in solving a number of translation issues. Several projects have been under way at the CTT for electronic document archiving and retrieval, bilingual/multilingual text alignment, computer-assisted translation, translation memory and terminology database management, and speech recognition. The Pan American Health Organization (PAHO) in Washington, D.C. has developed its own machine translation software, as a common work from its own computational linguists, translators, and system programmers. The PAHO Translation Unit has used SPANAM (Spanish to English) from 1980 and ENGSPAN (English to Spanish) from 1985, to process over 25 million words between 1980 and 1998. Staff translators and free-lance translators post-edit the raw output to produce high-quality translations with a 30-50% gain in productivity. The software is available in the LAN (Local Area Network) of PAHO Headquarters, and is regularly used by the staff of technical and administrative units. The software is also available in a number of PAHO field offices, and has been licensed to public and non-profit institutions in the U.S., Latin America, and Spain. The software was later renamed PAHOMTS, and has included new language pairs with Portuguese. = Comments # Comments from ZDNN In "Web Embraces Language Translation", an article published in ZDNN (ZDNetwork News) on 21 July 1998, Martha Stone explained: "Among the new products in the $10 billion language translation business are instant translators for websites, chat rooms, email and corporate intranets. The leading translation firms are mobilizing to seize the opportunities. Such as: *SYSTRAN has partnered with AltaVista and reports between 500,000 and 600,000 visitors a day on babelfish.altavista.digital.com, and about 1 million translations per day -- ranging from recipes to complete webpages. About 15,000 sites link to babelfish, which can translate to and from French, Italian, German, Spanish and Portuguese. The site plans to add Japanese soon. 'The popularity is simple. With the internet, now there is a way to use U.S. content. All of these contribute to this increasing demand,' said Dimitros Sabatakakis, group CEO of SYSTRAN, speaking from his Paris home. *Alis technology powers the Los Angeles Times' soon-to-be launched language translation feature on its site. Translations will be available in Spanish and French, and eventually, Japanese. At the click of a mouse, an entire webpage can be translated into the desired language. *Globalink offers a variety of software and web translation possibilities, including a free email service and software to enable text in chat rooms to be translated. But while these so-called 'machine' translations are gaining worldwide popularity, company execs admit they're not for every situation. Representatives from Globalink, Alis and SYSTRAN use such phrases as 'not perfect' and 'approximate' when describing the quality of translations, with the caveat that sentences submitted for translation should be simple, grammatically accurate and idiom-free. 'The progress on machine translation is moving at Moore's Law -- every 18 months it's twice as good,' said Vin Crosbie, a web industry analyst in Greenwich, Conn. 'It's not perfect, but some [non-English speaking] people don't realize I'm using translation software.' With these translations, syntax and word usage suffer, because dictionary-driven databases can't decipher between homonyms -- for example, 'light' (as in the sun or light bulb) and 'light' (the opposite of heavy). Still, human translation would cost between $50 and $60 per webpage, or about 20 cents per word, SYSTRAN's Sabatakakis said. While this may be appropriate for static 'corporate information' pages, the machine translations are free on the web, and often less than $100 for software, depending on the number of translated languages and special features." # Comments from RALI Despite the imminent outbreak of a universal translation machine announced at the end of the 1940s, machine translation hasn't produced good translations yet. Pierre Isabelle and Patrick Andries, two scientists from the RALI Laboratory (Laboratory for Applied Research in Computational Linguistics - Laboratoire de Recherche Appliquée en Linguistique Informatique) in Montreal, Quebec, explain the reasons for this failure in "La Traduction Automatique, 50 Ans Après" (Machine Translation, 50 Years Later), an article published in 1998 by Multimédium, a French-language online magazine: "The ultimate goal of building a machine capable of competing with a human translator remains elusive due to slow progress in research. (...) Recent research, based on large collections of texts called corpora -- using either statistical or analogical methods -- has promised to reduce the quantity of manual work required to build a machine translation (MT) system, but can't promise for sure a significant improvement in the quality of machine translation. (...) The use of MT will be more or less restricted to tasks of information assimilation or tasks of text distribution in restricted sub-languages." According to Yehochua Bar-Hillel's ideas expressed in "The State of Machine Translation", an article published in 1951, Pierre Isabelle and Patrick Andries define three implementation strategies for machine translation: (a) a tool of information assimilation to scan multilingual data and supply rough translation, (b) situations of "restricted language" such as the METEO system which, since 1977, has translated the weather forecasts of the Canadian Ministry of Environment, (c) the human/machine coupling before, during and after the machine translation process, that may not save money if compared to traditional translation. Pierre Isabelle and Patrick Andries favor "a workstation for the human translator" more than a "robot translator": "Recent research on the probabilist methods showed it was possible to modelize in an efficient way some simple aspects of the translation relationship between two texts. For example, methods were set up to calculate the correct alignment between the text sentences and their translation, that is, to identify the sentence(s) of the source text corresponding to each sentence of the translation. Applied on a large scale, these techniques can use the archives of a translation service to build a translation memory for recycling fragments from previous translations. Such systems are already available on the translation market (IBM Translation Manager II, Trados Translator's Workbench by Trados, RALI TransSearch, etc.) The latest research focuses on models that can automatically set up correspondences at a finer level than the sentence level, i.e. syntagms and words. The results let hope for a bunch of new tools for the human translator, including for the study of terminology, for dictation and translation typing, and for detectors of translation errors." # Comments from Randy Hobler In September 1998, Randy Hobler was a consultant in internet marketing at Globalink, after working for IBM, Johnson & Johnson, Burroughs Wellcome, Pepsi, and Heublein. He wrote in an email interview: "We are rapidly reaching the point where highly accurate machine translation of text and speech will be so common as to be embedded in computer platforms, and even in chips in various ways. At that point, and as the growth of the web slows, the accuracy of language translation hits 98% plus, and the saturation of language pairs has covered the vast majority of the market, language transparency (any-language-to-any- language communication) will be too limiting a vision for those selling this technology. The next development will be 'transcultural, transnational transparency', in which other aspects of human communication, commerce and transactions beyond language alone will come into play. For example, gesture has meaning, facial movement has meaning and this varies among societies. The thumb-index finger circle means 'OK' in the United States. In Argentina, it is an obscene gesture. When the inevitable growth of multimedia, multilingual videoconferencing comes about, it will be necessary to 'visually edit' gestures on the fly. The MIT (Massachusetts Institute of Technology) Media Lab, Microsoft and many others are working on computer recognition of facial expressions, biometric access identification via the face, etc. It won't be any good for a U.S. business person to be making a great point in a web-based multilingual video conference to an Argentinian, having his words translated into perfect Argentinian Spanish if he makes the 'O' gesture at the same time. Computers can intercept this kind of thing and edit them on the fly. There are thousands of ways in which cultures and countries differ, and most of these are computerizable to change as one goes from one culture to the other. They include laws, customs, business practices, ethics, currency conversions, clothing size differences, metric versus English system differences, etc. Enterprising companies will be capturing and programming these differences and selling products and services to help the peoples of the world communicate better. Once this kind of thing is widespread, it will truly contribute to international understanding." = Machine translation R&D Here is an overview of the work of four research centers, in Quebec (RALI Laboratory), California (Natural Language Group), Switzerland (ISSCO) and Japan (UNDL Foundation). # RALI Laboratory In Montreal, Quebec, the RALI Laboratory (Laboratory of Applied Research in Computational Linguistics - Laboratoire de Recherche Appliquée en Linguistique Informatique) has worked in automatic text alignment, automatic text generation, automatic reaccentuation, language identification, and finite state transducers. RALI produces the "TransX family" of what it calls "a new generation" of translation support tools (TransType, TransTalk, TransCheck, and TransSearch), which are based on probabilistic translation models that automatically calculate correspondences between the text produced by a translator and the original text from the source language. As explained on RALI's website in 1998: "(a) TransType speeds up the keying-in of a translation by anticipating a translator's choices and criticizing them when appropriate. In proposing its suggestions, TransType takes into account both the source text and the partial translation that the translator has already produced. (b) TransTalk is an automatic dictation system that makes use of a probabilistic translation model in order to improve the performance of its voice recognition model. (c) TransCheck automatically detects certain types of translation errors by verifying that the correspondences between the segments of a draft and the segments of the source text respect well- known properties of a good translation. (d) TransSearch allows translators to search databases of pre-existing translations in order to find ready-made solutions to all sorts of translation problems. In order to produce the required databases, the translations and the source language texts must first be aligned." # Natural Language Group The Natural Language Group (NLG) at the Information Sciences Institute (ISI) of the University of Southern California (USC) has been involved in various aspects of computational/natural language processing: machine translation, automated text summarization, multilingual verb access and text management, development of large concept taxonomies (ontologies), discourse and text generation, construction of large lexicons for various languages, and multimedia communication. Eduard Hovy, head of the Natural Language Group, explained in August 1998: "People will write their own language for several reasons -- convenience, secrecy, and local applicability -- but that does not mean that other people are not interested in reading what they have to say! This is especially true for companies involved in technology watch (say, a computer company that wants to know, daily, all the Japanese newspaper and other articles that pertain to what they make) or some Government Intelligence agencies (the people who provide the most up- to-date information for use by your government officials in making policy, etc.). One of the main problems faced by these kinds of people is the flood of information, so they tend to hire 'weak' bilinguals who can rapidly scan incoming text and throw out what is not relevant, giving the relevant stuff to professional translators. Obviously, a combination of SUM (automated text summarization) and MT (machine translation) will help here; since MT is slow, it helps if you can do SUM in the foreign language, and then just do a quick and dirty MT on the result, allowing either a human or an automated IR-based text classifier to decide whether to keep or reject the article. For these kinds of reasons, the U.S. Government has over the past five years been funding research in MT, SUM, and IR (information retrieval), and is interested in starting a new program of research in Multilingual IR. This way you will be able to one day open Netscape or Explorer or the like, type in your query in (say) English, and have the engine return texts in *all* the languages of the world. You will have them clustered by subarea, summarized by cluster, and the foreign summaries translated, all the kinds of things that you would like to have." Eduard Hovy added in August 1999: "Over the past 12 months I have been contacted by a surprising number of new information technology (IT) companies and startups. Most of them plan to offer some variant of electronic commerce (online shopping, bartering, information gathering, etc.). Given the rather poor performance of current non-research level natural language processing technology (when is the last time you actually easily and accurately found a correct answer to a question to the web, without having to spend too much time sifting through irrelevant information?), this is a bit surprising. But I think everyone feels that the new developments in automated text summarization, question analysis, and so on, are going to make a significant difference. I hope so!--but the level of performance is not available yet. It seems to me that we will not get a big breakthrough, but we will get a somewhat acceptable level of performance, and then see slow but sure incremental improvement. The reason is that it is very hard to make your computer really 'understand' what you mean -- this requires us to build into the computer a network of 'concepts' and their interrelationships that (at some level) mirror those in your own mind, at least in the subjects areas of interest. The surface (word) level is not adequate -- when you type in 'capital of Switzerland', current systems have no way of knowing whether you mean 'capital city' or 'financial capital'. Yet the vast majority of people would choose the former reading, based on phrasing and on knowledge about what kinds of things one is likely to ask the web, and in what way. Several projects are now building, or proposing to build, such large 'concept' networks. This is not something one can do in two years, and not something that has a correct result. We have to develop both the network and the techniques for building it semi-automatically and self-adaptively. This is a big challenge." Eduard Hovy added in September 2000: "I see a continued increase in small companies using language technology in one way or another: either to provide search, or translation, or reports, or some other communication function. The number of niches in which language technology can be applied continues to surprise me: from stock reports and updates to business-to-business communications to marketing... With regard to research, the main breakthrough I see was led by a colleague at ISI (I am proud to say), Kevin Knight. A team of scientists and students last summer at Johns Hopkins University in Maryland developed a faster and otherwise improved version of a method originally developed (and kept proprietary) by IBM about 12 years ago. This method allows one to create a machine translation (MT) system automatically, as long as one gives it enough bilingual text. Essentially the method finds all correspondences in words and word positions across the two languages and then builds up large tables of rules for what gets translated to what, and how it is phrased. Although the output quality is still low -- no-one would consider this a final product, and no-one would use the translated output as is -- the team built a (low-quality) Chinese-to-English MT system in 24 hours. That is a phenomenal feat -- this has never been done before. (Of course, say the critics: you need something like 3 million sentence pairs, which you can only get from the parliaments of Canada, Hong Kong, or other bilingual countries; and of course, they say, the quality is low. But the fact is that more bilingual and semi-equivalent text is becoming available online every day, and the quality will keep improving to at least the current levels of MT engines built by hand. Of that I am certain.) Other developments are less spectacular. There's a steady improvement in the performance of systems that can decide whether an ambiguous word such as "bat" means "flying mammal" or "sports tool" or "to hit"; there is solid work on cross-language information retrieval (which you will soon see in being able to find Chinese and French documents on the web even though you type in English-only queries), and there is some rather rapid development of systems that answer simple questions automatically (rather like the popular web system AskJeeves, but this time done by computers, not humans). These systems refer to a large collection of text to find 'factiods' (not opinions or causes or chains of events) in response to questions such as 'what is the capital of Uganda?' or 'how old is President Clinton?' or 'who invented the xerox process?', and they do so rather better than I had expected." # ISSCO In Geneva, Switzerland, ISSCO (Dalle Molle Institute for Semantic and Cognitive Studies - Institut Dalle Molle pour les Études Sémantiques et Cognitives) is a research laboratory conducting basic and applied research in computational linguistics (CL) and artificial intelligence (AI), for a number of Swiss and European research projects. The University of Geneva has provided administrative support and infrastructure. Research is funded with grants and contracts with public and private bodies. Created by the Foundation Dalle Molle in 1972 to conduct research in cognition and semantics, ISSCO has come to specialize in natural language processing, including multilingual language processing, in a number of areas: machine translation, linguistic environments, multilingual generation, discourse processing, data collection, etc. ISSCO is multi-disciplinary and multi-national. As explained on its website in 1998, "its staff and its visitors [are drawn] from the disciplines of computer science, linguistics, mathematics, psychology and philosophy. The long-term staff of the Institute is relatively small in number; with a much larger number of visitors coming for stays ranging from a month to two years. This ensures a continual exchange of ideas and encourages flexibility of approach amongst those associated with the Institute." # UNDL Foundation The UNL (universal networking language) project was launched in the mid-1990s as a main digital metalanguage project by the Institute of Advanced Studies (IAS) of the United Nations University (UNU) in Tokyo, Japan. As explained on the bilingual (English, Japanese) website in 1998: "UNL is a language that -- with its companion 'enconverter' and 'deconverter' software -- enables communication among peoples of differing native languages. It will reside, as a plug-in for popular web browsers, on the internet, and will be compatible with standard network servers. The technology will be shared among the member states of the United Nations. Any person with access to the internet will be able to 'enconvert' text from any native language of a member state into UNL. Just as easily, any UNL text can be 'deconverted' from UNL into native languages. United Nations University's UNL Center will work with its partners to create and promote the UNL software, which will be compatible with popular network servers and computing platforms." In 2000, 120 researchers worldwide were working on a multilingual project in 16 languages (Arabic, Brazilian, Chinese, English, French, German, Hindu, Indonesian, Italian, Japanese, Latvian, Mongolian, Russian, Spanish, Swahiki, and Thai). The UNDL Foundation (UNDL: Universal Networking Digital Language) was founded in January 2001 to develop and promote the UNL project. CHRONOLOGY [Each line begins with the year or the year/month.] 1968: ASCII is the first character set encoding. 1971: Project Gutenberg is the first digital library. 1974: The internet takes off. 1990: The web is invented by Tim Berners-Lee. 1991/01: Unicode is a universal character set encoding for all languages. 1993/11: Mosaic is the first web browser. 1994/05: The Human-Languages Page is a catalog of language-related internet resources. 1994/10: The World Wide Web Consortium will deal with internationalization and localization. 1994: Travland is dedicated to both travel and languages. 1995/12: The Kotoba Home Page deals with language issues using our keyboard. 1995: The Internet Dictionary Project works on creating free translating dictionaries. 1995: NetGlos is a multilingual glossary of internet terminology. 1995: Global Reach is a virtual consultancy stemming from Euro-Marketing Associates. 1995: LISA is the localization industry standards association. 1995: "The Ethnologue: Languages of the World" offers a free online version. 1996/04 : OneLook Dictionaries is a fast finder in online dictionaries. 1997/01: UNL (universal networking language) is a digital metalanguage project. 1997/12: AltaVista launches AltaVista Translation, also called Babel Fish. 1997: The Logos Dictionary goes online for free. 1999/12: Britannica.com is the first main English-language online encyclopedia. 1999/12: WebEncyclo is the first main French-language online encyclopedia. 1999: WordReference.com offers free online bilingual translating dictionaries. 2000/02: yourDictionary.com is a major language portal. 2000/07: Non-English-speaking internet users reach 50%. 2001/01: Wikipedia is a main free multilingual cooperative encyclopedia. 2001/01: The UNDL Foundation develops UNL, a digital metalanguage project. 2001/04: The Human-Languages Project becomes the iLoveLanguages portal. 2004/01: Project Gutenberg Europe is launched as a multilingual project. 2007/03: IATE is the new terminological database of the European Union. 2009: "The Ethnologue" launches its 16th edition as an encyclopedic reference work. WEBSITES Alis Technologies: http://www.alis.com/ Aquarius.net: Directory of Localization Experts: http://www.aquarius.net/ ASCII Table: http://www.asciitable.com/ Asia-Pacific Association for Machine Translation (AAMT): http://www.aamt.info/ Association for Computational Linguistics (ACL): http://www.aclweb.org/ Association for Machine Translation in the Americas (AMTA): http://www.amtaweb.org/ CALL@Hull: http://www.fredriley.org.uk/call/ ELRA (European Language Resources Association): http://www.elra.info/ ELSNET (European Network of Excellence in Human Language Technologies): http://www.elsnet.org/ Encyclopaedia Britannica Online: http://www.britannica.com/ Encyclopaedia Universalis: http://www.universalis-edu.com/ Ethnologue: http://www.ethnologue.com/ Ethnologue: Endangered Languages: http://www.ethnologue.com/nearly_extinct.asp EUROCALL (European Association for Computer-Assisted Language Learning): http://www.eurocall-languages.org/ European Association for Machine Translation (EAMT): http://www.eamt.org/ European Bureau for Lesser-Used Languages (EBLUL): http://www.eblul.org/ European Commission: Languages of Europe: http://ec.europa.eu/education/languages/languages-of-europe/ European Minority Languages (list of the Institute Sabhal Mòr Ostaig): http://www.smo.uhi.ac.uk/saoghal/mion-chanain/en/ Google Translate: http://translate.google.com/ Grand Dictionnaire Terminologique (GDT): http://www.granddictionnaire.com/ IATE: InterActive Terminology for Europe: http://iate.europa.eu/ ILOTERM (ILO: International Labor Organization): http://www.ilo.org/iloterm/ iLoveLanguages: http://www.ilovelanguages.com/ International Committe on Computational Linguistics (ICCL): http://nlp.shef.ac.uk/iccl/ Internet Dictionary Project (IDP): http://www.june29.com/IDP/ Internet Society (ISOC): http://www.isoc.org/ Laboratoire CLIPS (Communication Langagière et Interaction Personne-Système): http://www-clips.imag.fr/ Laboratoire CLIPS: GETA (Groupe d'Étude pour la Traduction Automatique): http://www-clips.imag.fr/geta/ LINGUIST List (The): http://linguistlist.org/ Localization Industry Standards Association (LISA): http://www.lisa.org/ Logos: Multilingual Translation Portal: http://www.logos.it/ MAITS (Multilingual Application Interface for Telematic Services): http://wwwold.dkuug.dk/maits/ Merriam-Webster Online: http://www.merriam-webster.com/ Natural Language Group (NLG) at USC/ISI: http://www.isi.edu/natural-language/ Nuance: http://www.nuance.com/ OneLook Dictionary Search: http://www.onelook.com/ Oxford English Dictionary (OED): http://www.oed.com/ Oxford Reference Online (ORO): http://www.oxfordreference.com/ PAHOMTS (PAHO: Pan American Health Organization): http://www.paho.org/english/am/gsp/tr/machine_trans.htm Palo Alto Research Center (PARC): http://www.parc.com/ Palo Alto Research Center (PARC): Natural Language Processing: http://www.parc.com/work/focus-area/NLP/ RALI (Recherche Appliquée en Linguistique Informatique): http://www-rali.iro.umontreal.ca/ Reverso: Free Online Translator: http://www.reverso.net/ SDL: http://www.sdl.com/ SDL: FreeTranslation.com: http://www.freetranslation.com/ SDL Trados: http://www.trados.com/ Softissimo: http://www.softissimo.com/ SYSTRAN: http://www.systranlinks.com/ SYSTRANet: Free Online Translator: http://www.systranet.com/ TEI: Text Encoding Initiative: http://www.tei-c.org/index.xml TERMITE (Terminology of Telecommunications): http://www.itu.int/terminology/index.html *tmx Vokabeltrainer: http://www.tmx.de/ Transparent Language: http://www.transparent.com/ TransPerfect: http://www.transperfect.com/ Travlang: http://www.travlang.com/ Travlang's Translating Dictionaries: http://dictionaries.travlang.com/ UNDL (Universal Networking Digital Language) Foundation: http://www.undl.org/ Unicode: http://www.unicode.org/ Yahoo! Babel Fish: http://babelfish.yahoo.com/ YourDictionary.com: http://www.yourdictionary.com/ YourDictionary.com: Endangered Languages: http://www.yourdictionary.com/elr/index.html W3C: World Wide Web Consortium: http://www.w3.org/ W3C Internationalization Activity: http://www.w3.org/International/ WELL (Web Enhanced Language Learning): http://www.well.ac.uk/ Wordfast: http://www.wordfast.org/ Xerox XRCE (Xerox Research Centre Europe): http://www.xrce.xerox.com/ Xerox XRCE: Cross-Language Technologies: http://www.xrce.xerox.com/competencies/cross-language/ Copyright © 2009 Marie Lebert. All rights reserved. End of Project Gutenberg's The Internet and Languages, by Marie Lebert *** END OF THE PROJECT GUTENBERG EBOOK THE INTERNET AND LANGUAGES [AROUND THE YEAR 2000] *** Updated editions will replace the previous one—the old editions will be renamed. Creating the works from print editions not protected by U.S. copyright law means that no one owns a United States copyright in these works, so the Foundation (and you!) can copy and distribute it in the United States without permission and without paying copyright royalties. Special rules, set forth in the General Terms of Use part of this license, apply to copying and distributing Project Gutenberg™ electronic works to protect the PROJECT GUTENBERG™ concept and trademark. Project Gutenberg is a registered trademark, and may not be used if you charge for an eBook, except by following the terms of the trademark license, including paying royalties for use of the Project Gutenberg trademark. If you do not charge anything for copies of this eBook, complying with the trademark license is very easy. You may use this eBook for nearly any purpose such as creation of derivative works, reports, performances and research. Project Gutenberg eBooks may be modified and printed and given away—you may do practically ANYTHING in the United States with eBooks not protected by U.S. copyright law. Redistribution is subject to the trademark license, especially commercial redistribution. START: FULL LICENSE THE FULL PROJECT GUTENBERG LICENSE PLEASE READ THIS BEFORE YOU DISTRIBUTE OR USE THIS WORK To protect the Project Gutenberg™ mission of promoting the free distribution of electronic works, by using or distributing this work (or any other work associated in any way with the phrase “Project Gutenberg”), you agree to comply with all the terms of the Full Project Gutenberg™ License available with this file or online at www.gutenberg.org/license. Section 1. General Terms of Use and Redistributing Project Gutenberg™ electronic works 1.A. By reading or using any part of this Project Gutenberg™ electronic work, you indicate that you have read, understand, agree to and accept all the terms of this license and intellectual property (trademark/copyright) agreement. If you do not agree to abide by all the terms of this agreement, you must cease using and return or destroy all copies of Project Gutenberg™ electronic works in your possession. If you paid a fee for obtaining a copy of or access to a Project Gutenberg™ electronic work and you do not agree to be bound by the terms of this agreement, you may obtain a refund from the person or entity to whom you paid the fee as set forth in paragraph 1.E.8. 1.B. “Project Gutenberg” is a registered trademark. It may only be used on or associated in any way with an electronic work by people who agree to be bound by the terms of this agreement. There are a few things that you can do with most Project Gutenberg™ electronic works even without complying with the full terms of this agreement. See paragraph 1.C below. There are a lot of things you can do with Project Gutenberg™ electronic works if you follow the terms of this agreement and help preserve free future access to Project Gutenberg™ electronic works. See paragraph 1.E below. 1.C. The Project Gutenberg Literary Archive Foundation (“the Foundation” or PGLAF), owns a compilation copyright in the collection of Project Gutenberg™ electronic works. Nearly all the individual works in the collection are in the public domain in the United States. If an individual work is unprotected by copyright law in the United States and you are located in the United States, we do not claim a right to prevent you from copying, distributing, performing, displaying or creating derivative works based on the work as long as all references to Project Gutenberg are removed. Of course, we hope that you will support the Project Gutenberg™ mission of promoting free access to electronic works by freely sharing Project Gutenberg™ works in compliance with the terms of this agreement for keeping the Project Gutenberg™ name associated with the work. You can easily comply with the terms of this agreement by keeping this work in the same format with its attached full Project Gutenberg™ License when you share it without charge with others. This particular work is one of the few individual works protected by copyright law in the United States and most of the remainder of the world, included in the Project Gutenberg collection with the permission of the copyright holder. Information on the copyright owner for this particular work and the terms of use imposed by the copyright holder on this work are set forth at the beginning of this work. 1.D. The copyright laws of the place where you are located also govern what you can do with this work. Copyright laws in most countries are in a constant state of change. If you are outside the United States, check the laws of your country in addition to the terms of this agreement before downloading, copying, displaying, performing, distributing or creating derivative works based on this work or any other Project Gutenberg™ work. The Foundation makes no representations concerning the copyright status of any work in any country other than the United States. 1.E. Unless you have removed all references to Project Gutenberg: 1.E.1. The following sentence, with active links to, or other immediate access to, the full Project Gutenberg™ License must appear prominently whenever any copy of a Project Gutenberg™ work (any work on which the phrase “Project Gutenberg” appears, or with which the phrase “Project Gutenberg” is associated) is accessed, displayed, performed, viewed, copied or distributed: This eBook is for the use of anyone anywhere in the United States and most other parts of the world at no cost and with almost no restrictions whatsoever. You may copy it, give it away or re-use it under the terms of the Project Gutenberg License included with this eBook or online at www.gutenberg.org. If you are not located in the United States, you will have to check the laws of the country where you are located before using this eBook. 1.E.2. If an individual Project Gutenberg™ electronic work is derived from texts not protected by U.S. copyright law (does not contain a notice indicating that it is posted with permission of the copyright holder), the work can be copied and distributed to anyone in the United States without paying any fees or charges. If you are redistributing or providing access to a work with the phrase “Project Gutenberg” associated with or appearing on the work, you must comply either with the requirements of paragraphs 1.E.1 through 1.E.7 or obtain permission for the use of the work and the Project Gutenberg™ trademark as set forth in paragraphs 1.E.8 or 1.E.9. 1.E.3. If an individual Project Gutenberg™ electronic work is posted with the permission of the copyright holder, your use and distribution must comply with both paragraphs 1.E.1 through 1.E.7 and any additional terms imposed by the copyright holder. Additional terms will be linked to the Project Gutenberg™ License for all works posted with the permission of the copyright holder found at the beginning of this work. 1.E.4. Do not unlink or detach or remove the full Project Gutenberg™ License terms from this work, or any files containing a part of this work or any other work associated with Project Gutenberg™. 1.E.5. Do not copy, display, perform, distribute or redistribute this electronic work, or any part of this electronic work, without prominently displaying the sentence set forth in paragraph 1.E.1 with active links or immediate access to the full terms of the Project Gutenberg™ License. 1.E.6. You may convert to and distribute this work in any binary, compressed, marked up, nonproprietary or proprietary form, including any word processing or hypertext form. However, if you provide access to or distribute copies of a Project Gutenberg™ work in a format other than “Plain Vanilla ASCII” or other format used in the official version posted on the official Project Gutenberg™ website (www.gutenberg.org), you must, at no additional cost, fee or expense to the user, provide a copy, a means of exporting a copy, or a means of obtaining a copy upon request, of the work in its original “Plain Vanilla ASCII” or other form. Any alternate format must include the full Project Gutenberg™ License as specified in paragraph 1.E.1. 1.E.7. Do not charge a fee for access to, viewing, displaying, performing, copying or distributing any Project Gutenberg™ works unless you comply with paragraph 1.E.8 or 1.E.9. 1.E.8. You may charge a reasonable fee for copies of or providing access to or distributing Project Gutenberg™ electronic works provided that: • You pay a royalty fee of 20% of the gross profits you derive from the use of Project Gutenberg™ works calculated using the method you already use to calculate your applicable taxes. The fee is owed to the owner of the Project Gutenberg™ trademark, but he has agreed to donate royalties under this paragraph to the Project Gutenberg Literary Archive Foundation. Royalty payments must be paid within 60 days following each date on which you prepare (or are legally required to prepare) your periodic tax returns. Royalty payments should be clearly marked as such and sent to the Project Gutenberg Literary Archive Foundation at the address specified in Section 4, “Information about donations to the Project Gutenberg Literary Archive Foundation.” • You provide a full refund of any money paid by a user who notifies you in writing (or by e-mail) within 30 days of receipt that s/he does not agree to the terms of the full Project Gutenberg™ License. You must require such a user to return or destroy all copies of the works possessed in a physical medium and discontinue all use of and all access to other copies of Project Gutenberg™ works. • You provide, in accordance with paragraph 1.F.3, a full refund of any money paid for a work or a replacement copy, if a defect in the electronic work is discovered and reported to you within 90 days of receipt of the work. • You comply with all other terms of this agreement for free distribution of Project Gutenberg™ works. 1.E.9. If you wish to charge a fee or distribute a Project Gutenberg™ electronic work or group of works on different terms than are set forth in this agreement, you must obtain permission in writing from the Project Gutenberg Literary Archive Foundation, the manager of the Project Gutenberg™ trademark. Contact the Foundation as set forth in Section 3 below. 1.F. 1.F.1. Project Gutenberg volunteers and employees expend considerable effort to identify, do copyright research on, transcribe and proofread works not protected by U.S. copyright law in creating the Project Gutenberg™ collection. Despite these efforts, Project Gutenberg™ electronic works, and the medium on which they may be stored, may contain “Defects,” such as, but not limited to, incomplete, inaccurate or corrupt data, transcription errors, a copyright or other intellectual property infringement, a defective or damaged disk or other medium, a computer virus, or computer codes that damage or cannot be read by your equipment. 1.F.2. LIMITED WARRANTY, DISCLAIMER OF DAMAGES - Except for the “Right of Replacement or Refund” described in paragraph 1.F.3, the Project Gutenberg Literary Archive Foundation, the owner of the Project Gutenberg™ trademark, and any other party distributing a Project Gutenberg™ electronic work under this agreement, disclaim all liability to you for damages, costs and expenses, including legal fees. YOU AGREE THAT YOU HAVE NO REMEDIES FOR NEGLIGENCE, STRICT LIABILITY, BREACH OF WARRANTY OR BREACH OF CONTRACT EXCEPT THOSE PROVIDED IN PARAGRAPH 1.F.3. YOU AGREE THAT THE FOUNDATION, THE TRADEMARK OWNER, AND ANY DISTRIBUTOR UNDER THIS AGREEMENT WILL NOT BE LIABLE TO YOU FOR ACTUAL, DIRECT, INDIRECT, CONSEQUENTIAL, PUNITIVE OR INCIDENTAL DAMAGES EVEN IF YOU GIVE NOTICE OF THE POSSIBILITY OF SUCH DAMAGE. 1.F.3. LIMITED RIGHT OF REPLACEMENT OR REFUND - If you discover a defect in this electronic work within 90 days of receiving it, you can receive a refund of the money (if any) you paid for it by sending a written explanation to the person you received the work from. If you received the work on a physical medium, you must return the medium with your written explanation. The person or entity that provided you with the defective work may elect to provide a replacement copy in lieu of a refund. If you received the work electronically, the person or entity providing it to you may choose to give you a second opportunity to receive the work electronically in lieu of a refund. If the second copy is also defective, you may demand a refund in writing without further opportunities to fix the problem. 1.F.4. Except for the limited right of replacement or refund set forth in paragraph 1.F.3, this work is provided to you ‘AS-IS’, WITH NO OTHER WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PURPOSE. 1.F.5. Some states do not allow disclaimers of certain implied warranties or the exclusion or limitation of certain types of damages. If any disclaimer or limitation set forth in this agreement violates the law of the state applicable to this agreement, the agreement shall be interpreted to make the maximum disclaimer or limitation permitted by the applicable state law. The invalidity or unenforceability of any provision of this agreement shall not void the remaining provisions. 1.F.6. INDEMNITY - You agree to indemnify and hold the Foundation, the trademark owner, any agent or employee of the Foundation, anyone providing copies of Project Gutenberg™ electronic works in accordance with this agreement, and any volunteers associated with the production, promotion and distribution of Project Gutenberg™ electronic works, harmless from all liability, costs and expenses, including legal fees, that arise directly or indirectly from any of the following which you do or cause to occur: (a) distribution of this or any Project Gutenberg™ work, (b) alteration, modification, or additions or deletions to any Project Gutenberg™ work, and (c) any Defect you cause. Section 2. Information about the Mission of Project Gutenberg™ Project Gutenberg™ is synonymous with the free distribution of electronic works in formats readable by the widest variety of computers including obsolete, old, middle-aged and new computers. It exists because of the efforts of hundreds of volunteers and donations from people in all walks of life. Volunteers and financial support to provide volunteers with the assistance they need are critical to reaching Project Gutenberg™’s goals and ensuring that the Project Gutenberg™ collection will remain freely available for generations to come. In 2001, the Project Gutenberg Literary Archive Foundation was created to provide a secure and permanent future for Project Gutenberg™ and future generations. To learn more about the Project Gutenberg Literary Archive Foundation and how your efforts and donations can help, see Sections 3 and 4 and the Foundation information page at www.gutenberg.org. Section 3. Information about the Project Gutenberg Literary Archive Foundation The Project Gutenberg Literary Archive Foundation is a non-profit 501(c)(3) educational corporation organized under the laws of the state of Mississippi and granted tax exempt status by the Internal Revenue Service. The Foundation’s EIN or federal tax identification number is 64-6221541. Contributions to the Project Gutenberg Literary Archive Foundation are tax deductible to the full extent permitted by U.S. federal laws and your state’s laws. The Foundation’s business office is located at 809 North 1500 West, Salt Lake City, UT 84116, (801) 596-1887. Email contact links and up to date contact information can be found at the Foundation’s website and official page at www.gutenberg.org/contact Section 4. Information about Donations to the Project Gutenberg Literary Archive Foundation Project Gutenberg™ depends upon and cannot survive without widespread public support and donations to carry out its mission of increasing the number of public domain and licensed works that can be freely distributed in machine-readable form accessible by the widest array of equipment including outdated equipment. Many small donations ($1 to $5,000) are particularly important to maintaining tax exempt status with the IRS. The Foundation is committed to complying with the laws regulating charities and charitable donations in all 50 states of the United States. Compliance requirements are not uniform and it takes a considerable effort, much paperwork and many fees to meet and keep up with these requirements. We do not solicit donations in locations where we have not received written confirmation of compliance. To SEND DONATIONS or determine the status of compliance for any particular state visit www.gutenberg.org/donate. While we cannot and do not solicit contributions from states where we have not met the solicitation requirements, we know of no prohibition against accepting unsolicited donations from donors in such states who approach us with offers to donate. International donations are gratefully accepted, but we cannot make any statements concerning tax treatment of donations received from outside the United States. U.S. laws alone swamp our small staff. Please check the Project Gutenberg web pages for current donation methods and addresses. Donations are accepted in a number of other ways including checks, online payments and credit card donations. To donate, please visit: www.gutenberg.org/donate. Section 5. General Information About Project Gutenberg™ electronic works Professor Michael S. Hart was the originator of the Project Gutenberg™ concept of a library of electronic works that could be freely shared with anyone. For forty years, he produced and distributed Project Gutenberg™ eBooks with only a loose network of volunteer support. Project Gutenberg™ eBooks are often created from several printed editions, all of which are confirmed as not protected by copyright in the U.S. unless a copyright notice is included. Thus, we do not necessarily keep eBooks in compliance with any particular paper edition. Most people start at our website which has the main PG search facility: www.gutenberg.org. This website includes information about Project Gutenberg™, including how to make donations to the Project Gutenberg Literary Archive Foundation, how to help produce our new eBooks, and how to subscribe to our email newsletter to hear about new eBooks. The Project Gutenberg eBook of The web, a multilingual encyclopedia This ebook is for the use of anyone anywhere in the United States and most other parts of the world at no cost and with almost no restrictions whatsoever. You may copy it, give it away or re-use it under the terms of the Project Gutenberg License included with this ebook or online at www.gutenberg.org. If you are not located in the United States, you will have to check the laws of the country where you are located before using this eBook. *** This is a COPYRIGHTED Project Gutenberg eBook. Details Below. *** *** Please follow the copyright guidelines in this file. *** Title: The web, a multilingual encyclopedia Author: Marie Lebert Release date: January 10, 2013 [eBook #41814] Language: English Credits: Produced by Al Haines *** START OF THE PROJECT GUTENBERG EBOOK THE WEB, A MULTILINGUAL ENCYCLOPEDIA *** Produced by Al Haines {~--- UTF-8 BOM ---~}THE WEB, A MULTILINGUAL ENCYCLOPEDIA MARIE LEBERT, 2012 TABLE OF CONTENTS 1974 > The internet "took off" 1990 > The invention of the web 1990 > The LINGUIST List 1991 > From ASCII to Unicode 1994 > Travlang, travel and languages 1995 > The Internet Dictionary Project 1995 > NetGlos, a glossary of the internet 1995 > Various languages on our screen 1995 > Global Reach, promoting localization 1996 > OneLook Dictionaries, a "fast finder" 1997 > 82.3% of the web in English 1997 > The internet, a tool for minority languages 1997 > A European terminology database 1997 > Babel Fish, a free translation software 1997 > The tools of the translation company Logos 1997 > Specialized terminology databases 1998 > The need for a "linguistic democracy" 1999 > Bilingual dictionaries in WordReference.com 1999 > The internet, a mandatory tool for translators 1999 > The need for bilingual information online 2000 > Online encyclopedias and dictionaries 2000 > The web portal yourDictionary.com 2000 > Project Gutengerg and languages 2001 > Wikipedia, a collaborative encyclopedia 2001 > UNL, a digital metalanguage project 2001 > A market for language translation software 2004 > The web 2.0, community and sharing 2007 > The ISO 639-3 standard to identify languages 2007 > Google Translate 2009 > 6,909 languages in the Ethnologue 2010 > A UNESCO atlas for endangered languages INTRODUCTION "The web will be an encyclopedia of the world by the world for the world. There will be no information or knowledge that anyone needs that will not be available. The major hindrance to international and interpersonal understanding, personal and institutional enhancement, will be removed. It would take a wilder imagination than mine to predict the effect of this development on the nature of humankind." (Robert Beard, founder of A Web of Online Dictionaries, september 1998) This book is a chronology in 31 chapters from 1974 to 2010. Many thanks to all those who are quoted here, for their time and their friendship. Unless specified otherwise, the quotes are excerpts from the interviews conducted by the author during several years and published in the same collection. 1974 > THE INTERNET "TOOK OFF" [Summary] The internet "took off" in 1974 with the creation of TCP/IP (Transmission Control Protocol / Internet Protocol) by Vinton Cerf and Bob Kahn, fifteen years before the invention of the web. The internet expanded as a network linking U.S. governmental agencies, universities and research centers, before spreading worldwide in 1983. The internet got its first boost in 1990 with the invention of the web by Tim Berners-Lee, and its second boost in 1993 with the release of Mosaic, the first browser for the general public. The Internet Society (ISOC) was founded in 1992 by Vinton Cerf to promote the development of the internet as a medium that was becoming part of our lives. There were 100 million internet users in December 1997, with one million new users per month, and 300 million users in December 2000. *** The internet "took off" in 1974 with the creation of TCP/IP (Transmission Control Protocol / Internet Protocol) by Vinton Cerf and Bob Kahn, fifteen years before the invention of the web. # A new medium The internet expanded as a network linking U.S. governmental agencies, universities and research centers, before spreading worldwide in 1983. The internet got its first boost in 1990 with the invention of the web by Tim Berners-Lee, and its second boost in 1993 with the release of Mosaic, the first browser for the general public. Vinton Cerf founded the Internet Society (ISOC) in 1992 to promote the development of the internet as a medium that was becoming part of our lives. When interviewed by the French daily Libération on 16 January 1998, he explained that the network was doing two things. Like books, it could accumulate knowledge. But, more importantly, it presented knowledge in a way that connected it with other information whereas, in a book, information stayed isolated. Because the web was easy to use with hyperlinks going from one document to the next, the internet could now be used by anyone, and not only by computer literate users. There were 100 million internet users in December 1997, with one million new users per month, and 300 million users in December 2000. # A worldwide expansion North America was leading the way in computer science and communication technology, with significant funding and cheap computers compared to Europe. A connection to the internet was much cheaper too. In some European countries, internet users needed to surf the web at night (including the author of these lines), when phone rates by the minute were cheaper, to cut their expenses. In late 1998 and early 1999, some users in France, Germany and Italy launched a movement to boycott the internet one day per week, as a way to force internet providers and phone companies to set up a special monthly rate. This action paid off, and providers began to offer "internet rates". In summer 1999, the number of internet users living outside the U.S. reached 50%. In summer 2000, the number of internet users having a mother tongue other than English also reached 50%, and went on steadily increasing then. According to statistics regularly published on the website of Global Reach, a marketing consultancy promoting internationalization and localization, they were 52.5% in summer 2001, 57% in December 2001, 59.8% in April 2002, 64.4% in September 2003 (including 34.9% non-English-speaking Europeans and 29.4% Asians), and 64.2% in March 2004 (including 37.9% non- English-speaking Europeans and 33% Asians). Broadband became the norm over the years. Jean-Paul, webmaster of the hypermedia website cotres.net, summarized things in January 2007: "I feel that we are experiencing a 'floating' period between the heroic ages, when we were moving forward while waiting for the technology to catch up, and the future, when high-speed broadband will unleash forces that just begin to move, for now only in games." # The internet of the future The internet of the future could be a "pervasive" network allowing us to connect in any place and at any time on any device through a single omnipresent network. The concept of a "pervasive" network was developed by Rafi Haladjian, founder of the European company Ozone, who explained on its website in 2007 that "the new wave would affect the physical world, our real environment, our daily life in every moment. We will not access the network any more, we will live in it. The future components of this network (wired parts, non wired parts, operators) will be transparent to the final user. The network will always be open, providing a permanent connection anywhere. It will also be agnostic in terms of applications, as a network based on the internet protocols themselves." We do look forward to this. As for the content of the internet, Timothy Leary, a visionary writer, described it in 1994 in his book "Chaos & Cyber Culture" as gigantic glass towers containing the whole world information, with free access, through the cyberspace, not only to all books, but also to all pictures, all movies, all TV shows, and all other data. In 2011, we are not there yet, but we are getting there. 1990 > THE INVENTION OF THE WEB [Summary] The World Wide Web was invented in 1990 by Tim Berners-Lee at CERN (European Center for Nuclear Research), Geneva, Switzerland. In 1989, Tim Berners-Lee networked documents using hypertext. In 1990, he developed the first HTTP (HyperText Transfer Protocol) server and the first web browser. In 1991, the web was operational and radically changed the way people were using the internet. Hypertext links allowed us to move from one textual or visual document to another with a simple click of the mouse. Information became interactive, thus more attractive to many users. Later on, this interactivity was further enhanced with hypermedia links that could link texts and images with video and sound. The World Wide Web Consortium (W3C) was founded in October 1994 to develop protocols for the web. *** The World Wide Web was invented in 1990 by Tim Berners-Lee, a researcher at CERN (European Center for Nuclear Research), Geneva, Switzerland, who made the internet accessible to all. # How the web started In 1989, Tim Berners-Lee networked documents using hypertext. In 1990, he developed the first HTTP (HyperText Transfer Protocol) server and the first web browser. In 1991, the web was operational and made the internet accessible to all. Hypertext links allowed us to move from one textual or visual document to another with a simple click of the mouse. Information became interactive, thus more attractive to many users. Later on, this interactivity was further enhanced with hypermedia links that could link texts and images with video and sound. Developed by NCSA (National Center for Supercomputing Applications) at the University of Illinois (USA) and distributed free of charge in November 1993, Mosaic was the first browser for the general public, and contributed greatly to the development of the web. In early 1994, part of the Mosaic team migrated to the Netscape Communications Corporation to develop a new browser called Netscape Navigator. In 1995, Microsoft launched its own browser, the Internet Explorer. Other browsers were launched then, like Opera and Safari, Apple's browser. The World Wide Web Consortium (W3C) was founded in October 1994 to develop interoperable technologies (specifications, guidelines, software, other tools) for the web, for example specifications for markup languages (HTML, XML and others). It also acted as a forum for information, commerce, communication and collective understanding. In 1998, the section Internationalization/Localization gave access to some protocols for creating a multilingual website: HTML, base character set, new tags and attributes, HTTP, language negotiation, URLs and other identifiers including non-ASCII characters, etc. # Tim Berners-Lee's dream Pierre Ruetschi, a journalist for the Swiss daily "Tribune de Genève", asked Tim Berners-Lee on 20 December 1997: "Seven years later, are you satisfied with the way the web has evolved?". He answered that, if he was pleased with the richness and diversity of information, the web still lacked the power planned in its original design. He would like "the web to be more interactive, and people to be able to create information together", and not only to be information consumers. The web was supposed to become a "medium for collaboration, a world of knowledge that we share." In an essay posted on his webpage, Tim Berners-Lee wrote in May 1998: "The dream behind the web is of a common information space in which we communicate by sharing information. Its universality is essential: the fact that a hypertext link can point to anything, be it personal, local or global, be it draft or highly polished. There was a second part of the dream, too, dependent on the web being so generally used that it became a realistic mirror (or in fact the primary embodiment) of the ways in which we work and play and socialize. That was that once the state of our interactions was online, we could then use computers to help us analyze it, make sense of what we are doing, where we individually fit in, and how we can better work together." (excerpt from "The World Wide Web: A very short personal history") # The web 2.0 According to Netcraft, a company tracking data on the internet, the number of websites went from one million (April 1997) to 10 million (February 2000), 20 million (September 2000), 30 million (July 2001), 40 million (April 2003), 50 million (May 2004), 60 million (March 2005), 70 million (August 2005), 80 million (April 2006), 90 million (August 2006) and 100 million (November 2006), with a growing number of personal websites and blogs. The term "web 2.0" was invented in 2004 by Tim O'Reilly, a publisher of computer books, as a title for a series of conferences he was organizing. The web 2.0 may begin to answer Tim Berners-Lee's dream as a web based on community and sharing, with many collaborative projects across borders and languages. Fifteen years after the invention the web, Wired stated in its August 2005 issue that less than half of the web was commercial, with the other half being run by passion. As for the internet, according to the French daily Le Monde dated 19 August 2005, its three powers -- ubiquity, variety and interactivity -- made its potential use quasi infinite. Robert Beard, a language teacher at Bucknell University, Pennsylvania, and the founder of A Web of Online Dictionaries in 1995, wrote as early as September 1998: "The web will be an encyclopedia of the world by the world for the world. There will be no information or knowledge that anyone needs that will not be available. The major hindrance to international and interpersonal understanding, personal and institutional enhancement, will be removed. It would take a wilder imagination than mine to predict the effect of this development on the nature of humankind." 1990 > THE LINGUIST LIST [Summary] The LINGUIST List was founded by Anthony Rodrigues Aristar in 1990 at the University of Western Australia, with 60 subscribers, before moving to Texas A&M University in 1991, with Eastern Michigan University established as the main editing site for the list. In 1997, emails sent to the distribution list were also available on the list's own website, in several sections: the profession (conferences, linguistic associations, programs), research and research support (papers, dissertation abstracts, projects, bibliographies, topics, texts), publications, pedagogy, language resources (languages, language families, dictionaries, regional information), and computer support (fonts and software). The LINGUIST List is a component of the WWW Virtual Library for linguistics. *** The LINGUIST List was founded by Anthony Rodrigues Aristar in 1990 at the University of Western Australia, as a mailing list for academic linguists. With 60 subscribers, it moved to Texas A&M University in 1991, with Eastern Michigan University being established as the main editing site for the list. In 1997, emails sent to the distribution list were also available on the list's own website, in several sections: the profession (conferences, linguistic associations, programs), research and research support (papers, dissertation abstracts, projects, bibliographies, topics, texts), publications, pedagogy, language resources (languages, language families, dictionaries, regional information), and computer support (fonts and software). The LINGUIST List is a component of the WWW Virtual Library for linguistics. Helen Dry, co-moderator of the LINGUIST List since 1991, wrote in August 1998: "The LINGUIST List, which I moderate, has a policy of posting in any language, since it is a list for linguists. However, we discourage posting the same message in several languages, simply because of the burden extra messages put on our editorial staff. (We are not a bounce-back list, but a moderated one. So each message is organized into an issue with like messages by our student editors before it is posted.) Our experience has been that almost everyone chooses to post in English. But we do link to a translation facility that will present our pages in any of five languages; so a subscriber need not read LINGUIST in English unless s/he wishes to. We also try to have at least one student editor who is genuinely multilingual, so that readers can correspond with us in languages other than English." She added in July 1999: "We are beginning to collect some primary data. For example, we have searchable databases of dissertation abstracts relevant to linguistics, of information on graduate and undergraduate linguistics programs, and of professional information about individual linguists. The dissertation abstracts collection is, to my knowledge, the only freely available electronic compilation in existence. 1991 > FROM ASCII TO UNICODE [Summary] Used since the beginning of computing, ASCII (American Standard Code for Information Interchange) is a 7-bit coded character set for information interchange in English. It was published in 1963 by ANSI (American National Standards Institute). With the internet spreading worldwide, to communicate in English (and Latin) was not enough anymore. The accented characters of several European languages and characters of some other languages were taken into account from 1986 onwards with 8-bit variants of ASCII, also called extended ASCII, that provided sets of 256 characters. But problems were not over until the publication of Unicode in January 1991 as a new universal encoding system. Unicode provided "a unique number for every character, no matter what the platform, no matter what the program, no matter what the language", and could handle 65,000 characters or ideograms. *** With the internet spreading worldwide, the use of ASCII and extended ASCII was not enough anymore, thus the need to take into account all languages with Unicode, whose first version was published in January 1991. Used since the beginning of computing, ASCII (American Standard Code for Information Interchange) is a 7-bit coded character set for information interchange in English (and Latin). It was published in 1963 by ANSI (American National Standards Institute). The 7-bit plain ASCII, also called Plain Vanilla ASCII, is a set of 128 characters with 95 printable unaccented characters (A-Z, a- z, numbers, punctuation and basic symbols), the ones that are available on the American / English keyboard. With computer technology spreading outside North America, the accented characters of several European languages and characters of some other languages were taken into account from 1986 onwards with 8-bit variants of ASCII, also called extended ASCII, that provided sets of 256 characters. Brian King, director of the WorldWide Language Institute (WWLI), explained in September 1998: "Computer technology has traditionally been the sole domain of a 'techie' elite, fluent in both complex programming languages and in English -- the universal language of science and technology. Computers were never designed to handle writing systems that couldn't be translated into ASCII. There wasn't much room for anything other than the 26 letters of the English alphabet in a coding system that originally couldn't even recognize acute accents and umlauts -- not to mention non- alphabetic systems like Chinese. But tradition has been turned upside down. Technology has been popularized. ({~HORIZONTAL ELLIPSIS~}) An extension of (local) popularization is the export of information technology around the world. Popularization has now occurred on a global scale and English is no longer necessarily the lingua franca of the user. Perhaps there is no true lingua franca, but only the individual languages of the users. One thing is certain -- it is no longer necessary to understand English to use a computer, nor it is necessary to have a degree in computer science. A pull from non-English-speaking computer users and a push from technology companies competing for global markets has made localization a fast growing area in software and hardware development. This development has not been as fast as it could have been. The first step was for ASCII to become extended ASCII. This meant that computers could begin to start recognizing the accents and symbols used in variants of the English alphabet -- mostly used by European languages. But only one language could be displayed on a page at a time. (...) The most recent development [in 1998] is Unicode. Although still evolving and only just being incorporated into the latest software, this new coding system translates each character into 16 bits. Whereas 8-bit extended ASCII could only handle a maximum of 256 characters, Unicode can handle over 65,000 unique characters and therefore potentially accommodate all of the world's writing systems on the computer. So now the tools are more or less in place. They are still not perfect, but at last we can surf the web in Chinese, Japanese, Korean, and numerous other languages that don't use the Western alphabet. As the internet spreads to parts of the world where English is rarely used -- such as China, for example, it is natural that Chinese, and not English, will be the preferred choice for interacting with it. For the majority of the users in China, their mother tongue will be the only choice." First published in January 1991, Unicode "provides a unique number for every character, no matter what the platform, no matter what the program, no matter what the language" (excerpt from the website). This double-byte platform-independent encoding provides a basis for the processing, storage and interchange of text data in any language. Unicode is maintained by the Unicode Consortium, with its variants UTF-8, UTF-16 and UTF-32 (UTF: Unicode Transformation Format), and is a component of the specifications of the World Wide Web Consortium (W3C). Unicode has replaced ASCII for text files on Windows platforms since 1998. Unicode surpassed ASCII on the internet in December 2007. 1994 > TRAVLANG, TRAVEL AND LANGUAGES [Summary] Travlang was the first website to offer links to free basic translation dictionaries, intended for travelers and the general public. As a first step, Michael C. Martin created in 1994 a "Foreign Languages for Travelers" section on his university website when he was a physics student in New York. One year later, he launched Travlang, a site that quickly became a major portal for travel and languages, and won a best travel site award in 1997. Travlang was still maintained in 1998 by Michel C. Martin, now an researcher in experimental physics at the Lawrence Berkeley National Laboratory in California. The section "Translating Dictionaries" gave access to free basic online dictionaries in a number of languages (Afrikaans, Czech, Danish, Dutch, Esperanto, Finnish, French, Frisian, German, Hungarian, Italian, Latin, Norwegian, Portuguese, Spanish, Swedish). Other sections offered links to language dictionaries, translation services and language schools. *** Travlang was the first website to offer links to free basic translation dictionaries, intended for travelers and the general public. As a first step, Michael C. Martin created in 1994 a "Foreign Languages for Travelers" section on his university website when he was a physics student in New York. One year later, he launched Travlang, a site that quickly became a major portal for travel and languages, and won a best travel site award in 1997. Travlang was still maintained in 1998 by Michel C. Martin, now an researcher in experimental physics at the Lawrence Berkeley National Laboratory in California. The section "Foreign Languages for Travelers" gave links to online tools to learn 60 languages. The section "Translating Dictionaries" gave access to free basic online dictionaries in a number of languages (Afrikaans, Czech, Danish, Dutch, Esperanto, Finnish, French, Frisian, German, Hungarian, Italian, Latin, Norwegian, Portuguese, Spanish, Swedish). Other sections offered links to translation services, language schools and multilingual bookstores. People could also book their hotel, car or plane ticket, look up exchange rates and browse an index of 7,000 links to other language and travel sites. Michael C. Martin wrote in August 1998: "I think the web is an ideal place to bring different cultures and people together, and that includes being multilingual. Our Travlang site is so popular because of this, and people desire to feel in touch with other parts of the world. (...) The internet is really a great tool for communicating with people you wouldn't have the opportunity to interact with otherwise. I truly enjoy the global collaboration that has made our Foreign Languages for Travelers pages possible." What about the future? "I think computerized full-text translations will become more common, enabling a lot of basic communications with even more people. This will also help bring the internet more completely to the non-English speaking world." Michael C. Martin sold Travlang to GourmetMarket.com in February 1999. GourmetMarket.com sold it to iiGroup in January 2000. By July 2000, the site was pulling in two million visitors a month. 1995 > THE INTERNET DICTIONARY PROJECT [Summary] Tyler Chambers first created the Human-Languages Page (H-LP) in May 1994 as an index of language-related internet resources in a number of languages. In 1995, Tyler launched a second project, the Internet Dictionary Project (IDP), as a collaborative project to create free online dictionaries from English to other languages (French, German, Italian, Latin, Portuguese, Spanish). As explained in 1998 on the project's website: "The Internet Dictionary Project's goal is to create royalty-free translating dictionaries through the help of the internet's citizens. This site allows individuals from all over the world to visit and assist in the translation of English words into other languages. The resulting lists of English words and their translated counterparts are then made available through this site to anyone, with no restrictions on their use." *** In 1995, Tyler Chambers launched the Internet Dictionary Project (IDP) as a collaborative project to create free online dictionaries from English to other languages (French, German, Italian, Latin, Portuguese, Spanish). Before launching the Internet Dictionary Project, Tyler created the Human-Languages Page (H-LP) in May 1994 as an index of linguistic internet resources. In 1998, there were 1,800 language- related resources in 100 languages, with six subject listings (languages and literature, schools and institutions, linguistics resources, products and services, organizations, jobs and internships) and two category listings (dictionaries, language lessons). What exactly was the Internet Dictionary Project? As explained in 1998 on the project's website: "The Internet Dictionary Project's goal is to create royalty-free translating dictionaries through the help of the internet's citizens. This site allows individuals from all over the world to visit and assist in the translation of English words into other languages. The resulting lists of English words and their translated counterparts are then made available through this site to anyone, with no restrictions on their use. (...) The Internet Dictionary Project began in 1995 in an effort to provide a noticeably lacking resource to the internet community and to computing in general -- free translating dictionaries. Not only is it helpful to the online community to have access to dictionary searches at their fingertips via the World Wide Web, it also sponsors the growth of computer software which can benefit from such dictionaries -- from translating programs to spelling- checkers to language-education guides and more. By facilitating the creation of these dictionaries online by thousands of anonymous volunteers all over the internet, and by providing the results free-of-charge to anyone, the Internet Dictionary Project hopes to leave its mark on the internet and to inspire others to create projects which will benefit more than a corporation's gross income." Tyler wrote in September 1998 in an email interview: "Multilingualism on the web was inevitable even before the medium 'took off', so to speak. 1994 was the year I was really introduced to the web, which was a little while after its christening but long before it was mainstream. That was also the year I began my first multilingual web project, and there was already a significant number of language-related resources online. This was back before Netscape even existed -- Mosaic was almost the only web browser, and webpages were little more than hyperlinked text documents. As browsers and users mature, I don't think there will be any currently spoken language that won't have a niche on the web, from Native American languages to Middle Eastern dialects, as well as a plethora of 'dead' languages that will have a chance to find a new audience with scholars and others alike online. (...) While I'm not multilingual, nor even bilingual, myself, I see an importance to language and multilingualism that I see in very few other areas. ({~HORIZONTAL ELLIPSIS~}) Overall, I think that the web has been great for language awareness and cultural issues -- where else can you randomly browse for 20 minutes and run across three or more different languages with information you might potentially want to know? ({~HORIZONTAL ELLIPSIS~}) To say that the internet is spurring multilingualism is a bit of a misconception, in my opinion -- it is communication that is spurring multilingualism and cross-cultural exchange, the internet is only the latest mode of communication which has made its way down to the (more-or-less) common person. ({~HORIZONTAL ELLIPSIS~}) Language will become even more important than it already is when the entire planet can communicate with everyone else (via the web, chat, games, email, and whatever future applications haven't even been invented yet)." In spring 2001, the Human-Languages Page merged with the Languages Catalog, a section of the WWW Virtual Library, to become iLoveLanguages, In September 2003, iLoveLanguages provided an index of 2,000 linguistic resources in 100 languages. As for the Internet Dictionary Project, Tyler ran out of time to maintain it and removed the ability to update the dictionaries in January 2007. People can still search the available dictionaries or download the archived files. 1995 > NETGLOS, A GLOSSARY OF THE INTERNET [Summary] Launched in 1995 by the WorldWide Language Institute (WWLI), an institute providing language instruction via the internet, NetGlos -- which stands for "Multilingual Glossary of Internet Terminology" -- was compiled as a voluntary collaborative project by a number of translators and other language professionals worldwide. In September 1998, NetGlos was available in 13 languages (Chinese, Croatian, English, Dutch/Flemish, French, German, Greek, Hebrew, Italian, Maori, Norwegian, Portuguese, Spanish). As explained by Brian King, director of the WorldWide Language Institute, in September 1998: "Before a new term becomes accepted as the 'correct' one, there is a period of instability where a number of competing candidates are used. Often an English loan word becomes the starting point -- and in many cases the endpoint. But eventually a winner emerges that becomes codified into published technical dictionaries as well as the everyday interactions of the non technical user." *** NetGlos -- which stands for "Multilingual Glossary of Internet Terminology" -- was compiled as a voluntary collaborative project by a number of translators and other language professionals worldwide. NetGlos was launched in 1995 by the WorldWide Language Institute (WWLI), an institute providing language instruction via the internet. Three years later, NetGlos was available in 13 languages (Chinese, Croatian, English, Dutch/Flemish, French, German, Greek, Hebrew, Italian, Maori, Norwegian, Portuguese, Spanish). As explained by Brian King, director of the WorldWide Language Institute, in September 1998: "Much of the technical terminology on the web is still not translated into other languages. And as we found with ({~HORIZONTAL ELLIPSIS~}) NetGlos, the translation of these terms is not always a simple process. Before a new term becomes accepted as the 'correct' one, there is a period of instability where a number of competing candidates are used. Often an English loan word becomes the starting point -- and in many cases the endpoint. But eventually a winner emerges that becomes codified into published technical dictionaries as well as the everyday interactions of the non technical user. The latest version of NetGlos is the Russian one and it should be available in a couple of weeks or so [in late September 1998]. It will no doubt be an excellent example of the ongoing, dynamic process of 'russification' of web terminology." How about the future? "As a company that derives its very existence from the importance attached to languages, I believe the future will be an exciting and challenging one. But it will be impossible to be complacent about our successes and accomplishments. Technology is already changing at a frenetic pace. Lifelong learning is a strategy that we all must use if we are to stay ahead and be competitive. This is a difficult enough task in an English-speaking environment. If we add in the complexities of interacting in a multilingual/multicultural cyberspace, then the task becomes even more demanding. As well as competition, there is also the necessity for cooperation -- perhaps more so than ever before. The seeds of cooperation across the internet have certainly already been sown. Our NetGlos Project has depended on the goodwill of volunteer translators from Canada, U.S., Austria, Norway, Belgium, Israel, Portugal, Russia, Greece, Brazil, New Zealand and other countries. I think the hundreds of visitors we get coming to the NetGlos pages everyday is an excellent testimony to the success of these types of working relationships. I see the future depending even more on cooperative relationships -- although not necessarily on a volunteer basis." 1995 > VARIOUS LANGUAGES ON OUR SCREEN [Summary] In December 1995, Yoshi Mikami, a computer scientist at Asia Info Network in Fujisawa, Japan, created the website "The Languages of the World by Computers and the Internet", also known as the Logos Home Page or Kotoba Home Page, "to summarize there the brief history, linguistic and phonetic features, writing system and computer processing aspects for each of the six major languages of the world, in English and Japanese". As a second step, Yoshi Mikami was also the co-author (with Kenji Sekine and Nobutoshi Kohara) of "The Multilingual Web Guide" (Japanese edition), a print book published in August 1997 by O'Reilly Japan, and translated in 1998 into English, French and German. *** In December 1995, Yoshi Mikami created the website "The Languages of the World by Computers and the Internet", also known as the Logos Home Page or Kotoba Home Page, "to summarize there the brief history, linguistic and phonetic features, writing system and computer processing aspects for each of the six major languages of the world, in English and Japanese". Yoshi Mikami was a computer scientist at Asia Info Network in Fujisawa, Japan. As a second step, one year after launching his website, he was also the co-author (with Kenji Sekine and Nobutoshi Kohara) of "The Multilingual Web Guide" (Japanese edition), a print book published in August 1997 by O'Reilly Japan, and translated in 1998 into English, French and German. Yoshi explained in December 1998: "My native tongue is Japanese. Because I had my graduate education in the U.S. and worked in the computer business, I became bilingual in Japanese and American English. I was always interested in languages and different cultures, so I learned some Russian, French and Chinese along the way. In late 1995, I created on the web 'The Languages of the World by Computers and the Internet' and tried to summarize there the brief history, linguistic and phonetic features, writing system and computer processing aspects for each of the six major languages of the world, in English and Japanese. As I gained more experience, I invited my two associates to help me write a book on viewing, understanding and creating multilingual webpages, which was published in August 1997 as 'The Multilingual Web Guide', in a Japanese edition, the world's first book on such a subject." As for multilingualism, Yoshi added: "Thousands of years ago, in Egypt, China and elsewhere, people were more concerned about communicating their laws and thoughts not in just one language, but in several. In our modern world, most nation states have each adopted one language for their own use. I predict greater use of different languages and multilingual pages on the internet, not a simple gravitation to American English, and also more creative use of multilingual computer translation. 99% of the websites created in Japan are written in Japanese." 1995 > GLOBAL REACH, PROMOTING LOCALIZATION [Summary] Ten years after founding Euro-Marketing Associates, a company based in San Francisco and Paris, Bill Dunlap launched in 1995 Global Reach, a marketing consultancy helping U.S. companies to expand their internet presence into an international framework. This included translating a website into other languages, actively promoting it, and using local online banner advertising to increase local website traffic. Bill Dunlap explained in December 1998: "Promoting your website is at least as important as creating it, if not more important. You should be prepared to spend at least as much time and money in promoting your website as you did in creating it in the first place. With the Global Reach program, you can have it promoted in countries where English is not spoken, and achieve a wider audience... and more sales." *** In 1995, Bill Dunlap launched Global Reach, a marketing consultancy helping U.S. companies to expand their internet presence into an international framework. This included translating a website into other languages, actively promoting it, and using local online banner advertising to increase local website traffic. Ten years earlier, Bill Dunlap founded Euro-Marketing Associates, a company based in San Francisco and Paris. He wrote in December 1998: "There are so few people in the U.S. interested in communicating in many languages -- most Americans are still under the delusion that the rest of the world speaks English. However, in Europe, the countries are small enough so that an international perspective has been necessary for centuries. ({~HORIZONTAL ELLIPSIS~}) Since 1981, when my professional life started, I've been involved with bringing American companies in Europe. This is very much an issue of language, since the products and their marketing have to be in the languages of Europe in order for them to be visible here. Since the web became popular in 1995 or so, I have turned these activities to their online dimension, and have come to champion European e-commerce among my fellow American compatriots. Most lately at Internet World in New York, I spoke about European e- commerce and how to use a website to address the various markets in Europe. ({~HORIZONTAL ELLIPSIS~}) Promoting your website is at least as important as creating it, if not more important. You should be prepared to spend at least as much time and money in promoting your website as you did in creating it in the first place. With the Global Reach program, you can have it promoted in countries where English is not spoken, and achieve a wider audience... and more sales. There are many good reasons for taking the online international market seriously. Global Reach is a means for you to extend your website to many countries, speak to online visitors in their own language and reach online markets there." Bill added in July 1999: "After a website's home page is available in several languages, the next step is the development of content in each language. A webmaster will notice which languages draw more visitors (and sales) than others, and these are the places to start in a multilingual web promotion campaign. At the same time, it is always good to increase the number of languages available on a website: just a home page translated into other languages would do for a start, before it becomes obvious that more should be done to develop a certain language branch on a website." 1996 > ONELOOK DICTIONARIES, A "FAST FINDER" [Summary] Robert Ware launched OneLook Dictionaries in April 1996 as a "fast finder" in hundreds of online dictionaries covering various topics: business, computer/internet, medical, miscellaneous, religion, science, sports, technology, general and slang. He wrote in September 1998: "On the personal side, I was almost entirely in contact with people who spoke one language and did not have much incentive to expand language abilities. Being in contact with the entire world has a way of changing that. And changing it for the better! (...) I have been slow to start including non-English dictionaries (partly because I am monolingual). But you will now find a few included." OneLook Dictionaries could browse 2 million words from 425 dictionaries in 1998, 2.5 million words from 530 dictionaries in 2000, 5 million words from 910 dictionaries in 2003, and 19 million words from 1,060 dictionaries in 2010. *** Robert Ware launched OneLook Dictionaries in April 1996 as a "fast finder" in hundreds of online dictionaries covering various topics: business, computer/internet, medical, miscellaneous, religion, science, sports, technology, general and slang. He wrote in September 1998: "On the personal side, I was almost entirely in contact with people who spoke one language and did not have much incentive to expand language abilities. Being in contact with the entire world has a way of changing that. And changing it for the better! (...) I have been slow to start including non- English dictionaries (partly because I am monolingual). But you will now find a few included." Robert Ware also wrote about a personal experience showing the internet could promote both a common language and multilingualism: "In 1994, I was working for a college and trying to install a software package on a particular type of computer. I located a person who was working on the same problem and we began exchanging email. Suddenly, it hit me... the software was written only 30 miles away but I was getting help from a person half way around the world. Distance and geography no longer mattered! OK, this is great! But what is it leading to? I am only able to communicate in English but, fortunately, the other person could use English as well as German which was his mother tongue. The internet has removed one barrier (distance) but with that comes the barrier of language. It seems that the internet is moving people in two quite different directions at the same time. The internet (initially based on English) is connecting people all around the world. This is further promoting a common language for people to use for communication. But it is also creating contact between people of different languages and creates a greater interest in multilingualism. A common language is great but in no way replaces this need. So the internet promotes both a common language *and* multilingualism. The good news is that it helps provide solutions. The increased interest and need is creating incentives for people around the world to create improved language courses and other assistance, and the internet is providing fast and inexpensive opportunities to make them available." OneLook Dictionaries could browse 2 million words from 425 dictionaries in 1998, 2.5 million words from 530 dictionaries in 2000, 5 million words from 910 dictionaries in 2003, and 19 million words from 1,060 dictionaries in 2010. 1997 > 82.3% OF THE WEB IN ENGLISH [Summary] The internet was born in 1974 in the U.S. before spreading to the English-speaking community and then worldwide. This explain why it took a little while for other languages than English to be distributed. The first major study about language distribution on the web was run by Babel, a joint project from the Internet Society and Alis Technologies to contribute to the internationalization of the internet. The results were published in June 1997 in seven languages on a webpage named "Web Languages Hit Parade". The main languages available on the web were English with 82.3%, German with 4.0%, Japanese with 1.6%, French with 1.5%, Spanish with 1.1%, Swedish with 1.1%, and Italian with 1.0%. Three years later, in spring 2000, non-English-speaking internet users reached 50%, with a percentage steadily increasing then. *** The first major study about language distribution on the web was run in 1997 by Babel, a joint project from the Internet Society and Alis Technologies to contribute to the internationalization of the internet. The internet was born in 1974 in the U.S. before spreading to the English-speaking community and then worldwide. This explain why it took a little while for other languages than English to be distributed. People from all over the world began to have access to the internet, despite a connection that was far from cheap in a number of countries, and to post webpages in their own languages. The percentage of webpages in English slowly decreased from nearly 100% in 1983 to 85% in 1997. "Towards communicating on the internet in any language{~HORIZONTAL ELLIPSIS~}" was the subtitle of Babel, launched in 1997 as a plurilingual website in seven languages (English, French, German, Italian, Portuguese, Spanish, Swedish), with information about the world's languages and a typographical and linguistic glossary. A section named "The Internet and Multilingualism" gave information on how to develop a multilingual website, and how to code the "world's writing". Babel ran the first major study relating to distribution of languages on the web. The results were published in June 1997 in seven languages on a webpage named "Web Languages Hit Parade". The main languages of the web were English with 82.3%, German with 4.0%, Japanese with 1.6%, French with 1.5%, Spanish with 1.1%, Swedish with 1.1%, and Italian with 1.0%. According to Randy Hobler, a consultant in internet marketing for language translation software and services, interviewed in September 1998: "85% of the content of the web in 1998 is in English and going down. This trend is driven not only by more websites and users in non-English-speaking countries, but by increasing localization of company and organization sites, and increasing use of machine translation to/from various languages to translate websites." Randy also explained in the same email interview: "Because the internet has no national boundaries, the organization of users is bounded by other criteria driven by the medium itself. In terms of multilingualism, you have virtual communities, for example, of what I call 'Language Nations'... all those people on the internet wherever they may be, for whom a given language is their native language. Thus, the Spanish Language nation includes not only Spanish and Latin American users, but millions of Hispanic users in the U.S., as well as odd places like Spanish-speaking Morocco." According to Global Reach, a marketing consultancy promoting localization, there were 56 million non-English-speaking users in July 1998, with 22.4% Spanish-speaking users, 12.3% Japanese- speaking users, 14% German-speaking users and 10% French-speaking users. 15% of Europe's half a billion population spoke English as a first language, 28% didn't speak English at all, and 32% were using the web in English. In summer 1999, the number of internet users living outside the U.S. reached 50%. In summer 2000, the number of internet users having a mother tongue other than English also reached 50%, and went on steadily increasing then. According to statistics regularly published online by Global Reach, they were 52.5% in summer 2001, 57% in December 2001, 59.8% in April 2002, 64.4% in September 2003 (including 34.9% non-English-speaking Europeans and 29.4% Asians), and 64.2% in March 2004 (including 37.9% non-English-speaking Europeans and 33% Asians). 1997 > THE INTERNET, A TOOL FOR MINORITY LANGUAGES [Summary] Despite the so-called hegemony of the English language, the internet was also a good tool for minority languages, as stated by Caoimhín Ó Donnaíle, who has taught computing at the Institute Sabhal Mòr Ostaig, on the Isle of Skye, in Scotland. Caoimhín has maintained the trilingual (Scotish Gaelic, Irish Gaelic, English) college website, as the main site worldwide with information on Scottish Gaelic, with a trilingual list of European minority languages. The internet could be a tool to develop a "cultural identity" for any language, while using the English language for this, as stated by Guy Antoine, who founded Windows on Haiti in April 1998 to promote the Haitian culture and language. *** Despite the so-called hegemony of the English language, the internet was also a good tool for minority languages, as stated by Caoimhín Ó Donnaíle, who has taught computing at the Institute Sabhal Mòr Ostaig, on the Isle of Skye, in Scotland. Caoimhín has maintained the trilingual (Scotish Gaelic, Irish Gaelic, English) college website, as the main site worldwide with information on Scottish Gaelic, with a trilingual list of European minority languages. Interviewed in August 1998, Caoimhín saw four main points for the growth of a multilingual web: "(a) The internet has contributed and will contribute to the wildfire spread of English as a world language. (b) The internet can greatly help minority languages, but this will not happen by itself. It will only happen if people want to maintain the language as an aim in itself. (c) The web is very useful for delivering language lessons, and there is a big demand for this. (d) The Unicode (ISO 10646) character set standard is very important and will greatly assist in making the Internet more multilingual." How about the Gaelic language? Caoimhín wrote in May 2001: "Students do everything by computer, use Gaelic spell-checking, a Gaelic online terminology database. There are more hits on our website. There is more use of sound. Gaelic radio (both Scottish and Irish) is now available continuously worldwide via the internet. A major project has been the translation of the Opera web-browser into Gaelic -- the first software of this size available in Gaelic." What about endangered languages? "I would emphasize the point that as regards the future of endangered languages, the internet speeds everything up. If people don't care about preserving languages, the internet and accompanying globalization will greatly speed their demise. If people do care about preserving them, the internet will be a tremendous help." Robert Beard, co-founder of the web portal yourDictionary.com, wrote in January 2000: "While English still dominates the web, the growth of monolingual non-English websites is gaining strength with the various solutions to the font problems. Languages that are endangered are primarily languages without writing systems at all (only 1/3 of the world's 6,000+ languages have writing systems). I still do not see the web contributing to the loss of language identity and still suspect it may, in the long run, contribute to strengthening it. More and more Native Americans, for example, are contacting linguists, asking them to write grammars of their language and help them put up dictionaries. For these people, the web is an affordable boon for cultural expression." The internet could be a tool to develop a "cultural identity" for any language, while using the English language for this, as stated by Guy Antoine, who founded Windows on Haiti in April 1998 to promote the Haitian culture and language. Guy wrote in November 1999: "In Windows on Haiti, the primary language of the site is English, but one will equally find a center of lively discussion conducted in 'Kreyòl'. In addition, one will find documents related to Haiti in French, in the old colonial Creole, and I am open to publishing others in Spanish and other languages. I do not offer any sort of translation, but multilingualism is alive and well at the site, and I predict that this will increasingly become the norm throughout the web. ({~HORIZONTAL ELLIPSIS~}) The internet can serve, first of all, as a repository of useful information on minority languages that might otherwise vanish without leaving a trace. Beyond that, I believe that it provides an incentive for people to learn languages associated with the cultures about which they are attempting to gather information. One soon realizes that the language of a people is an essential and inextricable part of its culture. (...) 'Kreyòl' (Creole for the non-initiated) is primarily a spoken language, not a widely written one. I see the web changing this situation more so than any traditional means of language dissemination." Guy added in June 2001: "Kreyòl is the only national language of Haiti, and one of its two official languages, the other being French. It is hardly a minority language in the Caribbean context, since it is spoken by eight to ten million people. (...) I have taken the promotion of Kreyòl as a personal cause, since that language is the strongest of bonds uniting all Haitians. ({~HORIZONTAL ELLIPSIS~}) I have created two discussion forums on my website Windows on Haiti, held exclusively in Kreyòl. One is for general discussions on just about everything but obviously more focused on Haiti's current socio-political problems. The other is reserved only to debates of writing standards for Kreyòl. Those debates have been quite spirited and have met with the participation of a number of linguistic experts. The uniqueness of these forums is their non- academic nature." 1997 > A EUROPEAN TERMINOLOGY DATABASE [Summary] Launched in 1997 by the Translation Service of the European Commission, Eurodicautom was a multilingual terminology database of economic, scientific, technical and legal terms and expressions, with language pairs for the eleven official languages of the European Union (Danish, Dutch, English, Finnish, French, German, Greek, Italian, Portuguese, Spanish, Swedish), and Latin. There were 120,000 daily visits on average in 2003. In late 2003, Eurodicautom announced its integration into a larger terminology database in partnership with other institutions of the European Union. The new database, called IATE (InterActive Terminology for Europe), would be available in more than 20 languages, because of the enlargement of the European Union planned in 2004. IATE was launched on the intranet of some European institutions in spring 2004 and on the internet for free in March 2007. *** Eurodicautom was a multilingual terminology database of economic, scientific, technical and legal terms and expressions, with language pairs for the eleven official languages of the European Union, and Latin. Eurodicautom was initially developed to assist in-house translators. A free online version was available on the web in 1997 for European Union officials and for language professionals throughout the world. Eurodicautom covered "a broad spectrum of human knowledge", mainly relating to economy, science, technology and legislation in the European Union (EU), to answer the needs of the 15 member countries in 11 official languages (Danish, Dutch, English, Finnish, French, German, Greek, Italian, Portuguese, Spanish, Swedish), plus Latin. The project of a larger terminology database was studied as early as 1999 to merge the existing databases for a better inter- institutional cooperation between the European organizations. The project partners were the European Commission, the European Parliament, the Council of the European Union, the Court of Justice, the European Court of Auditors, the European Economic and Social Committee, the Committee of the Regions, the European Investment Bank, the European Central Bank, and the Translation Centre for the Bodies of the European Union. Eurodicautom had 12,000 visits a day in late 2003, when it closed to prepare for a larger terminology database that would include the databases of other official European institutions. The new database would be available in many more languages, more than 20 languages instead of 12, because of the Enlargement of the European Union planned in 2004 to include new countries from Central and Eastern Europe. The European Union went from 15 country members to 25 country members in May 2004, and 27 country members in January 2007. IATE (InterActive Terminology for Europe) was launched in March 2007 as an eagerly free service on the web, after been launched in summer 2004 on the intranet of the participating European institutions, with 1.4 million entries in the 23 official languages of the European Union (Bulgarian, Czech, Danish, Dutch, English, Estonian, Finnish, French, German, Greek, Hungarian, Irish, Italian, Latvian, Lithuanian, Maltese, Polish, Portuguese, Romanian, Slovak, Slovene, Spanish, Swedish), plus Latin. The website has been maintained by the Translation Center of the European Union institutions in Luxembourg. According to the IATE brochure, also available in the 23 official languages, IATE offered 8,4 million words in 2010, including 540,000 abbreviations and 130.000 expressions. 1997 > BABEL FISH, A FREE TRANSLATION SOFTWARE [Summary] In December 1997, the search engine AltaVista launched the first free machine translation software called Babel Fish or AltaVista Translation, which could translate webpages or short texts from English into French, German, Italian, Portuguese or Spanish, and vice versa. The software was developed by Systran (an acronym for "System Translation"), a company specializing in automated language solutions. Babel Fish was a "hit" among the 12 million internet users of the time, who included more and more non- English-speaking users, and greatly contributed to a plurilingual web. Other tools were developed then by Alis Technologies, Globalink, Lernout & Hauspie and Softissimo, with free and/or paid versions available on the web. *** In December 1997, the search engine AltaVista launched Babel Fish as the first free machine translation software from English to five other languages. At the time, the interface of Yahoo! was available in seven languages (English, French, German, Japanese, Korean, Norwegian, Swedish), to take into account a growing number of non-English- speaking users. When a search didn't give any result in Yahoo!, it was automatically shunted to AltaVista, and vice versa. Babel Fish, also called AltaVista Translation, could translate webpages from English into French, German, Italian, Portuguese or Spanish, and vice versa, the original page and the translation being face-to-face on the screen. Translating any short text was also possible with a "copy and paste". The result was far from perfect but helpful, as well as instantaneous and free unlike a high-quality professional translation. Non-English-speaking users were thrilled. Babel Fish greatly contributed to a plurilingual web. Backed up by plurilingual dictionaries with 12.5 million entries, Babel Fish was developed by Systran (an acronym for "System Translation"), a company specializing in automated language solutions. As explained on Systran's website: "Machine translation software translates one natural language into another natural language. MT takes into account the grammatical structure of each language and uses rules to transfer the grammatical structure of the source language (text to be translated) into the target language (translated text). MT cannot replace a human translator, nor is it intended to." Machine translation was defined as such on the website of the European Association for Machine Translation (EAMT): "Machine translation (MT) is the application of computers to the task of translating texts from one natural language to another. One of the very earliest pursuits in computer science, MT has proved to be an elusive goal, but today a number of systems are available which produce output which, if not perfect, is of sufficient quality to be useful for certain specific applications, usually in the domain of technical documentation. In addition, translation software packages which are designed primarily to assist the human translator in the production of translations are enjoying increasing popularity within professional translation organizations." Other translation software was developed then by Alis Technologies, Globalink, Lernout & Hauspie and Softissimo, with paid and/or free versions available on the web. As for Babel Fish, it moved to Yahoo!'s website in May 2008. 1997 > THE TOOLS OF THE TRANSLATION COMPANY LOGOS [Summary] In December 1997, Logos, a global translation company based in Modena, Italy, decided to put on the web for free the professional tools used by its translators, for the internet community to be able to use them as well. These tools were the Logos Dictionary, a multilingual dictionary with 7.5 billion words (in fall 1998); the Logos Wordtheque, a multilingual library with 328 billion words extracted from translated novels, technical manuals, and other texts; the Logos Linguistic Resources, a database of 553 glossaries; and the Logos Universal Conjugator, a database for verbs in 17 languages. In 2007, the Logos Library (formerly Wordtheque) included 710 billion words, Linguistic Resources (no change of name) included 1,215 glossaries, and the Universal Conjugator (formerly Conjugation of Verbs) included verbs in 36 languages. *** In December 1997, Logos, a global translation company, decided to put on the web all the professional tools used by its translators, for the internet community to freely use them as well. Logos was founded by Rodrigo Vergara in 1979, with headquarters in Modena, Italy. In 1997, Logos had 300 in-house translators and 2,500 free-lance translators worldwide, who processed around 200 texts per day. The linguistic tools available online were the Logos Dictionary, a multilingual dictionary with 7.5 billion words (in fall 1998); the Logos Wordtheque, a multilingual library with 328 billion words extracted from translated novels, technical manuals, and other texts, that could be searched by language, word, author or title; the Logos Linguistic Resources, a database of 500 glossaries; and the Logos Universal Conjugator, a database for verbs in 17 languages. When interviewed by Annie Kahn in an article of the French daily Le Monde dated 7 December 1997, Rodrigo Vergara, head of Logos, explained: "We wanted all our translators to have access to the same translation tools. So we made them available on the internet, and while we were at it we decided to make the site open to the public. This made us extremely popular, and also gave us a lot of exposure. This move has in fact attracted many customers, and also allowed us to widen our network of translators, thanks to contacts made in the wake of the initiative." In the same article, called "Les mots pour le dire" (The words to tell it), Annie Kahn wrote: "The Logos site is much more than a mere dictionary or a collection of links to other online dictionaries. The cornerstone is the document search program, which processes a corpus of literary texts available free of charge on the web. If you search for the definition or the translation of a word ('didactique', for example), you get not only the answer sought, but also a quote from one of the literary works containing the word (in our case, an essay by Voltaire). All it takes is a click on the mouse to access the whole text or even to order the book, including in foreign translations, thanks to a partnership agreement with the famous online bookstore Amazon.com. However, if no text containing the required word is found, the program acts as a search engine, sending the user to other web sources containing this word. In the case of certain words, you can even hear the pronunciation. If there is no translation currently available, the system calls on the public to contribute. Everyone can make suggestions, after which Logos translators check the suggested translations they receive." Ten years later, in 2007, the Logos Library (formerly Wordtheque) included 710 billion words, Linguistic Resources (no change of name) included 1,215 glossaries, and the Universal Conjugator (formerly Conjugation of Verbs) included verbs in 36 languages. 1997 > SPECIALIZED TERMINOLOGY DATABASES [Summary] Some international organizations have run terminology databases in their own field of expertise for their translation services. In 1997, some databases were freely available on the web, to be used by language professionals throughout the world and by the internet community at large, for example ILOTERM, maintained by the International Labor Organization (ILO), TERMITE (ITU Telecommunication Terminology Database), maintained by the International Telecommunication Union (ITU), and WHOTERM (WHO Terminology Information System), maintained by the World Health Organization (WHO). *** In 1997, some specialized terminology databases maintained by international organizations in their own field of expertise were freely available on the web, to be used by language professionals throughout the world and by the internet community at large. Here are three examples with ILOTERM, maintained by the International Labor Organization (ILO), TERMITE (ITU Telecommunication Terminology Database), maintained by the International Telecommunication Union (ITU), and WHOTERM (WHO Terminology Information System), maintained by the World Health Organization (WHO). ILOTERM is a quadrilingual (English, French, German, Spanish) terminology database maintained by the Terminology and Reference Unit of the Official Documentation Branch (OFFDOC) at the International Labor Office (ILO) in Geneva, Switzerland. As explained on its website, the primary purpose of ILOTERM is to provide solutions, reflecting current usage, to terminology issues in the social and labor fields. Terms are available in English with their French, Spanish and German equivalents. The database also includes the ILO structure and programs, official names for international institutions, national bodies and employers' and workers' organizations, and names of international meetings and symposiums. TERMITE, which stands for "Telecommunication Terminology Database", is a quadrilingual (English, French, Spanish, Russian) terminology database maintained by the Terminology, References and Computer Aids to Translation Section of the Conference Department at the International Telecommunication Union (ITU) in Geneva, Switzerland. This database has been built on the content of all ITU printed glossaries since 1980, and regularly updated with recent entries. WHOTERM, which stands for "WHO Terminology Information System", is a trilingual (English, French, Spanish) database maintained by the World Health Organization (WHO) in Geneva, Switzerland. It has included: (a) the WHO General Dictionary Index in English, with the French and Spanish equivalents; (b) three glossaries in English: Health for All, Programme Development and Management, and Health Promotion; (c) the WHO TermWatch, an awareness service from the Technical Terminology, reflecting the current WHO usage, but not necessarily terms officially approved by WHO, with links to health-related terminology. 1998 > THE NEED FOR A "LINGUISTIC DEMOCRACY" [Summary] Brian King, director of the WorldWide Language Institute (WWLI), brought up the concept of "linguistic democracy" in September 1998: "Whereas 'mother-tongue education' was deemed a human right for every child in the world by a UNESCO report in the early '50s, 'mother-tongue surfing' may very well be the Information Age equivalent. If the internet is to truly become the Global Network that it is promoted as being, then all users, regardless of language background, should have access to it. To keep the internet as the preserve of those who, by historical accident, practical necessity, or political privilege, happen to know English, is unfair to those who don't." *** Brian King, director of the WorldWide Language Institute (WWLI), brought up the concept of "linguistic democracy" in September 1998: "Whereas 'mother-tongue education' was deemed a human right for every child in the world by a UNESCO report in the early '50s, 'mother-tongue surfing' may very well be the Information Age equivalent. If the internet is to truly become the Global Network that it is promoted as being, then all users, regardless of language background, should have access to it. To keep the internet as the preserve of those who, by historical accident, practical necessity, or political privilege, happen to know English, is unfair to those who don't." For Brian King, one factor contributing to the development of a multilingual internet is the "competition for a chunk of the 'global market' by major industry players", with "the export of information technology around the world. Popularization has now occurred on a global scale and English is no longer necessarily the lingua franca of the user. Perhaps there is no true lingua franca, but only the individual languages of the users. One thing is certain -- it is no longer necessary to understand English to use a computer, nor it is necessary to have a degree in computer science. A pull from non-English-speaking computer users and a push from technology companies competing for global markets has made localization a fast growing area in software and hardware development." Another factor is the development of electronic commerce. "Although a multilingual web may be desirable on moral and ethical grounds, such high ideals are not enough to make it other than a reality on a small-scale. As well as the appropriate technology being available so that the non-English speaker can go, there is the impact of 'electronic commerce' as a major force that may make multilingualism the most natural path for cyberspace. Sellers of products and services in the virtual global marketplace into which the internet is developing must be prepared to deal with a virtual world that is just as multilingual as the physical world. If they want to be successful, they had better make sure they are speaking the languages of their customers!" Founder of Euro-Marketing Associates and its virtual branch Global Reach, Bill Dunlap championed the assets of e-commerce in Europe among his fellow compatriots in the U.S., promoting the internationalization and localization of their websites. He wrote in December 1998: "There are so few people in the U.S. interested in communicating in many languages -- most Americans are still under the delusion that the rest of the world speaks English. However, in Europe, the countries are small enough so that an international perspective has been necessary for centuries." Peter Raggett, deputy-head (and then head) of the Central Library of OECD (Organization for Economic Cooperation and Development), wrote in August 1999: "I think it is incumbent on European organizations and businesses to try and offer websites in three or four languages if resources permit. In this age of globalization and electronic commerce, businesses are finding that they are doing business across many countries. Allowing French, German, Japanese speakers to easily read one's website as well as English speakers will give a business a competitive edge in the domain of electronic trading." As the internet quickly spread worldwide, companies needed to offer bilingual, trilingual, even plurilingual websites to reach as large an audience as possible, while adapting their content to a given audience, either a country or a linguistic community. Thus the need to internationalize and localize websites, which became a major trend in the late 1990s and early 2000s, with English- language companies and organizations setting up plurilingual websites, in English and other languages, and non-English-language companies and organizations setting up websites in their own language(s) and English. 1999 > BILINGUAL DICTIONARIES IN WORDREFERENCE.COM [Summary] Michael Kellogg created WordReference.com in 1999. He wrote much later on his website: "I started this site in 1999 in an effort to provide free online bilingual dictionaries and tools to the world. The site has grown gradually ever since to become one of the most- used online dictionaries, and the top online dictionary for its language pairs of English-Spanish, English-French, English-Italian, Spanish-French, and Spanish-Portuguese. It is consistently ranked in the top 500 most-visited websites in the world. I am proud of my history of innovation with dictionaries on the internet. Many of the features such as being able to click any word in a dictionary entry were first implemented by me." WordReference was also provided high-quality language forums, and lighter versions of some dictionaries for mobile devices. *** Michael Kellogg created WordReference.com in 1999 to offer free online bilingual translation dictionaries. Much later, Michael wrote on his website: "I started this site in 1999 in an effort to provide free online bilingual dictionaries and tools to the world. The site has grown gradually ever since to become one of the most-used online dictionaries, and the top online dictionary for its language pairs of English-Spanish, English-French, English-Italian, Spanish-French, and Spanish- Portuguese. It is consistently ranked in the top 500 most-visited websites in the world. I am proud of my history of innovation with dictionaries on the internet. Many of the features such as being able to click any word in a dictionary entry were first implemented by me." How was the idea behind his project? "The internet has done an incredible job of bringing the world together in the last few years. Of course, one of the greatest barriers has been language. Much of the content is in English and many, many users are reading English-language webpages as a second language. I know from my own experiences with Spanish-language websites that many readers probably understand much of what they are reading, but not every single word", thus the need for a website offering free online bilingual translation dictionaries. In 2010, WordReference has also offered a monolingual dictionary in English as well as dictionaries from English to other languages (Arabic, Chinese, Czech, Greek, Japanese, Korean, Polish, Portuguese, Romanian, Turkish), and vice versa. For the Spanish language, there was a monolingual dictionary, a dictionary of synonyms, a Spanish-French dictionary and a Spanish-Portuguese dictionary. Conjugation tables were available for French, Italian and Spanish. Monolingual dictionaries were available for German and Russian. WordReference Mini was a miniature version of the site to be embedded into other sites, for example sites teaching languages online. A mobile device version was available for dictionaries from English to French, Italian and Spanish, and vice versa, with other language pairs to come. As stated by Michael Kellogg: "Today [in 2011], I have three main goals with this website. First, continue to create free online bilingual dictionaries for English to many other languages. I strive to offer translations for "all" English words, terms, idioms, sayings, etc. Second, provide the world's best language forums; and third, continue to innovate to produce the best website and tools for the world." 1999 > THE INTERNET, A MANDATORY TOOL FOR TRANSLATORS [Summary] The internet became a mandatory tool for translators as "a vital and endless source of information", as stated by Marcel Grangier, the head of the French Section of Central Linguistic Services, which means he was in charge of organizing translation matters into French for the linguistic services of the Swiss government. He explained in January 1999: "To work without the internet is simply impossible now. Apart from all the tools used (email, the electronic press, services for translators), the internet is for us a vital and endless source of information in what I'd call the 'non-structured sector' of the web. For example, when the answer to a translation problem can't be found on websites presenting information in an organized way, in most cases search engines allow us to find the missing link somewhere on the network." His services also offered an online directory called "Dictionnaires Électroniques" (Electronic Dictionaries) with links to most quality dictionaries available for free on the web. *** The internet became a mandatory tool for translators as "a vital and endless source of information", as stated by Marcel Grangier, the head of the French Section of Central Linguistic Services. Marcel Grangier was in charge of organizing translation matters into French for the linguistic services of the Swiss government. He explained in January 1999: "To work without the internet is simply impossible now. Apart from all the tools used (email, the electronic press, services for translators), the internet is for us a vital and endless source of information in what I'd call the 'non-structured sector' of the web. For example, when the answer to a translation problem can't be found on websites presenting information in an organized way, in most cases search engines allow us to find the missing link somewhere on the network. Our website was first conceived as an intranet service for translators in Switzerland, who often deal with the same kind of material as the Federal government's translators. Some parts of it are useful to any translators, wherever they are. The section "Dictionnaires Électroniques" [Electronic Dictionaries] is only one section of the website. Other sections deal with administration, law, the French language, and general information. The site also hosts the pages of the Conference of Translation Services of European States (COTSOES)." "Dictionnaires Électroniques" is a extensive directory of free dictionaries available online, with five main sections: abbreviations and acronyms, monolingual dictionaries, bilingual dictionaries, multilingual dictionaries, and geographical information. The index could also be searched by keywords. It was later transferred on the new website of COTSOES. According to Marcel Grangier, "we can see multilingualism on the internet as a happy and irreversible inevitability. So we have to laugh at the doomsayers who only complain about the supremacy of English. Such supremacy is not wrong in itself, because it is mainly based on statistics (more PCs per inhabitant, more people speaking English, etc.). The answer is not to 'fight' English, much less whine about it, but to build more sites in other languages. As a translation service, we also recommend that websites be multilingual. ({~HORIZONTAL ELLIPSIS~}) The increasing number of languages on the internet is inevitable and can only boost multicultural exchanges. For this to happen in the best possible circumstances, we still need to develop tools to improve compatibility. Fully coping with accents and other characters is only one example of what can be done." Maria Victoria Marinetti was a translator from French to Spanish living near Geneva, Switzerland, with a doctorate in engineering from Mexico. She wrote in August 1999: "I have access to a large number of global information, which is very interesting for me. I can also regularly send or receive files back and forth. The internet allows be to receive or send general and technical translations from French into Spanish, and vice versa, and to correct texts in Spanish. In the technical or chemical fields, I offer a technical assistance, as well as information about exporting high-tech equipment to Mexico or to other Latin American countries." As for multilingualism, "it is very important to be able to communicate in various languages. I would even say this is mandatory, because the information given on the internet is meant for the whole world, so why wouldn't we get this information in our language or in the language we wish? Worldwide information, but no broad choice for languages, this would be quite a contradiction, wouldn't it?" In 2000, the internet was multilingual, with half of its users having a mother tongue other than English, but the language barrier was far from gone. If any language was now available on the web, many users were monolingual, and even plurilingual users couldn't read all languages. Bridges were needed between language communities to improve the flow of information in other languages, including by offering better translation software and by offering tools for all languages, and not only the dominant ones. 1999 > THE NEED FOR BILINGUAL INFORMATION ONLINE [Summary] With the web spreading worldwide, bilingual information online became mandatory, as stated by Henk Slettenhaar, a professor in communication technologies at Webster University, Geneva, Switzerland, and a trilingual European. Henk spent his childhood in Holland, has taught his courses in English and has lived in neighboring France. He wrote in August 1999: "There are two main categories of websites in my opinion. The first one is the global outreach for business and information. Here the language is definitely English first, with local versions where appropriate. The second one is local information of all kinds in the most remote places. If the information is meant for people of an ethnic and/or language group, it should be in that language first, with perhaps a summary in English. We have seen lately how important these local websites are -- in Kosovo and Turkey, to mention just the most recent ones. People were able to get information about their relatives through these sites." *** With the web spreading worldwide, bilingual information online became mandatory, as stated by Henk Slettenhaar, a professor in communication technologies at Webster University, Geneva, Switzerland, and a trilingual European. Henk spent his childhood in Holland, has taught his courses in English and has lived in neighboring France. He wrote in December 1998: "I see multilingualism as a very important issue. Local communities that are on the web should principally use the local language for their information. If they want to present it to the world community as well, it should be in English too. I see a real need for bilingual websites. I am delighted there are so many offerings in the original language now. I much prefer to read the original with difficulty than getting a bad translation." Henk added in August 1999: "There are two main categories of websites in my opinion. The first one is the global outreach for business and information. Here the language is definitely English first, with local versions where appropriate. The second one is local information of all kinds in the most remote places. If the information is meant for people of an ethnic and/or language group, it should be in that language first, with perhaps a summary in English. We have seen lately how important these local websites are -- in Kosovo and Turkey, to mention just the most recent ones. People were able to get information about their relatives through these sites." Geoffrey Kingscott, managing director of Praetorius, a language consultancy in applied languages, wrote in September 1998: "Because the salient characteristics of the web are the multiplicity of site generators and the cheapness of message generation, as the web matures it will in fact promote multilingualism. The fact that the web originated in the USA means that it is still predominantly in English but this is only a temporary phenomenon. If I may explain this further, when we relied on the print and audiovisual (film, television, radio, video, cassettes) media, we had to depend on the information or entertainment we wanted to receive being brought to us by agents (publishers, television and radio stations, cassette and video producers) who have to subsist in a commercial world or -- as in the case of public service broadcasting -- under severe budgetary restraints. That means that the size of the customer-base is all- important, and determines the degree to which languages other than the ubiquitous English can be accommodated. These constraints disappear with the web. To give only a minor example from our own experience, we publish the print version of Language Today [a magazine for linguists] only in English, the common denominator of our readers. When we use an article which was originally in a language other than English, or report an interview which was conducted in a language other than English, we translate it into English and publish only the English version. This is because the number of pages we can print is constrained, governed by our customer-base (advertisers and subscribers). But for our web edition we also give the original version." Steven Krauwer, coordinator of ELSNET (European Network of Excellence in Human Language Technologies), explained in September 1998: "As a European citizen I think that multilingualism on the web is absolutely essential, as in the long run I don't think that it is a healthy situation when only those who have a reasonable command of English can fully exploit the benefits of the web. As a researcher (specialized in machine translation) I see multilingualism as a major challenge: how can we ensure that all information on the web is accessible to everybody, irrespective of language differences." What practical solutions would he suggest? He answered in August 1999: "At the author end: better education of web authors to use combinations of modalities to make communication more effective across language barriers (and not just for cosmetic reasons). At the server end: more translation facilities à la AltaVista (quality not impressive, but always better than nothing). At the browser end: more integrated translation facilities (especially for the smaller languages), and more quick integrated dictionary lookup facilities." Bruno Didier, webmaster of the Pasteur Institute's library, wrote in August 1999: "The internet doesn't belong to any one nation or language. It is a vehicle for culture, and the first vector of culture is language. The more languages there are on the net, the more cultures will be represented there. I don't think we should give in to the kneejerk temptation to translate webpages into a largely universal language. Cultural exchanges will only be real if we are prepared to meet with the other culture in a genuine way. And this effort involves understanding the other culture's language. This is very idealistic of course. In practice, when I am monitoring, I curse Norwegian or Brazilian websites where there isn't any English." Alain Bron, a consultant in information systems and a writer, explained in January 1999: "Different languages will still be used for a long time to come and this is healthy for the right to be different. The risk is of course an invasion of one language to the detriment of others, and with it the risk of cultural standardization. I think online services will gradually emerge to get around this problem. First, translators will be able to translate and comment on texts by request, but mainly sites with a large audience will provide different language versions, just as the audiovisual industry does now." In spring 2000, non-English-speaking users reached 50%. 78% of webpages were still in English in September 2000. 2000 > ONLINE ENCYCLOPEDIAS AND DICTIONARIES [Summary] The first reference encyclopedias and dictionaries available online stemmed from print versions. Britannica.com was available in December 1999 as the web version of the 32-volume Encyclopaedia Britannica, first for free and then for a fee. The French-language WebEncyclo from Editions Atlas was available at the same time, for free, as well as the Encyclopaedia Universalis, for a fee. The first major online dictionaries also stemmed from print versions, for example the free Merriam-Webster Online launched in 1996, that included the Webster Dictionary, the Webster Thesaurus, and other tools. The French-language "Dictionnaire Universel Francophone en Ligne " from Hachette was available for free in 1997. The online version of the 20-volume Oxford English Dictionary (OED) was available in March 2000 for a fee. Designed directly for the web, the Grand Dictionnaire Terminologique (GDT) was launched in September 2000 in Quebec as the largest free French-English terminology dictionary, and quickly praised by linguists worldwide. *** The first reference encyclopedias and dictionaries available online stemmed from print versions. # Encyclopedias Britannica.com was launched in December 1999 as the digital equivalent of the 32 volumes of the 15th edition of the Encyclopaedia Britannica. The website was available for free, as a complement to the print and CD-ROM versions for sale, with a selection of articles from 70 magazines, a guide to the best websites, a selection of books, etc., all searchable through a single search engine. In September 2000, the site was among the top 100 websites in the world. In July 2001, the website, not free anymore, could be searched for a monthly or annual fee. In 2009, Britannica.com opened its website to external contributors, with registration required to write and edit articles. Launched by Editions Atlas in December 1999 and stemming from a print encyclopedia, Webencyclo was the first main French-language online encyclopedia available for free. It was searchable by keyword, topic and media (i.e. maps, links, photos, illustrations). A call for papers invited specialists in a given topic to become external contributors and submit articles in a section called "Webencyclo Contributif". Later on, a free registration was required to use the online encyclopedia. Launched at the same time, the website of the print French- language Encyclopedia Universalis included 28,000 articles by 4,000 contributors, available for an annual subscription fee, with a number of articles available for free. # Dictionaries Merriam-Webster, a well-known publisher of dictionaries, launched in 1996 the website "Merriam-Webster Online: The Language Center" to give free access to online resources stemming from several print reference works: Webster Dictionary, Webster Thesaurus, Webster's Third (a lexical landmark), Guide to International Business Communications, Vocabulary Builder (with interactive vocabulary quizzes), and the Barnhart Dictionary Companion (hot new words). The website's goal was also to help track down definitions, spellings, pronunciations, synonyms, vocabulary exercises, and other key facts about words and language. The "Dictionnaire Universel Francophone en Ligne" (Universal French-Language Online Dictionary) was the web version of the "Dictionnaire Universel Francophone", published by Hachette in partnership with AUPELF-UREF (which later became AUF: Agence Universitaire de la Francophonie - University Agency of Francophony). The dictionary included not only standard French but also the French-language words and expressions used worldwide. French was spoken by 500 million people in 50 countries. As a side remark, English and French are the only official and/or cultural languages widely spread on five continents. The online version (for a subscription fee) of the 20-volume Oxford English Dictionary (OED) was launched in March 2000 by Oxford University Press (OUP), followed by a quarterly update with around 1,000 new or revised entries. Two years later, Oxford University Press launched Oxford Reference Online (ORO), a comprehensive encyclopedia designed directly for the web and also available for a subscription fee. Its 60,000 webpages and one million entries could represent the equivalent of 100 print encyclopedias. # The GDT from Quebec With 3 million terms related to industry, science and commerce, the GDT (Grand Dictionnaire Terminologique - Main Terminological Dictionary) was the largest French-English online terminology dictionary. The GDT was designed directly for the web by OQLF (Office Québécois de la Langue Française - Quebecois Office of the French Language) and launched in September 2000 as a free service. The GDT was a technological challenge, and the result of a partnership between OQLF, author of the dictionary, and Semantix, a company specialized in linguistic software. The GDT had 1.3 million individual visits during the first month, with peaks of 60,000 visits per day, which certainly contributed to better translations. The database was then maintained by Convera Canada, with 3.5 million visits per month in February 2003. A revamped version of the GDT went online in March 2003, with the database maintained by OQLF itself, and the addition of Latin as a third language. 2000 > THE WEB PORTAL YOURDICTIONARY.COM [Summary] Robert Beard, a language teacher at Bucknell University, in Lewisburg, Pennsylvania (USA), co-founded yourDictionary.com in February 2000 as a follow-up of his first website, A Web of Online Dictionaries (included in the new one), launched in 1995 as a directory of online dictionaries (with 800 links in fall 1998) and other linguistic resources such as thesauri, vocabularies, glossaries, grammars and language textbooks. yourDictionary.com included 1,800 dictionaries in 250 languages in September 2003, and 2,500 dictionaries in 300 languages in April 2007. As a portal for all languages without any exception, the site also offered a section for endangered languages, called the Endangered Language Repository. *** Five years before co-founding yourDictionary.com in February 2000, as the portal for all languages without any exception, Robert Beard created the website A Web of Online Dictionaries (WOD) in 1995. Robert Beard was a language teacher at Bucknell University, in Lewisburg, Pennsylvania (USA). In September 1998, his website provided an index of 800 online dictionaries in 150 languages, as well as sections for multilingual dictionaries, specialized English dictionaries, thesauri and other vocabulary aids, language identifiers and guessers, an index of dictionary indices, the "Web of Online Grammars", and the "Web of Linguistic Fun", i.e. linguistics for non-specialists. Robert Beard wrote in September 1998: "There was an initial fear that the web posed a threat to multilingualism on the web, since HTML and other programming languages are based on English and since there are simply more websites in English than any other language. However, my websites indicate that multilingualism is very much alive and the web may, in fact, serve as a vehicle for preserving many endangered languages. I now have links to dictionaries in 150 languages and grammars of 65 languages. Moreover, the new attention paid by browser developers to the different languages of the world will encourage even more websites in different languages." Fifteen months later, Robert Beard included his website into a larger project, yourDictionary.com, that he co-founded in early 2000. He wrote in January 2000: "The new website is an index of 1,200+ dictionaries in more than 200 languages. Besides the WOD, the new website includes a word-of-the-day-feature, word games, a language chat room, the old 'Web of Online Grammars' (now expanded to include additional language resources), the 'Web of Linguistic Fun', multilingual dictionaries; specialized English dictionaries; thesauri and other vocabulary aids; language identifiers and guessers, and other features; dictionary indices. yourDictionary.com will hopefully be the premiere language portal and the largest language resource site on the web. It is now actively acquiring dictionaries and grammars of all languages with a particular focus on endangered languages. It is overseen by a blue ribbon panel of linguistic experts from all over the world. (...) Indeed, yourDictionary.com has lots of new ideas. We plan to work with the Endangered Language Fund in the U.S. and Britain to raise money for the Foundation's work and publish the results on our site. We will have language chat rooms and bulletin boards. There will be language games designed to entertain and teach fundamentals of linguistics. The Linguistic Fun page will become an online journal for short, interesting, yes, even entertaining, pieces on language that are based on sound linguistics by experts from all over the world." As the portal for all languages without any exception, yourDictionary.com offered a section for endangered languages called the Endangered Language Repository. As explained by Robert Beard: "Languages that are endangered are primarily languages without writing systems at all (only 1/3 of the world's 6,000+ languages have writing systems). I still do not see the web contributing to the loss of language identity and still suspect it may, in the long run, contribute to strengthening it. More and more Native Americans, for example, are contacting linguists, asking them to write grammars of their language and help them put up dictionaries. For these people, the web is an affordable boon for cultural expression." How about the future of the web? "The web will be an encyclopedia of the world by the world for the world. There will be no information or knowledge that anyone needs that will not be available. The major hindrance to international and interpersonal understanding, personal and institutional enhancement, will be removed. It would take a wilder imagination than mine to predict the effect of this development on the nature of humankind." 2000 > PROJECT GUTENBERG AND LANGUAGES [Summary] Project Gutenberg is a visionary project launched by Michael Hart in July 1971 to create free electronic versions of literary works and disseminate them worldwide. In 2010, Project Gutenberg offered more than 33,000 high-quality ebooks being downloaded by the tens of thousands every day, and websites in the United States, Australia, Europe and Canada, with 40 mirror sites worldwide. Project Gutenberg mainly offers ebooks in English, but multilingualism has been one of its priorities since the late 1990s. French is the second language of the project. There were ebooks in 60 languages in December 2010, thanks to the patient work of Distributed Proofreaders, a website created in 2000 to share the proofreading of ebooks between hundreds of volunteers in many countries. *** Project Gutenberg is a visionary project launched in July 1971 by Michael Hart to create free electronic versions of literary works and disseminate them worldwide. In the 15th century, Gutenberg allowed anyone to have print books for a small cost. In the 21th century, Project Gutenberg would allow anyone to have a digital library at no cost. Michael worked from Illinois, typing in books from public domain, for example the Bible and the complete works of Shakespeare, first alone, then with the help of a few volunteers. His project got a major boost with the invention of the web in 1990. 95% of internet users were native English speakers in the mid-1990s, so most books were in English. Project Gutenberg was also inspiring other digital libraries in Europe. Projekt Runeberg was launched in Sweden in 1994 to digitize Nordic (Scandinavian) literature from public domain. Projekt Gutenberg-DE was launched in Germany in 1994 to digitize German literature from public domain. French was the second language of Project Gutenberg, and still is now. The first ebooks released in French were six works by Stendhal and two works by Jules Verne, all released in early 1997. Three novels by Jules Verne were already available in English in 1994. Since then, Jules Verne has always stayed on the top list of the most downloaded authors. In October 1997, Michael Hart wrote about producing more works in other languages than English in the Project Gutenberg newsletter. In early 1998, on top of ten French ebooks, there were a few ebooks in German, Italian, Spanish and Latin. Released in May 1999, eBook #2000 was "Don Quijote" (1605), by Cervantes, in Spanish, its original language. In July 1999, Michael wrote in an email interview: "I am publishing in one new language per month right now, and will continue as long as possible." The project got a new boost with the launching of Distributed Proofreaders, a website created in October 2000 by Charles Franks to share the proofreading of ebooks between hundreds of volunteers living in many countries. Released in April 2002, eBook #5000 was "The Notebooks of Leonardo da Vinci" (written in the early 16th century), as an English translation from Italian, its original language. Since its release, it has regularly stayed in the top 100 downloaded ebooks. There were works in 25 languages in early 2004, in 42 languages in July 2005, including Sanskrit and the Mayan languages, and in 59 languages in October 2010. The ten main languages were English (with 28,441 ebooks on 7 October 2010), French (1,659 ebooks), German (709 ebooks), Finnish (536 ebooks), Dutch (496 ebooks), Portuguese (473 ebooks), Chinese (405 ebooks), Spanish (295 ebooks), Italian (250 ebooks), and Greek (101 ebooks). The next languages were Latin, Esperanto, Swedish and Tagalog. When machine translation will be judged 99% satisfactory, we may be able to read literary classics in a choice of many languages. The machine translated ebooks won't compete with the work of literary translators and their labor of love during days and months if not years, but they will allow readers to get the gist of some literary works that have never been translated so far, or only translated in a few languages for commercial reasons. The output of translation software could then be proofread by human translators, in a similar way the output of OCR software is proofread by the volunteers of Distributed Proofreaders. So, may be, we will see the creation of Distributed Translators one day, as a partner or sister project of Distributed Proofreaders and Project Gutenberg. 2001 > WIKIPEDIA, A COLLABORATIVE ENCYCLOPEDIA [Summary] Wikipedia was launched in January 2001 by Jimmy Wales and Larry Sanger (Larry resigned later on) as a global free collaborative online encyclopedia, financed by donations, with no advertising. Its website is a wiki, which means that anyone can write, edit, correct and improve information throughout the encyclopedia, with people contributing under a pseudonym. The articles stay the property of their authors, and can be freely used according to Creative Commons or GFDL (GNU Free Documentation License). Wikipedia quickly became the largest reference website. It was in the top ten websites in December 2006, and in the top five websites in 2008. In May 2007, Wikipedia had 7 million articles in 192 languages, including 1.8 million articles in English, 589,000 articles in German, 500,000 articles in French, 260,000 articles in Portuguese, and 236,000 articles in Spanish. Wikipedia celebrated its tenth anniversary in January 2011 with 17 million articles in 270 languages et 400 million individual visits per month for all websites. *** Wikipedia was launched in January 2001 by Jimmy Wales and Larry Sanger (Larry resigned later on) as a global free collaborative online encyclopedia. Wikipedia was financed by donations, with no advertising. Its website is a wiki, which means that anyone can write, edit, correct and improve information throughout the encyclopedia, with people contributing under a pseudonym. The articles stay the property of their authors, and can be freely used according to Creative Commons or GFDL (GNU Free Documentation License). Wikipedia is hosted by the Wikimedia Foundation, founded in June 2003, which has run a number of other projects, beginning with Wiktionary (launched in December 2002) and Wikibooks (launched in June 2003), followed by Wikiquote, Wikisource (texts from public domain), Wikimedia Commons (multimedia), Wikispecies (animals and plants), Wikinews and Wikiversity (textbooks). Wikipedia quickly became the largest reference website, with thousands of people contributing worldwide. In December 2004, Wikipedia had 1.3 million articles by 13,000 contributors in 100 languages. In December 2006, Wikipedia was among the top ten sites on the web, with 6 million articles. In May 2007, Wikipedia had 7 million articles in 192 languages, including 1.8 million articles in English, 589,000 articles in German, 500,000 articles in French, 260,000 articles in Portuguese, and 236,000 articles in Spanish. In 2008, Wikipedia was in the top five websites. In September 2010, Wikipedia had 14 million articles in 272 languages, including 3.4 million articles in English, 1.1 million articles in German and 1 million articles in French. Wikipedia celebrated its tenth anniversary in January 2011 with 17 million articles in 270 languages et 400 million individual visits per month for all websites. Wikipedia also inspired many other projects over the years, for example Citizendium, launched in 2007 as a pilot project to build a new encyclopedia. Citizendium, an acronym for "The Citizen's Compendium", was launched in March 2007 at the initiative of Larry Sanger, who co- founded Wikipedia with Jimmy Wales in January 2001, but resigned later on over policy and content quality issues, as well as the use of anonymous pseudonyms. Citizendium is a wiki project open to public collaboration, but combining "public participation with gentle expert guidance". The project is experts-led, not experts-only. Contributors use their own names, and they are guided by expert editors. As explained by Larry in his essay "Toward a New Compendium of Knowledge", posted in September 2006 and updated in March 2007: "Editors will be able to make content decisions in their areas of specialization, but otherwise working shoulder-to-shoulder with ordinary authors." There are also constables who make sure the rules are respected. There were 1,100 high-quality articles, 820 authors, and 180 editors in March 2007, 11,800 articles in August 2009, and 15,000 articles in September 2010. Citizendium wants to act as a prototype for upcoming large scale knowledge-building projects that would deliver reliable reference, scholarly and educational content. 2001 > UNL, A DIGITAL METALANGUAGE PROJECT [Summary] The UNDL Foundation (UNDL: Universal Networking Digital Language) was founded in January 2001 to develop and promote the UNL (Universal Networking Language) project. The UNL project was launched in 1996 as a major digital metalanguage project by the Institute of Advanced Studies (IAS) of the United Nations University (UNU) in Tokyo, Japan. As explained in 1998 on the bilingual English-Japanese website: "UNL is a language that -- with its companion 'enconverter' and 'deconverter' software -- enables communication among peoples of differing native languages. It will reside, as a plug-in for popular web browsers, on the internet, and will be compatible with standard network servers." At the time, 120 researchers worldwide were working on a multilingual project in 16 languages (Arabic, Brazilian, Chinese, English, French, German, Hindi, Indonesian, Italian, Japanese, Latvian, Mongolian, Russian, Spanish, Swahili, Thai). *** The UNDL Foundation (UNDL: Universal Networking Digital Language) was founded in January 2001 to develop and promote the UNL (Universal Networking Language) project. The UNL project was launched in 1996 as a major digital metalanguage project by the Institute of Advanced Studies (IAS) of the United Nations University (UNU) in Tokyo, Japan. As explained in 1998 on the bilingual English-Japanese website: "UNL is a language that -- with its companion 'enconverter' and 'deconverter' software -- enables communication among peoples of differing native languages. It will reside, as a plug-in for popular web browsers, on the internet, and will be compatible with standard network servers. The technology will be shared among the member states of the United Nations. Any person with access to the internet will be able to 'enconvert' text from any native language of a member state into UNL. Just as easily, any UNL text can be 'deconverted' from UNL into native languages. United Nations University's UNL Center will work with its partners to create and promote the UNL software, which will be compatible with popular network servers and computing platforms." At the time, 120 researchers worldwide were working on a multilingual project in 16 languages (Arabic, Brazilian, Chinese, English, French, German, Hindi, Indonesian, Italian, Japanese, Latvian, Mongolian, Russian, Spanish, Swahiki, Thai). After things worked with 16 languages, other UN languages would be included in 2000. UNL was meant to become the HTML of linguistic content. Possible applications would be multilingual email, multilingual information, active dictionaries for reading foreign languages online, and machine translation for navigating the web and monitoring websites. The project was also important from a political and cultural point of view, as the first project building up tools for all languages on the internet, i.e. main languages as well as minority languages. The UNDL Foundation (UNDL: Universal Networking Digital Language) was founded in January 2001 to develop and promote the UNL project, and became a partner of the United Nations. The definition of UNL has evolved over the years. According to the UNDL Foundation's website in 2010: "UNL is a computer language that enables computers to process information and knowledge. It is designed to replicate the functions of natural languages. Using UNL, people can describe all information and knowledge conveyed by natural languages for computers. As a result, computers can intercommunicate through UNL and process information and knowledge using UNL, thus providing people with a Linguistic Infrastructure (LI) in computers and the internet for distributing, receiving and understanding multilingual information. Such multilingual information can be accessed by natural languages through the UNL System. UNL, as a language for expressing information and knowledge described in natural languages, has all the components corresponding to that of a natural language." 2001 > A MARKET FOR LANGUAGE TRANSLATION SOFTWARE [Summary] The development of electronic commerce boosted language translation software, products and services targeting the general public, language professionals, and companies localizing their websites. The software, products and services were developed for example by Alis Technologies, Globalink, Lernout & Hauspie, Softissimo and IBM. In March 2001, IBM embarked on a growing translation market with a high-end professional product, the WebSphere Translation Server. The software could instantly translate webpages, emails and chats from/into several languages (Chinese, English, French, German, Italian, Japanese, Korean, Spanish). It could process 500 words per second and add terminology to the software. Computer-assisted translation (CAT) software were developed for professional translators, based on "translation memory" with terminology processing in real time, for example Wordfast, created in 1999 by Yves Champollion. Worldfast could be used on any platform (Windows, Mac, Linux), and was compatible with the software of other key players like IBM and SDL Trados. *** The development of electronic commerce boosted language translation software, products and services targeting the general public, language professionals, and companies localizing their websites. The software, products and services were developed for example by Alis Technologies, Globalink, Lernout & Hauspie, Softissimo and IBM. In March 2001, IBM embarked on a growing translation market with a high-end professional product, the WebSphere Translation Server. The software could instantly translate webpages, emails and chats from/into several languages (Chinese, English, French, German, Italian, Japanese, Korean, Spanish). It could process 500 words per second and add terminology to the software. Machine translation can be defined as the automated process of translating a text from one language to another language. MT analyzes the text in the source language and automatically generates the corresponding text in the target language. With the lack of human intervention during the translation process, machine translation differs from computer-assisted translation (CAT), based on interaction between the translator and the computer. Computer-assisted translation (CAT) software were developed for professional translators, based on "translation memory" with terminology processing in real time, for example Wordfast, created in 1999 by Yves Champollion. Worldfast was compatible with the software of other key players like IBM and SDL Trados. Available for any platform (Windows, Mac, Linux), Wordfast had 14,000 customers worldwide in 2010, including the United Nations, Coca- Cola and Sony. According to Tim McKenna, a writer and philosopher interviewed in October 2000: "When software gets good enough for people to chat or talk on the web in real time in different languages, then we will see a whole new world appear before us. Scientists, political activists, businesses and many more groups will be able to communicate immediately without having to go through mediators or translators." A further step could be "transcultural, transnational transparency", as stated in September 1998 by Randy Hobler, a consultant in internet marketing of translation software and services: "We are rapidly reaching the point where highly accurate machine translation of text and speech will be so common as to be embedded in computer platforms, and even in chips in various ways. At that point, and as the growth of the web slows, the accuracy of language translation hits 98% plus, and the saturation of language pairs has covered the vast majority of the market, language transparency (any-language-to-any-language communication) will be too limiting a vision for those selling this technology. The next development will be 'transcultural, transnational transparency', in which other aspects of human communication, commerce and transactions beyond language alone will come into play. For example, gesture has meaning, facial movement has meaning and this varies among societies. ({~HORIZONTAL ELLIPSIS~}) There are thousands of ways in which cultures and countries differ, and most of these are computerizable to change as one goes from one culture to the other. They include laws, customs, business practices, ethics, currency conversions, clothing size differences, metric versus English system differences, etc. Enterprising companies will be capturing and programming these differences and selling products and services to help the peoples of the world communicate better. Once this kind of thing is widespread, it will truly contribute to international understanding." 2004 > THE WEB 2.0, COMMUNITY AND SHARING [Summary] The term "web 2.0" was invented in 2004 by Tim O'Reilly, founder of O'Reilly Media, a publisher of computer books, as a title for a series of conferences he was organizing. The web 2.0 was based on community and sharing, with a wealth of websites whose content was supplied by users, such as blogs, wikis, social networks and collaborative encyclopedias. Wikipedia, Facebook and Twitter, of course, but also tens of thousands of others. The web 2.0 may begin to fulfill the dream of Tim Berners-Lee, who invented the web in 1990, and wrote in an essay dated April 1998: "The dream behind the web is of a common information space in which we communicate by sharing information. Its universality is essential: the fact that a hypertext link can point to anything, be it personal, local or global, be it draft or highly polished. ("The World Wide Web: A very short personal history", available on his webpage on the W3C website) *** The term "web 2.0" was invented in 2004 by Tim O'Reilly, founder of O'Reilly Media, a publisher of computer books, as a title for a series of conferences he was organizing. The web 2.0 was based on community and sharing, with a wealth of websites whose content was supplied by users, such as blogs, wikis, social networks and collaborative encyclopedias. Wikipedia, Facebook and Twitter, of course, but also tens of thousands of others. The web 2.0 may begin to fulfill the dream of Tim Berners-Lee, who invented the web in 1990, and wrote in an essay dated April 1998: "The dream behind the web is of a common information space in which we communicate by sharing information. Its universality is essential: the fact that a hypertext link can point to anything, be it personal, local or global, be it draft or highly polished." ("The World Wide Web: A very short personal history", available on his webpage on the W3C website) The first blog was launched in 1997. A blog is an online diary kept by a person or a group, usually in reverse chronological order, and can be updated every minute or once a month. There were 14 million blogs worldwide in July 2005, with 80,000 new blogs per day. According to Technorati, the first blog search engine, there were 65 million blogs in December 2006, with 175,000 new blogs per day. Some blogs are devoted to photos (photoblogs), music (audioblogs or podcasts), and videos (vlogs or videoblogs). The wiki concept became quite popular in 2000. Deriving from the Hawaiian term "wiki" ("fast"), a wiki is a website allowing multiple users to collaborate online on the same project. Users can contribute to drafting content, editing it, improving it, and updating it. The software can be simple or more elaborate. A simple program handles text and hyperlinks. With a more elaborate program, one can embed images, charts, tables, etc. The most famous wiki is Wikipedia. Facebook was founded in February 2004 by Mark Zuckerberg and his fellow students as a social network. Originally created for the students of Harvard University, it was then available to students from any university in the U.S. before being open to anyone worldwide in September 2006, to connect with relatives, friends and strangers. Facebook was the second most visited website after Google, with 500 million users in June 2010, while sparking debates on privacy issues. Founded in 2006 by Jack Dorsey and Biz Stone, Twitter is a social networking and micro-blogging tool to send free short messages of 140 characters maximum, called tweets, via the internet, IM or SMS. Sometimes described as the SMS of the internet, Twitter gained worldwide popularity, with 106 million users in April 2010, and 300,000 new users per day. As for tweets, there were 5,000 per day in 2007, 300,000 in 2008, 2.5 million in 2009, 50 million in January 2010, and 55 million in April 2010, with the archiving of public tweets by the Library of Congress as a reflection of the trends of our time. We now try to fulfill the second part of Tim Berners-Lee's dream, according to his essay dated April 1998: "There was a second part of the dream, too, dependent on the web being so generally used that it became a realistic mirror (or in fact the primary embodiment) of the ways in which we work and play and socialize. That was that once the state of our interactions was online, we could then use computers to help us analyze it, make sense of what we are doing, where we individually fit in, and how we can better work together." 2007 > THE ISO 639-3 STANDARD TO IDENTIFY LANGUAGES [Summary] The first standard to identify languages was ISO 639-1, adopted by the International Organization for Standardization (ISO) in 1988 as a set of two-letter identifiers. The ISO 639-2 standard followed in 1998 as a set of three-letter codes identifying 400 languages. Published by SIL International, the Ethnologue, an encyclopedic catalog of living languages, had also developed its own three-letter codes in its database since 1971, with their inclusion in the publication itself since 1984 (10th edition). ISO 639-2 quickly became outdated. In 2002, at the invitation of the International Organization for Standardization, SIL International prepared a new standard that reconciled the complete set of identifiers used in the Ethnologue with the identifiers already in use in ISO 639-2, as well as identifiers developed by the Linguist List to handle ancient and constructed languages. Published in 2007, the ISO 639-3 standard provided three-letter codes for identifying 7,589 languages. SIL International was named the registration authority for the inventory of language identifiers. *** Published in 2007, the ISO 639-3 standard provided three-letter codes for identifying 7,589 languages. The first standard to identify languages was ISO 639-1, adopted by the International Organization for Standardization (ISO) in 1988 as a set of two-letter language identifiers. The ISO 639-2 standard followed in 1998 as a set of three-letter codes identifying 400 languages. The standard was a convergence of ISO 639-1 and the ANSI Z39.53 standard (ANSI: American National Standards Institute). The ANSI standard corresponded to the MARC (Machine Readable Cataloging) language codes, a set of three- letter identifiers developed by the library community and adopted as an American National Standard in 1987. Published by SIL International, the Ethnologue, an encyclopedic catalog of living languages, had also developed its own three- letter codes in its database since 1971, with the inclusion in the encyclopedia itself from the 10th edition (1984) onwards. ISO 639-2 quickly became insufficient because of the small number of languages it could handle. In 2002, at the invitation of the International Organization for Standardization, SIL International prepared a new standard that reconciled the complete set of codes used in the Ethnologue with the codes already in use in ISO 639-2, as well as codes developed by the Linguist List -- a main distribution list for linguists -- to handle ancient and constructed languages. Approved in 2006 and published in 2007, the ISO 639-3 standard provided three-letter codes for identifying 7,589 languages, with a list of languages as complete as possible, living and extinct, ancient and reconstructed, major and minor, and written and unwritten. SIL International was named the registration authority for the inventory of language identifiers, and administers the annual cycle for changes and updates. 2007 > GOOGLE TRANSLATE [Summary] Launched by Google in October 2007, Google Translate is a free online language translation service that instantly translates a section of text, document or webpage into another language. Users paste texts in the web interface or supply an hyperlink. The automatic translations are produced by statistical analysis rather than traditional rule-based analysis. Prior to this date, Google used a Systran based translator like Babel Fish in Yahoo! As an automatic translation tool, Google Translate can help the reader understand the general content of a foreign language text, but doesn't deliver accurate translations. In 2009, the text could be read by a speech program, with new languages added over the months. Released in June 2009, Google Translator Toolkit is a web service allowing (human) translators to edit the translations automatically generated by Google Translate. In January 2011, people could choose different translations for a word in Google Translate. *** Launched by Google in October 2007, Google Translate is a free online language translation service that instantly translates a section of text, document or webpage into another language. Users paste texts in the web interface or supply an hyperlink. The automatic translations are produced by statistical analysis rather than traditional rule-based analysis. As an automatic translation tool, Google Translate can help the reader understand the general content of a foreign language text, but doesn't deliver accurate translations. Prior to this date, Google used a Systran based translator like Babel Fish in Yahoo!, with several stages for the language options: First stage: English to French, German, and Spanish, and vice versa. Second stage: English to Portuguese and Dutch, and vice versa. Third stage: English to Italian, and vice versa. Fourth stage: English to simplified Chinese, Japanese and Korean, and vice versa. Fifth stage (April 2006): English to Arabic, and vice versa. Sixth stage (December 2006): English to Russian, and vice versa. Seventh stage (February 2007): English to traditional Chinese, and simplified Chinese to traditional Chinese, and vice versa. Here were the first language options for Google's translation system: First stage (October 2007): All language pairs previously available were available in any language combination. Second stage: English to Hindi, and vice versa. Third stage (May 2008): Bulgarian, Croatian, Czech, Danish, Finnish, Greek, Norwegian, Polish, Romanian, Swedish, with any combination. Fourth stage (September 2008): Catalan, Filipino, Hebrew, Indonesian, Latvian, Lithuanian, Serbian, Slovak, Slovene, Ukrainian, Vietnamese. Fifth stage (January 2009): Albanian, Estonian, Galician, Hungarian, Maltese, Thai, Turkish. Sixth stage (June 2009): Persian. Seventh stage (August 2009): Afrikaans, Belarussian, Icelandic, Irish, Macedonian, Malay, Swahili, Welsh, Yiddish. Eighth stage (January 2010): Haitian Creole. Ninth stage (May 2010): Armenian, Azeri, Basque, Georgian, Urdu. Tenth stage (October 2010): Latin. Etc. A speech program was launched in 2009 to read the translated text, with new languages added over the months. In January 2011, people could choose different translations for a word in Google Translate. Google Translator Toolkit is a web service allowing (human) translators to edit the translations automatically generated by Google Translate. Translators can also use shared translations, glossaries and translation memories. Starting in June 2009 with English as a source language and 47 target languages, Google Translator Toolkit supported 100,000 language pairs in May 2011, with 345 source languages into 345 target languages. 2009 > 6,909 LIVING LANGUAGES IN THE ETHNOLOGUE [Summary] 6,909 living languages were cataloged in the 16th edition (2009) of "The Ethnologue: Languages of the World", an encyclopedic reference work freely available on the web since 1996, with a print book for sale. As stated by Barbara Grimes, its editor from 1971 to 2000, the Ethnologue is "a catalog of the languages of the world, with information about where they are spoken, an estimate of the number of speakers, what language family they are in, alternate names, names of dialects, other socio-linguistic and demographic information, dates of published Bibles, a name index, a language family index, and language maps." A core team of researchers in Dallas, Texas, has been helped by thousands of linguists gathering and checking information worldwide. A new edition of the Ethnologue is published approximately every four years. *** 6,909 living languages were cataloged in the 16th edition (2009) of "The Ethnologue: Languages of the World", an encyclopedic reference work freely available on the web since 1996, with a print book for sale. As stated by Barbara Grimes, its editor from 1971 to 2000, the Ethnologue is "a catalog of the languages of the world, with information about where they are spoken, an estimate of the number of speakers, what language family they are in, alternate names, names of dialects, other socio-linguistic and demographic information, dates of published Bibles, a name index, a language family index, and language maps." A core team of researchers in Dallas, Texas, has been helped by thousands of linguists gathering and checking information worldwide. A new edition of the Ethnologue is published approximately every four years. The Ethnologue has been an active research project since 1950. It was founded by Richard Pittman as a catalog of minority languages, to share information on language development needs around the world with his colleagues at SIL International and other language researchers. Richard Pittman was the editor of the 1st to 7th editions (1951- 1969). Barbara Grimes was the editor of the 8th to 14th editions (1971- 2000). In 1971, information was expanded from primarily minority languages to encompass all known languages of the world. Between 1967 and 1973, Barbara completed an in-depth revision of the information on Africa, the Americas, the Pacific, and a few countries of Asia. During her years as editor, the number of identified languages grew from 4,493 to 6,809. The information recorded on each language expanded so that the published work more than tripled in size. In 2000, Raymond Gordon Jr. became the third editor of the Ethnologue and produced the 15th edition (2005). In 2005, Paul Lewis became the editor, responsible for general oversight and research policy, with Conrad Hurd as managing editor, responsible for operations and database management, and Raymond Gordon as senior research editor, leading a team of regional and language-family focused research editors. In the Introduction of the 15th edition (2009), the Ethnologue defines a language as such: "How one chooses to define a language depends on the purposes one has in identifying that language as distinct from another. Some base their definition on purely linguistic grounds. Others recognize that social, cultural, or political factors must also be taken into account. In addition, speakers themselves often have their own perspectives on what makes a particular language uniquely theirs. Those are frequently related to issues of heritage and identity much more than to the linguistic features of the language(s) in question." As explained in the introduction, one feature of the database since its inception in 1971 has been a system of three-letter language identifiers (for example "fra" for French), that were included in the publication itself from the 10th edition (1984) onwards. At the invitation of the International Organization for Standardization (ISO) in 2002, SIL International prepared a new standard that reconciled the complete set of codes used in the Ethnologue with the codes already in use in the ISO 639-2 standard (1998), that identified only 400 languages, as well as codes developed by Linguist List to handle ancient and constructed languages. Published in 2007, the ISO 639-3 standard provided three-letter codes for identifying nearly 7,500 languages. SIL International was named the registration authority for the inventory of language identifiers, and administers the annual cycle for changes and updates. 2010 > A UNESCO ATLAS FOR ENDANGERED LANGUAGES [Summary] In 2010, UNESCO (United Nations Educational, Scientific and Cultural Organization) launched a free Interactive Atlas of the World's Languages in Danger. The online edition is a complement of the print edition (3rd edition, 2010), edited by Christopher Moseley, and available in English, French and Spanish, with previous editions in 1996 and 2001. 2,473 languages were listed on 4 June 2011, with a search engine by country and area, language name, number of speakers from/to, vitality and ISO 639-3 code. The language names have been indicated in English, French and Spanish transcriptions. Alternate names (spelling variants, dialects or names in non-Roman scripts) are also provided. *** In 2010, UNESCO (United Nations Educational, Scientific and Cultural Organization) launched a free Interactive Atlas of the World's Languages in Danger. The online edition is a complement of the print edition (3rd edition, 2010), edited by Christopher Moseley, and available in English, French and Spanish, with previous editions in 1996 and 2001. 2,473 languages were listed on 4 June 2011, with a search engine by country and area, language name, number of speakers from/to, vitality and ISO 639-3 code. The language names have been indicated in English, French and Spanish transcriptions. Alternate names (spelling variants, dialects or names in non-Roman scripts) are also provided. # About language vitality UNESCO's Language Vitality and Endangerment framework has established six degrees of vitality/endangerment: safe, vulnerable, definitely endangered, severely endangered, critically endangered, extinct. "Safe" -- not included in the atlas -- means that the language is spoken by all generations and that intergenerational transmission is uninterrupted. "Vulnerable" means that most children speak the language, but it may be restricted to certain domains, for example at home. "Definitely endangered" means that children no longer learn the language as a mother tongue in the home. "Severely endangered" means that the language is spoken by grand- parents and older generations. While the parent generation may understand it, they don't speak it to children or among themselves. "Critically endangered" means that the youngest speakers are grandparents and older, and they speak the language partially and infrequently. "Extinct" means there are no speakers left. The atlas includes presumably extinct languages since the 1950s. # How to define an endangered language When exactly is a language considered as endangered? As explained by UNESCO on the interactive altas' website: "A language is endangered when its speakers cease to use it, use it in fewer and fewer domains, use fewer of its registers and speaking styles, and/or stop passing it on to the next generation. No single factor determines whether a language is endangered." UNESCO experts have identified nine factors that should be considered together: (1) intergenerational language transmission; (2) absolute number of speakers; (3) proportion of speakers within the total population; (4) shifts in domains of language use; (5) response to new domains and media; (6) availability of materials for language education and literacy; (7) governmental and institutional language attitudes and policies including official status and use; (8) community members' attitudes towards their own language; (9) amount and quality of documentation. What are the causes of language endangerment and disappearance? "A language disappears when its speakers disappear or when they shift to speaking another language -- most often, a larger language used by a more powerful group. Languages are threatened by external forces such as military, economic, religious, cultural or educational subjugation, or by internal forces such as a community's negative attitude towards its own language. Today, increased migration and rapid urbanization often bring along the loss of traditional ways of life and a strong pressure to speak a dominant language that is -- or is perceived to be -- necessary for full civic participation and economic advancement." Copyright © 2012 Marie Lebert *** END OF THE PROJECT GUTENBERG EBOOK THE WEB, A MULTILINGUAL ENCYCLOPEDIA *** Updated editions will replace the previous one—the old editions will be renamed. Creating the works from print editions not protected by U.S. copyright law means that no one owns a United States copyright in these works, so the Foundation (and you!) can copy and distribute it in the United States without permission and without paying copyright royalties. Special rules, set forth in the General Terms of Use part of this license, apply to copying and distributing Project Gutenberg™ electronic works to protect the PROJECT GUTENBERG™ concept and trademark. Project Gutenberg is a registered trademark, and may not be used if you charge for an eBook, except by following the terms of the trademark license, including paying royalties for use of the Project Gutenberg trademark. If you do not charge anything for copies of this eBook, complying with the trademark license is very easy. You may use this eBook for nearly any purpose such as creation of derivative works, reports, performances and research. Project Gutenberg eBooks may be modified and printed and given away—you may do practically ANYTHING in the United States with eBooks not protected by U.S. copyright law. Redistribution is subject to the trademark license, especially commercial redistribution. START: FULL LICENSE THE FULL PROJECT GUTENBERG LICENSE PLEASE READ THIS BEFORE YOU DISTRIBUTE OR USE THIS WORK To protect the Project Gutenberg™ mission of promoting the free distribution of electronic works, by using or distributing this work (or any other work associated in any way with the phrase “Project Gutenberg”), you agree to comply with all the terms of the Full Project Gutenberg™ License available with this file or online at www.gutenberg.org/license. Section 1. General Terms of Use and Redistributing Project Gutenberg™ electronic works 1.A. By reading or using any part of this Project Gutenberg™ electronic work, you indicate that you have read, understand, agree to and accept all the terms of this license and intellectual property (trademark/copyright) agreement. If you do not agree to abide by all the terms of this agreement, you must cease using and return or destroy all copies of Project Gutenberg™ electronic works in your possession. If you paid a fee for obtaining a copy of or access to a Project Gutenberg™ electronic work and you do not agree to be bound by the terms of this agreement, you may obtain a refund from the person or entity to whom you paid the fee as set forth in paragraph 1.E.8. 1.B. “Project Gutenberg” is a registered trademark. It may only be used on or associated in any way with an electronic work by people who agree to be bound by the terms of this agreement. There are a few things that you can do with most Project Gutenberg™ electronic works even without complying with the full terms of this agreement. See paragraph 1.C below. There are a lot of things you can do with Project Gutenberg™ electronic works if you follow the terms of this agreement and help preserve free future access to Project Gutenberg™ electronic works. See paragraph 1.E below. 1.C. The Project Gutenberg Literary Archive Foundation (“the Foundation” or PGLAF), owns a compilation copyright in the collection of Project Gutenberg™ electronic works. Nearly all the individual works in the collection are in the public domain in the United States. If an individual work is unprotected by copyright law in the United States and you are located in the United States, we do not claim a right to prevent you from copying, distributing, performing, displaying or creating derivative works based on the work as long as all references to Project Gutenberg are removed. Of course, we hope that you will support the Project Gutenberg™ mission of promoting free access to electronic works by freely sharing Project Gutenberg™ works in compliance with the terms of this agreement for keeping the Project Gutenberg™ name associated with the work. You can easily comply with the terms of this agreement by keeping this work in the same format with its attached full Project Gutenberg™ License when you share it without charge with others. This particular work is one of the few individual works protected by copyright law in the United States and most of the remainder of the world, included in the Project Gutenberg collection with the permission of the copyright holder. Information on the copyright owner for this particular work and the terms of use imposed by the copyright holder on this work are set forth at the beginning of this work. 1.D. The copyright laws of the place where you are located also govern what you can do with this work. Copyright laws in most countries are in a constant state of change. If you are outside the United States, check the laws of your country in addition to the terms of this agreement before downloading, copying, displaying, performing, distributing or creating derivative works based on this work or any other Project Gutenberg™ work. The Foundation makes no representations concerning the copyright status of any work in any country other than the United States. 1.E. Unless you have removed all references to Project Gutenberg: 1.E.1. The following sentence, with active links to, or other immediate access to, the full Project Gutenberg™ License must appear prominently whenever any copy of a Project Gutenberg™ work (any work on which the phrase “Project Gutenberg” appears, or with which the phrase “Project Gutenberg” is associated) is accessed, displayed, performed, viewed, copied or distributed: This eBook is for the use of anyone anywhere in the United States and most other parts of the world at no cost and with almost no restrictions whatsoever. You may copy it, give it away or re-use it under the terms of the Project Gutenberg License included with this eBook or online at www.gutenberg.org. If you are not located in the United States, you will have to check the laws of the country where you are located before using this eBook. 1.E.2. If an individual Project Gutenberg™ electronic work is derived from texts not protected by U.S. copyright law (does not contain a notice indicating that it is posted with permission of the copyright holder), the work can be copied and distributed to anyone in the United States without paying any fees or charges. If you are redistributing or providing access to a work with the phrase “Project Gutenberg” associated with or appearing on the work, you must comply either with the requirements of paragraphs 1.E.1 through 1.E.7 or obtain permission for the use of the work and the Project Gutenberg™ trademark as set forth in paragraphs 1.E.8 or 1.E.9. 1.E.3. If an individual Project Gutenberg™ electronic work is posted with the permission of the copyright holder, your use and distribution must comply with both paragraphs 1.E.1 through 1.E.7 and any additional terms imposed by the copyright holder. Additional terms will be linked to the Project Gutenberg™ License for all works posted with the permission of the copyright holder found at the beginning of this work. 1.E.4. Do not unlink or detach or remove the full Project Gutenberg™ License terms from this work, or any files containing a part of this work or any other work associated with Project Gutenberg™. 1.E.5. Do not copy, display, perform, distribute or redistribute this electronic work, or any part of this electronic work, without prominently displaying the sentence set forth in paragraph 1.E.1 with active links or immediate access to the full terms of the Project Gutenberg™ License. 1.E.6. You may convert to and distribute this work in any binary, compressed, marked up, nonproprietary or proprietary form, including any word processing or hypertext form. However, if you provide access to or distribute copies of a Project Gutenberg™ work in a format other than “Plain Vanilla ASCII” or other format used in the official version posted on the official Project Gutenberg™ website (www.gutenberg.org), you must, at no additional cost, fee or expense to the user, provide a copy, a means of exporting a copy, or a means of obtaining a copy upon request, of the work in its original “Plain Vanilla ASCII” or other form. Any alternate format must include the full Project Gutenberg™ License as specified in paragraph 1.E.1. 1.E.7. Do not charge a fee for access to, viewing, displaying, performing, copying or distributing any Project Gutenberg™ works unless you comply with paragraph 1.E.8 or 1.E.9. 1.E.8. You may charge a reasonable fee for copies of or providing access to or distributing Project Gutenberg™ electronic works provided that: • You pay a royalty fee of 20% of the gross profits you derive from the use of Project Gutenberg™ works calculated using the method you already use to calculate your applicable taxes. The fee is owed to the owner of the Project Gutenberg™ trademark, but he has agreed to donate royalties under this paragraph to the Project Gutenberg Literary Archive Foundation. Royalty payments must be paid within 60 days following each date on which you prepare (or are legally required to prepare) your periodic tax returns. Royalty payments should be clearly marked as such and sent to the Project Gutenberg Literary Archive Foundation at the address specified in Section 4, “Information about donations to the Project Gutenberg Literary Archive Foundation.” • You provide a full refund of any money paid by a user who notifies you in writing (or by e-mail) within 30 days of receipt that s/he does not agree to the terms of the full Project Gutenberg™ License. You must require such a user to return or destroy all copies of the works possessed in a physical medium and discontinue all use of and all access to other copies of Project Gutenberg™ works. • You provide, in accordance with paragraph 1.F.3, a full refund of any money paid for a work or a replacement copy, if a defect in the electronic work is discovered and reported to you within 90 days of receipt of the work. • You comply with all other terms of this agreement for free distribution of Project Gutenberg™ works. 1.E.9. If you wish to charge a fee or distribute a Project Gutenberg™ electronic work or group of works on different terms than are set forth in this agreement, you must obtain permission in writing from the Project Gutenberg Literary Archive Foundation, the manager of the Project Gutenberg™ trademark. Contact the Foundation as set forth in Section 3 below. 1.F. 1.F.1. Project Gutenberg volunteers and employees expend considerable effort to identify, do copyright research on, transcribe and proofread works not protected by U.S. copyright law in creating the Project Gutenberg™ collection. Despite these efforts, Project Gutenberg™ electronic works, and the medium on which they may be stored, may contain “Defects,” such as, but not limited to, incomplete, inaccurate or corrupt data, transcription errors, a copyright or other intellectual property infringement, a defective or damaged disk or other medium, a computer virus, or computer codes that damage or cannot be read by your equipment. 1.F.2. LIMITED WARRANTY, DISCLAIMER OF DAMAGES - Except for the “Right of Replacement or Refund” described in paragraph 1.F.3, the Project Gutenberg Literary Archive Foundation, the owner of the Project Gutenberg™ trademark, and any other party distributing a Project Gutenberg™ electronic work under this agreement, disclaim all liability to you for damages, costs and expenses, including legal fees. YOU AGREE THAT YOU HAVE NO REMEDIES FOR NEGLIGENCE, STRICT LIABILITY, BREACH OF WARRANTY OR BREACH OF CONTRACT EXCEPT THOSE PROVIDED IN PARAGRAPH 1.F.3. YOU AGREE THAT THE FOUNDATION, THE TRADEMARK OWNER, AND ANY DISTRIBUTOR UNDER THIS AGREEMENT WILL NOT BE LIABLE TO YOU FOR ACTUAL, DIRECT, INDIRECT, CONSEQUENTIAL, PUNITIVE OR INCIDENTAL DAMAGES EVEN IF YOU GIVE NOTICE OF THE POSSIBILITY OF SUCH DAMAGE. 1.F.3. LIMITED RIGHT OF REPLACEMENT OR REFUND - If you discover a defect in this electronic work within 90 days of receiving it, you can receive a refund of the money (if any) you paid for it by sending a written explanation to the person you received the work from. If you received the work on a physical medium, you must return the medium with your written explanation. The person or entity that provided you with the defective work may elect to provide a replacement copy in lieu of a refund. If you received the work electronically, the person or entity providing it to you may choose to give you a second opportunity to receive the work electronically in lieu of a refund. If the second copy is also defective, you may demand a refund in writing without further opportunities to fix the problem. 1.F.4. Except for the limited right of replacement or refund set forth in paragraph 1.F.3, this work is provided to you ‘AS-IS’, WITH NO OTHER WARRANTIES OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PURPOSE. 1.F.5. Some states do not allow disclaimers of certain implied warranties or the exclusion or limitation of certain types of damages. If any disclaimer or limitation set forth in this agreement violates the law of the state applicable to this agreement, the agreement shall be interpreted to make the maximum disclaimer or limitation permitted by the applicable state law. The invalidity or unenforceability of any provision of this agreement shall not void the remaining provisions. 1.F.6. INDEMNITY - You agree to indemnify and hold the Foundation, the trademark owner, any agent or employee of the Foundation, anyone providing copies of Project Gutenberg™ electronic works in accordance with this agreement, and any volunteers associated with the production, promotion and distribution of Project Gutenberg™ electronic works, harmless from all liability, costs and expenses, including legal fees, that arise directly or indirectly from any of the following which you do or cause to occur: (a) distribution of this or any Project Gutenberg™ work, (b) alteration, modification, or additions or deletions to any Project Gutenberg™ work, and (c) any Defect you cause. Section 2. Information about the Mission of Project Gutenberg™ Project Gutenberg™ is synonymous with the free distribution of electronic works in formats readable by the widest variety of computers including obsolete, old, middle-aged and new computers. It exists because of the efforts of hundreds of volunteers and donations from people in all walks of life. Volunteers and financial support to provide volunteers with the assistance they need are critical to reaching Project Gutenberg™’s goals and ensuring that the Project Gutenberg™ collection will remain freely available for generations to come. In 2001, the Project Gutenberg Literary Archive Foundation was created to provide a secure and permanent future for Project Gutenberg™ and future generations. To learn more about the Project Gutenberg Literary Archive Foundation and how your efforts and donations can help, see Sections 3 and 4 and the Foundation information page at www.gutenberg.org. Section 3. Information about the Project Gutenberg Literary Archive Foundation The Project Gutenberg Literary Archive Foundation is a non-profit 501(c)(3) educational corporation organized under the laws of the state of Mississippi and granted tax exempt status by the Internal Revenue Service. The Foundation’s EIN or federal tax identification number is 64-6221541. Contributions to the Project Gutenberg Literary Archive Foundation are tax deductible to the full extent permitted by U.S. federal laws and your state’s laws. The Foundation’s business office is located at 809 North 1500 West, Salt Lake City, UT 84116, (801) 596-1887. Email contact links and up to date contact information can be found at the Foundation’s website and official page at www.gutenberg.org/contact Section 4. Information about Donations to the Project Gutenberg Literary Archive Foundation Project Gutenberg™ depends upon and cannot survive without widespread public support and donations to carry out its mission of increasing the number of public domain and licensed works that can be freely distributed in machine-readable form accessible by the widest array of equipment including outdated equipment. Many small donations ($1 to $5,000) are particularly important to maintaining tax exempt status with the IRS. The Foundation is committed to complying with the laws regulating charities and charitable donations in all 50 states of the United States. Compliance requirements are not uniform and it takes a considerable effort, much paperwork and many fees to meet and keep up with these requirements. We do not solicit donations in locations where we have not received written confirmation of compliance. To SEND DONATIONS or determine the status of compliance for any particular state visit www.gutenberg.org/donate. While we cannot and do not solicit contributions from states where we have not met the solicitation requirements, we know of no prohibition against accepting unsolicited donations from donors in such states who approach us with offers to donate. International donations are gratefully accepted, but we cannot make any statements concerning tax treatment of donations received from outside the United States. U.S. laws alone swamp our small staff. Please check the Project Gutenberg web pages for current donation methods and addresses. Donations are accepted in a number of other ways including checks, online payments and credit card donations. To donate, please visit: www.gutenberg.org/donate. Section 5. General Information About Project Gutenberg™ electronic works Professor Michael S. Hart was the originator of the Project Gutenberg™ concept of a library of electronic works that could be freely shared with anyone. For forty years, he produced and distributed Project Gutenberg™ eBooks with only a loose network of volunteer support. Project Gutenberg™ eBooks are often created from several printed editions, all of which are confirmed as not protected by copyright in the U.S. unless a copyright notice is included. Thus, we do not necessarily keep eBooks in compliance with any particular paper edition. Most people start at our website which has the main PG search facility: www.gutenberg.org. This website includes information about Project Gutenberg™, including how to make donations to the Project Gutenberg Literary Archive Foundation, how to help produce our new eBooks, and how to subscribe to our email newsletter to hear about new eBooks.